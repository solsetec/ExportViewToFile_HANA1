<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spire.XLS</name>
    </assembly>
    <members>
        <member name="M:Spire.License.LicenseProvider.UnbindDevelopmentOrTestingLicenses(System.Type,System.String@)">
            <summary>
            Unbinds development or testing licenses of the specified type.
            The approach to lifting development or testing licenses does not allow frequent invocation by the same machine code,
            mandating a two-hour wait period before it can be invoked again.
            </summary>
            <param name="type">The type of the license to unbind.</param>
            <param name="errorMsg">The error message in case of failure.</param>
            <returns>True if at least one development or test license was unbound, otherwise false.</returns>
        </member>
        <member name="T:Spire.License.Blacklist">
            <summary> 
            Authorization Blacklist
            </summary>
        </member>
        <member name="F:Spire.License.Blacklist.BlacklistData">
            <summary> 
            The serial number or the MD5 code of the key that is entered into the authorization blacklist. 
            </summary> 
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.ConvertToMarkdown(Spire.Xls.Core.Spreadsheet.XlsWorkbook,System.IO.StreamWriter)">
            <summary>
            Convert Word to Markdown and write as md file.
            </summary>
            <param name="workbook"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.GetMarkdownText(Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Converts word document DOM to Markdown DOM.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.IterateSheet(Spire.Xls.Core.Spreadsheet.XlsWorksheet)">
            <summary>
            Iterate body and convert into Markdown DOM
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.SetTableAlignment(Spire.Xls.Core.Spreadsheet.XlsWorksheet,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTableBlock,System.Int32)">
            <summary>
            Sets the table row alignment.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.IterateTablePictures(Spire.Xls.Core.Spreadsheet.XlsWorksheet,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownParagraphBlock)">
            <summary>
            Iterates through the Table Hyperlink.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.IterateTableHyperlink(Spire.Xls.Core.Spreadsheet.XlsWorksheet)">
            <summary>
            Iterates through the Table Hyperlink.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.IterateTableName(Spire.Xls.Core.Spreadsheet.XlsWorksheet,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownParagraphBlock)">
            <summary>
            Iterates through the Table Name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.IterateTableRow(Spire.Xls.Core.Spreadsheet.XlsWorksheet,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTableRow,Spire.Xls.Core.Converter.Spreadsheet.Row,System.Int32)">
            <summary>
            Iterates through the TableRow.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.GetContentInCell(Spire.Xls.Core.Converter.Spreadsheet.Cell,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTableCell)">
            <summary>
            Iterates through the TableCell.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.CheckFormat(Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTextRange,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTextRange)">
            <summary>
            Checks for text formatting of the previous MdTextrange and compares to the current text
            </summary>
            <param name="currentText">Represents the current textrange in the paragraph</param>
            <param name="previousText">Represents the previous textrange in the paragraph</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.ApplyCellStyle(Spire.Xls.Core.Converter.Spreadsheet.Cell,Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTextRange)">
            <summary>
            Applies Text format to text.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Markdown.ExcelToMarkdownConversion.InsertSpace(Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownTableCell)">
            <summary>
            Adds a space between outer cell content and the nested cell contents.
            </summary>
            <param name="mdCell">MarkdownTableRow cell</param>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownConstants.IndentedCodeBlock">
            <summary>
            Represents the syntax of indent code block in Markdown
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownConstants.TablePipeChar">
            Represents the syntax of table which start and end with this char in Markdown
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownConstants.CommentStartSyntax">
            Represents the start comment element in the markdown
        </member>
        <!-- Badly formed XML comment ignored for member "F:Spire.Xls.Core.Converter.Exporting.Markdown.MarkdownConstants.CommentEndSyntax" -->
        <member name="P:Spire.Xls.Core.Converter.Exporting.Markdown.MdImageNodeVisitedEventArgs.Uri">
            <remarks> 
            While importing Markdown, this property denotes the image URI in the input Markdown file. 
            </remarks> 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MardownParagraphType.Heading1">
            Heading 1
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MardownParagraphType.Heading3">
            Heading 3
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.Markdown.MardownParagraphType.Heading4">
            Heading 4
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChart.m_defaultColorVariations">
            <summary>
            Default color variation required on styles
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChart.WriteDLbl(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataLabels,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataLabels,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType,System.Int32,System.Boolean)">
            change by Daniel in 2019/05/15 将写DLbl的部分抽取出来
            B模型的serLabels会存储DefaultDataPoint的DataLabels
            isDefault 是否为默认的DataPoint
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.s_dictTickMarkToAttributeValue">
            <summary>
            Represents dictionary for TickMark to Attribute value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.m_defaultColorVariations">
            <summary>
            Default color variation required on styles
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.m_defaultChartStyleElements">
            <summary>
            Default Chart Style elements used in chartEx on serialization
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.#ctor(Spire.Xls.Core.Converter.Exporting.OOXML.Modal.DataExpChart)">
            <summary>
            Initialize the members of this class
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.Write(System.Xml.XmlTextWriter)">
            <summary>
            Serialize the chart
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chart">input chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeChartElement(System.Xml.XmlTextWriter)">
            <summary>
            Serialize the chart tag input element 
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chart">input chart</param>
            <param name="relations">input relations</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializePlotArea(System.Xml.XmlTextWriter)">
            <summary>
            Serializes plotarea tag and everything inside it.
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="chart">Chart to serialize.</param>
            <param name="relations">input relation collection</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeAxes(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType)">
            <summary>
            Serialize the required axes
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="chart">Chart to serialize.</param>
            <param name="chartType">chart type of the chart</param>
            <param name="relations">input relation collection</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeAxis(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis,System.Int32)">
            <summary>
            Serialzie the single axis
            </summary>
            <param name="writer">input XML writer</param>
            <param name="axis">input axis to be serialized</param>
            <param name="chart">input Chart to serialize.</param>
            <param name="relations">input relation collection</param>
            <param name="axisId">axis Id of the axis</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeAxisCommon(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis,System.Int32)">
            <summary>
            Serialzie the single axis common properties
            </summary>
            <param name="writer">input XML writer</param>
            <param name="axis">input axis to be serialized</param>
            <param name="chart">input Chart to serialize.</param>
            <param name="relations">input relation collection</param>
            <param name="axisId">axis Id of the axis</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeAxisShapeAndTextProperties(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis)">
            <summary>
            Serialize the axis shape and text properties
            </summary>
            <param name="writer">input XML writer</param>
            <param name="axis">input axis to be serialized</param>
            <param name="chart">input Chart to serialize.</param>
            <param name="relations">input relation collection</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDisplayUnit(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis,System.Int32)">
            <summary>
            Serialzie the axis display unit
            </summary>
            <param name="writer">input XML writer</param>
            <param name="axis">input axis to be serialized</param>
            <param name="chart">input Chart to serialize.</param>
            <param name="relations">input relation collection</param>
            <param name="axisId">axis Id of the axis</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeParetoSeries(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType)">
            <summary>
            Serialize the chart's every pareto line as series
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chart">input chart</param>
            <param name="chartType">input chartType</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeChartExSeries(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series,System.Int32,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType)">
            <summary>
            Serialize the input serie and everything inside it.
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input chart serie</param>
            <param name="serieDataIndex">input chart serie Index for data referring</param>
            <param name="chartType">chart type</param>
            <param name="chart">input chart</param>
            <param name="relations">relation collection of the chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeLayoutProperties(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Serialize the input chart serie layout properties
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input chart serie</param>     
            <param name="chart">input chart</param>
            <param name="relations">relation collection of the chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeSubTotalIndexes(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Serialize the subtotal data points of the series
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input serie to subtotal serialized</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeBinningProperties(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat)">
            <summary>
            Serialize the bin properties of the chart
            </summary>
            <param name="writer">input XML writer</param>
            <param name="dataFormat">input chart serie data format for binning properties</param>
            <param name="chart">input chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDataLabels(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Serialize the single chart serie data labels 
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input serie to data labels serialized</param>
            <param name="chart">input chart</param>
            <param name="relations">input chart relations</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDataLabelSettings(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataLabels)">
            <summary>
            Serializes the input data label settings
            </summary>
            <param name="writer">input XML writer</param>
            <param name="dataLabels">input data labels</param>
            <param name="parentChart">paret chart of the data labels</param>
            <param name="relations">chart relation collection</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeNumFormat(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataLabels)">
             <summary>
             Serializes number format.
             </summary>
             <param name="writer">XmlWriter to serialize into.</param>
            <param name="dataLabels">dataLabels of data points which have number format to serialize</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDataPointsSettings(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Serialize the data point properties of the chart serie
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input chart serie</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeSeriesName(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Serialize the chart serie name
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input chart serie</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeSerieAttributes(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType,System.Int32,System.Boolean)">
            <summary>
            Serialize the single chart serie attributes
            </summary>
            <param name="writer">input XML writer</param>
            <param name="serie">input chart serie</param>
            <param name="chartType">chart type of the chart</param>
            <param name="serieIndex">chart serie index</param>
            <param name="isPareto">boolean value indicates whether the pareto line option is serialized or not</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeLegend(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Legend)">
            <summary>
            Serialize the chart legend
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chartLegend">input chart legend</param>
            <param name="chart">input chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SeriliazeChartTextArea(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Title,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Serialize the chart text area properties for text elements
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chartTextArea">input chart text area</param>
            <param name="chart">input chart</param>
            <param name="relations">input relation collection</param>
            <param name="defaultFontSize">default font size for text area</param>
            <param name="parentElement">input XML elemet parent</param>
            <param name="isNotAuto">boolean value indicates whether the title is auto</param>
            <param name="isChartTitle">boolean value indicates whether element is chart title</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeTextElementAttributes(System.Xml.XmlTextWriter,System.UInt16,System.Boolean)">
            <summary>
            Serialize the chart text element properties for chart title and legend
            </summary>
            <param name="writer">input XML writer</param>
            <param name="position">input position of element</param>
            <param name="isLayout">boolean value indicates the layout of element</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeTextAreaText(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Title,System.Double)">
            <summary>
            Serialize the chart text area Tx and rich
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chartTextArea">input chart text area</param>
            <param name="chart">input chart</param>
            <param name="defaultFontSize">default font size for text area</param>
            <returns>boolean value indicates whether the title serialized as rich text or not</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeChartExData(System.Xml.XmlTextWriter)">
            <summary>
            Serialize the chartEx data element
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chart">input chart</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeIndividualChartSerieData(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series,System.Int32,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType)">
            <summary>
            Individial series data serialized with this.
            </summary>
            <param name="writer">input XML chart</param>
            <param name="serie">input chart serie</param>
            <param name="index">serie index</param>
            <param name="chartType">chart type</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDimensionData(System.Xml.XmlTextWriter,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartData,System.Boolean,System.String)">
            <summary>
            Serialize the dimension data for series 
            </summary>
            <param name="writer">input XML writer</param>
            <param name="range">input range</param>
            <param name="isInRow">boolean value indicates whether range is in row</param>
            <param name="formatCode">number format code</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDefaultChartColorStyles(System.Xml.XmlWriter)">
            <summary>
            Serialize the default style element loaded for chartEx
            </summary>
            <param name="writer">input XML writer</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.SerializeDefaultChartStyles(System.Xml.XmlWriter)">
            <summary>
            Serialize the default style element loaded for chartEx
            </summary>
            <param name="writer">input XML writer</param>
            <param name="chart">input chart object</param>
            <param name="applicationImpl">input application object</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.InitializeChartColorElements">
            <summary>
            Initialize the chart style color elements
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpChartEx.InitializeChartStyleElements">
            <summary>
            Initailze the colloection, needed for chartEx
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ExpOneDrawingShape.SerializeChartExFallBackShapeContent(System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Serialize the Fallback content required for ChartEx
            </summary>
            <param name="writer">input XML writer</param>
            <param name="isChartSheet">boolean value indicates whether the chart is sheet or not</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartEx(System.Xml.XmlTextReader)">
            <summary>
            Extracts chart from XmlReader.
            </summary>
            <param name="reader">XmlReader to serialize into.</param>
            <param name="chart">Chart to serialize.</param>
            <param name="relations">Chart item relations.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExData(System.Xml.XmlReader)">
            <summary>
            Parse the chart data from the reader
            </summary>
            <param name="reader">input XML reader</param>
            <returns>the chart data parsed</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseExternalDataAttributes(System.Xml.XmlReader)">
            <summary>
            Parse the external Data attributes and store it in chart
            </summary>
            <param name="reader">input XML reader</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.TryParseChartExDataCache(System.Xml.XmlReader)">
            <summary>
            Parse the every Data node of collection and returns the list
            </summary>
            <param name="reader">input XML reader</param>
            <param name="chart">input chart</param>
            <param name="relations">relation</param>
            <returns>the chart data parsed</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseDimensionData(System.Xml.XmlReader,Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache)">
            <summary>
            Parse the (string/numeric) dimension data 
            </summary>
            <param name="reader">input XML reader</param>
            <param name="cache">input cache</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExLevelElement(System.Xml.XmlReader,Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache,System.Boolean)">
            <summary>
            Parse the (string/numeric) data values 
            </summary>
            <param name="reader">input XML reader</param>
            <param name="cache">input cache</param>
            <param name="isCategoryValues">boolean value indicates whether the dimension is string or numeric</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExElement(System.Xml.XmlTextReader)">
            <summary>
            Parse the chart element data from the reader
            </summary>
            <param name="reader">input XML reader</param>
            <param name="chart">input chart</param>
            <param name="relations">input chart relations</param>
            <returns>Chart serie Index and dataId pair</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.GetChartLegendPosition(System.UInt16)">
            <summary>
            Convert the chartExLegend position and returns the chart legend position
            </summary>
            <param name="position">position short value</param>
            <returns>the chart legend position value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.TryParsePositioningValues(System.Xml.XmlReader,System.Nullable{System.Boolean}@,System.UInt16@)">
            <summary>
            Parse the chart title / legend attributes for chart Ex 
            </summary>
            <param name="reader">input XML reader</param>
            <param name="isOverlay">output isoverlay boolean value</param>
            <param name="position">output position value</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExPlotArea(System.Xml.XmlTextReader)">
            <summary>
            Parse the chart plot area from the reader
            </summary>
            <param name="reader">input XML reader</param>
            <param name="chart">input chart</param>
            <param name="relations">input chart relations</param>
            <param name="excel2007Parser">excel 2007 parser</param>
            <returns>Chart serie Index and dataId pair</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParsePlotAreaRegion(System.Xml.XmlTextReader,System.Int32@)">
             <summary>
             Parse the chart plot area region from the reader
             </summary>
             <param name="reader">input XML reader</param>
             <param name="chart">input chart</param>
             <param name="relations">input chart relations</param>
             <param name="excel2007Parser">excel 2007 parser</param>
            <param name="secondaryAxisId"> secondary axis Id</param>
            <returns>The collection of data Id and series index pair</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExSeries(System.Xml.XmlTextReader,System.Int32@)" -->
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseParetoLineFormat(System.Xml.XmlTextReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartFrame)">
            <summary>
            Parse the pareto line format 
            </summary>
            <param name="reader">input XML reader</param>
            <param name="paretoLineFormat">input Pareto Line format</param>
            <param name="fileDataHolder">input File Data holder</param>
            <param name="relations">input chart relations</param>
            <returns>Returns the axis id integer value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.TryParseSeriesFromAttributes(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartFrame@)">
            <summary>
            Parse the ChartEx series and set the chart type and format Index
            </summary>
            <param name="reader">input XML reader</param>
            <param name="chart">input chart</param>
            <param name="paretoLineFormat">output pareto line series</param>
            <returns>the output series</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExSeriesLayoutProperties(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <summary>
            Parse the chartEx series properties and set the series settings
            </summary>
            <param name="reader">input XML reader</param>
            <param name="series">input chartEx series</param>
            <param name="relations">input relation collections</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseSeriesBinningProperties(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat)">
            <summary>
            Parse the binning properties for histogram and pareto charts
            </summary>
            <param name="reader">input XML reader</param>
            <param name="dataFormat">input chart serie data format</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartSeriesVisibility(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat)">
            <summary>
            Parse the chartEx series visibility for series
            Box and whisker , waterfall chart
            </summary>
            <param name="reader">input XML reader</param>
            <param name="dataFormat">input Serie Data Format</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParsePlotSurface(System.Xml.XmlTextReader)">
            <summary>
            Parse the chart plot area surface from the reader
            </summary>
            <param name="reader">input XML reader</param>
            <param name="chart">input chart</param>
            <param name="relations">input chart relations</param>
            <param name="excel2007Parser">excel 2007 parser</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExAxes(System.Xml.XmlReader,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Parse the chart axes from the reader
            </summary>
            <param name="reader">input XML Reader</param>
            <param name="secondaryAxisId">input secondaryAxis ID</param>
            <param name="hashCodeList">hashCodeList to identify the </param>
            <param name="axisParser">Parser used to parse the Axis</param>
            <param name="chart">input chart</param>
            <param name="dataHolder">Input File Data Holder</param>
            <param name="excel2007parser">Excel 2007 parser</param>
            <param name="relations">input chart relations</param>      
            <returns>the hashcode for an axis, which will not be further modified</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.TryParseAxisFromReader(System.Xml.XmlReader,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Parse the Axis element and retruns the required axis
            </summary>
            <param name="axisReader">input axis reader</param>
            <param name="currentAxisId">current parsed axis id</param>
            <param name="secondaryAxisId">secondary axis id</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartDataLabelVisibility(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.DataLabels)">
            <summary>
            Parse the data label visibilty settings for chart series
            </summary>
            <param name="reader">input XML reader</param>
            <param name="dataLabels">Data labels visibilty to be set</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseChartExAxis(System.Xml.XmlTextReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis)">
            <summary>
            Select and Parse the chartEx axis from the reader
            </summary>
            <param name="reader">input XML reader</param>
            <param name="axis">input secondaryAxisId</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseDisplayUnits(System.Xml.XmlTextReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis)">
            <summary>
            Extracts display unit from XmlReader.
            </summary>
            <param name="reader">XmlReader to extract data from.</param>
            <param name="valueAxis">Axis to put extracted data into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseAxisCommonAttributes(System.Xml.XmlReader,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@)">
            <summary>
            Parse the Axis attributes return the axis values
            </summary>
            <param name="reader">input XML reader</param>
            <param name="axisIsHidden">output axis hidden value</param>
            <param name="axisId">output axis id value</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseAxisAttributes(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis,System.Boolean)">
            <summary>
            Parse the chart axis (category or value scaling element) attributes
            </summary>
            <param name="reader">input XML reader</param>
            <param name="axis">input chart Axis</param>
            <param name="isValueAxis">boolean value indicates whether the axis is value or category</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ImpChartEx.ParseTickMark(System.Xml.XmlReader)">
            <summary>
            Extracts tick mark.
            </summary>
            <param name="reader">XmlReader to extract data from.</param>
            <returns>Extracted value.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache">
            <summary>
            Provides the data cache information
            Used at parsing
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_categoryFormula">
            <summary>
            formula referred for category values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_seriesFormula">
            <summary>
             formula referred for series values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_seriesValues">
            <summary>
            Array of values used in series values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_categoryValues">
            <summary>
            Array of values used in categories
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_isRowWiseCategory">
            <summary>
            Boolean value indicates category values interpreted in row-wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_isRowWiseSeries">
            <summary>
            Boolean value indicates series values interpreted in row-wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_seriesFormatCode">
            <summary>
            format code used in series values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.m_categoryFormatCode">
            <summary>
            format code used in category values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.CategoryFormula">
            <summary>
            Gets/Sets formula referred for category values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.SeriesFormula">
            <summary>
            Gets / Sets formula referred for series values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.SeriesValues">
            <summary>
            Gets / SetsArray of values used in series values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.CategoryValues">
            <summary>
            Gets/Sets Array of values used in categories
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.IsRowWiseCategory">
            <summary>
            Gets / SetsBoolean value indicates category values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.IsRowWiseSeries">
            <summary>
            Gets / SetsBoolean value indicates series values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.SeriesFormatCode">
            <summary>
            Gets / Sets the format code for series values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.CategoriesFormatCode">
            <summary>
            Gets / Sets the format code for series categories
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExDataCache.CopyProperties(Spire.Xls.Core.Converter.Spreadsheet.Charts.Series,Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart)">
            <summary>
            Copy the current properties to chart serie
            </summary>
            <param name="serie">series in which properties to be copied</param>
            <param name="workbook">Parent workbook</param>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CNamespace">
            <summary>
            Main charts namespace.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SlicerNamespace">
            <summary>
            Namespace of the slicer
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CNamespace2007">
            <summary>
            Main charts namespace for Excel 2010
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CNamespace2016">
            <summary>
            Main charts namespace for Excel 2016
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CColorNamespace2013" -->
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CStyleNamespace2013">
            <summary>
            Chart style relation namespace for Excel 2013
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartStyleNamespace">
            <summary>
            Chart style and color style namespace for charts above version 2013
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Pivoturi">
            <summary>
            Uri for the pivot chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Pivoturi16">
            <summary>
            Uri for the pivot chart for Excel 2016.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartPrefix2010">
            <summary>
            prefix for the Excel 2010 chart tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartPrefix2016">
            <summary>
            prefix for the Excel 2016 chart tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CategoryAxisTag">
            <summary>
            This element specifies a category axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ValueAxisTag">
            <summary>
            This element specifies a value axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesAxisTag">
            <summary>
            This element specifies a series axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DateAxisTag">
            <summary>
            This element specifies a date axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ValueAttribute">
            <summary>
            Value attribute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DefaultValueAxisId">
            <summary>
            Some value axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DefaultCategoryAxisId">
            <summary>
            Some category axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DefaultSeriesAxisId">
            <summary>
            Some series axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DefaultSecondaryCategoryAxisId">
            <summary>
            Some secondary category axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DefaultSecondaryValueAxisId">
            <summary>
            Some secondary value axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ScalingTag">
            <summary>
            This element contains additional axis settings.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LogarithmicBaseTag">
            <summary>
            This element specifies the logarithmic base for a logarithmic axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MaximumTag">
            <summary>
            This element specifies the maximum value of the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinimumTag">
            <summary>
            This element specifies the minimum value of the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisOrientationTag">
            <summary>
            This element specifies the stretching and stacking of the picture on the
            data point, series, wall, or floor.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisIdTag">
            <summary>
            When specified as a child element of valAx, dateAx, catAx, or serAx,
            this element specifies the identifier for the axis. When specified as
            a child element of a chart, this element specifies the identifier of
            an axis that defines the coordinate space of the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MaxMinOrientation">
            <summary>
            Specifies that the values on the axis shall be reversed so they go from maximum to minimum.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinMaxOrientation">
            <summary>
            Specifies that the axis values shall be in the usual order, minimum to maximum.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisPositionTag">
            <summary>
            This element specifies the position of the axis on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisPosLeft">
            <summary>
            Specifies that the axis shall be displayed at the left of the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisPosRight">
            <summary>
            Specifies that the axis shall be displayed at the right of the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisPosTop">
            <summary>
            Specifies that the axis shall be displayed at the top of the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AxisPosBottom">
            <summary>
            Specifies that the axis shall be displayed at the bottom of the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MajorGridlinesTag">
            <summary>
            This element specifies major gridlines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinorGridlinesTag">
            <summary>
            This element specifies minor gridlines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumberFormatTag">
            <summary>
            This element specifies number formatting for the parent element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FormatCodeAttribute">
            <summary>
            This element specifies a string representing the format code to apply.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SourceLinkedAttribute">
            <summary>
            Indicates whether number format is applied to the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelPositionTag">
            <summary>
            This element specifies the position of the tick labels on the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelHigh">
            <summary>
            Specifies the axis labels shall be at the high end of the perpendicular axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelLow">
            <summary>
            Specifies the axis labels shall be at the low end of the perpendicular axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelNextTo">
            <summary>
            Specifies the axis labels shall be next to the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelNone">
            <summary>
            Specifies the axis labels are not drawn.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MajorTickMarkTag">
            <summary>
            This element specifies the major tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinorTickMarkTag">
            <summary>
            This element specifies the minor tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickMarkNone">
            <summary>
            Specifies there shall be no tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickMarkInside">
            <summary>
            Specifies the tick marks shall be inside the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickMarkOutside">
            <summary>
            Specifies the tick marks shall be outside the plot area.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickMarkCross">
            <summary>
            Specifies the tick marks shall cross the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossAxisTag">
            <summary>
            This element specifies the ID of axis that this axis crosses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossBetweenTag">
            <summary>
            This element specifies whether the value axis crosses the category axis between categories.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BetweenValue">
            <summary>
            Specifies the value axis shall cross the category axis between data markers.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CategoryMidpoint">
            <summary>
            Specifies the value axis shall cross the category axis at the midpoint of a category.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MajorUnitTag">
            <summary>
            This element specifies the distance between major ticks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinorUnitTag">
            <summary>
            This element specifies the distance between minor tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LabelOffsetTag">
            <summary>
            This element specifies the distance of labels from the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickLabelSkip">
            <summary>
            This element specifies how many tick labels to skip between label that is drawn.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TickMarkSkip">
            <summary>
            This element specifies how many tick marks shall be skipped before the next one shall be drawn.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NoMultiLvlLblTag">
            <summary>
            This element specifies whether multi level labels exists or not
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BaseTimeUnitTag">
            <summary>
            This element specifies the smallest time unit that is represented on the date axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MajorTimeUnit">
            <summary>
            This element specifies the time unit for major tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MinorTimeUnit">
            <summary>
            This element specifies the time unit for the minor tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartTag">
            <summary>
            This element specifies the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PlotAreaTag">
            <summary>
            This element specifies the plot area of the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarDirectionTag">
            <summary>
            This element specifies whether the series form a bar (horizontal) chart or a column (vertical) chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarDirectionBar">
            <summary>
            Specifies that the chart is a bar chart - the data markers are horizontal rectangles.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarDirectionColumn">
            <summary>
            Specifies that the chart is a column chart - the data markers are vertical rectangles.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarGroupingTag">
            <summary>
            This element specifies the type of grouping for a bar chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Clustered">
            <summary>
            Specifies that the chart series are drawn next to each other along the category axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PercentStacked">
            <summary>
            Specifies that the chart series are drawn next to each other along the
            value axis and scaled to total 100%.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Stacked">
            <summary>
            Specifies that the chart series are drawn next to each other on the value axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Standard">
            <summary>
            Specifies that the chart series are drawn next to each other on the depth axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.VaryColorsTag">
            <summary>
            This element specifies that each data marker in the series shall have a different color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesTag">
            <summary>
            This element specifies a series on a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.IndexTag">
            <summary>
            This element specifies the index of the containing element. This index
            shall determine which of the parent's children collection this element applies to.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesOrderTag">
            <summary>
            This element specifies the order of the series in the collection. It is 0 based.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesValuesTag">
            <summary>
            This element specifies the data values which shall be used to define
            the location of data markers on a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CategoryValuesTag">
            <summary>
            This element specifies the data used for the category axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumberReferenceTag">
            <summary>
            This element specifies a reference to numeric data with a cache of the last values used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StringReferenceTag">
            <summary>
            This element specifies a reference to string data with a cache of the last values used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MultiLevelStringReferenceTag">
            <summary>
            This element specifies a reference to data for the category axis (or for the x-values in a bubble or scatter chart)), 
            along with a cache of the last values used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumberCacheTag">
            <summary>
            This element specifies the last numeric data used for a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StringCacheTag">
            <summary>
            This element specifies the last string data used for a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MultiLevelStringCacheTag">
            <summary>
            This element specifies a cache of the labels on the category axis, or the x-values in a bubble or scatter chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Formula">
            <summary>
            This element specifies a reference to source of the data contained in this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartSpaceTag">
            <summary>
            This element specifies overall settings for a single chart, and is the root node for the chart part.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Area3DChartTag">
            <summary>
            This element specifies the 3-D area series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AreaChartTag">
            <summary>
            This element specifies the 2-D area series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarChartTag">
            <summary>
            This element contains the 2-D bar or column series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Bar3DChartTag">
            <summary>
            This element contains the 3-D bar or column series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Line3DChartTag">
            <summary>
            This element contains the 3-D line chart series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LineChartTag">
            <summary>
            This element contains the 2-D line chart series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.GapWidthTag">
            <summary>
            This element specifies the space between bar or column clusters,
            as a percentage of the bar or column width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.GapDepthTag">
            <summary>
            This element specifies the space between bar or column clusters,
            as a percentage of the bar or column width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OverlapTag">
            <summary>
            This element specifies how much bars and columns shall overlap on 2-D charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapeCone">
            <summary>
            Specifies the chart shall be drawn as a cone, with the base of the cone
            on the floor and the point of the cone at the top of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapeConeToMax">
            <summary>
            Specifies the chart shall be drawn with truncated cones such that the
            point of the cone would be the maximum data value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapePyramid">
            <summary>
            Specifies the chart shall be drawn as a rectangular pyramid, with the
            base of the pyramid on the floor and the point of the pyramid at the
            top of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapePyramidToMax">
            <summary>
            Specifies the chart shall be drawn with truncated cones such that the
            point of the cone would be the maximum data value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapeCylinder">
            <summary>
            Specifies the chart shall be drawn as a cylinder.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapeBox">
            <summary>
            Specifies the chart shall be drawn with a box shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BarShapeTag">
            <summary>
            This element specifies the shape of a series or a 3-D bar chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleChartTag">
            <summary>
            This element contains the bubble series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Bubble3DTag">
            <summary>
            This element specifies that the bubbles have a 3-D effect applied to them.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleScaleDefault">
            <summary>
            Default bubble scale value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleScaleTag">
            <summary>
            This element specifies the scale factor for the bubble chart. This element can be
            an integer value from 0 to 300, corresponding to a percentage of the default size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowNegativeBubbles">
            <summary>
            This element specifies negative sized bubbles shall be shown on a bubble chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleSizeArea">
            <summary>
            Specifies the area of the bubbles shall be proportional to the bubble size value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleSizeWidth">
            <summary>
            Specifies the radius of the bubbles shall be proportional to the bubble size value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleSizeRepresents">
            <summary>
            This element specifies how the bubble size values are represented on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SurfaceChartTag">
            <summary>
            This element contains the set of 2-D contour charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Surface3DChartTag">
            <summary>
            This element contains the set of 3-D surface series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.WireframeTag">
            <summary>
            This element specifies the surface chart is drawn as a wireframe.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BandFormats">
            <summary>
            This element specifes the band formats
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RadarChartTag">
            <summary>
            This element contains the radar chart series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RadarStyleTag">
            <summary>
            This element specifies what type of radar chart shall be drawn.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ScatterChartTag">
            <summary>
            This element contains the scatter chart series for this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ScatterStyleTag">
            <summary>
            This element specifies the type of lines for the scatter chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PieChartTag">
            <summary>
            This element contains the 2-D pie series for this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Pie3DChartTag">
            <summary>
            This element contains the 3-D pie series for this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FirstSliceAngleTag">
            <summary>
            This element specifies the angle of the first pie or doughnut chart slice,
            in degrees (clockwise from up).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DoughnutChartTag">
            <summary>
            This element contains the doughnut chart series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DoughnutHoleSizeTag">
            <summary>
            This element specifies the size of the hole in a doughnut chart group.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OfPieChartTag">
            <summary>
            This element contains the pie of pie or bar of pie series on this chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OfPieTypePie">
            <summary>
            Specifies that the chart is pie of pie chart, not a bar of pie chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OfPieTypeBar">
            <summary>
            Specifies that the chart is a bar of pie chart, not a pie of pie chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OfPieTypeTag">
            <summary>
            This element specifies whether this chart is pie of pie or bar of pie.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SplitPosTag">
            <summary>
            This element specifies a value that shall be used to determine which data
            points are in the second pie or bar on a pie of pie or bar of pie chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SecondPieSizeTag">
            <summary>
            This element specifies the size of the second pie or bar of a pie of pie
            chart or a bar of pie chart, as a percentage of the size of the first pie.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SplitTypeTag">
            <summary>
            This element specifies how to determine which data points are in the
            second pie or bar on a pie of pie or bar of pie chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StockChartTag">
            <summary>
            This element contains the collection of stock chart series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelsTag">
            <summary>
            This element serves as a root element that specifies the settings for the
            data labels for an entire series or the entire chart. It contains child
            elements that specify the specific formatting and positioning settings.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelPosTag">
            <summary>
            This element specifies the position of the data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowValueTag">
            <summary>
            This element specifies that the value shall be shown in a data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowCategoryTag">
            <summary>
            This element specifies that the category name shall be shown in the data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowPercentageTag">
            <summary>
            This element specifies that the percentage shall be shown in a data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowBubbleSizeTag">
            <summary>
            This element specifies the bubble size shall be shown in a data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowSeriesNameTag">
            <summary>
            This element specifies that the series name shall be shown in a data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowLegendKeyTag">
            <summary>
            This element specifies legend keys shall be shown in data labels.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowLeaderLineTag">
            <summary>
            This element specifies Leader Lines shall be shown in data labels.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowDataLabelsRangeTag">
            <summary>
            This element specifies Leader Lines shall be shown in data labels.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelsRangeTag">
            <summary>
            This element specifies a datalabel range.  
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelRangeCacheTag">
            <summary>
            This element specifies a datalabel cache.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CellRangeTag">
            <summary>
            This element specifies a cellRange tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesNameTag">
            <summary>
            This element specfies a seriesName tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ValueTag">
            <summary>
            This element specifies a value tage.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CategoryNameTag">
            <summary>
            This element specifies a category name tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PercentageTag">
            <summary>
            This element specifies a percentage tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CatetoryXaxisTag">
            <summary>
            This element specifies a category x axis tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ValueYaxisTag">
            <summary>
            This element specifies a value y axis tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelsSeparatorTag">
            <summary>
            This element specifies text that shall be used to separate the parts of a data label.
            The default is a comma, except for pie charts showing only category name and percentage,
            when a line break shall be used instead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MarkerTag">
            <summary>
            This element specifies a data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MarkerStyleTag">
            <summary>
            This element specifies the marker that shall be used for the data points.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.MarkerSizeTag">
            <summary>
            This element specifies the size of the marker in points.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FloorTag">
            <summary>
            This element specifies the floor of a 3D chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BackWallTag">
            <summary>
            This element specifies the back wall of the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SideWallTag">
            <summary>
            This element specifies the side wall.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TitleTag">
            <summary>
            This element specifies a title.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineTag">
            <summary>
            This element specifies a trend line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineNameTag">
            <summary>
            This element specifies the name of the trend line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineTypeTag">
            <summary>
            This element specifies the type of the trend line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineOrderTag">
            <summary>
            This element specifies the order of the polynomial trend line.
            It is ignored for other trend line types.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlinePeriodTag">
            <summary>
            This element specifies the period of the trend line for a moving average
            trend line. It is ignored for other trend line types.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineForwardTag">
            <summary>
            This element specifies the number of categories (or units on a scatter
            chart) that the trend line extends after the data for the series that is
            being trended. On non-scatter charts, the value must be a multiple of 0.5.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineBackwardTag">
            <summary>
            This element specifies the number of categories (or units on a scatter chart)
            that the trend line extends before the data for the series that is being trended.
            On non-scatter charts, the value shall be 0 or 0.5.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineIntercept">
            <summary>
            This element specifies the value where the trend line shall cross the y
            axis. This property shall be supported only when the trend line type is
            exp, linear, or poly.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DisplayRSquared">
            <summary>
            This element specifies that the R-squared value of the trend line is
            displayed on the chart (in the same label as the equation).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DisplayEquation">
            <summary>
            This element specifies that the equation for the trend line is displayed
            on the chart (in the same label as the R-squared value).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarsTag">
            <summary>
            This element specifies error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarTypeTag">
            <summary>
            This element specifies the type of the error bars - positive, negative, or both.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarValueType">
            <summary>
            This element specifies the type of values used to determine the length of the error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarsNoCap">
            <summary>
            This element specifies an end cap is not drawn on the error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarValueTag">
            <summary>
            This element specifies a value which is used with the Error Bar Type
            to determine the length of the error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarPlusTag">
            <summary>
            This element specifies the error bar value in the positive direction.
            It shall be used only when the errValType is cust.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarMinusTag">
            <summary>
            This element specifies the error bar value in the negative direction.
            It shall be used only when the errValType is cust.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarX">
            <summary>
            Specifies that error bars shall be shown in the x direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarY">
            <summary>
            Specifies that error bars shall be shown in the y direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ErrorBarDirection">
            <summary>
            This element specifies the direction of the error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.View3DTag">
            <summary>
            This element specifies the 3-D view of the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RotationXTag">
            <summary>
            This element specifies the amount a 3-D chart shall be rotated in the X direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.HeightPercentTag">
            <summary>
            This element specifies the height of a 3-D chart as a percentage of the
            chart width (between 5 and 500).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RotationYTag">
            <summary>
            This element specifies the amount a 3-D chart shall be rotated in the Y direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RightAngleAxesTag">
            <summary>
            This element specifies that the chart axes are at right angles,
            rather than drawn in perspective. Applies only to 3-D charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PerspectiveTag">
            <summary>
            This element specifies the field of view angle for the 3-D chart.
            This element is ignored if Right Angle Axes is true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DepthPercentTag">
            <summary>
            This element specifies the depth of a 3-D chart as a percentage of the
              chart width (between 20 and 2000 percent).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LegendTag">
            <summary>
            This element specifies the legend.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LegendPositionTag">
            <summary>
            This element specifies the position of the legend.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.OverlayTag">
            <summary>
            This element specifies that other chart elements shall be allowed to overlap this chart element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LegendEntryTag">
            <summary>
            This element specifies a legend entry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DeleteTag">
            <summary>
            This element specifies that the chart element specified by its containing
            element shall be deleted from the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DisplayBlanksAsTag">
            <summary>
            This element specifies how blank cells shall be plotted on a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PlotVisibleOnlyTag">
            <summary>
            This element specifies that only visible cells should be plotted on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PageMarginsTag">
            <summary>
            This element specifies the page margins for a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LeftMargin">
            <summary>
            Specifies the contents of this attribute will contain the left page margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RightMargin">
            <summary>
            Specifies the contents of this attribute will contain the right page margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TopMargin">
            <summary>
            Specifies the contents of this attribute will contain the top page margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BottomMargin">
            <summary>
            Specifies the contents of this attribute will contain the bottom page margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.HeaderMargin">
            <summary>
            Specifies the contents of this attribute will contain the header margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FooterMargin">
            <summary>
            Specifies the contents of this attribute will contain the footer margin in inches.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.UpDownBarsTag">
            <summary>
            This element specifies the up and down bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.UpBarsTag">
            <summary>
            This element specifies the up bars on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DownBarsTag">
            <summary>
            This element specifies the down bars on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartTextTag">
            <summary>
            This element specifies text to use on a chart, including rich text formatting.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RichTextTag">
            <summary>
            This element contains a string with rich text formatting.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartsheetTag">
            <summary>
            This is the root element of Sheet Parts that are of type 'chartsheet'.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CPrefix">
            <summary>
            Prefix for chart namespace.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.UnderlineSingle">
            <summary>
            Underline the text with a single line of normal thickness.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.UnderlineDouble">
            <summary>
            Underline the text with two lines of normal thickness.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StrikeThroughSingle">
            <summary>
            A single strikethrough is applied to the text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StrikeThroughDouble">
            <summary>
            A double strikethrough is applied to the text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StrikeThroughNone">
            <summary>
            Text is not strike through.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossesTag">
            <summary>
            This element specifies how this axis crosses the perpendicular axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossesAtTag">
            <summary>
            This element specifies where on the axis the perpendicular axis crosses.
            The units are dependent on the type of axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossesAutoZero">
            <summary>
            The category axis crosses at the zero point of the value axis (if possible),
            or the minimum value (if the minimum is greater than zero) or the maximum
            (if the maximum is less than zero).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CrossesMaximum">
            <summary>
            The axis crosses at the maximum value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.XValues">
            <summary>
            This element specifies the x values which shall be used to define the
            location of data markers on a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.YValues">
            <summary>
            This element specifies the y values which shall be used to define the
            location of data markers on a chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BubbleSize">
            <summary>
            This element specifies the data for the sizes of the bubbles on the bubble chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PieExplosionTag">
            <summary>
            This element specifies the amount the data point shall be moved from the center of the pie.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesLinesTag">
            <summary>
            This element specifies series lines for the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SmoothTag">
            <summary>
            This element specifies the line connecting the points on the chart shall
            be smoothed using Catmull-Rom splines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TrendlineLabelTag">
            <summary>
            This element specifies the label for the trend line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SeriesTextTag">
            <summary>
            This element specifies text for a series name, without rich text formatting.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TextValueTag">
            <summary>
            This element specifies a text value for a category axis label or a series name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.HiLowLinesTag">
            <summary>
            This element specifies the high-low lines for the series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LayoutTag">
            <summary>
            This element specifies how the chart element is placed on the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ManualLayoutTag">
            <summary>
            This element specifies how the chart element is placed on the chart manually
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LayoutTargetTag">
            <summary>
            This element specifies the chart layout target
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LeftModeTag">
            <summary>
            Represents left element for manual layout
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TopModeTag">
            <summary>
            Represents top element for manual layout
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LeftTag">
            <summary>
            Represents the x location (left) of the chart element as a 
            fraction of width of the chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TopTag">
            <summary>
            Represents the y location (top) of the chart element as a 
            fraction of width of the chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.dXTag">
            <summary>
            Represents the width or horizontal offset
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.dYTag">
            <summary>
            Represents the height or a vertical offset
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.WidthModeTag">
            <summary>
            Represents the layout mode for the width of the element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.HeightModeTag">
            <summary>
            Represents the layout mode for the height of the element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.WidthTag">
            <summary>
            Represents the width of the element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.HeightTag">
            <summary>
            Represents the height of the element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataPointTag">
            <summary>
            This element specifies a single data point.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataLabelTag">
            <summary>
            This element specifies a data label.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LogBaseTag">
            <summary>
            This element specifies the logarithmic base for a logarithmic axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LogBaseDefault">
            <summary>
            Default value of the logBase tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DisplayUnitsTag">
            <summary>
            This element specifies the scaling value of the display units for the value axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BuiltInUnitTag">
            <summary>
            This element specifies the display unit is one of the built in values.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CustomUnitTag">
            <summary>
            This element specifies a custom value for the display unit.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DataTableTag">
            <summary>
            This element specifies a data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowHorizontalBorder">
            <summary>
            This element specifies the horizontal borders shall be shown in a data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowVerticalBorder">
            <summary>
            This element specifies the vertical border shall be shown in a data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowOutline">
            <summary>
            This element specifies the outline shall be shown on a data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowSeriesKeys">
            <summary>
            This element specifies the legend keys shall be shown in a data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DropLinesTag">
            <summary>
            This element specifies drop lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TextPropertiesTag">
            <summary>
            This element contains text properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AutoCategoryAxis">
            <summary>
            This element specifies that this axis is a date or text axis based on
            the data that is used for the axis labels, not a specific choice.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RoundedCornersTag">
            <summary>
            This element specifies the rounded corner tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartStyleTag">
            <summary>
            This element specifies the style tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.UserShapesTag">
            <summary>
            This element specifies the shapes drawn on top of the chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.RelativeSizeAnchorTag">
            <summary>
            This element specifies that the shape described here to reside within a
            chart should be sized based on relative anchor points.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.XTagName">
            <summary>
            This element specifies the relative x coordinate that is used to define
            the percentage-based horizontal position for a shape within a chart drawing object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.YTagName">
            <summary>
            This element specifies the relative y coordinate that is used to define
            the percentage-based vertical position for a shape within a chart drawing object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.CoordinatesMultiplyer">
            <summary>
            Multiplier for coordinates transform.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumberLiteral">
            <summary>
            This element specifies a set of numbers used for the parent element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StringLiteral">
            <summary>
            This element specifies a set of strings used for the parent element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PointCount">
            <summary>
            This element contains the number of values in the cache.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumericPoint">
            <summary>
            This element specifies data for a particular data point.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.InvertIfNegative">
            <summary>
            This element specifies the series
            to invert its colors if the value is negative.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.NumbericValue">
            <summary>
            Value attribute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PivotSourceTag">
            <summary>
            Pivot source tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PivotFormats">
            <summary>
            Pivot formats
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DisplayUnitsLabel">
            <summary>
            Display units label
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ZoomToFit">
            <summary>
            Zoom to fit
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LabelAlignment">
            <summary>
            Label alignment
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PrintSettings">
            <summary>
            Print settings
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.TransparencyValue">
            <summary>
            Transparency value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SizeValue">
            <summary>
            Size value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BlurValue">
            <summary>
            Blur value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Anglevalue">
            <summary>
            Angle value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.DistanceValue">
            <summary>
            Distance value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.BevelValue">
            <summary>
            Bevel value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PivotOptionsTag">
            <summary>
            Pivot options tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PivotOptionsTag16">
            <summary>
            Pivot options tag 16
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowZoneFilterTag">
            <summary>
            Show zone filter tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowZoneCategoryTag">
            <summary>
            Show zone category tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowExpandCollapseTag16">
            <summary>
            Show expand collapse tag 16
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowZoneDataTag">
            <summary>
            Show zone data tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowZoneSeriesTag">
            <summary>
            Show zone series tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ShowZoneVisibleTag">
            <summary>
            Show zone visible tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.PivotSourceNameTag">
            <summary>
            Pivot source name tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ChartFormatId">
            <summary>
            Chart format id
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AlternateContentTag">
            <summary>
            Alternate content tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.AutoTitleDeletedTag">
            <summary>
            Auto title deleted tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.StandardFormatAttribute">
            <summary>
            Represents the standard Number format attribute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.formulareference">
            <summary>
            Formual reference
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.SqureReference">
            <summary>
            Square reference
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.fullReference">
            <summary>
            Full reference
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.c15tag">
            <summary>
            C15 tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.c14tag">
            <summary>
            C14 tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.xml15web">
            <summary>
            xml15web
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.xml14web">
            <summary>
            xml14web
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Filterseriesuri">
            <summary>
            Filter series uri
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.InvertSolidFillFmtUri">
            <summary>
            Invert solid fill format uri
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredAreaSeries">
            <summary>
            Filtered area series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Filterbarseries">
            <summary>
            Filter bar series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredLineSeries">
            <summary>
            Filtered line series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredPieSeries">
            <summary>
            Filtered pie series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredRadarSeries">
            <summary>
            Filtered radar series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredScatterSeries">
            <summary>
            Filtered scatter series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredSurfaceSeries">
            <summary>
            Filtered surface series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredBubbleSeries">
            <summary>
            Filtered bubble series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredSeriesTitle">
            <summary>
            Filtered series title
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.FilteredCategoryTitle">
            <summary>
            Filtered category title
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.InvertSolidFillFmt">
            <summary>
            Invert solid fill format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ColorMapOverrideTag">
            <summary>
            This element represents color mapping information.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.ExtentionList">
            <summary>
            Name of the extention list element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.Extenstion">
            <summary>
            Name of the extention element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.LeaderLines">
            <summary>
            Name of the leader lines element
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.ChartConstants.#ctor">
            <summary>
            Prevents a default instance of the ChartConstants class from being created.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.CXNamespace">
            <summary>
            Main chartExs namespace.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.CXPrefix">
            <summary>
            Prefix for chartEx namespace.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.CX1Prefix">
            <summary>
            Prefix for chartEx1 namespace for required.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.SampleChartEx1NameSpace">
            <summary>
            Namespace used in choice content
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ChartDataTag">
            <summary>
            The element specifies the chart data used for chartEx
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataTag">
            <summary>
            The element specifies the data used for chartEx
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.TextDataTag">
            <summary>
            The element specifies the text data used for chartEx text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ValueTag">
            <summary>
            The element specifies the value used for chartEx value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.PositionTag">
            <summary>
            The element specifies the chart element position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AlignTag">
            <summary>
            The element specifies the chart element alignment
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.PlotAreaRegionTag">
            <summary>
            The element specifies the chart plot area region
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AxisTag">
            <summary>
            The element specifies the chart axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.SeriesTag">
            <summary>
            The element specifies the chart series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.PlotSurfaceTag">
            <summary>
            The element specifies the plot surface
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataPointTag">
            <summary>
            The element specifies the chart data point
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataLabelsTag">
            <summary>
            The element specifies the chart data labels
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataLabelTag">
            <summary>
            The element specifies the chart data label of single data point
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataIdTag">
            <summary>
            The element specifies the chart data Id used in series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.LayoutPropertiesTag">
            <summary>
            The element specifies the chart layout properties used in series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AxisIdTag">
            <summary>
            The element specifies the chart axis Id used in series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataLabelPositionTag">
            <summary>
            The element specifies the chart data Label position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DataLabelHiddenTag">
            <summary>
            The element specifies the data label hidden in setting
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.VisibilityTag">
            <summary>
            The element specifies the data label visibility setting
            The element also specifies the visibility options on box and whisker, waterfall
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.SeriesNameAttributeTag">
            <summary>
            The attribute specifies the data label visibility option of series Name
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.CategoryNameAttributeTag">
            <summary>
            The attribute specifies the data label visibility option of category Name
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ValueAttributeTag">
            <summary>
            The attribute specifies the data label visibility option of value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.LayoutIdAttribute">
            <summary>
            The attribute specifies the layout Id on series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.HiddenAttribute">
            <summary>
            The attribute specifies the series is hidden or not
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.OwnerIndexAttribute">
            <summary>
            The attribute specifies the owner index on series for refering other series
            Pareto line series only
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.UniqueIdAttribute">
            <summary>
            The attribute specifies the series unique Identifier
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.FormatIndexAttribute">
            <summary>
            The attribute specifies the format index for series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ParentLabelLayoutTag">
            <summary>
            The element specifies the parent label layout
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AggregationTag">
            <summary>
            The element specifies the by category option in histogram and pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.BinningTag">
            <summary>
            The element specifies the binning option in histogram and pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.StatisticsTag">
             <summary>
            The element specifies the statistics for the box and whisker series 
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.SubtotalsTag">
            <summary>
            The element specifies the subtotal for the water fall series 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ConnectorLinesAttribute">
            <summary>
            This attribute specifies the connector line used in Water fall chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.MeanLineAttribute">
            <summary>
            This attribute specifies the mean line used in Box and Whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.MeanMarkersAttribute">
            <summary>
            This attribute specifies the mean marker used in Box and Whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.NonOutliersAttribute">
            <summary>
            This attribute specifies the mean non outliers used in Box and Whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.OutliersAttribute">
            <summary>
            This attribute specifies the outliers used in Box and Whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.IntervalClosedAttribute">
            <summary>
            This attribute specifies the interval closing in Histogram, Pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.UnderFlowBinAttribute">
            <summary>
            This attribute specifies the underflow bin value in Histogram, Pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.OverflowBinAttribute">
            <summary>
            This attribute specifies the overflow bin value in Histogram, Pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.BinSizeElement">
            <summary>
            This element specifies the bin width value in Histogram, Pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.BinCountElement">
            <summary>
            This element specifies the bin count in Histogram, Pareto chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.QuartileMethodAttribute">
            <summary>
            This attribute specifies the quartile method used in box and whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ExclusiveValue">
            <summary>
            This value specifies the exclusive quartile method used in box and whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.InclusiveValue">
            <summary>
            This value specifies the inclusive quartile method used in box and whisker chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.CategoryAxisScalingTag">
            <summary>
            This element speifies the category axis scaling
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ValueAxisScalingTag">
            <summary>
            This element speifies the value axis scaling
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.IndexAttribute">
            <summary>
            This attribute specifies the index of element
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AutomaticValueString">
            <summary>
            This string denotes the automatic value on current property
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DisplayUnitsTag">
            <summary>
            This element specifies the display unit axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.MajorTickMarksTag">
            <summary>
            This element specifies the major tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.MinorTickMarksTag">
            <summary>
            This element specifies the minor tick marks.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.TickLabelsTag">
            <summary>
            Describes the tick marks in the axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.TypeAttribute">
            <summary>
            Describes the type attribute tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DisplayUnitLabelTag">
            <summary>
            Describes the Display unit label tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DisplayUnitAttributeTag">
            <summary>
            Describes the Display unit attribute tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ExternalDataTag">
            <summary>
            This element describes the external data referenced in chartEx
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.AutoUpdateAttributeTag">
            <summary>
            This attibute specifies whether the work book need to be updated or not
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.NumericDimensionElement">
            <summary>
            This element describes the numeric dimension of data
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.StringDimensionElement">
            <summary>
            This element describes the string dimension of data
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.LevelElement">
            <summary>
            This element describes the level of data
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.DirectionAttribute">
            <summary>
            This attibute specifies direction for data dimension
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.ColumnDirectionValue">
            <summary>
            Value indicates the diemension is column wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.ChartExConstants.RowDirectionValue">
            <summary>
            Value indicates the diemension is row wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.NumberRegex">
            <summary>
            Number regex used for pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.WhitespaceChars">
            <summary>
            Read-Only static whitespace characters
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToByte(System.String)">
            <summary>
            Convert the string to byte value
            </summary>
            <param name="s">input string</param>
            <returns>the byte value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToInt16(System.String)">
            <summary>
            Convert the string to Int16 value
            </summary>
            <param name="s">input string</param>
            <returns>the Int16 value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToInt32(System.String)">
            <summary>
            Convert the string to Int32 value
            </summary>
            <param name="s">input string</param>
            <returns>the Int32 value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToInt64(System.String)">
            <summary>
            Convert the string to Int64 value
            </summary>
            <param name="s">input string</param>
            <returns>the Int64 value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToUInt16(System.String)">
            <summary>
            Convert the string to UInt16 value
            </summary>
            <param name="s">input string</param>
            <returns>the UInt16 value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToUInt32(System.String)">
            <summary>
            Convert the string to UInt32 value
            </summary>
            <param name="s">input string</param>
            <returns>the UInt32 value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.TrimString(System.String)">
            <summary>
            Trim a string using XML whitespace characters
            </summary>
            <param name="value">input string value</param>
            <returns>the trimmed string</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToSingle(System.String)">
            <summary>
            Convert the string to Single value
            </summary>
            <param name="s">input string</param>
            <returns>the Single value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToDouble(System.String)">
            <summary>
            Convert the string to Double value
            </summary>
            <param name="s">input string</param>
            <returns>the Double value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToBoolean(System.String)">
            <summary>
            Convert the string to Boolean value
            </summary>
            <param name="s">input string</param>
            <returns>the Boolean value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.GetTruncatedValue(System.String,System.Double)">
            <summary>
            Try to get the number value from misplaced string
            </summary>
            <param name="input">the input string</param>
            <param name="maxValue">the maximum value</param>
            <returns>the extracted value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToDateTimeOffset(System.String)">
            <summary>
            Convert the string to DateTimeOffset value
            </summary>
            <param name="value">input string</param>
            <returns>the DateTimeOffset value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.IsWhiteSpace(System.String)">
            <summary>
            Check whether the string having only whitespace
            </summary>
            <param name="value">the input string</param>
            <returns>the boolean value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.OOXML.XmlConvertExtension.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
            <summary>
            Convert the string to DateTime value
            </summary>
            <param name="value">input string</param>
            <param name="dateTimeOption">Xsd mode for date time</param>
            <returns>the DateTime value</returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants">
            <summary>
            This class contains the required chart style elements
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.ChartStyleTag">
            <summary>
            It specifies visual and text properties for all elements present on a chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.ColorStyleTag">
            <summary>
            It specifies colors used to resolve StyleColor in a ChartStyle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.LineReferenceTag">
            <summary>
            Element specifies reference to a line style within the style matrix.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.LineWidthScaleTag">
            <summary>
            Element that specifies a multiplier to apply to the line width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.FillReferenceTag">
            <summary>
            Element that specifies a reference to a fill style within the style matrix.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.EffectReferenceTag">
            <summary>
            Element that specifies a reference to an effect style within the style
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.FontReferenceTag">
            <summary>
            Element that specifies a reference to a themed font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.ShapePropertiesTag">
            <summary>
            Element that specifies visual shape properties of the part of the chart associated with this CT_StyleEntry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.DefaultRunPropertiesTag">
            <summary>
            Element that specifies the default text character properties for a text body on a chart which is associated with this CT_StyleEntry
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.BodyPropertiesTag">
            <summary>
            Element that specifies the body properties for a text body on a chart that is associated with this CT_StyleEntry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.IndexAttribute">
            <summary>
            Attribute that specifies the style matrix index of the style referred to.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.ModsAttribute">
            <summary>
            Attribute that specifies a list of modifiers for this reference.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent1String">
             <summary>
            (Accent Color 1) Extra scheme color 1      
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent2String">
             <summary>
            (Accent Color 2) Extra scheme color 2      
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent3String">
             <summary>
            (Accent Color 3) Extra scheme color 3      
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent4String">
             <summary>
            (Accent Color 4) Extra scheme color 4
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent5String">
             <summary>
            (Accent Color 5) Extra scheme color 5      
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Accent6String">
             <summary>
            (Accent Color 6) Extra scheme color 6      
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Bg1String">
            <summary>
            (Background Color 1) Semantic background color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Bg2String">
            <summary>
            (Background Color 2) Semantic additional background color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Dk1String">
            <summary>
            (Dark Color 1) Main dark color 1
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Dk2String">
            <summary>
            (Dark Color 2) Main dark color 2
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.folHlinkString">
            <summary>
            (Followed Hyperlink Color) Followed Hyperlink Color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.hLinkString">
            <summary>
            (Hyperlink Color) Regular Hyperlink Color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Lt1String">
            <summary>
            (Light Color 1) Main Light Color 1
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Lt2String">
            <summary>
            (Light Color 2) Main Light Color 2
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.PhClrString">
            <summary>
            (Style Color) A color used in theme definitions which means to use the color of the style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Tx1String">
            <summary>
            (Text Color 1) Semantic text color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.Tx2String">
            <summary>
             (Text Color 2) Semantic additional text color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.OOXML.StyleConstants.ColorStyleVariationTag">
            <summary>
            It specifies a list of transforms that are appended to all colors in a ColorStyle to produce a variation of the color style
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.Xls.XlsCellsDataWriter.WriteRKValues(Spire.Xls.Core.Converter.Exporting.Xls.DataOutStream,System.Collections.ArrayList,Spire.Xls.Core.Converter.Collections.IntArrayList,System.Collections.ArrayList,System.Int32,System.Int32)">
            
            @param listCellValue
            @param rowIdx
                      current row index
            @param colIdx
                      the last column index + 1
            @param RKTypes
            @return
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.CellAreas">
            <summary>
            Same as CellArea but more features are added, such as IComparable.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_EN2AN">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_AN2EN">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_EN2AN_INIT_LR">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_EN2AN_INIT_AL">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_RESERVED">
            Not a valid option value. 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGITS_MASK">
            Bit mask for digit shaping options.
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGIT_TYPE_AN">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGIT_TYPE_AN_EXTENDED">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.ArabicLigaturizer.DIGIT_TYPE_MASK">
            Bit mask for digit type options.
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.EMF.BidiLine">
            Does all the line bidirectional processing with PdfChunk assembly.
            
             @author Paulo Soares
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.L">
            Left-to-right
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.LRE">
            Left-to-Right Embedding 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.LRO">
            Left-to-Right Override 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.R">
            Right-to-Left 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.AL">
            Right-to-Left Arabic 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.RLE">
            Right-to-Left Embedding 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.RLO">
            Right-to-Left Override 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.PDF">
            Pop Directional Format 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.EN">
            European Number 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ES">
            European Number Separator 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ET">
            European Number Terminator 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.AN">
            Arabic Number 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.CS">
            Common Number Separator 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.NSM">
            Non-Spacing Mark 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.BN">
            Boundary Neutral 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.B">
            Paragraph Separator 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.S">
            Segment Separator 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.WS">
            Whitespace 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ON">
            Other Neutrals 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.TYPE_MIN">
            Minimum bidi type value. 
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.TYPE_MAX">
            Maximum bidi type value. 
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.#ctor(System.SByte[])">
             Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive
             and represent the direction codes of the characters in the text.
            
             @param types the types array
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.#ctor(System.SByte[],System.SByte)">
             Initialize using an array of direction types and an externally supplied paragraph embedding level.
             The embedding level may be -1, 0, or 1.  -1 means to apply the default algorithm (rules P2 and P3),
             0 is for LTR paragraphs, and 1 is for RTL paragraphs.
            
             @param types the types array
             @param paragraphEmbeddingLevel the externally supplied paragraph embedding level.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.RunAlgorithm">
            The algorithm.
            Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.DetermineParagraphEmbeddingLevel">
            1) determining the paragraph level.
            Rules P2, P3.
            At the end of this function, the member variable paragraphEmbeddingLevel is set to either 0 or 1.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.DetermineExplicitEmbeddingLevels">
            Process embedding format codes.
            Calls processEmbeddings to generate an embedding array from the explicit format codes.  The
            embedding overrides in the array are then applied to the result types, and the result levels are
            initialized.
            @see #processEmbeddings
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.RemoveExplicitCodes">
            Rules X9.
            Remove explicit codes so that they may be ignored during the remainder
            of the main portion of the algorithm.  The length of the resulting text
            is returned.
            @return the length of the data excluding explicit codes and BN.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ReinsertExplicitCodes(System.Int32)">
            Reinsert levels information for explicit codes.
            This is for ease of relating the level information
            to the original input data.  Note that the levels
            assigned to these codes are arbitrary, they're
            chosen so as to avoid breaking level runs.
            @param textLength the length of the data after compression
            @return the length of the data (original length of
            types array supplied to constructor)
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ProcessEmbeddings(System.SByte[],System.SByte)">
             2) determining explicit levels
             Rules X1 - X8
            
             The interaction of these rules makes handling them a bit complex.
             This examines resultTypes but does not modify it.  It returns embedding and
             override information in the result array.  The low 7 bits are the level, the high
             bit is set if the level is an override, and clear if it is an embedding.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ResolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
             3) resolving weak types
             Rules W1-W7.
            
             Note that some weak types (EN, AN) remain after this processing is complete.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ResolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            6) resolving neutral types
            Rules N1-N2.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ResolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            7) resolving implicit embedding levels
            Rules I1, I2.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ComputeMultilineReordering(System.SByte[],System.Int32[])">
            Return multiline reordering array for a given level array.
            Reordering does not occur across a line break.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ComputeReordering(System.SByte[])">
            Return reordering array for a given level array.  This reorders a single line.
            The reordering is a visual to logical map.  For example,
            the leftmost char is string.CharAt(order[0]).
            Rule L2.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.GetBaseLevel">
            Return the base level of the paragraph.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.IsWhitespace(System.SByte)">
            Return true if the type is considered a whitespace type for the line break rules.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.TypeForLevel(System.Int32)">
            Return the strong type (L or R) corresponding to the level.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.FindRunLimit(System.Int32,System.Int32,System.SByte[])">
            Return the limit of the run starting at index that includes only resultTypes in validSet.
            This checks the value at index, and will return index if that value is not in validSet.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.FindRunStart(System.Int32,System.SByte[])">
            Return the start of the run including index that includes only resultTypes in validSet.
            This assumes the value at index is valid, and does not check it.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.SetTypes(System.Int32,System.Int32,System.SByte)">
            Set resultTypes from start up to (but not including) limit to newType.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.SetLevels(System.Int32,System.Int32,System.SByte)">
            Set resultLevels from start up to (but not including) limit to newLevel.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ValidateTypes(System.SByte[])">
            Throw exception if type array is invalid.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ValidateParagraphEmbeddingLevel(System.SByte)">
            Throw exception if paragraph embedding level is invalid. Special allowance for -1 so that
            default processing can still be performed when using this API.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.BidiOrder.ValidateLineBreaks(System.Int32[],System.Int32)">
            Throw exception if line breaks array is invalid.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.EMF.VisualRender.AddDocumentProperties(Spire.Xls.Core.Converter.Spreadsheet.DocumentProperties.BuiltInDocumentPropertyCollection)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.SaveFormat.Xlt">
            <summary>
            Excel Template File.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.SaveFormat.PCL">
            <summary>
            Printer Command Language (PCL) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.SaveFormat.OFD">
            <summary>
            Open Fixed-layout Document (OFD) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Exporting.SaveFormat.UOS">
            <summary>
            UOF Spreadsheet (UOS) format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.SaveOptions.PdfConformanceLevel">
            <summary>
            Gets or sets the Pdf document's Conformance-level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Exporting.SaveOptions.PdfSecurity">
            <summary>
            Represents the security settings of the PDF document.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPostProcessorOneSpreadsheet">
            <summary>
            The first step post process in OOX->UOF of SpreadSheet
            </summary>
            <author>linyaohu</author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet" -->
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.GetSheetColWidth(System.String)">
            <summary>
             获取自定义列的宽度
            </summary>
            <param name="sheetPath">sheet*.xml的位置</param>
            <returns>所有列的实际宽度</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.GetSheetRowHeight(System.String)">
            <summary>
             获取自定义列的宽度
            </summary>
            <param name="sheetPath">sheet*.xml的位置</param>
            <returns>所有列的实际宽度</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.SetDrawingTwoCellAnchorValue(System.String)">
            <summary>
            设置drawing*.xml文件中所有from和to的实际绝对坐标值（非相对值）
            </summary>
            <param name="xlsxLocation">XLSX文件夹位置</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.GetRelComment(System.String)">
            <summary>
             Get the relation comment file from sheet* relation file
            </summary>
            <param name="sheetRel"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.AddTablesStyle(System.String,System.String,System.String)">
            <summary>
             add the XL/tables/table*.xml to pretreatment1
            </summary>
            <param name="inpute"></param>
            <param name="output"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.fillHashTable(System.Xml.XmlNodeList,System.Collections.Hashtable)">
            <summary>
            填充一个hash表
            </summary>
            <param name="cols"></param>
            <param name="hashCol"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.CalNormalToRC(System.String,System.String)">
            <summary>
             计算每一个函数的RC转换
            </summary>
            <param name="formula">函数公式</param>
            <param name="oriR">结果所在位置，如O6</param>
            <returns>返回更改后的公式</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.CalRC(System.String,System.String)">
            <summary>
            把A1:B2中的A1换成相对于currentCell的RC表示
            </summary>
            <param name="range">当前的范围</param>
            <param name="currentCell">当前单元格地址</param>
            <returns>RC表达</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.GetTheLetter(System.String)">
            <summary>
            get the letter
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.GetTheNum(System.String)">
            <summary>
            get the number
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.ConvertLetterToNum(System.String)">
            <summary>
             计算字母转换成的数字
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.OoxToUofPreProcessorOneSpreadSheet.ConvertAlphToNum(System.Char)">
            <summary>
            计算字母的数字大小，A对应的是1，B对应的是2
            </summary>
            <param name="alph">字母</param>
            <returns>数字</returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.SpreadsheetTranslator">
            <summary>
            Spreadsheet translator
            </summary>
            <author>linyaohu</author>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.SpreadsheetTranslator.GetSheetColWidth(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
             获取自定义列的宽度
            </summary>
            <param name="sheetPath">sheet*.xml的位置</param>
            <returns>所有列的实际宽度</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.SpreadsheetTranslator.GetSheetRowHeight(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
             获取自定义列的宽度
            </summary>
            <param name="sheetPath">sheet*.xml的位置</param>
            <returns>所有列的实际宽度</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.SpreadsheetTranslator.SetDrawingTwoCellAnchorValue(System.String,System.String)">
            <summary>
            设置drawing*.xml文件中所有from和to的实际绝对坐标值（非相对值）
            </summary>
            <param name="xlsxLocation">XLSX文件夹位置</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet">
            <summary>
            The first step pretreatment of spreadsheet from UOF->OOX
            </summary>
            <author>linyaohu</author>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.dealContent(System.String)">
            <summary>
            增加uof到ooxml中分组集相关处理
            </summary>
            <param name="content">content.xml路径</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.backLevel(System.Int32,System.Collections.Generic.List{System.Int32[]})">
            <summary>
            返回分组等级
            </summary>
            <param name="colNo"></param>
            <param name="listScope"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.tailDeal(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            重新整理含有分组集的工作表列和行
            </summary>
            <param name="nodeGroup"></param>
            <param name="nm"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.IntTo26(System.Int32)">
            <summary>
            把INT数转成字母，A-Z，之后是AA-AZ...
            </summary>
            <param name="inputInt">输入一个整数</param>
            <returns>字母串</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.Convert26ToInt(System.String)">
            <summary>
            把字母转换成数字，AA对应的是27
            </summary>
            <param name="inputAlphabet"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.CalNormalToRC(System.String,System.Int32,System.Int32)">
            <summary>
             计算每一个函数的RC转换
            </summary>
            <param name="formula">函数公式</param>
            <param name="oriR">结果所在位置，如O6</param>
            <returns>返回更改后的公式</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.RevCalRC(System.String,System.Int32,System.Int32)">
            <summary>
            把RC表示转换成A1：B1的形式
            </summary>
            <param name="rc">RC字符串</param>
            <param name="row">行号</param>
            <param name="col">列号</param>
            <returns>正常形式</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.ConvertNumToAlph(System.Int32)">
            <summary>
             把数字转换成对应的字母
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorOneSpreadSheet.ConvertNumToLetter(System.Int32)">
            <summary>
             把数字转换成对应的字母
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Exporting.UOF.UofConvert.UofToOoxPreProcessorTwoSpreadSheet">
            <summary>
            Preatreatment of Step 2
            </summary>
            <author>linwei</author>
            <modifier>linyaohu</modifier>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.Converters.CodePage.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.DocxConstants.CurrNameSpace">
            <summary>
            Get the name space of the current document.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.DocxConstants.InitiateNameSpace">
            <summary>
            initiate the namespace dictionary.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.DocxConstants.AddValue(System.String,System.String,System.String)">
            <summary>
            add new namespace into the namespace dictionary.
            if exists,change the old value to new value.
            </summary>
            <param name="fileName"></param>
            <param name="prefix"></param>
            <param name="nameSpace"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.DocxConstants.GetValue(System.String,System.String)">
            <summary>
            gets the namespace by fileName and prefix.
            </summary>
            <param name="fileName"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.DocxConstants.Dispose">
            <summary>
            Prerforms application-defined tasks associated with freeing,releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.AUTO_DEF_DISTANCE_PARAGRAPH_BEFOREANDAFTER">
            <summary>
            Line spacing before(after)the automatic default distance.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.DEF_LINE_SPACING">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.DocumentObjectType">
            <summary>
            Gets the type of the document object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.ChildObjects">
            <summary>
            Gets the child objects.
            </summary>
            <value>The child objects.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.Text">
            <summary>
            Returns or sets paragraph text.
            </summary>
            <value></value>
            <remarks>All internal formatting will be cleared when new text is set.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.Item(System.Int32)">
            <summary>
            Gets paragraph item by index.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.Items">
            <summary>
            Gets paragraph items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.IsTOCPara">
            <summary>
            gets and sets whether the paragraph has toc field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.BreakCharacterFormat">
            <summary>
            Gets character format for the break symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.IsInitLayoutInfo">
            <summary>
            Gets a value indicating whether this paragraph is start of section.
            </summary>
            <value>
            if this paragraph is start of section, set to <c>true</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.IsEmptyParagraph">
            <summary>
            gets whether the paragraph is empty.
            if paragraph has bookmart and break only,return true,otherwise ,false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.HasOnlyBreakOrBookmark">
            <summary>
            Gets a value indicating whether this instance has only break or bookmark.
            </summary>
            <value><c>true</c> if this instance has only break or bookmark; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.IsAddForIfField">
            <summary>
            a flag checked whether the paragraph is added for IF field layout;
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.AppendText(System.String)">
            <summary>
            Appends text to end of document.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.CalculatedResult">
            <summary>
            Get the text that the field items have been updated .
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.Paragraph.GetParagraphText">
            <summary>
            Integrate the relative format to curr style para uses to keep its format same as format in source document.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType">
            <summary>
            Specifies the type of a Document object type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType.Section">
            <summary>
            The text bodies
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType.Paragraph">
            <summary>
            The text body items
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType.TextRange">
            <summary>
            The paragraph items
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType.Break">
            Tab,
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.StyleType">
            <summary>
            Specifies type of the Style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.StyleType.ParagraphStyle">
            <summary>
            The style is a paragraph style. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.StyleType.CharacterStyle">
            <summary>
            The style is a character style. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.StyleType.TableStyle">
            <summary>
            The style is a table style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.StyleType.ListStyle">
            <summary>
            The style is a list style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.StyleType.OtherStyle">
            <summary>
            The style is other kind of style. 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType">
            <summary>
            Specifies type of the ParagraphBase.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.TextRange">
            <summary>
            ParagraphBase is a text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Picture">
            <summary>
            ParagraphBase is a picture.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Field">
            <summary>
            ParagraphBase is a field.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.FieldMark">
            <summary>
            Paragraph item is field mark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.MergeField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.FormField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.CheckBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.TextFormField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.DropDownFormField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.SeqField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.EmbedField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.ControlField">
            <summary>
            Paragraph item is form control field.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.BookmarkStart">
            <summary>
            ParagraphBase is a start of bookmark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.BookmarkEnd">
            <summary>
            ParagraphBase is a end of bookmark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.PermissionStart">
            <summary>
            ParagraphBase is a start of Permission
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.PermissionEnd">
            <summary>
            ParagraphBase is a end of Permission.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.ShapeObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Comment">
            <summary>
            ParagraphBase is a comment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.CommentMark">
            <summary>
            Paragraph item is comment mark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Footnote">
            <summary>
            ParagraphBase is a footnote.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.TextBox">
            <summary>
            ParagraphBase is a textbox. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Break">
             <summary>
             
             </summary>
            Tab,
             <summary>
             PragraphItem is a break.
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.Symbol">
            <summary>
            
            </summary>    
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.TOC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType.OleObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment">
            <summary>
            Specifies type of the horizontal alignment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.Left">
            <summary>
            Specifies alignment to the left. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.Center">
            <summary>
            Specifies alignment to the center. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.Right">
            <summary>
            Specifies alignment to the right. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.Justify">
            <summary>
            Specifies alignment to both left and right. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.Distribute">
            <summary>
            Specifies that the text shall be justified between both
            of the text margins in the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.HightKashida">
            <summary>
            Specifies that the kashida length for text in the current paragraph
            shall be extended to its wides possible length.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.LowKashida">
            <summary>
            Specifies that the kashida length for text in the current paragraph
            shall be exended to a slightly longer length.
            This setting shall also be applied to Arabic text when the both setting is applied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalAlignment.MediumKashida">
            <summary>
            Specifies that the kashida length for text in the current paragraph
            shall be extended to a medium length determined by the consumer.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle">
            <summary>
            Specifies style of the underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.None">
            <summary>
            No underlining.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Single">
            <summary>
            Normal single underline. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Words">
            <summary>
            Underline words only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Double">
            <summary>
            Double underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Dotted">
            <summary>
            Dotted underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Thick">
            <summary>
            Heavy underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Dash">
            <summary>
            Dashed underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DotDash">
            <summary>
            Dot-dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DotDotDash">
            <summary>
            Dot-dot-dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.Wavy">
            <summary>
            Wavy underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DottedHeavy">
            <summary>
            Heavy dotted underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DashHeavy">
            <summary>
            Heavy dashed underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DotDashHeavy">
            <summary>
            Heavy dot-dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DotDotDashHeavy">
            <summary>
            Heavy dot-dot-dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.WavyHeavy">
            <summary>
            Heavy wavy underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DashLong">
            <summary>
            Long-dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.WavyDouble">
            <summary>
            Wavy double underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.UnderlineStyle.DashLongHeavy">
            <summary>
            Heavy long-dash underline.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.SubSuperScript">
            <summary>
            Specifies type of the SubSuperScript.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.SubSuperScript.None">
            <summary>
            No sub- or superscript.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.SubSuperScript.SuperScript">
            <summary>
            Specified superscript format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.SubSuperScript.SubScript">
            <summary>
            Specified subscript format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.SubSuperScript.BaseLine">
            <summary>
            Specified baseline format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis">
            <summary>
            Specifies the emphasis mark type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis.None">
            <summary>
            No Emphasis Mark
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis.Dot">
            <summary>
            Dot Emphasis Mark Above Characters
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis.CommaAbove">
            <summary>
            Comma Emphasis Mark Above Characters
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis.CircleAbove">
            <summary>
            Circle Emphasis Mark Above Characters
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.Emphasis.DotBelow">
            <summary>
            Dot Emphasis Mark Below Characters
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.BorderStyle">
            <summary>
            Specifies style of the border line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.BorderStyle.TwistedLines1">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType">
            <summary>
            Specifies type of the list numbering format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Arabic">
            <summary>
            Specifies default numbering format.
            Arabic numbering (1, 2, 3, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.UpRoman">
            <summary>
            Specifies UppRoman numbering format.
            Upper case Roman (I, II, III, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.LowRoman">
            <summary>
            Specifies LowRoman numbering format.
             Lower case Roman (i, ii, iii, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.UpLetter">
            <summary>
            Specifies UpLetter numbering format.
            Upper case Letter (A, B, C, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.LowLetter">
            <summary>
            Specifies LowLetter numbering format.
             Lower case letter (a, b, c, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Ordinal">
            <summary>
            Specifies Ordinal numbering format.
            Ordinal (1st, 2nd, 3rd, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.CardinalText">
            <summary>
            Specifies Cardinal Text numbering format.
             Numbered (One, Two, Three, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.OrdinalText">
            <summary>
            Specifies Ordinal Text numbering format.
            Ordinal (text) (First, Second, Third, ...)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Chicago">
            <summary>
            Chicago manual of style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.DecimalFullWidth">
            <summary>
            Specifies that the sequence shall consist of full-width Arabic numbering.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.DecimalHalfWidth">
            <summary>
            Specifies that the sequence shall consist of half-width Arabic numbering.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Hebrew1">
            <summary>
            Specifies that the sequence shall consist of Hebrew letters from the set listed below.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.ArabicAlpha">
            <summary>
            Specifies that the sequence shall consist of one or more occurrences of 
            a single character int the Arabic alphabet from the set listed below. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Hebrew2">
            <summary>
            Specifies that the sequence shall consist of the Hebrew alphabet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.ArabicAbjad">
            <summary>
            Specifies that the sequence shall consist of one or more occurrences of 
            a single ascending Abjad numerall from the set listed below. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.JapaneseCounting">
            <summary>
            Japanese Counting System.
            Specifies that the sequence shall consist of sequential numbers from
            the Japanese counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.JapaneseLegal">
            <summary>
            Japanese Legal Numbering.
            Specifies that the sequence shall consist of sequential numbers from
            the Japanese legal counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.JapaneseDigitalTenThousand">
            <summary>
            Japanese Digital Ten Thousand Counting System.
            Specifies that the sequence shall consist of sequential numbers from
            the Japanese digital the thousand counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.DecimalEnclosedCircle">
            <summary>
            Decimal Numbers Enclosed in a Circle.
            Specifies that the sequence shall consist of sequential numbering enclosed
            in a circle,using the enclosed character.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.LeadingZero">
            <summary>
            Specifies LeadingZero numbering format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Bullet">
            <summary>
            Specifies Bullet numbering format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.DecimalEnclosedFullstop">
            <summary>
            Decimal numbers followed by a period.
            Specifies that the sequence shall consist of decimal numbering followed
            by a period,using the appropriate character,as described below.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.DecimalEnclosedCircleChinese">
            <summary>
            Identical to DecimalEnclosedCircle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.KoreanDigital">
            <summary>
            Korean Digital Counting System.
            Specifies that the sequence shall consist of sequential numbers from
            the Korean digital counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.KoreanCounting">
            <summary>
            Korean Counting System.
            Specifies that the sequence shall consist of sequential numbers from
            the Korean counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.KoreanLegal">
            <summary>
            Korean Legal numbering.
            Specifies that the sequence shall consist of sequential numbers from
            the Korean legal numbering system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.KoreanDigital2">
            <summary>
            Korean Digital Counting System Alternate.
            Specifies that the sequence shall consist of sequential numbers from
            the Korean digital counting system. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.AiueoFullWidth">
            <summary>
            Specifies that the sequence shal consist of one or more occurrences of a single
            full-width katakana character,in the traditonal a-i-u-e-o order.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Aiueo">
            <summary>
            <para>Specifies that the sequence shall consist of one or more occurrences of a single </para>
            <para>half-width katakana character from the set listed below, in the traditional</para>
            <para>a-i-u-e-o order.</para>
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Iroha">
            <summary>
            Specifies that the sequence shall consist of the iroha.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographDigital">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IrohaFullWidth">
            <summary>
            Specifies that the sequence shall consist of the full-width forms of the iroha.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographTraditional">
            <summary>
            Specifies that the sequence shall consist of sequential numerical traditonal ideographs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographZodiac">
            <summary>
             Specifies that the sequence shall consist of sequential numerical zodiac ideographs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographEnclosedCircle">
            <summary>
            Specifies that the sequence shall consist of sequential numerical ideographs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographZodiacTraditional">
            <summary>
            Specifies that the sequence shall consist of sequential traditional zodiac ideographs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.TaiwaneseCounting">
             <summary>
            Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting system.
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.IdeographLegalTraditional">
            <summary>
            Sperifies that the sequence shall consist of sequential numerical traditional legal ideographs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.TaiwaneseCountingThousand">
            <summary>
            Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting thousand system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.TaiwaneseDigital">
            <summary>
            Specifies that the sequence shall consist of sequential numbers from the Taiwanese digital counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.ChineseCounting">
            <summary>
            Specifies that the sequence shall consist of one or more occurrences of
            a single ascending number from the chinese counting system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.ChineseLegalSimplified">
            <summary>
            Specifies that the sequence shall consist of one or more occurrences of
            a single sequential number from the Chiness simplified legal format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.ChineseCountingThousand">
            <summary>
            Specifies that the sequence shall consist of one or more occurrences of
            a single sequential number from the Chiness counting thousand system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.Special">
            <summary>
            IsSpecial numbering format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.None">
            <summary>
            Specifies None numbering format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ListPatternType.CustomType">
            <summary>
            Specifies custom format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin">
            <summary>
            Specify object's horizontal origin 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.Page">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.Column">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.Character">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.LeftMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.RightMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.InnerMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.HorizontalOrigin.OuterMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin">
            <summary>
            Specify vertical origin of the object
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.Margin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.Page">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.Paragraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.Line">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.TopMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.BottomMarginArea">
            <summary>
            
            </summary>        
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.InnerMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.VerticalOrigin.OuterMarginArea">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle">
            <summary>
            Specify object's line style
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle.Simple">
            <summary>
            Single line (of width lineWidth)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle.Double">
            <summary>
            Double lines of equal width
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle.ThickThin">
            <summary>
            Double lines, one thick, one thin
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle.ThinThick">
            <summary>
            Double lines, reverse order
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextBoxLineStyle.Triple">
            <summary>
            Three lines, thin, thick, thin
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification">
            <summary>
            Specifies the tab justification.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Left">
            <summary>
            Left tab.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Centered">
            <summary>
            Centered tab.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Right">
            <summary>
            Right tab.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Decimal">
            <summary>
            Decimal tab.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Bar">
            <summary>
            Bar.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.List">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabJustification.Clear">
            <summary>
            Clears any tab stop in this position.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader">
            <summary>
            Specifies Tab leader.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.NoLeader">
            <summary>
            No leader.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.Dotted">
            <summary>
            Dotted leader.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.Hyphenated">
            <summary>
            Hyphenated leader.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.Single">
            <summary>
            Single line leader. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.Heavy">
            <summary>
            Heavy line leader.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabLeader.MiddleDot">
            <summary>
            The leader line is made up from middle-dots.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.TabRelativeToPosition">
            <summary>
            Specifies the possible extents which can be used to calculate the absolute positioning of the positional tab character.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabRelativeToPosition.Indent">
            <summary>
            Specifies that the absolute positioning of the tab shall be relative to the indents.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabRelativeToPosition.Margin">
            <summary>
            Specifies that the absolute positioning of the tab shall be relative to the margins.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TabRelativeToPosition.Default">
            <summary>
            Defaults to <see cref="F:Spire.Xls.Core.Converter.General.Word.Documents.TabRelativeToPosition.Indent"/>
            </summary>
            <remarks>This default is AW specific, it is not defined in open xml specification.</remarks>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.BreakType">
            <summary>
            Document's break type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.BreakType.PageBreak">
            <summary>
            Page break type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.BreakType.ColumnBreak">
            <summary>
            Column break type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.BreakType.LineBreak">
            <summary>
            Line break type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.LineBreakClear.None">
            <summary>
            Restart On NextLine.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.LineBreakClear.Left">
            <summary>
            Restart In Next TextRegion Unblocked on the Left.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.LineBreakClear.Right">
            <summary>
            Restart In Next TextRegion Unblocked on the Right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.LineBreakClear.All">
            <summary>
            Restart On Next Full Line.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection">
            <summary>
            Defines the direction of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.TopToBottom">
            <summary>
            Specifies that text in the parent object shall flow from left to right horizontally,
            then top to bottom vertically on the page.
            This means that horizontal lines are filled before the text expands vertically.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.RightToLeft">
            <summary>
            Specifies that text in the parent object shall flow from right to left horizontally, 
            then top to bottom vertically on the page.
            This means that horizontal lines are filled before the text expands vertically.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.LeftToRightRotated">
            <summary>
            Specifies that text in the parent object shall flow from top to bottom vertically,
            then left to right horizontally on the page.
            This means that horizontal lines are filled before the text expands vertically.
            This flow is also rotated such that all text is rotated 90 degrees when displayed on a page.
            </summary>      
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.LeftToRight">
            <summary>
            Specifies that text in the parent object shall flow from bottom to top vertically,
            then from left to right horizontally on the page.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.TopToBottomRotated">
            <summary>
            Specifies that text in the parent object shall flow from left to right horizontally,
            then top to bottom vertically on the page.
            This means that horizontal lines are filled before the text expands vertically.
            This flow is also rotated such that any East Asian text shall be rotated 270 degrees when displayed on a page.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.TextDirection.RightToLeftRotated">
            <summary>
            Specifies that text in the parent object shall flow from top to bottom vertically, 
            then right to left horizontally on the page.
            This means that horizontal lines are filled before the text expands vertically.
            This flow is also rotated such that all text is rotated 90 degrees when displayed on a page.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.OddRowBanding">
            <summary>
            Banded Row Conditional Formatting. the tag "band1Horz".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.OddColumnBanding">
            <summary>
            Banded Column Conditional Formatting. the tag "band1Vert".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.EvenRowBanding">
            <summary>
            Even Row Stripe Conditional Formatting. the tag "band2Horz".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.EvenColumnBanding">
            <summary>
            Even Column Stripe Conditional Formatting. the tag "band2Vert".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.FirstColumn">
            <summary>
            First Column Conditional Formatting. the tag "firstCol".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.FirstRow">
            <summary>
            First Row Conditional Formatting. the tag "firstRow".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.LastColumn">
            <summary>
            Last table column formatting. the tag "lastCol".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.LastRow">
            <summary>
            Last table row formatting. the tag "lastRow".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.FirstRowLastCell">
            <summary>
            Top right table cell formatting. the tag "neCell".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.FirstRowFirstCell">
            <summary>
            Top left table cell formatting. the tag "nwCell".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.LastRowLastCell">
            <summary>
            Bottom right table cell formatting. the tag "seCell".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.LastRowFirstCell">
            <summary>
            Bottom left table cell formatting. the tag "swCell".
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ConditionalFormattingCode.WholeTable">
            <summary>
            Whole table formatting. the tag "wholeTable".
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType">
            <summary>
            defines the types of OLE object
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.Undefined">
            <summary>
            Type is not defined
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.AdobeAcrobatDocument">
            <summary>
            Adobe Acrobat Document. File has ".pdf" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.BitmapImage">
            <summary>
            Bitmap Image. File has ".png" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.MediaClip">
            <summary>
            Media Clip
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.Equation">
            <summary>
            Equation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.GraphChart">
            <summary>
            Graph Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.Excel_97_2003_Worksheet">
            <summary>
            Excel 97-2003 Worksheet. File has ".xls" extension
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.ExcelBinaryWorksheet">
            <summary>
            Excel Binary Worksheet. File has ".xlsb" extension
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.ExcelChart">
            <summary>
            Excel chart. File has ".xls" extension
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.ExcelMacroWorksheet">
            <summary>   
            Excel Macro-Enabled Worksheet. File has ".xlsm" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.ExcelWorksheet">
            <summary>
            Excel Worksheet. File has ".xlsx" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPoint_97_2003_Presentation">
            <summary>
            PowerPoint 97-2003 Presentation. File has ".ppt" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPoint_97_2003_Slide">
            <summary>
            PowerPoint 97-2003 Slide. File has ".sld" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPointMacroPresentation">
            <summary>
            PowerPoint Macro-Enabled Presentation. File has ".pptm" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPointMacroSlide">
            <summary>
            PowerPoint Macro-Enabled Slide. File has ".sldm" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPointPresentation">
            <summary>
            PowerPoint Presentation. File has ".pptx" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.PowerPointSlide">
            <summary>
            PowerPoint Slide. File has ".sldx" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.Word_97_2003_Document">
            <summary>
            Word 97-2003 Document. File has ".doc" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.WordDocument">
            <summary>
            Word Document. File has ".docx" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.WordMacroDocument">
            <summary>
            Word Macro-Enabled Document. File has ".docm" extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.VisioDrawing">
            <summary>
            Visio Deawing
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.MIDISequence">
            <summary>
            MIDI Sequence
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenDocumentPresentation">
            <summary>
            OpenDocument Presentation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenDocumentSpreadsheet">
            <summary>
            OpenDocument Spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenDocumentText">
            <summary>
            OpenDocument Text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenOfficeSpreadsheet1_1">
            <summary>
            OpenOffice.org 1.1 Spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenOfficeText_1_1">
            <summary>
            OpenOffice.org 1.1 Text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.Package">
            <summary>
            Package
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.VideoClip">
            <summary>
            Video Clip
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.WaveSound">
            <summary>
            Wave Sound
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.WordPadDocument">
            <summary>
            WordPad Document
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenOfficeSpreadsheet">
            <summary>
            OpenOffice spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.OpenOfficeText">
            <summary>
            OpenOffice Text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.VisioDrawing_2013">
            <summary>
            Visio Deawing for visio 2013.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.WordPicture">
            <summary>
            word picture
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.OleObjectType.MathType">
            <summary>
            Equation DSMT4
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.ImageType">
            <summary>
            Specifies the image type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ImageType.Metafile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ImageType.Bitmap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ImageType.Xaml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.ImageType.DrawingGroup">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.LigatureType">
            <summary>
            Specifies the ligature type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.NumberFormType">
            <summary>
            Specifies the number form type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.NumberSpaceType">
            <summary>
            Specifies the number spacing type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.StylisticSetType">
            <summary>
            Specifies the stylistic set type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.FontTypeHint">
            <summary>
            Defines the FontTypeHint enumeration.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.FontTypeHint.Default">
            <summary>
            High ANSI Font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.FontTypeHint.EastAsia">
            <summary>
            East Asian Font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.FontTypeHint.ComplexScript">
            <summary>
            Complex Script Font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.NoTabForInd">
            <summary>
              Don't add automatic tab stop for hanging indent.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.NoSpaceRaiseLower">
            <summary>
            Don't add extra space for raised/lowered characters.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.MapPrintTextColor">
            <summary>
             Print colors as black on noncolor printers.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.WrapTrailSpaces">
            <summary>
             Wrap trailing spaces to next line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.NoColumnBalance">
            <summary>
            Don't balance columns for continuous section starts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ConvMailMergeEsc">
            <summary>
             Treat \" as "" in mail merge data sources.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SuppressSpBfAfterPgBrk">
            <summary>
             Suppress Space Before after a hard page or column break.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SuppressTopSpacing">
            <summary>
             Suppress extra line spacing at top of page.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.OrigWordTableRules">
            <summary>
             Combine table borders like Word 5.x for the Macintosh.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.TruncDxaExpand">
            <summary>
             Truncate font height.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ShowBreaksInFrames">
            <summary>
             Show hard page or column breaks in frames.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SwapBordersFacingPgs">
            <summary>
             Swap left and right borders on odd facing pages.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.LeaveBackslashAlone">
            <summary>
            Convert backslash characters into yen signs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ExpShRtn">
            <summary>
             Don't expand character spaces on the line ending Shift+Return.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontULTrlSpc">
            <summary>
              Draw underline on trailing spaces.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontBlnSbDbWid">
            <summary>
             Balance SBCS characters and DBCS characters.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SuppressTopSpacingMac5">
            <summary>
            Suppress extra line spacing at top of page like Word 5.x for the Macintosh.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.F2ptExtLeadingOnly">
            <summary>
            Specifies whether line spacing emulates WordPerfect 5.x line spacing
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.PrintBodyBeforeHdr">
            <summary>
            Print body text before header/footer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.NoExtLeading">
            <summary>
            Don't add leading (extra space) between rows of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontMakeSpaceForUL">
            <summary>
            Add space for underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.MWSmallCaps">
            <summary>
            Use larger small caps like Word 5.x for the Macintosh.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ExtraAfter">
            <summary>
            Suppress extra line spacing like WordPerfect 5.x.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.TruncFontHeight">
            <summary>
            Truncate font height.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SubOnSize">
            <summary>
            Substitute fonts based on font size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.PrintMet">
            <summary>
             Use printer metrics to lay out document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.WW6BorderRules">
            <summary>
            Use Word 6.x/95 border rules.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ExactOnTop">
            <summary>
            Don't center "exact line height" lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.WPSpace">
            <summary>
            Set the width of a space like WordPerfect 5.x.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.WPJust">
            <summary>
            Do full justification like WordPerfect 6.x for Windows.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.LineWrapLikeWord6">
            <summary>
            Line wrap like Word 6.0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SpLayoutLikeWW8">
            <summary>
            Lay out autoshapes like Word 97.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.FtnLayoutLikeWW8">
            <summary>
            Lay out footnotes like Word 6.x/95/97.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontUseHTMLParagraphAutoSpacing">
            <summary>
             Don't use HTML paragraph auto spacing.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontAdjustLineHeightInTable">
            <summary>
              Adjust line height to grid height in the table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ForgetLastTabAlign">
            <summary>
            Forget last tab alignment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UseAutospaceForFullWidthAlpha">
            <summary>
            Specifies whether to emulate Word for Windows 95 full-width character spacing
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.AlignTablesRowByRow">
            <summary>
            Slign table rows independently.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.LayoutRawTableWidth">
            <summary>
            Lay out tables with raw width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.LayoutTableRowsApart">
            <summary>
            Allow table rows to lay out apart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UseWord97LineBreakingRules">
            <summary>
            Use Word 97 line breaking rules for Asian text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontBreakWrappedTables">
            <summary>
             Don't break wrapped tables across pages.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontSnapToGridInCell">
            <summary>
            Don't snap text to grid inside table with inline objects.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontAllowFieldEndSelect">
            <summary>
            Select entire field with first or last character.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.ApplyBreakingRules">
            <summary>
            Use line-breaking rules.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontWrapTextWithPunct">
            <summary>
             Don't allow hanging punctuation with character grid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontUseAsianBreakRules">
            <summary>
             Don't use Asian rules for line breaks with character grid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UseWord2002TableStyleRules">
            <summary>
            Use Word 2002 table style rules.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.GrowAutoFit">
            <summary>
            Allow tables to extend into margins.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UseNormalStyleForList">
            <summary>
             Use the Normal style instead of the List Paragraph style for bulleted or
              numbered lists.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontUseIndentAsNumberingTabStop">
            <summary>
             Do not use hanging indent as tab stop for bullets and numbering.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.FELineBreak11">
            <summary>
            Use Word 2003 hanging-punctuation rules in Asian langauges.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.AllowSpaceOfSameStyleInTable">
            <summary>
            Allow space between paragraphs of the same style in a table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.WW11IndentRules">
            <summary>
            Use Word 2003 indent rules for text next to wrapped objects.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontAutofitConstrainedTables">
            <summary>
            Do not autofit tables next to wrapped objects.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.AutofitLikeWW11">
            <summary>
            Use Microsoft Office Word 2003 table autofit rules.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UnderlineTabInNumList">
            <summary>
            Underline the tab character between the number and the text in numbered lists.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.HangulWidthLikeWW11">
            <summary>
            Do not use proportional width for Korean characters.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.SplitPgBreakAndParaMark">
            <summary>
            Split apart page break and paragraph mark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontVertAlignCellWithSp">
            <summary>
            Specifies whether to not vertically align cells containing floating objects
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontBreakConstrainedForcedTables">
            <summary>
            Specifies whether to not break table rows around floating tables
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.DontVertAlignInTxbx">
            <summary>
            Specifies whether to ignore vertical alignment in text boxes
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.Word11KerningPairs">
            <summary>
            Specifies whether to use ANSI kerning pairs from fonts instead of the Unicode kerning pair info
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.CachedColBalance">
            <summary>
            Specifies whether to use cached paragraph information for column balancing
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.overrideTableStyleFontSizeAndJustification">
            <summary>
            specifies whether to apply the additional preceding rules when determining the font size and justification of text within tables.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.enableOpenTypeFeatures">
            <summary>
            specifies whether the preceding features are to be used when displaying the font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.doNotFlipMirrorIndents">
            <summary>
            specifies whether to swap indentation values when displaying paragraphs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.differentiateMultirowTableHeader">
            <summary>
            conditional formatting of table row headers does apply separately to multi-row table headers 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.CompatibilityOptions.UseFELayout">
            <summary>
            Specifies that applications shall not bypass code relating to the layout of East Asian and/or Complex Script characters.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.DisplacedByCustomXml">
            <summary>
            Specifies that the parent annotation's placement shall be directly linked with the location
            of the physical presentation of a custom XML element in the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DisplacedByCustomXml.Next">
            <summary>
            Displaced by Next Custom XML Markup Tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DisplacedByCustomXml.Prev">
            <summary>
            Displaced by Previous Custom XML Markup Tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.DisplacedByCustomXml.None">
            <summary>
            Defult
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup">
            <summary>
            This simple type specifies the set of possible aliases (or editing groups) which can be used as aliases to
            determine if the current user shall be allowed to edit a single range defined by a range permission with 
            in a document. This mechanism simply provides a set of predefined editing groups which can be associated 
            with accounts by applications in any desired manner.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.None">
            <summary>
            No users.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Current">
            <summary>
            The current user.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Editors">
            <summary>
            Editors of the documnet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Owners">
            <summary>
            Owners of the documnet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Contributors">
            <summary>
            Contributors to the documnet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Administrators">
            <summary>
            Members of the administrator group on the computer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Documents.EditingGroup.Everyone">
            <summary>
            All users.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Documents.ColorUtil.FromHtml(System.String)">
            <summary>
            Translates an HTML color representation to a GDI+ System.Drawing.Color structure.
            </summary>
            <param name="htmlColor">The string representation of the Html color to translate.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.CollectionEx.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.CollectionEx.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.CollectionEx.Clear">
            <summary>
             Removes all items from the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">the index.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value">the item.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Clear">
            <summary>
            Removes all items from the IList.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="value">The Item.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified index.
            </summary>
            <param name="index">the index.</param>
            <param name="value">the item.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="value">the item.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.RemoveAt(System.Int32)">
            <summary>
            Removes the IList item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentInnerList.OnStateChange">
            <summary>
            Listening status change.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection">
            <summary>
            Represents a collection of DLS entities.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Spire.Xls.Core.Converter.General.Word.DocumentObject"/> at the specified index.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.FirstItem">
            <summary>
            Gets the first item.
            </summary>
            <value>The first item.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.LastItem">
            <summary>
            Gets the last item.
            </summary>
            <value>The last item.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Add(Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">the document object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Clear">
            <summary>
            Removes all items
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Contains(Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            Determines whether a entity is in the collection.
            </summary>
            <param name="entity">the document object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.IndexOf(Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            Returns the zero-based index of the specified entity.
            </summary>
            <param name="entity">the document object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Insert(System.Int32,Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            Inserts a entity into the collection at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="entity">the document object.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.Remove(Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            Removes the document object from the collection.
            </summary>
            <param name="entity">the document object.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the document object at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.GetFirstItem(Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType)">
            <summary>
            Gets the first item.
            </summary>
            <param name="type">The type.</param>
            <returns>The documentobject.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.GetLastItem(Spire.Xls.Core.Converter.General.Word.Documents.DocumentObjectType)">
            <summary>
            Gets the last item.
            </summary>
            <param name="type">The type.</param>
            <returns>The documentobject.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsType">
            <summary>
            Specifies Item DocumentObject type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItems">
            <summary>
            Eventhandler for DocumentObjectCollection class.
            </summary>
            <param name="type">DocumentObject type.</param>
            <param name="entity">The DocumentObject.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsHandlerList.Add(Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItems)">
            <summary>
            Adds the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsHandlerList.Remove(Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItems)">
            <summary>
            Removes the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsHandlerList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsHandlerList.Send(Spire.Xls.Core.Converter.General.Word.Collections.DocumentObjectCollection.ChangeItemsType,Spire.Xls.Core.Converter.General.Word.DocumentObject)">
            <summary>
            Sends the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="entity">the document object.</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Collections.ParagraphItemCollection">
            <summary>
            Represents a collection for <see cref="!:Spire.Xls.Core.Converter.General.Word.Paragraph"/> child items.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Collections.ParagraphItemCollection.#ctor(Spire.Xls.Core.Converter.General.Word.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Collections.ParagraphItemCollection"/> class.
            </summary>
            <param name="doc">The doc.</param>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.IsDefault">
            <summary>
            Gets a value indicating whether format is default.
            </summary>
            <value><c>true</c> if format is default; otherwise,<c>false</c>.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase"/> class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.#ctor(Spire.Xls.Core.Converter.General.Word.Interface.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase"/> class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.#ctor(Spire.Xls.Core.Converter.General.Word.Interface.IDocument,Spire.Xls.Core.Converter.General.Word.DocumentObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase"/> class.
            </summary>
            <param name="doc">The doc.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.#ctor(Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="parentKey">The parent key.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.#ctor(Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase,System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="parent">The parent.</param>
            <param name="parentKey">The parent key.</param>
            <param name="parentOffset">The parent offset.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.HasKey(System.Int32)">
            <summary>
            Checks if Key exists.
            </summary>
            <param name="key">The key.</param>
            <returns>
            if the specified key has key, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.ClearFormatting">
            <summary>
            Clears the formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.GetKey(System.Int32)">
            <summary>
            Gets the key.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.FormatBase.GetByIndex(System.Int32)">
            <summary>
            Get the object by the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.Font">
            <summary>
            Gets or sets  font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontName">
            <summary>
            Returns or sets font name
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontSize">
            <summary>
            Returns or sets font size
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.Bold">
            <summary>
            Returns or sets bold style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.Italic">
            <summary>
            Returns or sets italic style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.IsStrikeout">
            <summary>
            Returns or sets strikeout style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.DoubleStrike">
            <summary>
            Returns or sets double strikeout style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.UnderlineStyle">
            <summary>
            Returns or sets underline style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.UnderlineColor">
            add underline color tiger 2015-01-04
             <summary>
             Returns or sets underline color
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.Kerning">
            add kern tiger 2015-01-04
             <summary>
             Returns or sets kern
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.Bidi">
            <summary>
            Returns or sets right-to-left property of text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.BoldBidi">
            <summary>
            Returns or sets bold property for right-to-left text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.HighlightColor">
            <summary>
            Gets or sets highlight color of text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontNameAscii">
            <summary>
            Gets or setsthe font used for Latin text (characters with character codes from 0 through 127). 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontNameBidi">
            <summary>
            Gets or sets font name for right-to-left text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontNameFarEast">
            <summary>
            Gets or sets East Asian font name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontNameNonFarEast">
            <summary>
            Gets or sets font used for characters with character codes from 128 through 255.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.FontTypeHint">
            <summary>
            Gets or sets the font type hint.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.LocaleIdASCII">
            <summary>
            Gets or sets the ASCII locale id .
            </summary>
            <value>The ASCII locale id .</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.LocaleIdFarEast">
            <summary>
            Gets or sets the far east locale id .
            </summary>
            <value>The far east locale id .</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat.#ctor(Spire.Xls.Core.Converter.General.Word.Interface.IDocument)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.ChildObjects">
            <summary>
            Gets the child objects of the entity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.DocumentObjectType">
            <summary>
            Gets the type of the document object.
            </summary>
            <value>The type of the document object.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.Owner">
            <summary>
            Gets the owner of this entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.ParentObject">
            <summary>
            Get the parent object of the entity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.PreviousSibling">
            <summary>
            Gets the previous sibling.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentObject.NextSibling">
            <summary>
            Gets the next sibling.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.DocumentObject.AppendChild(Spire.Xls.Core.Converter.General.Word.Interface.IDocumentObject)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.OwnerHolder.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.OwnerHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.OwnerHolder"/> class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.OwnerHolder.#ctor(Spire.Xls.Core.Converter.General.Word.Document,Spire.Xls.Core.Converter.General.Word.OwnerHolder)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.OwnerHolder"/> class.
            </summary>
            <param name="doc">The doc.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Settings">
            <summary>
            Class represents settings of the document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Settings.CompatibilityMode">
            <summary>
            Gets or sets a value whether compatibility mode of the document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Settings.ProtectionType">
            <summary>
            Gets or sets the type of protection of the document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Settings.DocEnforceDocProt">
            <summary>
            Gets and sets whether to enforce the document protection .
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.CompatibilitySettings.SetDefaultTrueValue">
            <summary>
            set default true value for CompatibilityOptions;
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.FontInfo.Clone">
            <summary>
            the Clone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.DocumentBase.#ctor(Spire.Xls.Core.Converter.General.Word.Document,Spire.Xls.Core.Converter.General.Word.DocumentObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.DocumentBase"/> class.
            </summary>
            <param name="doc">The doc.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DocumentContainer.Count">
            <summary>
            Gets count of child object.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Document.DocumentObjectType">
            <summary>
            Gets the type of the document object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Document.ChildObjects">
            <summary>
            Gets the child entities.
            </summary>
            <value>The child entities.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Document.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Document.Dispose">
            <summary>
            Prerforms application-defined tasks associated with freeing,releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Document.CreateParagraphItem(Spire.Xls.Core.Converter.General.Word.Documents.ParagraphItemType)">
            <summary>
            Creates new paragraph item instance.
            </summary>
            <param name="itemType">Paragraph item type</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ThemeFontLanguage.BidiLanguageId">
            <summary>
            Gets/Sets the language id of complex script theme font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ThemeFontLanguage.EastAsiaLanguageId">
            <summary>
            Gets/Sets the language id of east asian theme font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ThemeFontLanguage.AsciiLanguageId">
            <summary>
            Gets/Sets the language id of ascii theme font.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.DefaultFontName">
            <summary>
            default font name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DefaultFontName.AsciiFontName">
            <summary>
            Gets/Sets the ascii font name.Specifies a font which shall be used to format all charachters 
            in the Unicode range (\u000-u007F) within the parent run.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DefaultFontName.EastAsiaFontName">
            <summary>
            Gets/Sets the east asia font name.Specifies a font which shall be used to format all characters
            in an East Asian Unicode range within the parent run. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DefaultFontName.HAnsiFontName">
            <summary>
            Gets/Sets the high ansi font name.Specifies a font which shall be used to format all characters 
            in a Unicode range within the parent run.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.DefaultFontName.CsFontName">
            <summary>
            Gets/Sets the complex script font name.Specifies a font which shall be used to format all characters 
            in a complex script Unicode range within the parent run.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Themes">
            <summary>
            The theme class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Themes.ColorScheme">
            <summary>
            Gets color scheme.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Themes.MinorFont">
            <summary>
            Gets minor font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Themes.MajorFont">
            <summary>
            Gets/Sets major font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Themes.XmlNodeStream">
            <summary>
            Gets/Sets xml node stream.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Themes.LanguageIdList">
            <summary>
            Gets language id list.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Themes.#ctor">
            <summary>
            Initialize class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Themes.LanguageIdToScriptString(System.Int16)">
            <summary>
            Converter language id to script string.
            </summary>
            <param name="languageId">the language id.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.FontScheme">
            <summary>
            Class fontScheme.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.FontScheme.Name">
            <summary>
            Gets/Sets name value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.FontScheme.Type">
            <summary>
            Gets/Sets type value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.FontScheme.Script">
            <summary>
            Gets/Sets script value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.FontScheme.Typeface">
            <summary>
            Gets/Sets typeface value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.FontScheme.TypefaceLenght">
            <summary>
            Get typeface string lentht.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ThemeColorTypes">
            <summary>
            theme color type enum.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ColorScheme">
            <summary>
            Class colorScheme.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorScheme.Color">
            <summary>
            Gets or sets color object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorScheme.ColorName">
            <summary>
            Gets/Sets color name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorScheme.ColorHex">
            <summary>
            Gets/Sets color hex string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorScheme.Name">
            <summary>
            Gets/Sets theme color name;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorScheme.Type">
            <summary>
            Gets/Set object type.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.ColorScheme.SetColor(System.Drawing.Color)">
            <summary>
            set color.
            </summary>
            <param name="clr">The Color</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.ColorScheme.SetColorHex(System.String)">
            <summary>
            Set color hex.
            </summary>
            <param name="hex"></param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.ColorScheme.GetHexColor(System.String)">
            <summary>
            Get hex color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.ColorScheme.GetHtmlColor(System.String)">
            <summary>
            Gets the HTML color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorHSL.H">
            <summary>
            The hue.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorHSL.S">
            <summary>
            The saturation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.ColorHSL.L">
            <summary>
            The luminance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.Latex2MathML.Internal.Util.ObjectDumper.makeIndent(System.Int32)">
            JAVA TO C# CONVERTER WARNING: The .NET Type.FullName property will not always yield results identical to the Java Class.getName method:
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.#ctor(Spire.Xls.Core.Converter.General.Word.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath"/> class.
            </summary>
            <param name="doc">The document.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.#ctor(Spire.Xls.Core.Converter.General.Word.Document,Spire.Xls.Core.Converter.General.Word.Fields.OMath.MathObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath"/> class.
            </summary>
            <param name="doc">The document.</param>
            <param name="officeMathElement">The office math element.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.#ctor(Spire.Xls.Core.Converter.General.Word.Document,Spire.Xls.Core.Converter.General.Word.Fields.OMath.MathObject,Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath"/> class.
            </summary>
            <param name="doc">The document.</param>
            <param name="officeMathElement">The office math element.</param>
            <param name="characterFormat">The character format.</param>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.DocumentObjectType">
            <summary>
            Gets the type of the document object.
            </summary>
            <value>The type of the document object.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.ParentParagraph">
            <summary>
            Gets the parent paragraph.
            </summary>
            <value>The parent paragraph.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.XslTransform(System.String,System.String)">
            <summary>
            XSLs the transform.
            </summary>
            <param name="inputXmlConent">The input XML conent.</param>
            <param name="inuptXslContent">Content of the inupt XSL.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.CheckAndAddMMLNamespace(System.String)">
            <summary>
            Checks the and add MML namespace.
            </summary>
            <param name="inputXmlConent">The input XML conent.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.XslTransform(System.String,System.IO.Stream)">
            <summary>
            XSLs the transform.
            </summary>
            <param name="inputXmlConent">The input XML conent.</param>
            <param name="inuptXslContent">Content of the inupt XSL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.MML2OMML(System.String)">
            <summary>
            Mml to omml.
            </summary>
            <param name="mmlCode">The MML code.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.OMML2MML(System.String)">
            <summary>
            Omml to mml.
            </summary>
            <param name="ommlCode">The OMML code.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.LatexToMathML(System.String)">
            <summary>
            Latexes to mathML.
            </summary>
            <param name="latexText">The latex text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.FromMathMLCode(System.String)">
            <summary>
            Froms the mathML code.
            </summary>
            <param name="mathMLCode">The Math ML code.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.FromLatexMathCode(System.String)">
            <summary>
            Froms the latex math code.
            </summary>
            <param name="latexMathCode">The latex math code.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.CreateDOMOutputOptions">
            <summary>
            Creates the DOM output options.
            </summary>
            <returns>DOMOutputOptions.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.OMath.OfficeMath.ToMathMLCode">
            <summary>
            To the mathML code.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.ChildObjects">
            <summary>
            Gets the child objects of the entity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.OwnerParagraph">
            <summary>
            Gets owner paragraph.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.StyleName">
            <summary>
            Gets the style name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.IsAddForIfField">
            <summary>
            a flag checked whether the item is added for IF field layout;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.CharacterFormat">
            <summary>
            Gets the character format.
            </summary>
            <value>The paragraph item character format.</value>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.ParagraphBase.ApplyCharacterFormat(Spire.Xls.Core.Converter.General.Word.Formatting.CharacterFormat)">
            <summary>
            Sets the character format.
            </summary>
            <param name="charFormat">The character format.</param>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.IsPTab">
            <summary>
            Gets or sets a value whether is PTab.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.PTabAlignment">
            <summary>
            Gets or sets a value whether is PTab.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.OwnerEmptyParagraph">
            <summary>
            Indicates this text range is a temp and blank text range of an empty paragraph
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.DocumentObjectType">
            <summary>
            Gets the type of the document object.
            </summary>
            <value>The type of the document object.</value>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.Text">
            <summary>
            Returns or sets text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.IsAddForEmptyPara">
            <summary>
            if the text range is added for an empty paragraph ,return true; otherwise,false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.IsAddForBreak">
            <summary>
            if the text range is added for Break ,return true; otherwise,false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.IsFieldToTextRange">
            <summary>
            a flag specified that whehter the textrange is converted from a field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.FieldOwner">
            <summary>
            get the owner of the field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.CharacterFormat">
            <summary>
            Gets the character format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.IsSplitable">
            <summary>
            Indicates whether current TextRange can be split
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.#ctor(Spire.Xls.Core.Converter.General.Word.Interface.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Converter.General.Word.Fields.TextRange"/> class.
            </summary>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Fields.TextRange.GetWhiteSpaceCompressWidth(System.Boolean)">
            <summary>
            get the total width of punctuations in the textrange.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Utilities.Text.Separator.None">
            <summary>
            Is not a separator
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Utilities.Text.Separator.Separator">
            <summary>
            Is a separator, but can not be the first char of a new line
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Utilities.Text.Separator.LineBreakSeparator">
            <summary>
            Is a separator which can be the first char of a new line
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Utilities.Text.Separator.InitialQuotePunctuation">
            <summary>
            Indicates that the character is an opening or initial quotation mark.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Utilities.Text.Separator.G7FFLetter">
            <summary>
            Letter, whoes code > 0x7ff
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.Layout.IStringWidgetText.GetVisualText">
            <summary>
            Gets visual text string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Layout.ILayoutInfo.IsBidi">
            <summary>
            Gets or set a value indicating whether this instance is bidi(RTL).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Layout.LayoutInfo.IsBidi">
            <summary>
            Gets or set a value indicating whether this instance is bidi(RTL).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.Layout.TabLeader.MiddleDot">
            <summary>
            The leader line is made up from middle-dots.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.FontFactory">
            <summary>
            Create font object
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.FontFactory.CreateFont(System.String,System.Single)">
            <summary>
            Initializes a new Font using a specified size and style.
            </summary>
            <param name="familyName">A string representation of the FontFamily for the new Font.</param>
            <param name="emSize">The em-size, in points, of the new font.</param>
            <returns>The new font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.FontFactory.CreateFont(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Initializes a new Font using a specified size and style.
            </summary>
            <param name="familyName">A string representation of the FontFamily for the new Font.</param>
            <param name="emSize">The em-size, in points, of the new font.</param>
            <param name="style">The System.Drawing.FontStyle of the new font.</param>
            <returns>The new font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.FontFactory.CheckUnderlineOrStrikeout(System.Drawing.FontStyle,System.Drawing.FontStyle)">
            <summary>
            Checks the underline or strikeout styles.
            </summary>
            <param name="oldFontStyle">The old font style.</param>
            <param name="newFontStyle">The new font sytel.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.MathMethods.CompareFloat(System.Single,System.Single,System.Single)">
            <summary>
            Compares the floating number.
            </summary>
            <param name="val1">The value1.</param>
            <param name="val2">The value2.</param>
            <param name="accuracy">The accuracy.</param>
            <returns><c>return 0,val1 equal val2;return 1,val1 greater than val2;return -1,val1 less than val2;</c></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.MathMethods.CompareDouble(System.Double,System.Double,System.Double)">
            <summary>
            Compares the double number.
            </summary>
            <param name="val1">The value1.</param>
            <param name="val2">The value2.</param>
            <param name="accuracy">The accuracy.</param>
            <returns><c>return 0,val1 equal val2;return 1,val1 greater than val2;return -1,val1 less than val2;</c></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.MathMethods.FloatPrecision(System.Single,System.Byte)">
            <summary>
            Floating point precision.
            </summary>
            <param name="val">The value.</param>
            <param name="precision">The number of decimal places, 
            up to 6 decimal places, with a minimum of 0 decimal places.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.General.Word.MathMethods.KeepTowDecimalPlaces(System.Single)">
            <summary>
            Keeps tow decimal places.
            </summary>
            <param name="val">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Utf32EnumeratorExtended.CurrentInt">
            <summary>
            Same as Current, but it returns int rather than object to avoid boxing penalty.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.General.Word.Utf32EnumeratorExtended.Offset">
            <summary>
            Gets the index of the current character in the source string.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.SpecialCharacters.SpecialBreakCodeArr">
            <summary>
            Array of break char which text could be contains
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.FileFormat">
            <summary>
            Type of file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Doc">
            <summary>
            Microsoft Word 97 - 2003 Binary Document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dot">
            <summary>
            Microsoft Word 97 - 2003 Binary Document or Template.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docx">
            <summary>
            Microsoft Word 2007 Document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docx2010">
            <summary>
            Microsoft Word 2010 Document
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docx2013">
            <summary>
            Microsoft Word 2013 Document
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotx">
            <summary>
            Microsoft Word 2007 Template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotx2010">
            <summary>
            Microsoft Word 2010 Template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotx2013">
            <summary>
            Microsoft Word 2013 Template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docm">
            <summary>
            Microsoft Word 2007 macro enabled file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docm2010">
            <summary>
            Microsoft Word 2010 macro enabled file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Docm2013">
            <summary>
             Microsoft Word 2013 macro enabled file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotm">
            <summary>
            Microsoft Word 2007 macro enabled template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotm2010">
            <summary>
            Microsoft Word 2010 macro enabled template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Dotm2013">
            <summary>
            Microsoft Word 2013 macro enabled template format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.OOXML">
            <summary>
            Office Open Xml
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.WordML">
            <summary>
            Word xml format for for word 2003
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.WordXml">
            <summary>
            Word xml format for word 2007-2013
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Odt">
            <summary>
            OpenDocument format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Ott">
             <summary>
            OpenDocument Template format
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.PDF">
            <summary>
            PDF format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Rtf">
            <summary>
            Rtf format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.SVG">
            <summary>
            Scalable vector graphics format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Xml">
            <summary>
            Xml file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Txt">
            <summary>
            Text file format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Html">
            <summary>
            Html format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.XPS">
            <summary>
            XPS format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.EPub">
            <summary>
            EPub format
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.DocPre97">
            <summary>
            The document is in the Word 6 or Word 95 format. Spire.Xls.Core.Converter.General.Word does not currently support loading such documents. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.PostScript">
            <summary>
            PostScript (PS) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.PCL">
            <summary>
            Printer Command Language (PCL) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FileFormat.Auto">
            <summary>
            Instructs Spire.Xls.Core.Converter.General.Word to recognize the format automatically. 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ProtectionType">
            <summary>
            Type of the protection in the document
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ProtectionType.AllowOnlyComments">
            <summary>
            Only modify comments in the document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ProtectionType.AllowOnlyFormFields">
            <summary>
            Only enter data in the form fields in the document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ProtectionType.AllowOnlyReading">
            <summary>
            Only reading are allowed in the document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ProtectionType.AllowOnlyRevisions">
            <summary>
            Only add revision marks to the document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ProtectionType.NoProtection">
            <summary>
            Not protected
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.TextureStyle">
            <summary>
            Style of the Texture
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.TextEffect">
            <summary>
            Animation effect for text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.None">
            <summary>
            specifies no animation.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.LasVegasLights">
            <summary>
            Specifies that this text shall be surrounded by a border consisting of a series of
            colored lights, which constantly change colors in sequence.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.BlinkingBackground">
            <summary>
            Specifies that this text shall be surrounded by a background 
            color which alternates between black and white.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.SparkleText">
            <summary>
            Specifies that this text shall have a background consisting of a random pattern of
            colored lights, which constantly change colors in sequence.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.MarchingBlackAnts">
            <summary>
            Specifies that this text shall be surrounded by an animated black dashed line border.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.MarchingRedAnts">
            <summary>
            Specifies that this text shall be surrounded by an animated red dashed line border.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextEffect.Shimmer">
            <summary>
            Specifies that this text shall be animated by alternating between normal and blurry states.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.OutlineLevel">
            <summary>
            The enum, which defines paragraph format's outline level
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level1">
            <summary>
            Outline level: "Level 1"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level2">
            <summary>
            Outline level: "Level 2"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level3">
            <summary>
            Outline level: "Level 3"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level4">
            <summary>
            Outline level: "Level 4"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level5">
            <summary>
            Outline level: "Level 5"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level6">
            <summary>
            Outline level: "Level 6"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level7">
            <summary>
            Outline level: "Level 7"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level8">
            <summary>
            Outline level: "Level 8"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Level9">
            <summary>
            Outline level: "Level 9"
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.OutlineLevel.Body">
            <summary>
            Outline level: "Body"
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.HorizontalRelation">
            <summary>
            The enum defines the horizontal relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalRelation.Column">
            <summary>
            The "Column" horizontal relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalRelation.Margin">
            <summary>
            The "Margin" horizontal relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalRelation.Page">
            <summary>
            The "Page" horizontal relation
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.VerticalRelation">
            <summary>
            The enum defines the vertical relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalRelation.Margin">
            <summary>
            The "Margin" vertical relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalRelation.Page">
            <summary>
            The "Page" vertical relation
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalRelation.Paragraph">
            <summary>
            The "Paragraph" vertical relation
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.HorizontalPosition">
            <summary>
            Specifies the absolute horizontal position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalPosition.Left">
            <summary>
            The object is aligned to the left of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalPosition.Center">
            <summary>
            The object is centered to the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalPosition.Right">
            <summary>
            The object is aligned to the right of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalPosition.Inside">
            <summary>
            "Inside" horizontal position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.HorizontalPosition.Outside">
            <summary>
            "Outside" horizontal position.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.VerticalPosition">
            <summary>
            Specifies the absolute vertical position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.None">
            <summary>
            No vertical positioning
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.Top">
            <summary>
            "Top" vertical position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.Center">
            <summary>
            "Center" vertical position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.Bottom">
            <summary>
            "Bottom" vertical position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.Inside">
            <summary>
            "Inside" vertical position
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.VerticalPosition.Outside">
            <summary>
            "Outside" vertical position.
            </summary>    
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.LineDashing">
            <summary>
            Line dashing.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.Solid">
            <summary>
            Solid (continuous) pen.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.Dash">
            <summary>
            PS_DASH system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.Dot">
            <summary>
            PS_DOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.DashDot">
            <summary>
            PS_DASHDOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.DashDotDot">
            <summary>
            PS_DASHDOTDOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.DotGEL">
            <summary>
            Square dot style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.DashGEL">
            <summary>
            Dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.LongDashGEL">
            <summary>
            Long dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.DashDotGEL">
            <summary>
            Dash short dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.LongDashDotGEL">
            <summary>
            Long dash short dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LineDashing.LongDashDotDotGEL">
            <summary>
            Long dash short dash short dash.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment">
            <summary>
            Specifies horizontal alignment of a floating shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.None">
            <summary>
            The object is explicitly positioned using position properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.Left">
            <summary>
            The object is aligned to the left of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.Center">
            <summary>
            The object is centered to the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.Right">
            <summary>
            The object is aligned to the right of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.Inside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeHorizontalAlignment.Outside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment">
            <summary>
            Specifies vertical alignment of a floating shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Inline">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.None">
            <summary>
            The object is explicitly positioned using position properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Top">
            <summary>
            The object is aligned to the top of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Center">
            <summary>
            The object is centered relative to the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Bottom">
            <summary>
            The object is aligned to the bottom of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Inside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.ShapeVerticalAlignment.Outside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.TextFormFieldType">
            <summary>
            Specifies the type of a text form field.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextFormFieldType.RegularText">
            <summary>
            Text form field can contain any text. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextFormFieldType.NumberText">
            <summary>
            Text form field can contain only numbers.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.TextFormFieldType.DateText">
            <summary>
            Text for field can contain only a valid date value. 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.FootnoteType">
            <summary>
            Specifies the Type of the FootNote.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FootnoteType.Footnote">
            <summary>
            Specifies object is a footnote. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FootnoteType.Endnote">
            <summary>
            Specifies object is a endnote. 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.LocaleIDs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.af_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sq_AL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.am_ET">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.gsw_FR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_DZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_BH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_EG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_IQ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_JO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_KW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_LB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_LY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_MA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_OM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_QA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_SA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_SY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_TN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_AE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ar_YE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hy_AM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.as_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.az_Cyrl_AZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.az_Latn_AZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ba_RU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.eu_ES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.be_BY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bn_BD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bn_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bs_Cyrl_BA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bs_Latn_BA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bg_BG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.br_FR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.my_MM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ca_ES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.chr_US">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zh_HK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zh_MO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zh_CN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zh_SG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zh_TW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.co_FR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hr_BA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hr_HR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.cs_CZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.da_DK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.prs_AF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.dv_MV">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nl_BE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nl_NL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bin_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.et_EE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_AU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_BZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_CA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_029">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_HK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_ID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_IE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_JM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_MY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_NZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_PH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_SG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_TT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_GB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_US">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.en_ZW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fo_FO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fil_PH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fi_FI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_BE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_CM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_CA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_CD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_CI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_FR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_HT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_LU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_ML">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_MC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_MA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_RE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_SN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_CH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fr_fr_WINDIES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fy_NL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ff_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.gd_GB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.gl_ES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ka_GE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.de_AT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.de_DE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.de_LI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.de_LU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.de_CH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.el_GR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.gn_PY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.gu_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.kl_GL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ha_Latn_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.haw_US">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.he_IL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hi_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hu_HU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ibb_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.is_IS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ig_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.id_ID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.iu_Latn_CA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.iu_Cans_CA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.it_IT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.it_CH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ga_IE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.xh_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.zu_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.kn_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.kr_NG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ks_Deva">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ks_Arab">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.kk_KZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.km_KH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.kok_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ko_KR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ky_KG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.qut_GT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.rw_RW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.lo_LA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.la_Latn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.lv_LV">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.lt_LT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.dsb_DE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.lb_LU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mk_MK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ms_BN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ms_MY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ml_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mt_MT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mni_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mi_NZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mr_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.arn_CL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mn_MN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.mn_Mong_CN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ne_NP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ne_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nb_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nn_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.oc_FR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.or_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.om_Ethi_ET">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pap_AN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ps_AF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.fa_IR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pl_PL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pt_BR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pt_PT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pa_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.pa_PK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.quz_BO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.guz_EC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.guz_PE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ro_RO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ro_MO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.rm_CH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ru_RU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ru_MO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.smn_FI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.smj_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.smj_SE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.se_FI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.se_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.se_SE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sms_FI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sma_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sma_SE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sa_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sr_Cyrl_BA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sr_Cyrl_CS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sr_Latn_BA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sr_Latn_CS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nso_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tn_ZA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sd_Arab_PK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sd_Deva_IN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.si_LK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sk_SK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sl_SI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.so_SO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_AR">
            <summary>
            Spanish (Argentina)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_BO">
            <summary>
            Spanish (Bolivia)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_CL">
            <summary>
            Spanish (Chile)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_CO">
            <summary>
            Spanish (Colombia)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_CR">
            <summary>
            Spanish (Costa Rica)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_DO">
            <summary>
            Spanish (Dominican Republic)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_EC">
            <summary>
            Spanish (Ecuador)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_SV">
            <summary>
            Spanish (El Salvador)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_GT">
            <summary>
            Spanish (Guatemala)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_HN">
            <summary>
            Spanish (Honduras)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_MX">
            <summary>
            Spanish (Mexico)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_NI">
            <summary>
            Spanish (Nicaragua)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_PA">
            <summary>
            Spanish (Panama)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_PY">
            <summary>
            Spanish (Paraguay)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_PE">
            <summary>
            Spanish (Paraguay
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_PR">
            <summary>
            Spanish (Puerto Rico)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_ES">
            <summary>
            Spanish (International Sort)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_ES_tradnl">
            Spanish(Spain ?Traditional Sort)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_US">
            Spanish(United Sates)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_UY">
            Spanish (Uruguay)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.es_VE">
            Spanish (Venezuela)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.st_ZA">
            Sutu
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sw_KE">
            Swahili
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sv_FI">
            Swedish (Finland)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sv_SE">
            Swedish (Sweden)
             <summary>
             
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.syr_SY">
            <summary>
            Syriac
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tg_Cyrl_TJ">
            <summary>
            Tajik
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tzm_Arab_MA">
            <summary>
            Tamazight
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tzm_Latn_DZ">
            <summary>
            Tamazight (Latin)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ta_IN">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tt_RU">
            <summary>
            Tatar
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.te_IN">
            <summary>
            Telugu
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.th_TH">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.bo_CN">
            <summary>
            Tibetan (PRC)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ti_ER">
            <summary>
            Tigrigna (Eritrea)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ti_ET">
            <summary>
            Tigrigna (Ethiopia)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ts_ZA">
            <summary>
            Tsonga
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tr_TR">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.tk_TM">
            <summary>
            Turkmen
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ug_CN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.uk_UA">
            <summary>
            Ukrainian
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.hsb_DE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ur_PK">
            <summary>
            Urdu
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.uz_Cyrl_UZ">
            <summary>
            Uzbek (Cyrillic)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.uz_Latn_UZ">
            <summary>
            Uzbek (Latin)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ve_ZA">
            <summary>
            Venda
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.vi_VN">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.cy_GB">
            <summary>
            Welsh
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.wo_SN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.sah_RU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ii_CN">
            <summary>
            Yi
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.yi_Hebr">
            <summary>
            Yiddish
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.yo_NG">
            <summary>
            Yoruba
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.ja_JP">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.LocaleIDs.nl">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.FtsWidth">
            <summary>
            Specifies preferred width type
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FtsWidth.None">
            <summary>
            No Preffered Width
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FtsWidth.Auto">
            <summary>
            No preferred width is specified.
            The width is derived from other table measurements where a preferred size is specified, 
            as well as from the size of the table contents, and the constraining size of the
            container of the table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FtsWidth.Percentage">
            <summary>
            Preferred table width specified in percentage.
            The preferred width is measured in units of 1/50th of a percent.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FtsWidth.Point">
            <summary>
            The preferred width of the table,indent,cell,cell margin,
            or cell spacing is an absolute width measured in twips.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.FtsWidth.ftsDxaSys">
            <summary>
            The preferred cell spacing is an absoute width measured in twips.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.CharacterSpacing">
            <summary>
            Character Spacing Control enum.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterSpacing.doNotCompress">
            <summary>
            Don't compress punctuation.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterSpacing.compressPunctuation">
            <summary>
            Compress punctuation.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterSpacing.compressPunctuationAndJapaneseKana">
            <summary>
            Compress punctuation and japanese kana.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.Unit">
            <summary>
            Unit conversion between.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterCategory.Ascii">
            <summary>
            Font used for the 0..127 characters.
            </summary>
            <remarks>This value is not used as <see cref="!:RunPr.CharacterCategoryHint"/>,
            may be it's better to create separate enum for character hints.</remarks>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterCategory.FarEast">
            <summary>
            Font used for the East Asian characters.
            Also known as East Asian.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterCategory.ComplexScript">
            <summary>
            Font used for the Complex Script characters.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.General.Word.CharacterCategory.Other">
            <summary>
            Font used for characters that do not fall into any of the above ranges.
            Also known as High ASCII.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.General.Word.ProofState">
            <summary>
            Represents the state of the proofing tools in this documnet:
            clean (no errors found) or dirty (errors present in the document).
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.CellImage.CellImageInfo.#ctor(System.Boolean,Spire.Xls.Core.Converter.Spreadsheet.Cell,System.String)">
            
             @param scale need scale
             @param cell image position
             @param readPictureName must be unique in workbook
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.CellImage.CellImages.AddRead(Spire.Xls.Core.Converter.Spreadsheet.Cell,System.String,System.Boolean)">
            
             @param cell image position
             @param uniquePictureName must be unique in the workbook.
             @param scale if true show completely picture else clip the picture
             @return CellImageInfo
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings">
            <summary>
            Class used for defining constants and namespace for drawings.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ObjectprTag">
            <summary>
            Name of the tag objectPr
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.MoveWithCellsTag">
            <summary>
            Store move with cells value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SizeWithCellsTag">
            <summary>
            Store size with cells value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.DefaultSizeTag">
            <summary>
            Store the default size value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.XdrNamespace">
            <summary>
            Main spreadsheet drawings namespace ('xdr' abbreviation is used in MS Excel documents).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ANamespace">
            <summary>
            Main drawings namespace ('a' abbreviation is used in MS Excel documents).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SvgNamespace">
            <summary>
            Svg drawing namespace.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CdrNamespace">
            <summary>
            Main chartsheet drawings namespace ('cdr' abbreviation is used in MS Excel documents).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.XdrPreffix">
            <summary>
            Prefix used by MS Excel for XdrNamespace definition.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CdrPreffix">
            <summary>
            Prefix used by MS Excel for CdrNamespace definition.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.APreffix">
            <summary>
            Prefix used by MS Excel for ANamespace definition.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.A14Preffix">
            <summary>
            Prefix used by MS Excel for A14Namespace definition.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CameraTool">
            <summary>
            This element specifies the camera tool option in pictures.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CellRange">
            <summary>
            This element specifies the cell range in camera tool option.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CameraToolUri">
            <summary>
            URI string used by MS Excel for camera tool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ASvgPreffix">
            <summary>
            Prefix used by MS Excel for ASvgNamespace definition.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RequiresAttribute">
            <summary>
            Attribute used to denote the requires 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FallbackTag">
            <summary>
            Element specifies the fallback content
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TwoCellAnchorTagName">
            <summary>
            This element specifies a two cell anchor placeholder for a group, a shape,
            or a drawing element. It moves with cells and its extents are in EMU units.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.OneCellAnchorTagName">
            <summary>
            This element specifies a one cell anchor placeholder for a group, a shape,
            or a drawing element. It moves with the cell and its extents is in EMU units.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ControlTagName">
            <summary>
            This element Specifies the form control element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ControlPrTag">
            <summary>
            This element specifies the form control element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.EditAsAttribute">
            <summary>
            Specifies how the DrawingML contents shall be moved and/or resized when
            the rows and columns between its start and ending anchor (the from and
            to child elements) are resized, or have additional rows/columns inserted
            within them, or additional row/columns are added before them.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FromTagName">
            <summary>
            This element specifies the first anchor point for the drawing element.
            This will be used to anchor the top and left sides of the shape within
            the spreadsheet. That is when the cell that is specified in the from
            element is adjusted, the shape will also be adjusted.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ToTagName">
            <summary>
            This element specifies the second anchor point for the drawing element.
            This will be used to anchor the bottom and right sides of the shape within
            the spreadsheet. That is when the cell that is specified in the to element
            is adjusted, the shape will also be adjusted.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ColumnTagName">
            <summary>
            This element specifies the column that will be used within the from and to
            elements to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ColumnOffsetTagName">
            <summary>
            This element is used to specify the column offset within a cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RowTagName">
            <summary>
            This element specifies the row that will be used within the from and to
            elements to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RowOffsetTagName">
            <summary>
            This element is used to specify the row offset within a cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NVPicturePropertiesTag">
            <summary>
            This element specifies the non visual properties for a picture.
            This allows for additional information that does not affect
            the appearance of the picture to be stored.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NVCanvasPropertiesTag">
            <summary>
            This element specifies non-visual canvas properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NVGroupShapePropertiesTag">
            <summary>
            This element specifies non-visual group shape properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GroupShapePropertiesTag">
            <summary>
            This element specifies group shape properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NVConnectorShapeProperties">
            <summary>
            This element specifies the non-visual connector shape drawing properties
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NVPictureCanvasPropertiesTag">
            <summary>
            This element specifies the non-visual properties for the picture canvas.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ClickHyperlinkTag">
            <summary>
            This element specifies the on-click hyperlink information to be applied to a run of text.
            When the hyperlink text is clicked the link is fetched.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BlipFillTagName">
            <summary>
            This element specifies the type of picture fill that the picture object
            will have. Because a picture has a picture fill already by default,
            it is possible to have two fills specified for a picture object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BlipTagName">
            <summary>
            This element specifies the existence of an image (binary large image
            or picture) and contains a reference to the image data.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaModFixTag">
            <summary>
            It's define the Picture fill option 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaModFixattribute">
            <summary>
            It's define the values of Transparency
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.EmbeddedPicture">
            <summary>
            Specifies the identification information for an embedded picture. This
            attribute is used to specify an image that resides locally within the file.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LinkPicture">
            <summary>
            Specifies the identification information for a linked picture. This
            attribute is used to specify an image that is added as external link.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PositionSizeAbsolute">
            <summary>
            Specifies that the current start and end positions shall be maintained
            with respect to the distances from the absolute start point of the worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PositionRelative">
            <summary>
            Specifies that the current drawing shall move with its row and column
            (i.e. the object is anchored to the actual from row and column), but
            that the size shall remain absolute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PositionSizeRelative">
            <summary>
            Specifies that the current drawing shall move and resize to maintain its
            row and column anchors (i.e. the object is anchored to the actual from
            and to row and column).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.StretchTagName">
            <summary>
            This element specifies that a BLIP should be stretched to fill the target rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TileTagName">
            <summary>
            This element specifies that a BLIP should be tiled to fill the available space.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SourceRectangleTagName">
            <summary>
            This element specifies the portion of the blip used for the fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FillRectTagName">
            <summary>
            This element specifies a fill rectangle. When stretching of an image is specified,
            a source rectangle, srcRect, is scaled to fit the specified fill rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PictureTagName">
            <summary>
            This element specifies the existence of a picture object within the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.IdAttributeName">
            <summary>
            Name of the xml attribute that stores id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NameAttributeName">
            <summary>
            Name of the xml attribute that stores shape name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.DescriptionAttributeName">
            <summary>
            Name of the xml attribute that stores alternative description.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PictureLocksTag">
            <summary>
            This element specifies all locking properties for a graphic frame.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NoChangeAspectAttribute">
            <summary>
            Specifies that the generating application should not allow aspect ratio
            changes for the corresponding connection shape. If this attribute is not
            specified, then a value of false is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ShapePropertiesTag">
            <summary>
            This element specifies the visual shape properties that can be applied to a shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ThicknessTag">
            <summary>
            This element specifies the thickness of the walls or floor as a percentage of the largest dimension of the plot volume.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PictureoptionTag">
            <summary>
            It's define  picturefill in shapeproperty.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PictureformatTag">
            <summary> 
            It's define pictureformat options
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PictureStackUnitTag">
            <summary> 
            It's define pictureformat options
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Valueattribite">
            <summary>
            It's define the Pictureformatvalue
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Transform2DTag">
            <summary>
            This element represents 2-D transforms for ordinary shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Offset">
            <summary>
            This element specifies the location of the bounding box of an object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Extents">
            <summary>
            This element specifies the size of the bounding box enclosing the referenced object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ChildOffset">
            <summary>
            This element specifies the location of the bounding box of a child object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ChildExtents">
            <summary>
            This element specifies the size of the bounding box enclosing the referenced child object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.XAttributeName">
            <summary>
            Specifies a coordinate on the x-axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.YAttributeName">
            <summary>
            Specifies a coordinate on the x-axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CXAttributeName">
            <summary>
            Specifies the length of the extents rectangle in EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CYAttributeName">
            <summary>
            Specifies the width of the extents rectangle in EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PresetGeometryTag">
            <summary>
            Specifies the preset geometry that will be used for this shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CustomGeometryTag">
            <summary>
            Specifies the custom geometry that will be used for this shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.EffectTag">
            <summary>
            Specifies the EffectTag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ShapePropertiesExtensionList">
            <summary>
            Specifies the ShapePropertiesExtensionList.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.InvertSolidFillFormat">
            <summry>
            This elemet specifies that the chart has inverted shape elements and that is to be filled with a solid color.
            </summry>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PresetShapeAttribute">
            <summary>
            This element specifies when a preset geometric shape should be used
            instead of a custom geometric shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.DrawingTagName">
            <summary>
            This element indicates that the sheet contains drawing components built
            on the drawingML platform.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.WorksheetDrawings">
            <summary>
            This element specifies all drawing objects within the worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AdjustValuesList">
            <summary>
            This element specifies the adjust values that will be applied to the specified shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ClientDataTagName">
            <summary>
            This element is used to set certain properties related to a drawing element
            on the client spreadsheet application.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GraphicFrame">
            <summary>
            This element describes a single graphical object frame for
            a spreadsheet which contains a graphical object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Shape">
            <summary>
            This element specifies the existence of a single shape. A shape can either
            be a preset or a custom geometry, defined using the SpreadsheetDrawingML
            framework. In addition to a geometry each shape can have both visual and
            non-visual properties attached. Text and corresponding styling information
            can also be attached to a shape. This shape is specified along with all
            other shapes within either the shape tree or group shape elements.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ConnectionShape">
            <summary>
            This element specifies the properties for a connection shape drawing element.
            A connection shape is a line, etc. that connects two other shapes in this drawing.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GroupShape">
            <summary>
            This element specifies a group shape that represents many shapes grouped together.
            This shape is to be treated just as if it were a regular shape but instead of being
            described by a single geometry it is made up of all the shape geometries encompassed
            within it. Within a group shape each of the shapes that make up the group are
            specified just as they normally would. The idea behind grouping elements however
            is that a single transform can apply to many shapes at the same time.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.MacroAttribute">
            <summary>
            This element specifies the custom function associated with the object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GraphicTag">
            <summary>
            This element specifies the existence of a single graphic object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GraphicDataTag">
            <summary>
            This element specifies the reference to a graphic object within the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.UriAttribute">
            <summary>
            Specifies the URI, or uniform resource identifier that represents the data
            stored under this tag. The URI is used to identify the correct 'server' that
            can process the contents of this tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NonVisualGraphicFramePr">
            <summary>
            This element specifies all non-visual properties for a graphic frame.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextBodyPropertiesTag">
            <summary>
            This element defines the body properties for the text body within a shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ListStylesTag">
            <summary>
            This element specifies the list of styles associated with this body of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Paragraphs">
            <summary>
            This element specifies the presence of a paragraph of text within the containing text body.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ParagraphProperties">
            <summary>
            This element contains all paragraph level text properties for the containing paragraph.
            These paragraph properties should override any and all conflicting properties that are
            associated with the paragraph in question.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.DefaultParagraphProperites">
            <summary>
            This element contains all default run level text properties for the text
            runs within a containing paragraph. These properties are to be used when
            overriding properties have not been defined within the rPr element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ParagraphRun">
            <summary>
            This element specifies the presence of a run of text within the containing text body.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ParagraphText">
            <summary>
            This element specifies the actual text for this text run. This is the
            text that will be formatted using all specified body, paragraph and run
            properties. This element must be present within a run of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextRunProperites">
            <summary>
            This element contains all run level text properties for the text runs within a containing paragraph.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FontBoldAttribute">
            <summary>
            Specifies whether a run of text will be formatted as bold text. If this
            attribute is omitted, than a value of 0, or false is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FontItalicAttribute">
            <summary>
            Specifies whether a run of text will be formatted as italic text. If this
            attribute is omitted, than a value of 0, or false is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FontStrikeAttribute">
            <summary>
            Specifies whether a run of text will be formatted as strikethrough text.
            If this attribute is omitted, than no strikethrough is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FontSizeAttribute">
            <summary>
            Specifies the size of text within a text run. Whole points are specified
            in increments of 100 starting with 100 being a point size of 1. For instance
            a font point size of 12 would be 1200 and a font point size of 12.5 would be
            1250. If this attribute is omitted, than the value in defRPr should be used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FontUnderlineAttribute">
            <summary>
            Specifies whether a run of text will be formatted as underlined text.
            If this attribute is omitted, than no underline is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AbsoluteAnchorTag">
            <summary>
            This element is used as an anchor placeholder for a shape or group of shapes.
            It will anchor the object in the same position relative to sheet position
            and its extents are in EMU unit.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PositionTag">
            <summary>
            This element describes the position of a drawing element within a spreadsheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NoShapeGrouping">
            <summary>
            Specifies that the generating application should not allow shape grouping
            for the corresponding connection shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GraphicFrameLocksTag">
            <summary>
            This element specifies all locking properties for a graphic frame.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CNVGraphicFramePr">
            <summary>
            This element specifies the non-visual drawing properties for a graphic frame.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LineTag">
            <summary>
            This element specifies an outline style that can be applied to a number
            of different objects such as shapes and text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LineWidthAttribute">
            <summary>
            Specifies the width to be used for the underline stroke. If this
            attribute is omitted, then a value of 0 is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CompoundLineTypeAttribute">
            <summary>
            Specifies the compound line type to be used for the underline stroke.
            If this attribute is omitted, then a value of sng is assumed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NoFillTag">
            <summary>
            This element specifies that no fill will be applied to the parent element.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SolidFillTag">
            <summary>
            This element specifies a solid color fill. The shape is filled entirely with the specified color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.MiterJoinTag">
            <summary>
            border miter join Tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BevelJoinTag">
            <summary>
            border bevel join tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SRGBColorTag">
            <summary>
            This element specifies a color using the red, green, blue RGB color model.
            Red, green, and blue is expressed as sequence of hex digits, RRGGBB.
            A perceptual gamma of 2.2 is used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SchemeColorTag">
            <summary>
            This element specifies a color bound to a user's theme. As with all elements
            which define a color, it is possible to apply a list of color transforms to
            the base color defined.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SystemColorTag">
            <summary>
            This color is based upon the value that this color currently has
            within the system on which the document is being viewed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SystemColorHexAttribute">
             <summary>
             Applications shall use the lastClr attribute to determine
             the absolute value of the last color used if system colors
            are not supported.
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PresetDashTag">
            <summary>
            This element specifies that a preset line dashing scheme should be used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BackgroundColorTag">
            <summary>
            This element specifies the background color of a Pattern fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ForegroundColorTag">
            <summary>
            This element specifies the foreground color of a pattern fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PatternFillTag">
            <summary>
            This element specifies a pattern fill. A repeated pattern is used to fill the object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.PresetPattern">
            <summary>
            Specifies one of a set of preset patterns to fill the object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RoundTag">
            <summary>
            This element specifies that lines joined together will have a round join.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientFillTag">
            <summary>
            This element defines a gradient fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GroupFillTag">
            <summary>
            This element specifies decorations which can be added to the head of a line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HeadEnd">
            <summary>
            This element specifies GroupFillTag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TailEnd">
            <summary>
            This element specifies decorations which can be added to the tail of a line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientStopsTag">
            <summary>
            The list of gradient stops that specifies the gradient colors and their
            relative positions in the color band.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientLiniarTag">
            <summary>
            This element specifies a linear gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientTailTag">
            <summary>
            It's define the Tailtag property 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientAngleAttribute">
            <summary>
            Specifies the direction of color change for the gradient. To define this
            angle, let its value be x measured clockwise. Then ( -sin x, cos x ) is
            a vector parallel to the line of constant color in the gradient fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientScaledAttribute">
            <summary>
            Whether the gradient angle scales with the fill region.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientPathTag">
            <summary>
            This element defines that a gradient fill will follow a path vs. a linear line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientPathAttribute">
            <summary>
            Specifies the shape of the path to follow.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientStopTag">
            <summary>
            This element defines a gradient stop. A gradient stop consists of a position
            where the stop appears in the color band.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GradientPositionAttribute">
            <summary>
            Specifies where this gradient stop should appear in the color band.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaTag">
            <summary>
            This element specifies its input color with the specific opacity,
            but with its color unchanged.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FillToRectTag">
            <summary>
            This element defines the "focus" rectangle for the center shade, specified
            relative to the fill tile rectangle. The center shade fills the entire tile
            except the margins specified by each attribute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ColorChangeTag">
            <summary>
            This element specifies a Color Change Effect. Instances of clrFrom are replaced with instances of clrTo
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.UseAlphaTag">
            <summary>
            This element indicates whether the input color use the specific opacity
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ColorFromTag">
            <summary>
            This element specifies a Color From.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ColorToTag">
            <summary>
            This element specifies a Color To.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LeftAttribute">
            <summary>
            Specifies the left edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TopAttribute">
            <summary>
            Specifies the top edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RightAttribute">
            <summary>
            Specifies the right edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BottomAttribute">
            <summary>
            Specifies the bottom edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CropLeft">
            <summary>
            Specifies the left edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CropTop">
            <summary>
            Specifies the top edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CropRight">
            <summary>
            Specifies the right edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CropBottom">
            <summary>
            Specifies the bottom edge of the rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TintTag">
            <summary>
            This element specifies a lighter version of its input color. A 10% tint is 10%
            of the input color combined with 90% white.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ShadeTag">
            <summary>
            This element specifies a darker version of its input color. A 10% shade is 10%
            of the input color combined with 90% black.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GammaTag">
            <summary>
            This element specifies that the output color rendered by the generating
            application should be the sRGB gamma shift of the input color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.InverseGammaTag">
            <summary>
            This element specifies that the output color rendered by the generating
            application should be the inverse sRGB gamma shift of the input color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LuminanceModulation">
            <summary>
            This element specifies the input color with its luminance modulated by the given percentage.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HueModulation">
            <summary>
             /// This element specifies the input color with its hue modulated by the given percentage.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Luminance">
            <summary>
            This element specifies the input color with its luminance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LuminanceOffset" -->
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SaturationModulation">
            <summary>
            This element specifies the input color with its saturation modulated by the given percentage.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Saturation">
            <summary>
            This element specifies the input color with its saturation.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SaturationOffset">
            <summary>
            This element specifies the input color with its saturation offset.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Shade">
            <summary>
            This element specifies shade.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextRotationAttribute">
            <summary>
            This element specified the rotation of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.Baseline">
            <summary>
            Specifies that all text in the parent object shall be aligned to the baseline of 
            each character when displayed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LatinTag">
            <summary>
            This element specifies that a Latin font be used for a specific run of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TypefaceTag">
            <summary>
            Represents font type face.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ControlsTag">
            <summary>
            Represents embedded controls in worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ControlTag">
            <summary>
            Represents a single embedded control.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NonVisualDrawingProperties">
            <summary>
            This element specifies the non-visual drawing properties for a shape. These properties
            are to be used by the generating application to determine how the shape should be dealt with.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextBoxAttribute">
            <summary>
            Specifies that the corresponding shape is a text box and thus should be treated
            as such by the generating application. If this attribute is omitted then it is
            assumed that the corresponding shape is not specifically a text box.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NonVisualShapeProperties">
            <summary>
            This element specifies all non-visual properties for a shape. This element
            is a container for the non-visual identification properties, shape properties
            and application properties that are to be associated with a shape. This
            allows for additional information that does not affect the appearance
            of the shape to be stored.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextBody">
            <summary>
            This element specifies the existence of text to be contained within the
            corresponding shape. All visible text and visible text related properties
            are contained within this element. There can be multiple paragraphs and
            within paragraphs multiple runs of text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SubscriptBaseline">
            <summary>
            Default value for subscript baseline value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SuperscriptBaseline">
            <summary>
            Default value for superscript baseline value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AnchorAttribute">
            <summary>
            Specifies the anchoring position of the txBody within the shape. If this
            attribute is omitted, then a value of t, or top is implied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AnchorCenterAttribute">
            <summary>
            Specifies if the anchoring position of the txBody is centered within the shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextBoxRotationAttribute">
            <summary>
            Determines if the text within the given text body should be displayed vertically.
            If this attribute is omitted, then a value of horz, or no vertical text is implied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LockTextAttribute">
            <summary>
            This attribute indicates whether to allow text editing within this drawing
            object when the parent worksheet is protected.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HorizontalAlignment">
            <summary>
            Specifies the alignment that is to be applied to the paragraph. Possible
            values for this include left, right, centered, justified and distributed.
            If this attribute is omitted, then a value of left is implied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.CapitalizationTag">
            <summary>
            specifies the capitialization for rich text 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.NormalizationHeightTag">
            <summary>
            specifies the normaliztion of heights for text 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ShapeAutoFitTag">
            <summary>
            Specifies the shape autofit element tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextCapsAllString">
            <summary>
            Apply all caps on the text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextCapsSmallString">
            <summary>
            Apply small caps to the text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextCapsNoneString">
            <summary>
            Caps is not applied to the text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.VerticalOverFlowAttribute">
            <summary>
            Determines whether the text can flow out of the bounding box vertically
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HorizontalOverFlowAttribute">
            <summary>
            Determines whether the text can flow out of the bounding box horizontally
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LeftInsetAttribute">
            <summary>
            Specifies the left inset of the bounding rectangle attribute
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BottomInsetAttribute">
            <summary>
            Specifies the bottom inset of the bounding rectangle attribute
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TopInsetAttribute">
            <summary>
            Specifies the top inset of the bounding rectangle attribute
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RightInsetAttribute">
            <summary>
            Specifies the right inset of the bounding rectangle attribute
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.KerningAttribute">
            <summary>
            Specifies the minimum font size at which character kerning occurs for this text run.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SpacingAttribute">
            <summary>
            Specifies the spacing between characters within a text run.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HLinkClickTag">
            <summary>
            Specifies the shape hyperlink element tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GlowTag">
            <summary>
            Specifies the glow effect, in which a color blurred outline is added outside the edges of the object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SoftEdgeTag">
            <summary>
            Specifies the soft edge effect. The edges of the shape are blurred, while the fill is not affected.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.RadiusAttributeTag">
            <summary>
            Specifies the radius of blur to apply to the edges.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SvgGUID">
            <summary>
            Value of the Guid attribute that specifies SVG image.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LocalDpiURI">
            <summary>
            Value of the URI attribute for UseLocalDpi.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ImagePropsURI">
            <summary>
            Value of the URI attribute for Image properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaBiLevelTag">
            <summary>
            Specifies the alpha bilevel tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaCeilingTag">
            <summary>
            Specifies the alpha ceiling tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaFloorTag">
            <summary>
            Specifies the alpha floor tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.GrayScaleTag">
            <summary>
            Specifies the gray scale tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FillOverlayTag">
            <summary>
            Specifies the fill overlay tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaModTag">
            <summary>
            Specifies the alpha mod tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaInvTag">
            <summary>
            Specifies the alpha inv tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.AlphaReplTag">
            <summary>
            Specifies the alpha repl tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BiLevelTag">
            <summary>
            Specifies the bi level tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ThreshTag">
            <summary>
            Specifies the thresh tag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BlurTag">
            <summary>
            Specifies the blur value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HslTag">
            <summary>
            Speifies the Hsl.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.DuotoneTag">
            <summary>
            Specifies the duo tone.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.ImagePropsTag">
            <summary>
            Specifies the image properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.LocalDpiTag">
            <summary>
            Specifies the local Dpi settings.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SvgBlipTag">
            <summary>
            Specifies the svg blip.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.FillRefTag">
            <summary>
            Specifies fill reference
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.SimpleTypeRotationAngle">
            <summary>
            Specifies the constant value used for converting angle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.VerticalFlipAttribute">
            <summary>
            Vertical flip attribute tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.HorizontalFlipAttribute">
            <summary>
            Horizontal flip attribute tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.TextField">
            <summary>
            Field attribute tag
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BulletFont">
            <summary>
            bullet font
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Drawings.BulletChar">
            <summary>
            bullet Char
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle">
            <summary>
            Stores and serialize the chart / shape style entries
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.attribute">
            <summary>
            attribute used as prefix
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.shape">
            <summary>
            autoshape parent 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.nameSpace">
            <summary>
            Name space used on serialization
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_styleElementMod">
            <summary>
            mods enum value for the style element
            style entry is not provided
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_lnRefStyleEntry">
            <summary>
            It specifies a reference to a line style within the style matrix.
            must be initialized for chartStyle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_lineWidthScale">
            <summary>
            It specifies a multiplier to apply to the line width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_effectRefStyleEntry">
            <summary>
            It reference to an effect style within the style matrix.        
            must be initialized for chartStyle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_fillRefStyleEntry">
            <summary>
            It specifies a reference to a fill style within the style matrix.
            must be initialized for chartStyle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_fontRefstyleEntry">
            <summary>
            It specifies a reference to a themed font.
            must be initialized for chartStyle
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_shapeProperties">
            <summary>
            It specifies visual shape properties associated with this StyleEntry
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_defaultParagraphRunProperties">
            <summary>
            It specifies the default text character properties for a text body associated with this StyleEntry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.m_textBodyProperties">
            <summary>
            It specifies the body properties for a text body associated with this StyleEntry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.StyleElementMod">
            <summary>
            Gets / Sets the value of member StyleElementMod
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.LineRefStyleEntry">
            <summary>
            Gets / Sets the line reference style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.LineWidthScale">
            <summary>
            Gets / Sets the line width of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.EffectRefStyleEntry">
            <summary>
            Gets / Sets the effect reference of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.FillRefStyleEntry">
            <summary>
             Gets / Sets the Fill reference of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.FontRefstyleEntry">
            <summary>
            Gets / Sets the Font reference of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.ShapeProperties">
            <summary>
            Gets / Sets the shape properties of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.DefaultRunParagraphProperties">
            <summary>
            Gets / Sets the Default paragraph run properties of style entry
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.TextBodyProperties">
            <summary>
            Gets / Sets the text body properties of style entry
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,System.String)">
            <summary>
            Constructor used for auto shape 
            </summary>
            <param name="shape">input shape</param>
            <param name="arrtibute">input attribute</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.#ctor(System.String,System.String,Spire.Xls.StyleEntryModifierEnum)">
            <summary>
            Constructor used for chart style
            </summary>
            <param name="attributeValue">input attribute value</param>
            <param name="nameSpaceValue">input namespace value</param>
            <param name="enumValue">input style modifier enum value</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.SerializeStyleOrFontReference(System.Xml.XmlWriter,Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference,System.String,System.Boolean)">
            <summary>
            Serialize the Style or font reference for entry 
            </summary>
            <param name="writer">input XML writer</param>
            <param name="styleEntry">input style entry reference</param>
            <param name="styleEntryName">style entry reference name</param>
            <param name="isFontReference">boolean value indicates whether thr reference is font or not</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.SerializeColorSettings(System.Xml.XmlWriter,Spire.Xls.ColorModel,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Serialize the input color and its values
            </summary>
            <param name="writer">input XML writer</param>
            <param name="colorModelType">color model type</param>
            <param name="colorValue">color value string</param>
            <param name="lumModValue">luminance modulation value</param>
            <param name="lumOffValue1">luminance offset 1 value</param>
            <param name="lumOffValue2">luminance offset 2 value</param>
            <param name="shadeValue">shade value on color</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.SerializeShapeProperties(System.Xml.XmlWriter)">
            <summary>
            Serialize the shape properties current object
            </summary>
            <param name="writer">input XML writer</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.SerializeDefaultRPrProperties(System.Xml.XmlWriter)">
            <summary>
            Serialize the Default run paragraph properties
            </summary>
            <param name="writer">input XML writer</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.ShapeStyle.Write(System.Xml.XmlWriter,System.String)">
            <summary>
            Serialize the current shape style and its member
            </summary>
            <param name="xmlTextWriter">input XML writer</param>
            <param name="parentElement">input parent element of chart style</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference">
             <summary>
             Stores the information required for each style entries
            lineRef, fillRef, effectRef, fontRef, 
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_index">
            <summary>
            Style entry Index 
            integer for lineRef, fillRef, effectRef style elements 
            enum integer value for fontRef style elements
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_colorModelType">
            <summary>
            Color model value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_colorValue">
            <summary>
            Its stores the value of color respect to color model
            hexa color or schema color information
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_lumModValue">
            <summary>
            luminace modulation value for scheme color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_lumOffValue1">
            <summary>
            luminance offset value 1 for scheme color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_lumOffValue2">
            <summary>
             luminance offset value 2 for scheme color
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.m_shadeValue">
            <summary>
            stores the shade value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.Index">
            <summary>
            Gets / Sets the value of member index
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.ColorModelType">
            <summary>
            Gets / Sets the value of member ColorModelType
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.ColorValue">
            <summary>
            Gets / Sets the value of member ColorValue
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.LumModValue">
            <summary>
            Gets / Sets the value of member LumModValue
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.LumOffValue1">
            <summary>
            Gets / Sets the value of member LumOffValue1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.LumOffValue2">
            <summary>
            Gets / Sets the value of member LumOffValue2
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.ShadeValue">
            <summary>
            Gets / Sets the value of member Shade value
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleOrFontReference.#ctor(System.Int32,Spire.Xls.ColorModel,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize the member with its values
            </summary>
            <param name="index">Index value</param>
            <param name="colorModel">colorModel value</param>
            <param name="colorValue">color value</param>
            <param name="lumModValue">luminance modulation value</param>
            <param name="lumOffValue1">luminance offset 1 value</param>
            <param name="lumOffValue2">luminance offset value 2</param>
            <param name="shadeValue">shade value of color</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties">
            <summary>
            Stores the information of shape properties of style entry
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_flag">
            <summary>
            Indicates whether the options are enabled. Bit position
            0-Shape fill 
            1-Line fill
            2-line width (if set to 0, no fill)
            3-line cap
            4-line cmpd
            5-line align
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillType">
            <summary>
            enum indicates the fill type of shape s
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderWeight">
            <summary>
            indicates the line width 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillColorModelType">
            <summary>
            shape fill color model value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillColorValue">
            <summary>
            Its stores the value of shape fill color respect to color model
            hexa color or schema color information
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillLumModValue">
            <summary>
            luminace modulation value for scheme color of shape fill
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillLumOffValue1">
            <summary>
            luminance offset value 1 for scheme color of shape fill
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_shapeFillLumOffValue2">
            <summary>
             luminance offset value 2 for scheme color of shape fill
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderFillColorModelType">
            <summary>
            Color model value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderFillColorValue">
            <summary>
            Its stores the value of border color respect to color model
            hexa color or schema color information
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderFillLumModValue">
            <summary>
            luminace modulation value for scheme color of border
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderFillLumOffValue1">
            <summary>
            luminance offset value 1 for scheme color of border
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderFillLumOffValue2">
            <summary>
             luminance offset value 2 for scheme color of border
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderLineStyle">
            <summary>
            Specifies the compound line type to be used for the underline stroke.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_borderIsRound">
            <summary>
            Indicates that lines joined together have a round join.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_lineCap">
            <summary>
            Specifies the ending caps that should be used for this line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.m_isInsetPenAlignment">
            <summary>
            Specifies the alignment to be used for the underline stroke.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillType">
            <summary>
            Gets / Sets the shapefillType member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderWeight">
            <summary>
            Gets / Sets the Border Weight member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillColorModelType">
            <summary>
             Gets / Sets the ShapeFillColorModel member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillColorValue">
            <summary>
             Gets / Sets the ShapeFillColorValue member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillLumModValue">
            <summary>
             Gets / Sets the ShapeFill Luminance Modulation member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillLumOffValue1">
            <summary>
             Gets / Sets the shapefill luminace offset 1 member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.ShapeFillLumOffValue2">
            <summary>
             Gets / Sets the shapefill luminace offset 2 member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderFillColorModelType">
            <summary>
             Gets / Sets the Border Fill ColorModelType member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderFillColorValue">
            <summary>
            Gets / Sets the BorderFill Color member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderFillLumModValue">
            <summary>
             Gets / Sets the BorderFill Luminance Modulation member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderFillLumOffValue1">
            <summary>
            Gets / Sets the borderFill Luminace Offset Value1 member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderFillLumOffValue2">
            <summary>
             Gets / Sets the borderFill Luminace Offset Value2 member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderLineStyle">
            <summary>
            Gets / Sets the shapeLineStyle member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.BorderIsRound">
            <summary>
             Gets / Sets the BorderIsRound member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.LineCap">
            <summary>
            Gets / Sets the LineCap member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.IsInsetPenAlignment">
            <summary>
             Gets / Sets the IsInsetPen member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.FlagOptions">
            <summary>
            Get the options enabled flags
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.StyleEntryShapeProperties.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder">
            <summary>
            Class that stores that text body properties
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_textVertOverflowType">
            <summary>
            text vertical overflow type
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_textHorzOverflowType">
            <summary>
            text horizontal overflow type
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_textDirection">
            <summary>
            text direction enum
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_leftMarginPt">
            <summary>
            left margin point of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_topMarginPt">
            <summary>
            top margin point of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_rightMarginPt">
            <summary>
            right margin point of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_bottomMarginPt">
            <summary>
            bottom margin of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_wrapTextInShape">
            <summary>
            boolean value indicates whether the text to be wrapped in text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_columns">
            <summary>
            struct type of columns
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_verticalAlignment">
            <summary>
            vertical alignment of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_horizontalAlignment">
            <summary>
            horizontal alignment of text
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_isAutoSize">
            <summary>
            Boolean value indicates whether the text is to be auto sized
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.m_isAutoMargins">
            <summary>
            Boolean value indicates whether margin is automatically generated
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.TextVertOverflowType">
            <summary>
            Gets / Sets the TextVertOverflowType member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.TextHorzOverflowType">
            <summary>
            Gets / Sets the TextHorzOverflowType member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.TextDirection">
            <summary>
            Gets / Sets the TextDirection member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.LeftMarginPt">
            <summary>
            Gets / Sets the LeftMarginPt member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.TopMarginPt">
            <summary>
            Gets / Sets the TopMarginPt member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.RightMarginPt">
            <summary>
            Gets / Sets the RightMarginPt member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.BottomMarginPt">
            <summary>
            Gets / Sets the BottomMarginPt member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.WrapTextInShape">
            <summary>
            Gets / Sets the WrapTextInShape member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.VerticalAlignment">
            <summary>
            Gets / Sets the VerticalAlignment member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.HorizontalAlignment">
            <summary>
            Gets / Sets the HorizontalAlignment member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.IsAutoSize">
            <summary>
            Gets / Sets the IsAutoSize member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.IsAutoMargins">
            <summary>
            Gets / Sets the IsAutoMargins member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.Number">
            <summary>
            Gets / Sets the number of column
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SpacingPt">
            <summary>
            Gets / Sets the spacingPt of column
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetVerticalAnchorPosition(Spire.Xls.TextDirection,Spire.Xls.ExcelVerticalAlignment,Spire.Xls.ExcelHorizontalAlignment,System.String@)">
            <summary>
            Get the anchor position from text direction and alignment
            </summary>
            <param name="textDirection">input text Direction of the text body</param>
            <param name="verticalAlignment">input text body vertical alignment</param>
            <param name="horizontalAlignment">input text body horizontal alignment</param>
            <param name="anchor">output anchor</param>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetHorizontalAnchorPostion(Spire.Xls.TextDirection,Spire.Xls.ExcelVerticalAlignment,Spire.Xls.ExcelHorizontalAlignment,System.String@)">
            <summary>
            Update the anchor value.
            </summary>
            <param name="textDirection">Text direction</param>
            <param name="verticalAlignment">vertical alignment</param>
            <param name="horizontalAlignment">horizontal alignment</param>
            <param name="align">alignment string</param>
            <returns>true</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetTextDirection(Spire.Xls.TextDirection)">
            <summary>
            Get the string formatted text direction from enum
            </summary>
            <param name="textDirection">input text direction enum</param>
            <returns>output string formatted text direction</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetLeftMargin">
            <summary>
            Get Left margin value of text body
            </summary>
            <returns>converted left margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SetLeftMargin(System.Int32)">
            <summary>
            Set Left margin value of text body
            </summary>
            <returns>converted left margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetTopMargin">
            <summary>
            Get Top margin value of text body
            </summary>
            <returns>converted Top margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SetTopMargin(System.Int32)">
            <summary>
            Set Top margin value of text body
            </summary>
            <returns>converted Top margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetRightMargin">
            <summary>
            Get Right margin value of text body
            </summary>
            <returns>converted right margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SetRightMargin(System.Int32)">
            <summary>
            Set Right margin value of text body
            </summary>
            <returns>converted right margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetBottomMargin">
            <summary>
            Get Bottom margin value of text body
            </summary>
            <returns>converted Bottom margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SetBottomMargin(System.Int32)">
            <summary>
            Set Bottom margin value of text body
            </summary>
            <returns>converted Bottom margin value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.GetVerticalAnchorPosition(System.String@)">
            <summary>
            Get anchor position value of text body from current object properties
            </summary>
            <returns>anchor position value</returns>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextBodyPropertiesHolder.SerialzieTextBodyProperties(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Serializes the text body properties attributes
            </summary>
            <param name="xmlTextWriter">input XML writer</param>
            <param name="prefix">prefix of the element</param>
            <param name="nameSpace">namespace of the element</param>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextFrameColumns">
            <summary>
            Represent columns in the Text frame.
            <exclude/>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextFrameColumns.Number">
            <summary>
            Gets or sets the number of the text frame columns.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextFrameColumns.SpacingPt">
            <summary>
            Gets or sets the spacing point of the text frame columns.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings">
            <summary>
            Represents the TextSettings
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.FontName">
            <summary>
            Font name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Underline">
            <summary>
            Underline style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.FontSize">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Bold">
            <summary>
            Value indicating whether font is bold.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Italic">
            <summary>
            Value indicating whether text 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Striked">
            <summary>
            Value indicating whether text is striked.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Language">
            <summary>
            Language used to display text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.Baseline">
            <summary>
            Represents the baseline properties
            default -1, it was non negative on chart style
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.HasLatin">
            <summary>
            Has Latin
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.HasComplexScripts">
            <summary>
            Has Complex Scripts
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.HasEastAsianFont">
             <summary>
            Has East and Asian Font
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.ActualFontName">
            <summary>
            Actual Font
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.ShowBoldProperties">
            <summary>
            Show Title Bold
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.KerningValue">
            <summary>
            Specifies the minimum font size at which character kerning occurs for this text run.
            default -1, it was non negative on chart style
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Shapes.TextSettings.SpacingValue">
            <summary>
            Specifies the spacing between characters within a text run.
            default -1, it was non negative
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Shapes.Spinner.Min">
            <summary>
            Gets or sets the minimum value of a scroll bar or spinner range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.ExcelStyle.Font.ColorIndex">
            <summary>
            Represents the color palette of this worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.ExcelStyle.Font.Script">
            <summary>
            Represents the font script format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.ExcelToHtmlConverter.m_imageMIMEMonitor">
            <summary>
            Image mimes cache for embedding image.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.ExcelToHtmlConverter.BuildBody(Spire.Xls.Core.Converter.Spreadsheet.WorkbookConverter,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            Build body in html.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.BuiltIn.NormalDistribution.Normsinv(System.Double)">
            	      * Returns the inverse of the standard normal cumulative distribution. 
            		  * The distribution has a mean of zero and a standard deviation of one.
            	      * 
            	      * @param probability a probability corresponding to the normal distribution.
            	      * @return the inverse of the standard normal cumulative distribution.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.BuiltIn.NormalDistribution.Norminv(System.Double,System.Double,System.Double)">
            Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.
            
            @param probability a probability corresponding to the normal distribution.
            @param mean the arithmetic mean of the distribution.
            @param standard_dev the standard deviation of the distribution.
            @return the inverse of the normal cumulative distribution for the specified mean and standard deviation.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.BuiltIn.Stat.GetGammaSeries(System.Double,System.Double)">
            You must ensure fA>0.0 and fX>0.0
                valid results only if fX less than or equal to fA+1.0
                uses power series 
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.BuiltIn.Stat.GetLowRegIGamma(System.Double,System.Double)">
            You must ensure fA>0.0 and fX>0.0) 
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.BuiltIn.Stat.GetUpRegIGamma(System.Double,System.Double)">
            You must ensure fA>0.0 and fX>0.0) 
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.Func(System.Double)">
            抽象函数：计算积分函数值，必须在派生类中覆盖该函数
            
            @param x - 函数变量
            @return double型，对应的函数值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.#ctor">
            基本构造函数
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueTrapezia(System.Double,System.Double,System.Double)">
            变步长梯形求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueSimpson(System.Double,System.Double,System.Double)">
            变步长辛卜生求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueATrapezia(System.Double,System.Double,System.Double,System.Double)">
            自适应梯形求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param d - 对积分区间进行分割的最小步长，当子区间的宽度
                       小于d时，即使没有满足精度要求，也不再往下进行分割
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.ppp(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[])">
            内部函数
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueRomberg(System.Double,System.Double,System.Double)">
            龙贝格求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValuePq(System.Double,System.Double,System.Double)">
            计算一维积分的连分式法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValuePart(System.Double,System.Double,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[])">
            高振荡函数求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param m - 被积函数中振荡函数的角频率
            @param n - 给定积分区间两端点上的导数最高阶数＋1
            @param fa - 一维数组，长度为n，存放f(x)在积分区间端点x=a处的各阶导数值
            @param fb - 一维数组，长度为n，存放f(x)在积分区间端点x=b处的各阶导数值
            @param s - 一维数组，长度为2，其中s(1)返回f(x)cos(mx)在积分区间的积分值，
                       s(2) 返回f(x)sin(mx)在积分区间的积分值
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueLegdGauss(System.Double,System.Double,System.Double)">
            勒让德－高斯求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @param a - 积分下限
            @param b - 积分上限，要求b>a
            @param eps - 积分精度要求
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueLgreGauss">
            拉盖尔－高斯求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.Integral.GetValueHermiteGauss">
            埃尔米特－高斯求积法
            
            调用时，须覆盖计算函数f(x)值的虚函数double Func(double x)
            
            @return double 型，积分值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.Func(System.Double)">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 变量
            @return 函数值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.Func(System.Double[])">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 变量值数组
            @return 函数值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.Func(System.Double,System.Double[])">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 变量
            @param y - 函数值数组
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.Func(System.Double,System.Double)">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 二元函数的变量
            @param y - 二元函数的变量
            @return 函数值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.Func(System.Double[],System.Double[])">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 二元函数的变量值数组
            @param y - 二元函数的变量值数组
            @return 函数值
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.FuncMJ(System.Double[],System.Double[])">
            虚函数：计算方程左端函数值，必须在引申类中覆盖该类函数
            
            @param x - 已知变量值数组
            @param p - 已知函数值数组
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.#ctor">
            基本构造函数
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRootBisect(System.Int32,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            求非线性方程实根的对分法
            
            调用时，须覆盖计算方程左端函数f(x)值的虚函数
                   double Func(double x)
            
            @param nNumRoots - 在[xStart, xEnd]内实根个数的预估值
            @param x - 一维数组，长度为m。返回在区间[xStart, xEnd]内搜索到的实根，
                       实根个数由函数值返回
            @param xStart - 求根区间的左端点
            @param xEnd - 求根区间的右端点
            @param dblStep - 搜索求根时采用的步长
            @param eps - 精度控制参数
            @return int 型，求得的实根的数目
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRootNewton(System.Double@,System.Int32,System.Double)">
            求非线性方程一个实根的牛顿法
            
            调用时，须覆盖计算方程左端函数f(x)及其一阶导数f'(x)值的虚函数:
            	void Func(double x, double[] y)
            	y(0) 返回f(x)的值
            	y(1) 返回f'(x)的值
            
            @param x - 传入迭代初值（猜测解），返回在区间求得的一个实根
            @param nMaxIt - 递归次数
            @param eps - 精度控制参数
            @return bool 型，求解是否成功
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRootFisherWang(System.Double@,System.Double,System.Double,System.Double)">
            求单调函数方程一个实根的Fisher Wang迭代法
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRootAitken(System.Double@,System.Int32,System.Double)">
            求非线性方程一个实根的埃特金迭代法
            
            调用时，须覆盖计算方程左端函数f(x)值的虚函数
                  double Func(double x)
            
            @param x - 传入迭代初值（猜测解），返回在区间求得的一个实根
            @param nMaxIt - 递归次数
            @param eps - 精度控制参数
            @return bool 型，求解是否成功
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRootPq(System.Double@,System.Double)">
            求非线性方程一个实根的连分式解法
            
            调用时，须覆盖计算方程左端函数f(x)值的虚函数
                  double Func(double x)
            
            @param x - 传入迭代初值（猜测解），返回在区间求得的一个实根
            @param eps - 精度控制参数
            @return bool 型，求解是否成功
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.FormulaOP.Common.NLEquations.GetRoot_WangQI(System.Int32,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            		     * 求非线性方程实根, 先使用二分法获得 根的大概范围 误差在1之内，
            		        而后使用割线法获得最后的根。
            		     * 
            		     * 调用时，须覆盖计算方程左端函数f(x)值的虚函数
            		     *        double Func(double x)
            		     * 
            		     * @param nNumRoots - 在[xStart, xEnd]内实根个数的预估值
            		     * @param x - 一维数组，长度为m。返回在区间[xStart, xEnd]内搜索到的实根，
            		     *            实根个数由函数值返回
            		     * @param xStart - 求根区间的左端点
            		     * @param xEnd - 求根区间的右端点
            		     * @param dblStep - 搜索求根时采用的步长
            		     * @param eps - 精度控制参数
            		     * @return int 型，求得的实根的数目
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.AutoFilter.DateTimeGroupItem.MinValue">
            <summary>
            Gets the minimum DateTime value based on the current DateTimeGroupingType.
            </summary>
            <returns>
            A DateTime representing the minimum value for the specified grouping type (Year, Month, Day, Hour, Minute, Second).
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.IsBinningByCategory">
            <summary>
            True if bins generated by category values. otherwise False
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.HasAutomaticBins">
            <summary>
            True if bins generated are automatic. otherwise False
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.NumberOfBins">
            <summary>
            Get or set the Number of Bins in the axis
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.Can be a value from 1 through 31999.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.BinWidth">
            <summary>
            Get or Set the number of data points in each range.
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.UnderflowBinValue">
            <summary>
            Get or Set the UnderFlow Bin value
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.OverflowBinValue">
            <summary>
            Get or Set the OverFlow Bin value
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Axis.HistogramAxisFormatProperty">
            <summary>
            returns an Object that holds the information required for Histogram series
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.ChartExTitlePosition">
            <summary>
            Indicates the position and alignment of chart title
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.ChartTitleIncludeInLayout">
            <summary>
            Indicates the chart title included in chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.AutoUpdate">
            <summary>
            Gets / Sets the Auto update member variable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.ChartExRelationId">
            <summary>
            Gets / Sets the ChartEx relation Id member variable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.IsTreeMapOrSunBurst">
            <summary>
            True if the chart type is treemap or sunburst. Otherwise false
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Chart.IsHistogramOrPareto">
            <summary>
            True if the chart type is histogram or pareto. Otherwise false
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartFrame.HasManualLayout">
            <summary>
            Bug_761 add by Daniel in 2019/05/15 Ôö¼ÓÒ»¸öÊôÐÔÓëAÄ£ÐÍ¶ÔÓ¦
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartPoint.SetAsTotal">
            <summary>
             True if the data point is considered as Subtotals or Totals. otherwise False.
            </summary>
            <remarks>Applies only to Waterfall charts.</remarks>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartPoint.m_setAsTotal">
            <summary>
            Set the data point as total
            Used only in waterfall chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.Funnel">
            <summary>
            Represents the Excel 2016 Funnel Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.WaterFall">
            <summary>
            Represents the Excel 2016 Water Fall Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.BoxAndWhisker">
            <summary>
            Represents the Excel 2016 Box and Whisker Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.Histogram">
            <summary>
            Represents the Excel 2016 Histogram Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.Pareto">
            <summary>
            Represents the Excel 2016 Pareto Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.TreeMap">
            <summary>
            Represents the Excel 2016 Tree Map Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.ChartType.SunBurst">
            <summary>
            Represents the Excel 2016 Sun Burst Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.m_showConnectorLines">
            <summary>
            Represents whether the connector lines shown between data points
            Used only in waterfall Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.m_treeMapLabelOption">
            <summary>
            It represents the label position in tree map chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.m_boxAndWhsikerFormat">
            <summary>
            Object that holds the information required for Box and whisker series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.m_histogramAxisFormat">
            <summary>
            Object that holds the information required for Histogram series
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.HistogramAxisFormatProperty">
            <summary>
            Gets/ Sets the histogram axis format property for individual series
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.ShowConnectorLines">
            <summary>
            Gets or sets a boolean value indicating whether to display 
            Connector Lines between data points
            </summary>
            <remarks>Applies only to Waterfall Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.TreeMapLabelOption">
            <summary>
            Gets / Sets the Display label position in Tree map chart
            </summary>
            <remarks>By Default the Label is overlapped</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.ShowMeanLine">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Line in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.ShowMeanMarkers">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Marker in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.ShowInnerPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Inner Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.ShowOutlierPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Outlier Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.QuartileCalculationType">
            <summary>
             Gets / Sets whether the Quartile calculation is Exclusive or Inclusive
            </summary>
            <remarks>Applies only to Box and Whisker Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.IsBinningByCategory">
            <summary>
            Get or Set the isBinning by Category member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.HasAutomaticBins">
            <summary>
            Get or Set the is Automatic Bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.NumberOfBins">
            <summary>
            Get or Set the number of Bins member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.BinWidth">
            <summary>
            Get or Set the Bin width member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.OverflowBinValue">
            <summary>
            Get or Set the overflow bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.UnderflowBinValue">
            <summary>
            Get or Set the underflow bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.DataFormat.IsIntervalClosedinLeft">
            <summary>
            Get or Set the value for interval is closed in left or right
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.TenThousands">
            <summary>
            Represents TenThousands display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.HundredThousands">
            <summary>
            Represents HundredThousands display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.TenMillions">
            <summary>
            Represents TenMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.HundredMillions">
            <summary>
            Represents HundredMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.percentage">
            <summary>
            Represents the displayUnit which is only avail at paret chart axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.DisplayUnitType.Custom">
            <summary>
            Represents Custom display Unit
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Legend.ChartExPosition">
            <summary>
            Indicates the position and alignment of chart legend
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Legend.m_chartExPosition">
            <summary>
            short value indicates the chartEx element position   
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_paretoLineFormatIndex">
            <summary>
            Indicates the format index of chart pareto line
            Used only in loaded chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_IsFiltered">
            <summary>
            Reprsent the Filter option
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_isParetoLineHidden">
            <summary>
            Indicates whether the pareto line is hidden
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_paretoLineFormat">
            <summary>
            Objects that holds the pareto line settings
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_isRowWiseCategory">
            <summary>
            Boolean value indicates category values interpreted in row-wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_isRowWiseSeries">
            <summary>
            Boolean value indicates series values interpreted in row-wise
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_formatCode">
            <summary>
            format code used in series values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_categoryFormatCode">
            <summary>
            format code used in category values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_hasLeaderLines">
            <summary>
            ShowLeaderLines for the series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.m_leaderLines">
            <summary>
            Border settings for ShowleaderLines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.IsParetoLineHidden">
            <summary>
            Gets / Sets the pareto line is hidden 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.IsSeriesHidden">
            <summary>
            Gets / Sets the series is hidden or not
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.ParetoLineFormatIndex">
            <summary>
             Gets / Sets the format index of chart pareto line
            Used only in loaded chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.IsRowWiseCategory">
            <summary>
            Gets / SetsBoolean value indicates category values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.IsRowWiseSeries">
            <summary>
            Gets / SetsBoolean value indicates series values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.FormatCode">
            <summary>
            Gets / Sets the format code for series values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Charts.Series.CategoriesFormatCode">
            <summary>
            Gets / Sets the format code for series categories
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Xlsb2007">
            <summary>
            Represents excel version 2007 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Xlsb2010">
            <summary>
            Represents excel version 2010 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.ODS">
            <summary>
            OpenOffice Spreadsheet documents
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Version97to2003">
            <summary>
            Represents excel version 97-2003.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Version2007">
            <summary>
            Represents excel version 2007
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Version2013">
            <summary>
            Represents excel version 2013.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Spreadsheet.OverExcelVersion.Version2016">
            <summary>
            Represents excel version 2016.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaBinToTree.ConvertBinaryToString(System.Byte[],System.Int32,System.Int32)">
            Converts binary formula to string.
            Parameters are same with {@link FormulaTokenVisitor#resetFormula(byte[], int, int)}.
            @param buffer binary formula data
            @param startPos
            @param endPos
            @return String formula string starts with '='.
            @throws UnsupportedEncodingException
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeStringUtil.NeedQuoteForOdsSheet(System.String)">
            Checks whether given string needs to be quoted for ODS file.
            
            @param str string to be checked.
            @return true if there are special characters in given string and the string needs to be quoted.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeValueUtil.ParseCriteria(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode,Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo)">
            Parse criteria from given node.
            
            @param criteria node which represents the criteria.
            @param relInfo FormulaRelInfo
            @return null if the criteria will be always false.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeValueUtil.GetParamValues(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo,System.Int32,System.Double[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaValueAcceptedType)">
            Get the double values of given param list.
            
            @param arrParam
            @param relInfo
            @param int offset the offset in param list from which to convert values.
            @return If there is error param in given param list, returns this error param; If the param's value is invalid, returns #VALUE; Otherwise returns null.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeValueUtil.GetParamValues(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo,System.Int32,System.Boolean[])">
            Get the double values of given param list.
            
            @param params
            @param relInfo
            @param int offset the offset in param list from which to convert values.
            @return If there is error param in given param list, returns this error param; If the param's value is invalid, returns #VALUE; Otherwise returns null.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeValueUtil.GetParamValues(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo,System.Int32,System.String[])">
            Get the double values of given param list.
            
            @param arrParam
            @param relInfo
            @param int offset the offset in param list from which to convert values.
            @return If there is error param in given param list, returns this error param; If the param's value is invalid, returns #VALUE; Otherwise returns null.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.FormulaNodeValueUtil.GetParamValues(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo,System.Int32,System.DateTime[],Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaValueAcceptedType)">
            Get the datetime values of given param list.
            
            @param arrParam
            @param relInfo
            @param int offset the offset in param list from which to convert values.
            @return If there is error param in given param list, returns this error param; If the param's value is invalid, returns #VALUE; Otherwise returns null.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.FormulaNodeAbstract.ToString(System.Text.StringBuilder,Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo)">
            Converts this node itself to String.
            Does not convert its children.
            @param sb buffer to append content.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.FormulaNodeFunction.SetParams(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.Node.IFormulaNode[])">
            Sets parameter nodes for this function.
            
            @param arrParams parameters. Every element is a parameter of this function.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ResetFormula(System.Byte[],System.Int32,System.Int32)">
            Resets formula data for this iterator.
            
            @param formula the buffer that holds formula data.
            @param startPos start offset of formula data(inclusive), data at startPos should be tokenID(endPos is non-negative) or formula size(endPos is -1).
            @param endPos end offset of formula data(exclusive). -1 means data at startPos is formula's size.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ReadReference(Spire.Xls.Core.Converter.Spreadsheet.Formula.Model.FormulaRelInfo)">
            Reads the CellRange from current token.
            If a valid CellRange has been read, the pointer will be moved to the next token.
            @param relInfo the relevant information of this formula. Such as Workbook/Worksheet, base position, owner such as Cell, Validation, ..., etc.
            @return CellRange if current token is a valid CellRange. Returns null if current token is not for CellRange or is AreaErr.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ReadArray">
            Reads the data from current additional part.
            After read the pointer for additional data will be moved to the part of next token.
            @return the additional data.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ReadString">
            Reads the String value from current token.
            If String value is in token's data, after read the pointer will be moved to the next token.
            If String value is in token's additional data, after read the additional data pointer will be moved to the next sub-token.
            @return String if current token is for String. Returns null if current token is not for String.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.TokenPosition">
            Gets the position of current token in the formula.
            
            @return the position of current token in the formula.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.AdditionalDataPosition">
            Gets the position of current additional data in the formula.
            
            @return the position of current additional data in the formula.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.HasToken">
            Checks whether there is a token can be processed.
            
            @return false if this iterator has reached the end of formula.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ToNextToken">
            Moves cursor from current token to the next token in formula.
            @return whether current token can be recognized.
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.ReadName(Spire.Xls.Core.Converter.Spreadsheet.WorkbookConverter)">
            Reads Name object from current token.
            If current token is for Name, after read the pointer will be moved to the next token.
            @param wb Workbook the formula is in.
            @return Name if current token is for Name. Returns null if current token is not for Name or Name is of external workbook.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.IsCellAddress">
            Checks whether current token is CellAddress, inclues RefErr.
            
            @return true if current token is CellAddress.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.IsCellRange">
            Checks whether current token is CellRange, includes AreaErr.
            
            @return true if current token is CellRange.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.Formula.Visitor.FormulaTokenVisitor.IsName">
            Checks whether current token is Name, inclues NameX.
            
            @return true if current token is Name.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Spreadsheet.PivotTable.PivotTable.NumberOfColumnData">
            Gets number of the column data.
            @return
        </member>
        <member name="M:Spire.Xls.Core.Converter.Spreadsheet.Worksheet.AddSignatureLine(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add signature line to range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.ShowMeanLine">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Line in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.ShowMeanMarkers">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Marker in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.ShowInnerPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Inner Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.ShowOutlierPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Outlier Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.QuartileCalculationContainMean">
            <summary>
             Gets / Sets whether whether contain mean value when Quartile calculation
            </summary>
            <remarks>Applies only to Box and Whisker Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.ShowConnectorLines">
            <summary>
            Gets or sets a boolean value indicating whether to display 
            Connector Lines between data points
            </summary>
            <remarks>Applies only to Waterfall Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSCharts.General.Series_XLSChart.TreeMapLabelOption">
            <summary>
            Gets / Sets the Display label position in Tree map chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.TreeMap">
            <summary>
            Represents the Excel 2016 Tree Map Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.SunBurst">
            <summary>
            Represents the Excel 2016 Sun Burst Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.Histogram">
            <summary>
            Represents the Excel 2016 Histogram
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.Pareto">
            <summary>
            Represents the Excel 2016 Pareto Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.BoxAndWhisker">
            <summary>
            Represents the Excel 2016 Box and Whisker Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.WaterFall">
            <summary>
            Represents the Excel 2016 Water Fall Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Common.Fields.ChartType.Funnel">
            <summary>
            Represents the Excel 2016 Funnel Chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.ShowMeanLine">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Line in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.ShowMeanMarkers">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Marker in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.ShowInnerPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Inner Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.ShowOutlierPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Outlier Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.QuartileCalculationContainMean">
            <summary>
             Gets / Sets whether whether contain mean value when Quartile calculation
            </summary>
            <remarks>Applies only to Box and Whisker Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.ShowConnectorLines">
            <summary>
            Gets or sets a boolean value indicating whether to display 
            Connector Lines between data points
            </summary>
            <remarks>Applies only to Waterfall Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.Interface.ISeries_Chart.TreeMapLabelOption">
            <summary>
            Gets / Sets the Display label position in Tree map chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.ShowMeanLine">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Line in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.ShowMeanMarkers">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Marker in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.ShowInnerPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Inner Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.ShowOutlierPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Outlier Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.QuartileCalculationContainMean">
            <summary>
             Gets / Sets whether whether contain mean value when Quartile calculation
            </summary>
            <remarks>Applies only to Box and Whisker Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.ShowConnectorLines">
            <summary>
            Gets or sets a boolean value indicating whether to display 
            Connector Lines between data points
            </summary>
            <remarks>Applies only to Waterfall Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.General.Series_XLSXChart.TreeMapLabelOption">
            <summary>
            Gets / Sets the Display label position in Tree map chart
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.Helpers.TreeMapLabelOption">
             <summary>
            It represents the Label position in Tree Map chart
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.Helpers.TreeMapLabelOption.None">
             <summary>
            No Parent labels are shown
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.Helpers.TreeMapLabelOption.Banner">
             <summary>
            The Parent label layout is a Banner above the category        
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Charts.XLSXCharts.Helpers.TreeMapLabelOption.Overlapping">
            <summary>
            The Parent label is laid out within the category
            </summary>        
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Shapes.XLSXShaps.Basicshape.ShapeDiamond_XLSXShape.TextPaddingFactor">
            Factor for padding around the text
        </member>
        <member name="F:Spire.Xls.Core.Converter.Rendering.Chart.Shapes.XLSXShaps.Basicshape.ShapeDiamond_XLSXShape.TextSizeFactor">
            Factor for the size of the text rectangle
        </member>
        <member name="M:Spire.Xls.Core.Converter.Internal.Rendering.PngChunkVisitor.ProcessChunk">
            Processes one chunk in png file.
            Default behavior is move to next chunk directly.
            When calling this method, the pointer in png stream is just at the begin of data block of current chunk.
            After this call, the pointer in png stream must be at the end of this chunk(after the crc block).
            @return whether continue to process following chunks. If false be returned, visitor will stop to read and process following chunks.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Internal.Rendering.PngChunkVisitor.ChunkPosition">
            Gets the start position of current chunk in the png data.
            
            @return the start position of current chunk in the png data(data size, chunk code, chunk data, crc).
        </member>
        <member name="P:Spire.Xls.Core.Converter.Internal.Rendering.PngChunkVisitor.ChunkCode">
            Gets current chunk code.
            
            @return current chunk code.
        </member>
        <member name="P:Spire.Xls.Core.Converter.Internal.Rendering.PngChunkVisitor.ChunkDataSize">
            Gets current chunk's data size.
            
            @return current chunk's data size(crc is not included).
        </member>
        <member name="M:Spire.Xls.Core.Converter.Internal.Format.FormatRelInfo.BuildDefaultYMD(System.String,System.String,System.String,System.String,System.String,System.String,System.Text.StringBuilder)">
            Builds year/month/day pattern in corresponding locale's default order.
            
            @param patternY pattern of year field, such as "yyyy" or "yy"
            @param suffixY suffix following year field
            @param patternM pattern of month field, such as "MM"
            @param suffixM suffix following month field
            @param patternD pattern of day field, such as "dd"
            @param suffixD suffix following day field.
            @param buffer buffer for appending resultant built pattern, can be null.
            @return if buffer is not null, then append the resultant pattern into and return it. Otherwise create new one and append resultant pattern into and return the new one.
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaLCPeriod">
            <summary>
            Lowercase alphabetical characters with a period. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaUCPeriod">
            <summary>
            Uppercase alphabetical characters with a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicParenRight">
            <summary>
            Arabic numerals with closing parenthesis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicPeriod">
            <summary>
            Arabic numerals with a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanLCParenBoth">
            <summary>
            Lowercase Roman numerals with both parentheses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanLCParenRight">
            <summary>
            Lowercase Roman numerals with closing parenthesis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanLCPeriod">
            <summary>
            Lowercase Roman numerals with period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanUCPeriod">
            <summary>
            Uppercase Roman numerals with period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaLCParenBoth">
            <summary>
            Lowercase alphabetical characters with both parentheses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaLCParenRight">
            <summary>
            Lowercase alphabetical characters with closing parenthesis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaUCParenBoth">
            <summary>
            Uppercase alphabetical characters with both parentheses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletAlphaUCParenRight">
            <summary>
            Uppercase alphabetical characters with closing parenthesis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicParenBoth">
            <summary>
            Arabic numerals with both parentheses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicPlain">
            <summary>
            Arabic numerals.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanUCParenBoth">
            <summary>
            Uppercase Roman numerals with both parentheses.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletRomanUCParenRight">
            <summary>
            Uppercase Roman numerals with closing parenthesis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletSimpChinPlain">
            <summary>
            Simplified Chinese without a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletSimpChinPeriod">
            <summary>
            Simplified Chinese with a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletCircleNumDBPlain">
            <summary>
            Double-byte circled number for values up to 10.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletCircleNumWDWhitePlain">
            <summary>
            Text colored number with same color circle drawn around it.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletCircleNumWDBlackPlain">
            <summary>
            Shadow color number with circular background of normal text color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletTradChinPlain">
            <summary>
            Traditional Chinese without a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletTradChinPeriod">
            <summary>
            Traditional Chinese with a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicAlphaDash">
            <summary>
            Arabic language alphabetical characters with a dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicAbjadDash">
            <summary>
            Arabic Abjad alphabets with a dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletHebrewAlphaDash">
            <summary>
            Hebrew language alphabetical characters with a dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletKanjiKoreanPlain">
            <summary>
            Japanese/Korean numbers without a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletKanjiKoreanPeriod">
            <summary>
            Japanese/Korean numbers with a period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicDBPlain">
            <summary>
            Double-byte Arabic numbering scheme (no punctuation).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletArabicDBPeriod">
            <summary>
            Double-byte Arabic numbering scheme with double-byte period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiAlphaPeriod">
            <summary>
            Thai Alpha period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiAlphaParenRight">
            <summary>
            Thai Alpha Paren right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiAlphaParenBoth">
            <summary>
            Thai Alpha Paren both.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiNumPeriod">
            <summary>
            Thai Num period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiNumParenRight">
            <summary>
            Thai Num Paren right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletThaiNumParenBoth">
            <summary>
            Thai Num Paren both.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletHindiAlphaPeriod">
            <summary>
            Hindi Alpha period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletHindiNumPeriod">
            <summary>
            Hindi Num period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletKanjiSimpChinDBPeriod">
            <summary>
            Kanji Simple Chinese DBPeriod.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletHindiNumParenRight">
            <summary>
            Hindi Num Paren right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletNumStyle.BulletHindiAlpha1Period">
            <summary>
            Hindi Alpha1 period.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletType.Symbol">
            <summary>
            Sysmbol bullets.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletType.Number">
            <summary>
            Numbered bullets.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Converter.Content.BulletType.Picture">
            <summary>
            Picture bullets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Converter.Importing.ImportSettings.ProhibitDtd">
            <summary>
            prohibt dtd processing switch
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat">
            <summary>
            Class provide the options for Box and Whisker series
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.m_options">
            <summary>
            It provide the options used for Box and Whisker series
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.ShowMeanLine">
            <summary>
            Indicates whether the show mean line option is enabled
            Bit position - 0
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.ShowMeanMarkers">
            <summary>
            Indicates whether the show mean marker option is enabled
            Bit position - 1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.ShowInnerPoints">
            <summary>
            Indicates whether the show inner points option is enabled
            Bit position - 2
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.ShowOutlierPoints">
            <summary>
            Indicates whether the show outlier points option is enabled
            Bit position - 3
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.QuartileCalculationType">
            <summary>
            Indicates quartile calculation is exclusive or inclusive
            Bit position - 4
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.BoxAndWhiskerSerieFormat.Options">
            <summary>
            Gets / Sets the options for the charts
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat">
            <summary>
            Class provide the options for Histogram and Pareto Chart axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_flagOptions">
            <summary>
            byte value used as flag and boolean property for the values
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_numberOfBins">
            <summary>
            Indicates the number of bins in the axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_binWidth">
            <summary>
            Indicates the bin width for axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_overflowBinValue">
            <summary>
            Indicates the overflow bin value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_underflowBinValue">
            <summary>
            Indicates the underflow bin value
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.m_isNotAutomaticUnderFlowValue">
            <summary>
            Indicates whether the underflow value set or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.HasAutomaticBins">
            <summary>
            Get or Set the is Automatic Bin member value
            Bit Position  - 0
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.IsBinningByCategory">
            <summary>
            Get or Set the isBinning by Category member value
            Bit position - 1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.BinWidth">
            <summary>
            Get or Set the Bin width member value
            flag Bit position - 2
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.NumberOfBins">
            <summary>
            Get or Set the number of Bins member value
            Flag Bit position - 3
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.OverflowBinValue">
            <summary>
            Get or Set the overflow bin member value
            Flag Bit Position - 4
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.UnderflowBinValue">
            <summary>
            Get or Set the underflow bin member value
            Flag Bit position - 5
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.IsIntervalClosedinLeft">
            <summary>
            Get or Set the value for interval is closed in left or right
            Flag Bit position - 6
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.FlagOptions">
            <summary>
            Byte value shows the options used in this class
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.IsNotAutomaticOverFlowValue">
            <summary>
            Get or Set the value for automatic value has been used in overflow
            Flag Bit position - 7
            Used only in parsed workbook
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.IsNotAutomaticUnderFlowValue">
            <summary>
            Get or Set the value for automatic value has been used in underflow        
            Used only in parsed workbook
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.ResetValues(System.Byte)">
            <summary>
            Reset the member values respect to input value
            </summary>
            <param name="value">Input Bit position changed</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.Clone(Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat)">
            <summary>
            Clones the value from input object
            </summary>
            <param name="inputFormat">input object</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.HistogramAxisFormat.Equals(System.Object)">
            <summary>
            Check for the equals an object
            </summary>
            <param name="obj">input another histogram object</param>
            <returns>the boolean value indicates whether the objects are equal or not.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl">
            <summary>
            Represents a collection of chart legend entries.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Count">
            <summary>
            Gets the count of data points in the chart. If the chart type requires data points for the legend, it returns the number of points in the first series. Otherwise, it returns the total count of series and their trend lines.
            </summary>
            <returns>
            The count of data points in the chart.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Item(System.Int32)">
            <summary>
            Gets the IChartLegendEntry at the specified index.
            </summary>
            <param name="iIndex">The zero-based index of the IChartLegendEntry to get.</param>
            <returns>The IChartLegendEntry at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Add(System.Int32)">
            <summary>
            Adds a chart legend entry at the specified index.
            </summary>
            <param name="iIndex">The zero-based index at which the legend entry should be added.</param>
            <returns>The newly added or existing XlsChartLegendEntry at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is greater than or equal to the count of existing entries.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Add(System.Int32,Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry)">
            <summary>
            Adds a chart legend entry at the specified index.
            </summary>
            <param name="iIndex">The zero-based index at which the entry should be inserted.</param>
            <param name="entry">The XlsChartLegendEntry to add.</param>
            <returns>The added XlsChartLegendEntry.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is greater than or equal to the count of existing entries.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Contains(System.Int32)">
            <summary>
            Determines whether the collection contains an element with the specified index.
            </summary>
            <param name="iIndex">The index to check for in the collection.</param>
            <returns>
            true if the collection contains an element with the specified index; otherwise, false.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.CanDelete(System.Int32)">
            <summary>
            Determines if an entry at the specified index can be deleted.
            </summary>
            <param name="iIndex">The index of the entry to check.</param>
            <returns>
            Returns true if the entry can be deleted, false otherwise.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Remove(System.Int32)">
            <summary>
            Removes the legend entry at the specified index from the chart.
            </summary>
            <param name="iIndex">The zero-based index of the legend entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the count of legend entries.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Clear">
            <summary>
            Clears all entries from the hash table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent for cloned object.</param>
            <param name="dicIndexes">Represents list with new font indexes.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.ChartLegendEntriesColl.UpdateEntries(System.Int32,System.Int32)">
            <summary>
            Adds value to entties index.
            </summary>
            <param name="entryIndex">Represents start entrie index.</param>
            <param name="value">Represents value to add.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChart">
            <summary>
            Represents a chart in an Excel worksheet. This class provides functionality to create, modify, and manipulate charts within an Excel document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_FIRST_SERIE_NAME">
            <summary>
            Firts serie default name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEFAULT_CHART_TYPE">
            <summary>
            Default chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_3D">
            <summary>
            Prefix for 3D charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_BAR">
            <summary>
            Prefix for bar charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_CLUSTERED">
            <summary>
            Prefix for clustered charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_CONTOUR">
            <summary>
            Prefix for contour charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_EXPLODED">
            <summary>
            Prefix for exploded charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_LINE">
            <summary>
            Prefix for line charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_MARKERS">
            <summary>
            Prefix for charts with markers.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_NOCOLOR">
            <summary>
            Prefix for charts with no color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_SHOW_PERCENT">
            <summary>
            Prefix for 100% charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_SMOOTHEDLINE">
            <summary>
            Prefix for charts with smoothed lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PREFIX_STACKED">
            <summary>
            Prefix for stacked charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_AREA">
            <summary>
            Start of the chart type for area charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_BAR">
            <summary>
            Start of the chart type for bar charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_BUBBLE">
            <summary>
            Start of the chart type for bubble charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_COLUMN">
            <summary>
            Start of the chart type for column charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_CONE">
            <summary>
            Start of the chart type for cone charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_CYLINDER">
            <summary>
            Start of the chart type for cylinder charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_DOUGHNUT">
            <summary>
            Start of the chart type for doughnut charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_LINE">
            <summary>
            Start of the chart type for line charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_PIE">
            <summary>
            Start of the chart type for pie charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_PYRAMID">
            <summary>
            Start of the chart type for pyramid charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_RADAR">
            <summary>
            Start of the chart type for radar charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_SCATTER">
            <summary>
            Start of the chart type for scatter charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.START_SURFACE">
            <summary>
            Start of the chart type for surface charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_PRIMARY_INDEX">
            <summary>
            Index of the primary axes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SI_VALUE">
            <summary>
            Si value index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SI_CATEGORY">
            <summary>
            Si category index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SI_BUBBLE">
            <summary>
            Si bubble index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SECONDARY_INDEX">
            <summary>
            Index of the secondary axes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.MaximumFontCount">
            <summary>
            Maximum font count.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultPlotAreaX">
            <summary>
            Represents the Defualt Plot Area Top Left X.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultPlotAreaY">
            <summary>
            Represents the Default Plot Area Top Left Y.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultPlotAreaXLength">
            <summary>
            Represents the Default Plot Area X Length.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultPlotAreaYLength">
            <summary>
            Represents the Default Plot Area Y Length.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_LEGEND_NEED_DATA_POINT">
            <summary>
            Represents start types of chart that support data point.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SUPPORT_SERIES_AXIS">
            <summary>
            Represents types of chart that support series axis .
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_UNSUPPORT_PIVOT_CHART">
            <summary>
            Represents types of chart that do not support the pivot chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SUPPORT_DATA_TABLE">
            <summary>
            Represents start types of chart that support data table.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SUPPORT_ERROR_BARS">
            <summary>
            Represents start types of chart that support error bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SUPPORT_TREND_LINES">
            <summary>
            Represents start types of chart that support trendlines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_WALLS_OR_FLOOR_TYPES">
            <summary>
            Represents types of charts that contain walls or floor objects.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SECONDARY_AXES_TYPES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_NOT_3D">
            <summary>
            Represents types of charts that can't be 3d.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_CHANGE_SERIE">
            <summary>
            Represents types of charts that are not 3d.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_NOT_SUPPORT_GRIDLINES">
            <summary>
            Represents series type that supports gridlines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_NEED_SECONDARY_AXIS">
            <summary>
            Represents series type that must be in secondary primary axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_COMBINATION_CHART">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_PRIORITY_START_TYPES">
            <summary>
            Represents array that contain start serie types sorted by drawing order.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_CHANGE_INTIMATE">
            <summary>
            Represents chart types that can change as intimate types.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_DONT_NEED_PLOT">
            <summary>
            Represents chart start types thet doesn't need plot or walls.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_NEED_VIEW_3D">
            <summary>
            Represents chart types for pivot chart which need view tag to be rendered.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_100">
            <summary>
            100% charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.STACKEDCHARTS">
            <summary>
            Stacked charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS3D">
            <summary>
            3D charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_LINE">
            <summary>
            Line charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_BUBBLE">
            <summary>
            Bubble charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.NO_CATEGORY_AXIS">
            <summary>
            Charts that can be without category axis:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_VERYCOLOR">
            <summary>
            Charts that need another color for each value:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_EXPLODED">
            <summary>
            Exploded charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHART_SERIES_LINES">
            <summary>
            Charts that need series lines:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_SCATTER">
            <summary>
            Scatter charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_SMOOTHED_LINE">
            <summary>
            Charts with smoothed lines:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_STOCK">
            <summary>
            Stock charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_PERSPECTIVE">
            <summary>
            Charts with perspective:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_CLUSTERED">
            <summary>
            Clustered charts:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CHARTS_WITH_PLOT_AREA">
            <summary>
            Charts with plot area (by default):
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.LEGEND_VERTICAL">
            <summary>
            Legend types that are displayed vertically:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_UNKNOWN_SERIE_LABEL">
            <summary>
            Unknown bytes. Needed for data labels serialization.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_SPECIAL_DATA_LABELS">
            <summary>
            Charts that have different ways of data labels storage:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DEF_CHART_PERCENTAGE">
            <summary>
            Charts that can have percentage data labels:
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.m_book">
            <summary>
            Represents the workbook object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.InitializeCollections">
            <summary>
            Initializes the collections used by the derived class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartExTitlePosition">
            <summary>
            Indicates the position and alignment of chart title
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartTitleIncludeInLayout">
            <summary>
            Indicates the chart title included in chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.AutoUpdate">
            <summary>
            Gets / Sets the Auto update member variable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartExRelationId">
            <summary>
            Gets / Sets the ChartEx relation Id member variable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsTreeMapOrSunBurst">
            <summary>
            True if the chart type is treemap or sunburst. Otherwise false
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsHistogramOrPareto">
            <summary>
            True if the chart type is histogram or pareto. Otherwise false
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartType">
            <summary>
            Type of the chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.MoveChartsheet(System.Int32)">
            <summary>
            Moves chartsheet into new position.
            </summary>
            <param name="destIndex">Destination index.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DataRange">
            <summary>
            DataRange for the chart series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SeriesDataFromRange">
            <summary>
            True if series are in rows in DataRange;
            False otherwise.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PageSetup">
            <summary>
            Page setup for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.XPos">
            <summary>
            X coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.YPos">
            <summary>
            Y coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Width">
            <summary>
            Width of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Height">
            <summary>
            Height of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PrimaryCategoryAxis">
            <summary>
            Primary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PrimaryValueAxis">
            <summary>
            Primary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PrimarySerieAxis">
            <summary>
            Primary serie axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SecondaryCategoryAxis">
            <summary>
            Secondary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SecondaryValueAxis">
            <summary>
            Secondary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartArea">
            <summary>
            Returns an object that represents the complete chart area for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PlotArea">
            <summary>
            Returns plot area frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Walls">
            <summary>
            Represents chart walls. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Floor">
            <summary>
            Represents chart floor. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DataTable">
            <summary>
            Represents charts dataTable object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasDataTable">
            <summary>
            True if the chart has a data table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Legend">
            <summary>
            Represents chart legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasLegend">
            <summary>
            True if the chart has a legend object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Rotation">
            <summary>
            Returns or sets the rotation of the 3-D chart view
            (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Elevation">
            <summary>
            Returns or sets the elevation of the 3-D chart view, in degrees (?0 to +90 degrees).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Perspective">
            <summary>
            Returns or sets the perspective for the 3-D chart view (0 to 100).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HeightPercent">
            <summary>
            Returns or sets the height of a 3-D chart as a percentage of the chart width
            (between 5 and 500 percent).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DepthPercent">
            <summary>
            Returns or sets the depth of a 3-D chart as a percentage of the chart width
            (between 20 and 2000 percent).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DestinationType">
            <summary>
            Gets chart type after type change.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.GapDepth">
            <summary>
            Returns or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.( 0 - 500 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.RightAngleAxes">
            <summary>
            True if the chart axes are at right angles, independent of chart rotation or elevation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.AutoScaling">
            <summary>
            True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.WallsAndGridlines2D">
            <summary>
            True if gridlines are drawn two-dimensionally on a 3-D chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasPlotArea">
            <summary>
            Indicates whether chart has plot area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DisplayBlanksAs">
            <summary>
            Represents the way that blank cells are plotted on a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PlotVisibleOnly">
            <summary>
            True if only visible cells are plotted. False if both visible and hidden cells are plotted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SizeWithWindow">
            <summary>
            True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
            False if the chart size isn't attached to the window size. Applies only to chart sheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PivotTable">
            <summary>
            Gets or sets the pivot source.
            </summary>
            <value>The pivot source.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.PivotChartType">
            <summary>
            Gets or sets the type of the pivot chart.
            </summary>
            <value>The type of the pivot chart.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DisplayEntireFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show all field buttons].
            </summary>
            <value>
            	<c>true</c> if [show all field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DisplayValueFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show value field buttons].
            </summary>
            <value>
            	<c>true</c> if [show value field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DisplayAxisFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show axis field buttons].
            </summary>
            <value>
            	<c>true</c> if [show axis field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DisplayLegendFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show legend field buttons].
            </summary>
            <value>
            	<c>true</c> if [show legend field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ShowReportFilterFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show report filter field buttons].
            </summary>
            <value>
            	<c>true</c> if [show report filter field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CanChartBubbleLabel">
            <summary>
            Returns True if chart can have bubble data labels. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CanChartHaveSeriesLines">
            <summary>
            Returns True if chart can have series lines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CanChartPercentageLabel">
            <summary>
            Returns True if chart can have percentage data labels. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CategoryAxisTitle">
            <summary>
            Title of the category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartStartType">
            <summary>
            Returns start type of chart type. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartTitle">
            <summary>
            Title of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ChartTitleFont">
            <summary>
            Returns object that describes chart title area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultLinePattern">
            <summary>
            Returns default line pattern for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.DefaultTextIndex">
            <summary>
            Gets font index from the default font records.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Font">
            <summary>
            Gets font which used for displaying axis text .
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsCategoryAxisAvail">
            <summary>
            Indicates whether chart has a category axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChart_100">
            <summary>
            Returns True if chart is 100%. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChart3D">
            <summary>
            Returns True if chart is 3D. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartBar">
            <summary>
            Returns True if chart is a bar chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartBubble">
            <summary>
            Returns True if chart is a bubble chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartCone">
            <summary>
            Returns True if chart is a conical shape. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartCylinder">
            <summary>
            Returns True if chart is a cylinder shape. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartDoughnut">
            <summary>
            Returns True if chart is a doughnut chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartExploded">
            <summary>
            Returns True if chart is exploded. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartFloor">
            <summary>
            Returns True if chart has floor. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartLine">
            <summary>
            Returns True if chart is line. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartPie">
            <summary>
            Returns True if chart is a pie chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartPyramid">
            <summary>
            Returns True if chart is a pyramid shape. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartRadar">
            <summary>
            Returns True if chart is a radar chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartScatter">
            <summary>
            Returns True if chart is a scatter chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartSmoothedLine">
            <summary>
            Returns True if chart has smoothed lines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartStock">
            <summary>
            Returns True if this is a stock chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartVeryColor">
            <summary>
            Returns True if chart should have a different color for each series value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartVolume">
            <summary>
            Returns True if chart is a stock chart with volume. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsChartWalls">
            <summary>
            Returns True if chart has walls. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsClustered">
            <summary>
            Returns True if chart is a clustered chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsEmbeded">
            <summary>
            Gets value indicating whether chart is embeded into worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsPerspective">
            <summary>
            Returns True if chart has perspective. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsPivot3DChart">
            <summary>
            Gets a value indicating whether this instance is pivot 3D chart .
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSecondaryAxes">
            <summary>
            Returns True if at least one of the secondary axes is present. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSecondaryCategoryAxisAvail">
            <summary>
            Returns True if secondary category axis present. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSecondaryValueAxisAvail">
            <summary>
            Returns True if secondary value axis present. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSeriesAxisAvail">
            <summary>
            Indicates if chart has a series axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSeriesLines">
            <summary>
            Returns True if chart has series lines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsSpecialDataLabels">
            <summary>
            Returns True if chart needs special data labels serialization.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsStacked">
            <summary>
            Returns True if chart is stacked. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.IsValueAxisAvail">
            <summary>
            Indicates whehter chart has a value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.NeedDataFormat">
            <summary>
            Returns True if chart needs data format to be saved. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.NeedDropBar">
            <summary>
            Returns True if chart needs drop bars to be saved. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.NeedMarkerFormat">
            <summary>
            Returns True if chart needs marker format to be saved. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.NoPlotArea">
            <summary>
            Returns True if chart has no plot area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Style">
            <summary>
            Style index for Excel 2007 chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SupportWallsAndFloor">
            <summary>
            Indicates whether this chart supports walls and floor. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ZoomToFit">
            <summary>
            Gets or sets zoomToFit value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SecondaryCategoryAxisTitle">
            <summary>
            Title of the secondary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SecondaryValueAxisTitle">
            <summary>
            Title of the secondary value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SeriesAxisTitle">
            <summary>
            Title of the series axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.ValueAxisTitle">
            <summary>
            Title of the value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasChartArea">
            <summary>
            Indicates whether chart has chart area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasChartTitle">
            <summary>
            Indicates wheather the chart has title
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasFloor">
            <summary>
            Gets value indicating whether floor object was created.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasWalls">
            <summary>
            Gets value indicating whether floor object was created.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.HasPivotTable">
            <summary>
            Indicates whether contains pivot table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CheckDataTablePossibility(System.String,System.Boolean)">
            <summary>
            Checks whether data table is compatible with specified start type.
            </summary>
            <param name="startType">The type of the data table to check.</param>
            <param name="bThrowException">Indicates whether to throw an exception if the data table type is not supported.</param>
            <returns>A boolean indicating whether the data table type is supported.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.CheckForSupportGridLine">
            <summary>
            Chacks for existing gridlines in chart.
            </summary>
            <returns>Returns true if can exist; otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Clone(System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Clones current instance.
            </summary>
            <param name="hashNewNames">Hash table with new Worksheet names.</param>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.Clone(System.Object)">
            <summary>
            Clones current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChart.SetToDefaultGridlines(Spire.Xls.ExcelChartType)">
            <summary>
            Sets to default chart grid lines on chart type or serie type changing.
            </summary>
            <param name="type">Represents type to change.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis">
            <summary>
            Represents an axis in an Excel chart, providing properties and methods to configure and manipulate chart axes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.m_majorGrid">
            <summary>
            Represents major grid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.m_minorGrid">
            <summary>
            Represents minor grid.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.SetChartFormats">
            <summary>
            Returns collection that contain chart format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.AxisType">
            <summary>
            Type of the axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.IsPrimary">
            <summary>
            True if this is primary axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Title">
            <summary>
            Title of the axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.TextRotationAngle">
            <summary>
            Gets or sets the angle of rotation for the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.IsAutoTextRotation">
            <summary>
            Returns text area for the axis title. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.TitleArea">
            <summary>
            Returns text area for the axis title. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Font">
            <summary>
            Returns font used for axis text displaying. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.FrameFormat">
            <summary>
            Return frame format of Axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Has3dProperties">
            <summary>
            This property Indicates whether the Shadow object has been created(which includes the 3D properties)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.HasAxisTitle">
            <summary>
            Indicates wheather the axis has title
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.MajorGridLines">
            <summary>
            Returns major gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.MinorGridLines">
            <summary>
            Returns minor gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.HasMinorGridLines">
            <summary>
            True if the axis has minor gridlines. Only axes in the primary axis group can have gridlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.HasMajorGridLines">
            <summary>
            True if the axis has major gridlines. Only axes in the primary axis group can have gridlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.NumberFormatIndex">
            <summary>
            Gets or sets format index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.NumberFormat">
            <summary>
            Gets or sets number format string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.MinorTickMark">
            <summary>
            Represents minor tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.MajorTickMark">
            <summary>
            Represents major tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Border">
            <summary>
            Represents chart border. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.TickLabelPosition">
            <summary>
            Represents tick label position.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.MultiLevelLable">
            <summary>
            Axis is show Multi-level category lables.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Visible">
            <summary>
            Indicates is axis is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Alignment">
            <summary>
            Represents alignment for the tick label.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.IsReversed">
            <summary>
            True if plots data points from last to first.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.AxisId">
            <summary>
            Gets axis id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Chart3DOptions">
            <summary>
            Gets the chart3 D options.
            </summary>
            <value>The chart3 D options.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Chart3DProperties">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Deleted">
            <summary>
            Gets or sets value indicating whether axis was deleted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.ParagraphType">
            <summary>
            Represents the TextArea Paragraph 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Shadow">
            <summary>
            Represents the Shadow.Read-only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.ShadowProperties">
            <summary>
            Represents Shadow Propertes.Read-Only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.AutoTickLabelSpacing">
            <summary>
            Gets or sets a value indicating whether the spacing between tick labels on the axis should be automatically adjusted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.AutoTickMarkSpacing">
            <summary>
            Gets or sets a value indicating whether the spacing between tick marks on the axis should be automatically determined.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.IsSourceLinked">
            <summary>
            Determines whether the source is linked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.TextDirection">
            <summary>
            axis's text direction
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartAxis.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clone current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Dictionary with new indexes.</param>
            <param name="dicNewSheetNames">A dictionary mapping old sheet names to new sheet names.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder">
            <summary>
            Represents the border of a chart in an Excel worksheet, allowing customization of its appearance such as color, style, and width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.Color">
            <summary>
            Color of line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.Pattern">
            <summary>
            Line pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.Weight">
            <summary>
            Weight of line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.UseDefaultFormat">
            <summary>
            Indicates if use default format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.UseDefaultLineColor">
            <summary>
            Indicates if custom line color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.KnownColor">
            <summary>
            Line  excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.Transparency">
            <summary>
            Returns the transparency level of the specified Solid color shaded XlsFill as a floating-point
            value from 0.0 (light) through 1.0(dark)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.CustomLineWeight">
            <summary>
            Gets or sets the line weight.
            </summary>
            <value>The line weight.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.JoinType">
            <summary>
            Border edge join type
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartBorder.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Represents parent object.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis">
            <summary>
            Represents the category axis of a chart in an Excel worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.DefaultCategoryAxisId">
            <summary>
            Some category axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.DefaultSecondaryCategoryAxisId">
            <summary>
            Some secondary category axis id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsLogScale">
            <summary>
            Represents logarithmic scale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MaxValue">
            <summary>
            Represents maximum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MinValue">
            <summary>
            Represents minimum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.LogBase">
            <summary>
            Represents the logarithmic base. Default value is 10.Only applies for Excel2007.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.CrossValue">
            <summary>
            Value of category axis crosses.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.CrossesAt">
            <summary>
            Represents the point on the axis another axis crosses it.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsMaxCross">
            <summary>
            Value axis crosses at the far right category.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.CrossingPoint">
            <summary>
            Represents the point on the axis another axis crosses it.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.LabelFrequency">
            <summary>
            Frequency of labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.TickMarksFrequency">
            <summary>
            Frequency of tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.TickMarkSpacing">
            <summary>
            Represents the number of categories or series between tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.AxisBetweenCategories">
            <summary>
            True if the value axis crosses the category axis between categories
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsReverseOrder">
            <summary>
            Categories in reverse order.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.CategoryLabels">
            <summary>
            Category labels for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.EnteredDirectlyCategoryLabels">
            <summary>
            Entered directly category labels for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.CategoryType">
            <summary>
            Represents axis category type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.Offset">
            <summary>
            Represents distance between the labels and axis line.
            The value can be from 0 through 1000.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.BaseUnit">
            <summary>
            Represents base unit for the specified category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.BaseUnitIsAuto">
            <summary>
            True if use automatic base units for the specified category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsAutoMajor">
            <summary>
            Automatic major selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsAutoMinor">
            <summary>
            Automatic minor selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsAutoCross">
            <summary>
            Automatic category crossing point selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsAutoMax">
            <summary>
            Automatic maximum selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsAutoMin">
            <summary>
            Automatic minimum selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MajorUnit">
            <summary>
            Value of major increment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MinorUnit">
            <summary>
            Value of minor increment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MajorUnitScale">
            <summary>
            Represens the major unit scale value for the category axis
             when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.MinorUnitScale">
            <summary>
            Represens the minor unit scale value for the category axis
             when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.IsBinningByCategory">
            <summary>
            True if bins generated by category values. otherwise False
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.HasAutomaticBins">
            <summary>
            True if bins generated are automatic. otherwise False
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.NumberOfBins">
            <summary>
            Get or set the Number of Bins in the axis
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.Can be a value from 1 through 31999.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.BinWidth">
            <summary>
            Get or Set the number of data points in each range.
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.UnderflowBinValue">
            <summary>
            Get or Set the UnderFlow Bin value
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.OverflowBinValue">
            <summary>
            Get or Set the OverFlow Bin value
            </summary>
            <remarks>Applies only to Histogram and Pareto charts.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.HistogramAxisFormatProperty">
            <summary>
            returns an Object that holds the information required for Histogram series
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartCategoryAxis.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Dictionary with new indexes.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea">
            <summary>
            Represents the area of a chart data label in an Excel worksheet, allowing customization of the data label's appearance and properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.KnownColor">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.Color">
            <summary>
            Gets or sets color. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.Underline">
            <summary>
            Returns or sets the type of underline applied to the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.VerticalAlignment">
            <summary>
            Returns or sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsAutoColor">
            <summary>
            Indicates whether color has automatic color. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.StrikethroughType">
            <summary>
            Represents the TextArea StrikethroughType 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.Text">
            <summary>
            Gets or sets text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.FrameFormat">
            <summary>
            Return frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.TextRotationAngle">
            <summary>
            Text rotation angle. between -90 and 90.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.IsAutoMode">
            <summary>
            True if background is set to automatic.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabelArea.SetFont(Spire.Xls.ExcelFont)">
            <summary>
            Sets the font properties.
            </summary>
            <param name="font">The ExcelFont object containing the font properties to set.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels">
            <summary>
            Represents the data labels in an Excel chart. Data labels can display information about the data points in the chart, such as their values, category names, or percentages.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasSeriesName">
            <summary>
            Indicates whether series name is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasCategoryName">
            <summary>
            Indicates whether category name is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasValue">
            <summary>
            Indicates whether value is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasPercentage">
            <summary>
            Indicates whether percentage is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasBubbleSize">
            <summary>
            Indicates whether bubble size is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasFormula">
            <summary>
            Gets or sets a value indicating whether this instance has formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Delimiter">
            <summary>
            Delimeter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasLegendKey">
            <summary>
            Indicates whether legend key is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasManualLayout">
            <summary>
            Indicates whether border formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Position">
            <summary>
            Represents data labels position.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.ShowLeaderLines">
            <summary>
            Indicates whether Leader Lines is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.NumberFormat">
            <summary>
            Represents trend line label number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsTextWrapped">
            <summary>
            Gets or sets a value indicating whether the text within the labels should be wrapped.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsResizeShapeToFitText">
            <summary>
            Gets or sets a value indicating whether the shape should automatically resize to fit the text it contains.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.KnownColor">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Color">
            <summary>
            Gets or sets color. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Underline">
            <summary>
            Returns or sets the type of underline applied to the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.VerticalAlignment">
            <summary>
            Returns or sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsAutoColor">
            <summary>
            Indicates whether color has automatic color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.StrikethroughType">
            <summary>
            Represents the TextArea StrikethroughType 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Text">
            <summary>
            Gets or sets text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.FrameFormat">
            <summary>
            Return frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.TextRotationAngle">
            <summary>
            Text rotation angle. between -90 and 90.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsAutoMode">
            <summary>
            True if background is set to automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Format">
            <summary>
            Gets corresponding data format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Font">
            <summary>
            Returns FontImpl for current font. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.ValueFromCell">
            <summary>
            Set Range for value. above Excel 2013
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsWMode">
            <summary>
            false value Specifies that the Width shall be interpreted
            as the Right of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsHMode">
            <summary>
            false value Specifies that the Height shall be interpreted
            as the Bottom of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsXMode">
            <summary>
            true value Specifies that the X shall be interpreted
            as the Left of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.IsYMode">
            <summary>
            true value Specifies that the Y shall be interpreted
            as the Top of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.X">
            <summary>
            X-position of upper-left corner. 1/4000 of chart plot.
            IsXMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Y">
            <summary>
            Y-position of upper-left corner. 1/4000 of chart plot. 
            IsYMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.TextArea">
            <summary>
            Text of area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.HasWedgeCallout">
            <summary>
            Determines whether the object has a wedge callout.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Height">
            <summary>
            Y-size. 1/4000 of chart plot. IsHMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Width">
            <summary>
            X-size. 1/4000 of chart plot. IsWMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.Index">
            <summary>
            Returns font index. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataLabels.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint">
            <summary>
            Represents a data point in an Excel chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.DataFormat">
            <summary>
            Returns data format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.DataLabels">
            <summary>
            Returns data labels object for the data point. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.Index">
            <summary>
            Gets or sets index of the point in the points collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.IsDefault">
            <summary>
            Indicates whether this data point is default data point. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.HasDataLabels">
            <summary>
            Indicates whether data labels object was created for this data point. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.SetAsTotal">
            <summary>
             True if the data point is considered as Subtotals or Totals. otherwise False.
            </summary>
            <remarks>Applies only to Waterfall charts.</remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.ClearDataFormats(Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat)">
            <summary>
            Clears data formats.
            </summary>
            <param name="format">Represents format to update.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint.CloneDataFormat(Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat)">
            <summary>
            Updates current data format.
            </summary>
            <param name="serieFormat">Represents data format for update.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable">
            <summary>
            Represents a data table in an Excel chart, which can display the data labels and series names for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.HasHorzBorder">
            <summary>
            Indicates whether data table has horizontal border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.HasVertBorder">
            <summary>
            Indicates whether data table has vertical border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.HasBorders">
            <summary>
            Indicate whether data table has borders.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.ShowSeriesKeys">
            <summary>
            Indicates whehter series keys in the data table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.KnownColor">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.Color">
            <summary>
            Gets or sets color. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.Underline">
            <summary>
            Returns or sets the type of underline applied to the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.VerticalAlignment">
            <summary>
            Returns or sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.IsAutoColor">
            <summary>
            Indicates whether color has automatic color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.StrikethroughType">
            <summary>
            Represents the TextArea StrikethroughType 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataTable.Clone(System.Object)">
            <summary>
            Clone current Record.
            </summary>
            <param name="parent">Parent object for create new instance.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar">
            <summary>
            Represents a drop bar chart in an Excel worksheet, typically used in conjunction with a line chart to show the difference between two data series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.HasInterior">
            <summary>
            This property indicates whether interior object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.HasLineProperties">
            <summary>
            This property indicates whether line formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.HasFormat3D">
            <summary>
            Gets a value indicating whether [has3d properties].
            </summary>
            <value><c>true</c> if [has3d properties]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.HasShadow">
            <summary>
            Gets a value indicating whether this instance has shadow properties.
            </summary>
            <value>
            	<c>true</c> if this instance has shadow properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.LineProperties">
            <summary>
            Returns object, that represents line properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Fill">
            <summary>
            Represents XlsFill options. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Format3D">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.GapWidth">
            <summary>
            Gets or sets drop bar gap width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.ForeGroundColorObject">
            <summary>
            Gets or sets foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.ForeGroundColor">
            <summary>
            Gets or sets the foreground color of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.ForeGroundKnownColor">
            <summary>
            Represents the known color used for the foreground.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.BackGroundColor">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.BackGroundKnownColor">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.BackGroundColorObject">
            <summary>
            Gets the background color object of the chart interior.
            </summary>
            <returns>
            An OColor object representing the background color of the chart interior.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Pattern">
            <summary>
            Gets pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.IsAutomaticFormat">
            <summary>
            Gets if use automatic format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Visible">
            <summary>
            Gets or sets visiblity.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDropBar.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill">
            <summary>
            Represents the fill formatting of a chart in an Excel worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.m_picture">
            <summary>
            Represents the image associated with the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GradientStops">
            <summary>
            Gets or sets the collection of gradient stops for the gradient fill.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.FillType">
            <summary>
            Represents shape XlsFill type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GradientVariant">
            <summary>
            Represents current shading variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.TransparencyTo">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.TransparencyFrom">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GradientColorType">
            <summary>
            Represents gradient style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Pattern">
            <summary>
            Represents gradient pattern
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Texture">
            <summary>
            Represents gradient texture
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.BackColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.ForeColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PresetGradientType">
            <summary>
            Represents presed gradient type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Picture">
            <summary>
            Represents user defined picture or textture. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PictureName">
            <summary>
            Returns user defined picture of texture name. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Visible">
            <summary>
            Represents if XlsFill style visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GradientDegree">
            <summary>
            Returns the gradient degree of the specified one-color shaded XlsFill as a floating-point
             value from 0.0 (dark) through 1.0 (light)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Transparency">
            <summary>
            Returns the transparency level of the specified Solid color shaded XlsFill as a floating-point
            value from 0.0 (Clear) through 1.0(Opaque)
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.CustomPicture(System.String)">
            <summary>
            Sets user defined picture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.CustomPicture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined picture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.CustomTexture(System.String)">
            <summary>
            Sets user defined texture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.CustomTexture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined texture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Patterned(Spire.Xls.GradientPatternType)">
            <summary>
            Sets the specified XlsFill to a pattern.
            </summary>
            <param name="pattern">Pattern to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PresetGradient(Spire.Xls.GradientPresetType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
            <param name="shadVar">Represents gradient variant for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PresetTextured(Spire.Xls.GradientTextureType)">
            <summary>
            Sets the specified XlsFill format to a preset texture.
            </summary>
            <param name="texture">Represents texture to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.TwoColorGradient">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.TwoColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.OneColorGradient">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.OneColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.OneColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Solid">
            <summary>
            Sets the specified XlsFill to a uniform color.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.GetMetaUnit(System.Drawing.GraphicsUnit)">
            <summary>
            Converts a GraphicsUnit to the corresponding MetafileFrameUnit.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.SerializeMetafile(System.Drawing.Image)">
            <summary>
            Serializes an Image object to a MemoryStream.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.PicStretch">
            <summary>
            Gets or sets pictrue format option.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFill.Tile">
            <summary>
            Represents whether picture is tiled or stretched.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat">
            <summary>
            Represents the formatting options for a chart in an Excel document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DEF_BAR_STACKED">
            <summary>
            Id for bar stacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DEF_SERIES_NUMBER">
            <summary>
            Represents default series number.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsVaryColor">
            <summary>
            Vary color for each data point.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsVeryColor">
            <summary>
            Vary color for each data point.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Overlap">
            <summary>
            Space between bars ( -100 : 100 ).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.GapWidth">
            <summary>
            Space between categories (percent of bar width), default = 50.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.FirstSliceAngle">
            <summary>
            Angle of the first pie slice expressed in degrees. ( 0 - 360 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DoughnutHoleSize">
            <summary>
            Size of center hole in a doughnut chart (as a percentage).( 10 - 90 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.BubbleScale">
            <summary>
            Percent of largest bubble compared to chart in general. ( 0 - 300 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.SizeRepresents">
            <summary>
            Returns or sets what the bubble size represents on a bubble chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.ShowNegativeBubbles">
            <summary>
            True to show negative bubbles.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasRadarAxisLabels">
            <summary>
            True if a radar chart has axis labels. Applies only to radar charts.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.SplitType">
            <summary>
            Returns or sets the way the two sections of either a pie of pie chart or a bar
            of pie chart are split.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.SplitValue">
            <summary>
            Returns or sets the threshold value separating the two sections of either a pie of pie chart or a bar of pie chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.PieSecondSize">
            <summary>
            Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart,
            as a percentage of the size of the primary pie. ( 5 - 200 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.FirstDropBar">
            <summary>
            Returns object that represents first drop bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.SecondDropBar">
            <summary>
            Returns object that represents second drop bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.PieSeriesLine">
            <summary>
            Represents series line properties. ( For pie of pie or pie of bar chart types only. ) Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DataFormatOrNull">
            <summary>
            Returns dataformat or null; Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate elements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DelimiterLength">
            <summary>
            Gets the length of the delimiter.
            </summary>
            <returns>
            The length of the delimiter. Note: Get and set are not implemented.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DepthPercent">
            <summary>
            Returns or sets the depth of a 3-D chart as a percentage of the chart width
            (between 20 and 2000 percent).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.DrawingZOrder">
            <summary>
            Drawing order (0 = bottom of the z-order).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Elevation">
            <summary>
            Gets or sets the elevation of the 3-D chart view, in degrees (0 to +90 degrees).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.AutoScaling">
            <summary>
            True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Gap">
            <summary>
            Space between the first pie and the second.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.GapDepth">
            <summary>
            Returns or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.( 0 - 500 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowBar">
            <summary>
            Indicates whether bar has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowBoppop">
            <summary>
            Indicates whether bar has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowLine">
            <summary>
            True if this line has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowPie">
            <summary>
            True if this pie has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowRadar">
            <summary>
            True if this radar series has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasShadowScatter">
            <summary>
            True if bubble series has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasValue">
            <summary>
            If true has value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HasWedgeCallout">
            <summary>
            Gets or sets a value indicating whether the wedge callout is present.
            </summary>
            <remarks>
            This property is obsolete and the get and set methods are not implemented.
            </remarks>
            <returns>
            A boolean value indicating the presence of a wedge callout.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.HeightPercent">
            <summary>
            Returns or sets the height of a 3-D chart as a percentage of the chart width
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Is3D">
            <summary>
            If true - serie 3D; otherwise serie 2D. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Is3DPhongShade">
            <summary>
            True if this surface chart has shading.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsAreaShadowed">
            <summary>
            This area has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsBubbles">
            <summary>
            True if this a bubble series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsBubbleSize">
            <summary>
            If true buble has size.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsCategoryBrokenDown">
            <summary>
            Each category is broken down as a percentage.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsCategoryName">
            <summary>
            If true category has name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsChartChartLine">
            <summary>
            If true - format contains chart chart line record. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsChartLineFormat">
            <summary>
            If true - format contains series line. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsClustered">
            <summary>
            3D columns are clustered or stacked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsDefaultElevation">
            <summary>
            Indicates whether elevation has default value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsDefaultRotation">
            <summary>
            Indicates whether rotation has default value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsDropBar">
            <summary>
            If true - format contains drop bar record. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsFillSurface">
            <summary>
            True if chart contains color XlsFill for surface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsHorizontalBar">
            <summary>
            True for horizontal bars (bar chart).
            False for vertical bars (column chart).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsLine">
            <summary>
            If true - format has line; otherwise false. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsMarker">
            <summary>
            If true - format has marker; otherwise false. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsPercentage">
            <summary>
            If true has percentage.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsPrimaryAxis">
            <summary>
            If true then belong to primary axis; otherwise to secondary axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsSeriesName">
            <summary>
            If true serie has name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsShowLeaderLines">
            <summary>
            True to show leader lines to data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsSmoothed">
            <summary>
            If true - format has smothed line; otherwise false. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.IsStacked">
            <summary>
            Series in this group are stacked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.LineStyle">
            <summary>
            Drop lines / hi-lo lines:
            0 = drop lines
            1 = hi-lo lines
            2 = series lines (the lines that connect the columns in a stacked column chart)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.NumSplitValue">
            <summary>
            For split = 1, what values should go to the other pie / bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Perspective">
            <summary>
            Returns or sets the perspective for the 3-D chart view.( 0 - 100 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.PieChartType">
            <summary>
            Chart pie type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.RightAngleAxes">
            <summary>
            True if the chart axes are at right angles, independent of chart rotation or elevation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Rotation">
            <summary>
            Returns or sets the rotation of the 3-D chart view
            (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.ShowAsPercentsBar">
            <summary>
            Each category is displayed as a percentage.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.ShowAsPercentsLine">
            <summary>
            Each category is broken down as a percentage.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.SplitPercent">
            <summary>
            For split = 2, what percentage should go to the other pie / bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.StackValuesBar">
            <summary>
            Stack the displayed values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.StackValuesLine">
            <summary>
            Stack the displayed values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.UseDefaultSplitValue">
            <summary>
            True to use default split value; otherwise False.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.WallsAndGridlines2D">
            <summary>
            True if gridlines are drawn two-dimensionally on a 3-D chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat">
            <summary>
            Represents the format properties of a chart frame in an Excel document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsBorderCornersRound">
            <summary>
            Gets or sets if border corners is round.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Border">
            <summary>
            Gets chart border. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.HasInterior">
            <summary>
            Indicates whether interior object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.HasLineProperties">
            <summary>
            Indicates whether border formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.HasManualLayout">
            <summary>
            Indicates whether border formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.InnerLayoutTarget">
            <summary>
            Gets or sets the inner layout target. Note: This property is obsolete and the get and set operations are not implemented.
            </summary>
            <returns>
            A boolean value representing the inner layout target.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Interior">
            <summary>
            Gets frame interior. Read only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Format3D">
            <summary>
            Gets the chart3 D properties.
            <example>The following code illustrates the use of Shadow property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets shadow formatting properties for the chart element</para>
                <para>ChartShadow shadowChart = chart.ChartArea.Shadow;</para>
                <para>shadowChart.ShadowPrespectiveType = XLSXChartPrespectiveType.Below;</para>
                <para>shadowChart.Color = Color.Aqua;</para>
                <para>shadowChart.Blur = 22;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Fill">
            <summary>
            Represents XlsFill gradient format. Read only.
            <example>The following code illustrates the use of Fill property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets fill options for the chart element</para>
                <para>IShapeFill fillChart = chart.ChartArea.Fill;</para>
                <para>fillChart.FillType = ShapeFillType.Gradient;</para>
                <para>fillChart.BackColor = Color.FromArgb(205, 217, 234);</para>
                <para>fillChart.ForeColor = Color.White;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.HasShadow">
            <summary>
            This property indicates whether the shadow object has been created 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.HasFormat3D">
            <summary>
            This property Indicates whether the Shadow object has been created(which includes the 3D properties)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Shadow">
            <summary>
            Gets the shadow properties.
            <example>The following code illustrates the use of Shadow property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets shadow formatting properties for the chart element</para>
                <para>ChartShadow shadowChart = chart.ChartArea.Shadow;</para>
                <para>shadowChart.ShadowPrespectiveType = XLSXChartPrespectiveType.Below;</para>
                <para>shadowChart.Color = Color.Aqua;</para>
                <para>shadowChart.Blur = 22;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.LineProperties">
            <summary>
            Gets chart border. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsAutoSize">
            <summary>
            Calculates size automatically.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsAutoPosition">
            <summary>
            Calculates position automatically.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.X">
            <summary>
            X-position of upper-left corner. 1/4000 of chart plot.
            IsXMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Y">
            <summary>
            Y-position of upper-left corner. 1/4000 of chart plot. 
            IsYMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Width">
            <summary>
            X-size. 1/4000 of chart plot. IsWMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Height">
            <summary>
            Y-size. 1/4000 of chart plot. IsHMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsWMode">
            <summary>
            false value Specifies that the Width shall be interpreted
            as the Right of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsHMode">
            <summary>
            false value Specifies that the Height shall be interpreted
            as the Bottom of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsXMode">
            <summary>
            true value Specifies that the X shall be interpreted
            as the Left of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsYMode">
            <summary>
            true value Specifies that the Y shall be interpreted
            as the Top of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.ForeGroundKnownColor">
            <summary>
            Represents foreground known color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.ForeGroundColor">
            <summary>
            Represents foreground known color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.ForeGroundColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.BackGroundKnownColor">
            <summary>
            Represents the known color used for the background in Excel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.BackGroundColor">
            <summary>
            Represents foreground known color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.BackGroundColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Pattern">
            <summary>
            Represents pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.RectangleStyle">
            <summary>
            Rectangle style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.IsAutomaticFormat">
            <summary>
            Represents if use automatic format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Visible">
            <summary>
            Represents visiblity.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Clear">
            <summary>
            Clears objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.Clone(System.Object)">
            <summary>
            Clone current Record.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFrameFormat.SetDefaultValues(System.Boolean,System.Boolean)">
            <summary>
            Set variable to the default state.
            </summary>
            <param name="bAutoSize">Indicates whether MS Excel should calculate size of the frame.</param>
            <param name = "bIsInteriorGray" > A boolean indicating whether the interior of the object should be gray.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine">
            <summary>
            Represents a grid line in an Excel chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.AxisLineType">
            <summary>
            Gets or sets axis line type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Border">
            <summary>
            Gets line border. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Format3D">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.HasFormat3D">
            <summary>
            This property Indicates whether the Shadow object has been created(which includes the 3D properties)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.HasInterior">
            <summary>
            This property indicates whether interior object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.HasLineProperties">
            <summary>
            Indicates whether line formatting object was created.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.HasShadow">
            <summary>
            This property indicates whether the shadow object has been created 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.LineProperties">
            <summary>
            Gets line border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Fill">
            <summary>
            Represents fill options. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartGridLine.Delete">
            <summary>
            Clears current GridLines.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior">
            <summary>
            Represents the interior formatting of a chart in an Excel document, including properties such as color and pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.ForegroundColorObject">
            <summary>
            Foreground color (RGB).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.BackgroundColorObject">
            <summary>
            Background color (RGB).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.ForegroundColor">
            <summary>
            Foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.Pattern">
            <summary>
            Area pattern.
            <example>The following code illustrates the use of Pattern property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the pattern of the chart</para>
                <para>chart.ChartArea.Interior.Pattern = ExcelPatternType.Angle;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.ForegroundKnownColor">
            <summary>
            Foreground excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.BackgroundKnownColor">
            <summary>
            Background excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.UseDefaultFormat">
            <summary>
            Indicates whether use default format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.SwapColorsOnNegative">
            <summary>
            Foreground and background are swapped when the data value is negative.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.Clone(System.Object,System.Boolean)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Represents parent object.</param>
            <param name = "isFrameClone" > Indicates whether the clone is part of a frame clone operation.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.Clone(System.Object)">
            <summary>
            Creates a deep copy of the XlsChartInterior object with the specified parent.
            </summary>
            <param name="parent">The parent object to which the cloned interior will belong.</param>
            <returns>A new XlsChartInterior object that is a copy of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.InitForFrameFormat(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the frame format with specified parameters.
            </summary>
            <param name="bIsAutoSize">Indicates whether the frame should be auto-sized.</param>
            <param name="bIs3DChart">Indicates whether the chart should be in 3D format.</param>
            <param name="bIsInteriorGray">Indicates whether the interior should be gray.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartInterior.InitForFrameFormat(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize interior for frame format.
            </summary>
            <param name="bIs3DChart">Represents is 3d chart.</param>
            <param name="bIsAutoSize">Indicate is autosize interior.</param>
            <param name="bIsInteriorGray">Indicates is interior is gray.</param>
            <param name="bIsGray50">Indicates is default color is gray_50.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend">
            <summary>
            Represents a legend in an Excel chart, providing options to customize its appearance and position.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.AutoPosition">
            <summary>
            Automatic positioning .
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.TextArea">
            <summary>
            Return text area of legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.X">
            <summary>
            X-position of upper-left corner. 1/4000 of chart plot.
            IsXMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Y">
            <summary>
            Y-position of upper-left corner. 1/4000 of chart plot. 
            IsYMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Position">
            <summary>
            Legend position type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IsVerticalLegend">
            <summary>
            Indicates whether if vertical legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IncludeInLayout">
            <summary>
            Show legend without overlapping. Default is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.InnerLayoutTarget">
            <summary>
            Gets or sets a value indicating whether the layout target is located inside the current control.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IsWMode">
            <summary>
            false value Specifies that the Width shall be interpreted
            as the Right of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IsHMode">
            <summary>
            false value Specifies that the Height shall be interpreted
            as the Bottom of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IsXMode">
            <summary>
            true value Specifies that the X shall be interpreted
            as the Left of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.IsYMode">
            <summary>
            true value Specifies that the Y shall be interpreted
            as the Top of the chart element..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.LegendEntries">
            <summary>
            Represents legend entries collection. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Width">
            <summary>
            X-size. 1/4000 of chart plot. IsWMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Height">
            <summary>
            Y-size. 1/4000 of chart plot. IsHMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.AutoPositionX">
            <summary>
            X positioning is automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.AutoPositionY">
            <summary>
            Y positioning is automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.FrameFormat">
            <summary>
            Gets or sets the frame format of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.HasDataTable">
            <summary>
            True if chart contains data table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Clear">
            <summary>
            Clears chart legend.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Delete">
            <summary>
            Deletes chart legend.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegend.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Array with new font indexes.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea">
            <summary>
            Represents the legend area of chart, which includes properties and methods to manipulate the legend's appearance and position within the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.KnownColor">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.Color">
            <summary>
            Gets or sets color. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.Underline">
            <summary>
            Returns or sets the type of underline applied to the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.VerticalAlignment">
            <summary>
            Returns or sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsAutoColor">
            <summary>
            Indicates whether color has automatic color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.StrikethroughType">
            <summary>
            Represents the TextArea StrikethroughType 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.Text">
            <summary>
            Gets or sets text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.FrameFormat">
            <summary>
            Return frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.TextRotationAngle">
            <summary>
            Text rotation angle. between -90 and 90.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.IsAutoMode">
            <summary>
            True if background is set to automatic.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.Font">
            <summary>
            Returns FontImpl for current font. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.ParagraphType">
            <summary>
            Represents the TextArea Paragraph 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendArea.SetFont(Spire.Xls.ExcelFont)">
            <summary>
            Sets the font.
            </summary>
            <param name="font">The font object containing the font settings to apply.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry">
            <summary>
            Represents a legend entry in an Excel chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.Index">
            <summary>
            Represents index in collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.LegendEntityIndex">
            <summary>
            Legend-entry index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.TextArea">
            <summary>
            Returns text area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.IsDeleted">
            <summary>
            If true then this entry deleted. otherwise false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.IsFormatted">
            <summary>
            Indicates whether the legend entry has been formatted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.Clear">
            <summary>
            Clears current data point
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.Delete">
            <summary>
            Deletes current legend entry.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartLegendEntry.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicIndexes">Dictionary with new font indexes.</param>
            <param name="dicNewSheetNames">Dictionary NewSheetNames.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartPageSetup">
            <summary>
            Represents the page setup settings for a chart in an Excel document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartPageSetup.FitToPagesTall">
            <summary>
            Returns or sets the number of pages tall the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartPageSetup.FitToPagesWide">
            <summary>
            Returns or sets the number of pages wide the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartPageSetup.Clone(System.Object)">
            <summary>
            Creates a deep copy of the XlsChartPageSetup object.
            </summary>
            <param name="parent">The parent object to which the cloned page setup will belong.</param>
            <returns>A new instance of XlsChartPageSetup that is a copy of the current instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartPlotArea">
            <summary>
            Represents the plot area of a chart in an Excel worksheet. The plot area is the region of the chart where the data is plotted.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie">
            <summary>
            Represents a series in an Excel chart, containing data and formatting options for that series.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.m_errorBarY">
            <summary>
            Represents Y error bar.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.m_errorBarX">
            <summary>
            Represents X error bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ChartGroup">
            <summary>
            Index of the chart group.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Values">
            <summary>
            Values range for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.CategoryLabels">
            <summary>
            Category labels for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Bubbles">
            <summary>
            Bubble sizes for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Name">
            <summary>
            Name of the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.NamedRange">
            <summary>
            Series Name range for the series.
            </summary>    
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.NameOrFormula">
            <summary>
            Gets series name or formula value (not actual string value).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Number">
            <summary>
            Number of the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ParentSeries">
            <summary>
            Gets parent serie collection. Read - only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.UsePrimaryAxis">
            <summary>
            Indicates whether to use primary axis for series drawing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.HasDroplines">
            <summary>
            Sets whether the series has drop lines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.DataPoints">
            <summary>
            Returns collection of data points. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.PointNumber">
            <summary>
            Returns number of points in the series. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.RealIndex">
            <summary>
            Synonym for Index property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Format">
            <summary>
            Returns format of current serie.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.SerieType">
            <summary>
            Represents serie type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.StartType">
            <summary>
            Returns serie start type. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.EnteredDirectlyValues">
            <summary>
            Represents value as entered directly.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.EnteredDirectlyCategoryLabels">
            <summary>
            Represents category values as entered directly.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.EnteredDirectlyBubbles">
            <summary>
            Represents bubble values as entered directly.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBarsY">
            <summary>
            Represents Y error bars. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.HasErrorBarsY">
            <summary>
            Indicates if serie contains Y error bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBarsX">
            <summary>
            Represents X error bars. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.HasErrorBarsX">
            <summary>
            Indicates if serie contains X error bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.TrendLines">
            <summary>
            Represents serie trend lines collection. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.InvertNegaColor">
            <summary>
            Indicates wheter to invert its colors if the value is negative.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Index">
            <summary>
            Represents index of the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.DataLabels">
            <summary>
            Gets or sets the data labels for the chart series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.IsParetoLineHidden">
            <summary>
            Gets / Sets the pareto line is hidden 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ParetoLineFormatIndex">
            <summary>
             Gets / Sets the format index of chart pareto line
            Used only in loaded chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.IsRowWiseCategory">
            <summary>
            Gets / SetsBoolean value indicates category values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.IsRowWiseSeries">
            <summary>
            Gets / SetsBoolean value indicates series values interpreted in row-wise
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.FormatCode">
            <summary>
            Gets / Sets the format code for series values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.CategoriesFormatCode">
            <summary>
            Gets / Sets the format code for series categories
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ParetoLineFormat">
            <summary>
            Return frame format. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Clone current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="newNames">Hash table with new worksheet names.</param>
            <param name="fontIndexes">Dictionary with new font indexes.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBar(System.Boolean)">
            <summary>
            Creates error bar object.
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType)">
            <summary>
            Creates error bar object.
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType,Spire.Xls.ErrorBarType)">
            <summary>
            Creates error bar object.
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <param name="type">Represents error bar type.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType,Spire.Xls.ErrorBarType,System.Double)">
            <summary>
            Creates error bar object.
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <param name="type">Represents error bar type.</param>
            <param name="numberValue">Represents number value.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.ErrorBar(System.Boolean,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange)">
            <summary>
            Sets custom error bar type.
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="plusRange">Represents plus range.</param>
            <param name="minusRange">Represents minus range.</param>
            <returns>Returns error bar object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.GetEnteredDirectlyType(System.Object[])">
            <summary>
            Gets type of Entered directly values.
            </summary>
            <param name="array">Array with entered directly values.</param>
            <returns>If true - type is Number; otherwise label.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.GetCommonSerieFormat">
            <summary>
            Gets common serie format.
            </summary>
            <returns>Returns common serie format.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.GetSerieNameRange">
            <summary>
            Gets serie name range.
            </summary>
            <returns>Returns range, that represents serie name range. Can be null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.SetDefaultName(System.String)">
            <summary>
            Sets default serie name.
            </summary>
            <param name="defaultName">Represents serie name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerie.UpdateChartExSerieRangesMembers(System.Boolean)">
            <summary>
            Update the row wise or column wise members of chart series for chart Ex
            </summary>
            <param name="isValues">boolean values indicates whether the property of values need to be changed or not.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat">
            <summary>
            Represents the data format settings for a series in an Excel chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_NONE_COLOR">
            <summary>
            Represents None color index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_MARKER_SIZE_MUL">
            <summary>
            Represents marker size mull prefix.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_MARKER_START_COLOR">
            <summary>
            Represents start color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_PIE_START_TYPE">
            <summary>
            Represents start pie type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_DOUGHNUT_START_TYPE">
            <summary>
            Represents start doughnut type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_SURFACE_START_TYPE">
            <summary>
            Represents start surface type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_LINE_START_TYPE">
            <summary>
            Represents start line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_SCATTER_START_TYPE">
            <summary>
            Represents start scatter type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_MARKER_LINE_SIZE">
            <summary>
            Represents default line size in marker record.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_LINE_SIZE">
            <summary>
            Represents default line size in marker record.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_LINE_COLOR">
            <summary>
            Represents default line color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_MARKER_INDEX">
            <summary>
            Represents default index for marker record.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_MARKER_COLOR_INDEX">
            <summary>
            Represents default color in marker record.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.DEF_SUPPORT_DATAFORMAT_PROPERTIES">
            <summary>
            Represents types of chart that support data format properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerBackColorObject">
            <summary>
            Gets object that holds marker background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerForeColorObject">
            <summary>
            Gets object that holds marker foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.AreaProperties">
            <summary>
            Returns object, that represents aera properties. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BarType">
            <summary>
            Represents the base data format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BarTopType">
            <summary>
            Represents the top data format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerBackgroundColor">
            <summary>
            Foreground color: RGB value (high byte = 0).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerForegroundColor">
            <summary>
            Background color: RGB value (high byte = 0).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerStyle">
            <summary>
            Type of marker.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerForegroundKnownColor">
            <summary>
            Index to color of marker border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerBackgroundKnownColor">
            <summary>
            Index to color of marker XlsFill.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerSize">
            <summary>
            Size of line markers.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsAutoMarker">
            <summary>
            Automatic color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Percent">
            <summary>
            Distance of pie slice from center of pie.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Is3DBubbles">
            <summary>
            True to draw bubbles with 3D effects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Options">
            <summary>
            Gets common serie options. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsMarkerSupported">
            <summary>
            Indicates whether marker is supported by this chart/series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsShadow">
            <summary>
            True if this series has a shadow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsShowBackground">
            <summary>
            True = "background = none".
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsShowForeground">
            <summary>
            True = "foreground = none".
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsSmoothed">
            <summary>
            If true - format has smothed line; otherwise false. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsSmoothedLine">
            <summary>
            True if the line series has a smoothed line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.SerieType">
            <summary>
            Gets serie type. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsSupportFill">
            <summary>
            Indicats whether chart supports transparency.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasInterior">
            <summary>
            This property indicates whether interior object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasLineProperties">
            <summary>
            This property indicates whether line formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasFormat3D">
            <summary>
            Gets a value indicating whether [has3d properties].
            </summary>
            <value><c>true</c> if [has3d properties]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasShadow">
            <summary>
            Gets a value indicating whether this instance has shadow properties.
            </summary>
            <value>
            	<c>true</c> if this instance has shadow properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.LineProperties">
            <summary>
            Returns object, that represents line properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Fill">
            <summary>
            Represents XlsFill options. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerFill">
            <summary>
            Get fill object of the marker.
            <example><para>The following code illustrates how to fill a marker . </para>
            <code>
                <para>var markerFill = chart.Series[0].Format.MarkerFill;</para>
                <para>//fill by defined Texture</para>
                <para>markerFill.Texture = GradientTextureType.GreenMarble;</para>
                <para></para>
                <para>//fill by defined Pattern</para>
                <para>markerFill.Pattern = GradientPatternType.PatLargeCheckerBoard;</para>
                <para>//Pattern need set fore/background color</para>
                <para>markerFill.ForeColor = Color.Blue;</para>
                <para>markerFill.BackColor = Color.Red;</para>
                <para>//fill by a picture</para>
                <para>markerFill.CustomPicture("type1.png")</para>
                <para>//set transparency: value from 0.0 (Clear) through 1.0(Opaque)</para>
                <para>markerFill.Transparency = 0.5;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Format3D">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ForeGroundColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ForeGroundKnownColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerTransparencyValue">
            <summary>
            Gets or sets the transparency of the line marker.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ForeGroundColorObject">
            <summary>
            Represents foreground color object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BackGroundKnownColor">
            <summary>
            Represents background excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BackGroundColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BackGroundColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Pattern">
            <summary>
            Represents pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsAutomaticFormat">
            <summary>
            Indicates, if automatic format is used.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Visible">
            <summary>
            Represents visiblity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowActiveValue">
            <summary>
            Indicates whether chart show active value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.Has_dPtPieExplosion">
            <summary>
            Indicates whether dataformat has PieExplosion.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasBorder">
            <summary>
            Indicates whether chart has border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasBorderLine">
            <summary>
            Indicates whethers chart has border line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsBorderSupported">
            <summary>
            Indicates whether border object is supported. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsFormatted">
            <summary>
            Indicate if data format is formatted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsInteriorSupported">
            <summary>
            Indicates whether interior object is supported. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsMarker">
            <summary>
            If true - format has marker; otherwise false. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ParentSerie">
            <summary>
            Returns parent serie. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.SeriesNumber">
            <summary>
            Gets or sets serie number.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowBubble">
            <summary>
            Show bubble sizes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowCategoryLabel">
            <summary>
            Show category label.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowPieInPercents">
            <summary>
            Show value as a percent of the total.(pie charts only).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowPieCategoryLabel">
            <summary>
            Show category label and value as a percentage (pie charts only).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.SmoothLine">
            <summary>
            Show smoothed line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.MarkerBorderWidth">
            <summary>
            Marker border weight(unit pt).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HistogramAxisFormatProperty">
            <summary>
            Gets/ Sets the histogram axis format property for individual series
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowConnectorLines">
            <summary>
            Gets or sets a boolean value indicating whether to display 
            Connector Lines between data points
            </summary>
            <remarks>Applies only to Waterfall Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.TreeMapLabelOption">
            <summary>
            Gets / Sets the Display label position in Tree map chart
            </summary>
            <remarks>By Default the Label is overlapped</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowMeanLine">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Line in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowMeanMarkers">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Mean Marker in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowInnerPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Inner Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.ShowOutlierPoints">
            <summary>
            Gets or sets a boolean value indicating whether to display
            Outlier Points in Box and Whisker chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.QuartileCalculationType">
            <summary>
             Gets / Sets whether the Quartile calculation is Exclusive or Inclusive
            </summary>
            <remarks>Applies only to Box and Whisker Charts</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsBinningByCategory">
            <summary>
            Get or Set the isBinning by Category member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.HasAutomaticBins">
            <summary>
            Get or Set the is Automatic Bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.NumberOfBins">
            <summary>
            Get or Set the number of Bins member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.BinWidth">
            <summary>
            Get or Set the Bin width member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.OverflowBinValue">
            <summary>
            Get or Set the overflow bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.UnderflowBinValue">
            <summary>
            Get or Set the underflow bin member value
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat.IsIntervalClosedinLeft">
            <summary>
            Get or Set the value for interval is closed in left or right
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis">
            <summary>
            Represents the axis of a series in an Excel chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.DefaultSeriesAxisId">
            <summary>
            Some series axis id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.LabelsFrequency">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.TickMarksFrequency">
            <summary>
            Represents the number of categories or series between tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.TickMarkSpacing">
            <summary>
            Represents the number of categories or series between tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.IsReverseOrder">
            <summary>
            Display categories in reverse order.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.CrossesAt">
            <summary>
            Represents the point on the axis another axis crosses it.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.IsBetween">
            <summary>
            Gets or sets a value indicating whether the current instance is between two specified values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.LogBase">
            <summary>
            Gets or sets the base for the logarithm.
            </summary>
            <value>
            The base value for the logarithm.
            </value>
            <returns>
            The base value for the logarithm.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.IsLogScale">
            <summary>
            Gets or sets a value indicating whether the scale is logarithmic.
            </summary>
            <returns>
            A boolean value where true indicates a logarithmic scale and false indicates a linear scale.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <returns>
            The maximum value.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.MinValue">
            <summary>
            Gets or sets the minimum value for the property.
            </summary>
            <returns>
            The minimum value.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeriesAxis.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Dictionary with new indexes.</param>
            <param name="dicNewSheetNames">Dictionary with new sheet names.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea">
            <summary>
            Represents the title area of a chart in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.KnownColor">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.Color">
            <summary>
            Gets or sets color. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.Underline">
            <summary>
            Returns or sets the type of underline applied to the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.VerticalAlignment">
            <summary>
            Returns or sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsAutoColor">
            <summary>
            Indicates whether color has automatic color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.StrikethroughType">
            <summary>
            Represents the TextArea StrikethroughType 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.Text">
            <summary>
            Gets or sets text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.FrameFormat">
            <summary>
            Return frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.TextRotationAngle">
            <summary>
            Text rotation angle. between -90 and 90.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.IsAutoMode">
            <summary>
            True if background is set to automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.Font">
            <summary>
            Returns FontImpl for current font. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTitleArea.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartTrendLine.Formula">
            <summary>
            Return trendline formula. Read only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis">
            <summary>
            Represents the value axis of an Excel chart, which is responsible for displaying the numeric values of the data points.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.LogBase">
            <summary>
            Represents the logarithmic base. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.MinValue">
            <summary>
            Minimum value on axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.MaxValue">
            <summary>
            Maximum value on axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.MajorUnit">
            <summary>
            Returns or sets the major units for the value axis
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.MinorUnit">
            <summary>
            Value of minor increment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.CrossValue">
            <summary>
            Value of category axis crosses.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.CrossesAt">
            <summary>
            Represents the point on the axis another axis crosses it.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsAutoMin">
            <summary>
            Automatic minimum selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsAutoMax">
            <summary>
            Automatic maximum selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsAutoMajor">
            <summary>
            Automatic major selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsAutoMinor">
            <summary>
            Automatic minor selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsAutoCross">
            <summary>
            Automatic category crossing point selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsLogScale">
            <summary>
            Logarithmic scale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsReverseOrder">
            <summary>
            Values in reverse order.
            </summary>
            
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.IsMaxCross">
            <summary>
            Category axis to cross at maximum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.DisplayUnitCustom">
            <summary>
            Represents custom unit to display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.DisplayUnit">
            <summary>
            Returns or sets the unit label for the specified axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.HasDisplayUnitLabel">
            <summary>
            True if the label is displayed on the specified axis.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartValueAxis.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="dicFontIndexes">Dictionary with new indexes.</param>
            <param name="dicNewSheetNames">Dictionary with new sheet names.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor">
            <summary>
            Represents the wall or floor of a chart in an Excel document, providing properties and methods to manipulate its appearance and behavior.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Border">
            <summary>
            Represents the border of the chart, allowing customization of its appearance such as color, style, and width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.HasInterior">
            <summary>
            This property indicates whether interior object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.HasLineProperties">
            <summary>
            This property indicates whether line formatting object was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.HasFormat3D">
            <summary>
            Gets a value indicating whether [has3d properties].
            </summary>
            <value><c>true</c> if [has3d properties]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.HasShadow">
            <summary>
            Gets a value indicating whether this instance has shadow properties.
            </summary>
            <value>
            	<c>true</c> if this instance has shadow properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.LineProperties">
            <summary>
            Returns object, that represents line properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Fill">
            <summary>
            Represents XlsFill options. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Format3D">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Delete">
            <summary>
            Deletes the chart wall or floor.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.SetToDefault">
            <summary>
            Sets to default floor or walls.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.ForeGroundColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.ForeGroundKnownColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.ForeGroundColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.BackGroundColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.BackGroundKnownColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.BackGroundColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Pattern">
            <summary>
            Represents pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.IsAutomaticFormat">
            <summary>
            Represents if use automatic format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartWallOrFloor.Visible">
            <summary>
            Represents visible.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection">
            <summary>
            Represents a collection of chart format objects within an Excel document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.m_isParetoFormat">
            <summary>
            Boolean value indicates whether the format is enabled for pareto chart
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.Item(System.Int32)">
            <summary>
            Returns single format by DrawingZOrder. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.IsPrimary">
            <summary>
            Indicates whether collection represents formats for primary axis;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.IsParetoFormat">
            <summary>
            Gets / Sets the Is Pareto format variable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.NeedSecondaryAxis">
            <summary>
            Returns true if this collection is primary and contain series that need
            secondary axis.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.Add(Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat)">
            <summary>
            Adds the specified chart format to the current chart format settings.
            </summary>
            <param name="format">The XlsChartFormat to be added.</param>
            <returns>The updated XlsChartFormat instance with the new format applied.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.Add(Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat,System.Boolean)">
            <summary>
            Adds or replaces a chart format in the collection based on the specified condition.
            </summary>
            <param name="format">The chart format to add or replace.</param>
            <param name="bCanReplace">Indicates whether the existing format can be replaced if it already exists.</param>
            <returns>The added or replaced XlsChartFormat.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.FindOrAdd(Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormat)">
            <summary>
            Finds an existing XlsChartFormat that matches the provided format or adds the new format if it does not exist.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.ContainsIndex(System.Int32)">
            <summary>
            Determines whether the collection contains an element at the specified index.
            </summary>
            <param name="index">The zero-based index to check.</param>
            <returns>true if the collection contains an element at the specified index; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.SetIndex(System.Int32,System.Int32)">
            <summary>
            Sets value by index.
            </summary>
            <param name="index">Index to set.</param>
            <param name="Value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.UpdateIndexesAfterRemove(System.Int32)">
            <summary>
            Updates indexes in collection after remove.
            </summary>
            <param name="removeIndex">Index of removed format.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.UpdateSeriesByChartGroup(System.Int32,System.Int32)">
            <summary>
            Changes serie chart group in all series.
            </summary>
            <param name="newIndex">New index.</param>
            <param name="OldIndex">Old Index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.UpdateFormatsOnAdding(System.Int32)">
            <summary>
            Updates formats on adding format.
            </summary>
            <param name="index">Index to updates.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartFormatCollection.UpdateFormatsOnRemoving(System.Int32)">
            <summary>
            Updates formats on removing.
            </summary>
            <param name="index">Index to update.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection">
            <summary>
            Represents a collection of data points for an Excel chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.DefaultDataPoint">
            <summary>
            Returns default data point which describes formats for data points without format. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.Add(Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPoint)">
            <summary>
            Adds a data point to the chart.
            </summary>
            <param name="point">The XlsChartDataPoint to add to the chart.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.ClearDataFormats(Spire.Xls.Core.Spreadsheet.Charts.XlsChartSerieDataFormat)">
            <summary>
            Clears all series data formats.
            </summary>
            <param name="format">Represents format to update.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.DefaultPointFormat">
            <summary>
            Gets default data format or null. Read only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.Clone(System.Object,Spire.Xls.Core.Spreadsheet.XlsWorkbook,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for the cloned object.</param>
            <param name="book">Parent workbook.</param>
            <param name="fontIndexes">Dictionary with new font indexes.</param>
            <param name="dicNewSheetNames">Dictionary with new sheet namees.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartDataPointsCollection.UpdateSerieIndex">
            <summary>
            Updates index of the parent serie.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries">
            <summary>
            Represents a series in an Excel chart, containing data and formatting options for the series.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.AssignTrendDataLabel(Spire.Xls.Charts.ChartTextArea)">
            <summary>
            Assing trend data label
            </summary>
            <param name="area">Represents data label.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.Remove(System.String)">
            <summary>
            Removes serie by name.
            </summary>
            <param name="serieName">Serie name to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.ClearErrorBarsAndTrends">
            <summary>
            Clears error bars.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.Clone(System.Object)">
            <summary>
            Clone current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns cloned instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Clone current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="hashNewNames">Hash table with new Worksheet names.</param>
            <param name="fontIndexes">Dictionary with new font indexes.</param>
            <returns>Returns cloned instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.FindOrderByType(Spire.Xls.ExcelChartType)">
            <summary>
            Finds order by serie type.
            </summary>
            <param name="type">Type to find.</param>
            <returns>Returns order.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.GetLegendEntryOffset(System.Int32)">
            <summary>
            Returns legend offset.
            </summary>
            <param name="iSerIndex">Represetns series index.</param>
            <returns>Returns legend offset.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Charts.XlsChartSeries.GetTypeByOrder(System.Int32)">
            <summary>
            Gets serie type by order.
            </summary>
            <param name="order">Current order.</param>
            <returns>Returns found type.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.IScalable.IsLogScale">
            <summary>
            Represents logarithmic scale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.IScalable.IsReversed">
            <summary>
            Indicates whether datapoint plot from last to first.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.IScalable.MaxValue">
            <summary>
            Represents maximum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.IScalable.MinValue">
            <summary>
            Represents minimum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Charts.IScalable.LogBase">
            <summary>
            Represents the logarithmic base. Default value is 10.Only applies for Excel2007.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.GeomertyAdjustValuesCollection">
            <summary>
            Represents a collection of geometry adjustment values used for modifying geometric shapes or structures.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.GeomertyAdjustValuesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue"/> to get or set.</param>
            <returns>The <see cref="T:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue"/> at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.GeomertyAdjustValuesCollection.AddAdjustValue(Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType)">
            <summary>
            Adds an adjustment value based on the specified formula type.
            </summary>
            <param name="type">The formula type to use for the adjustment value.</param>
            <returns>The newly added GeomertyAdjustValue.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty">
            <summary>
            Represents a custom property in an Excel file, allowing for the storage of additional metadata.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty.Name">
            <summary>
            Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties">
            <summary>
            Represents a collection of custom properties for an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.#ctor(System.Object)">
            <summary>
            Initializes new instance of the collection.
            </summary>
            <param name="parent">Parent object for the new collection.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Item(System.Int32)">
            <summary>
            Gets <see cref="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty"/> object at the special field.
            </summary>
            <param name="fieldIndex">The integer offset of the field on which you want to base the filter 
            (from the left of the list; the leftmost field is field 0).
            </param>
            <returns>
            Returens <see cref="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty"/> object.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Item(System.String)">
            <summary>
            Gets the XlsCustomProperty with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Add(System.String,System.String)">
            <summary>
            Adds a custom property to the XLS file with the specified name and value.
            </summary>
            <param name="name">The name of the custom property.</param>
            <param name="value">The value of the custom property.</param>
            <returns>The XlsCustomProperty object that was added.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Clear">
            <summary>
            Clears the contents of the current instance, removing all elements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.Count">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetCustomProperties.RemoveAt(System.Int32)">
            <summary>
            Removes object from the collection of custom properties.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties">
            <summary>
            Represents a collection of built-in document properties for an Excel workbook.
            These properties include metadata such as title, author, and creation date, which are commonly used for organizing and identifying documents.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Item(Spire.Xls.BuiltInPropertyType)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Contains(Spire.Xls.BuiltInPropertyType)">
            <summary>
            Indicates whether collection contains specified property.
            </summary>
            <param name="index">Property id.</param>
            <returns>True if collection contains specified property.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Title">
            <summary>
            Gets/Sets title document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.DocumentVersion">
            <summary>
            Gets/Sets version of the file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Version">
            <summary>
            Gets or sets the version of the object.
            If the version property is not contained, it returns int.MinValue.
            </summary>
            <returns>
            The version of the object as an integer.
            </returns>
            <param name="value">The version of the object to set as an integer.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Subject">
            <summary>
            Gets/Sets subject document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Author">
            <summary>
            Gets/Sets author document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Keywords">
            <summary>
            Gets/Sets keywords document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Comments">
            <summary>
            Gets/Sets comments document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Template">
            <summary>
            Gets/Sets template document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.LastAuthor">
            <summary>
            Gets/Sets LastAuthor document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.RevisionNumber">
            <summary>
            Gets/Sets revision number document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.EditTime">
            <summary>
            Gets/Sets EditTime document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.LastPrinted">
            <summary>
            Gets/Sets LastPrinted document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.CreatedTime">
            <summary>
            Gets/Sets CreationDate document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.LastSaveTime">
            <summary>
            Gets/Sets LastSaveDate document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.PageCount">
            <summary>
            Gets/Sets PageCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.WordCount">
            <summary>
            Gets/Sets WordCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Characters">
            <summary>
            Gets/Sets CharCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.ApplicationName">
            <summary>
            Gets/Sets ApplicationName document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Security">
            <summary>
            Gets/Sets Security document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Category">
            <summary>
            Gets/Sets Category document proerty.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.PresentationTarget">
            <summary>
            Gets/Sets Target format document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Bytes">
            <summary>
            Gets/Sets ByteCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.LineCount">
            <summary>
            Gets/Sets LineCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.ParagraphCount">
            <summary>
            Gets/Sets ParagrahpCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.SlideCount">
            <summary>
            Gets/Sets SlideCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.NoteCount">
            <summary>
            Gets/Sets NoteCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.HiddenCount">
            <summary>
            Gets/Sets HiddenCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.MultimediaClipCount">
            <summary>
            Gets/Sets MmclipCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.ScaleCrop">
            <summary>
            Gets/Sets SacleCrop document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Manager">
            <summary>
            Gets/Sets Manager document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.Company">
            <summary>
            Gets/Sets Company document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBuiltInDocumentProperties.LinksDirty">
            <summary>
            Indicate whether the custom links are hampered.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsHeaderFooterShapeCollection">
            <summary>
            Summary description for HeaderFooterShapesCollection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHeaderFooterShapeCollection.SetPicture(System.String,System.Drawing.Image)">
            <summary>
            Sets picture.
            </summary>
            <param name="strShapeName">Shape name.</param>
            <param name="image">Image to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHeaderFooterShapeCollection.SetPicture(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Sets picture.
            </summary>
            <param name="strShapeName">Shape name.</param>
            <param name="image">Image to set.</param>
            <param name="index">Represents new shape blip id index. If set -1 - auto indicate.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHeaderFooterShapeCollection.SetPicture(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Sets picture.
            </summary>
            <param name="strShapeName">Shape name.</param>
            <param name="image">Image to set.</param>
            <param name="iIndex">Represents new shape blip id index. If set -1 - auto indicate.</param>
            <param name="bIncludeOptions">Indicates is current picture include options.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection">
            <summary>
            Summary description for RangesCollection.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.DEF_WRONG_WORKSHEET">
            <summary>
            Error message for wrong worksheet exception.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_worksheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_iFirstRow">
            <summary>
            One-based first row index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_iFirstColumn">
            <summary>
            One-based first column index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_iLastRow">
            <summary>
            One-based last row index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_iLastColumn">
            <summary>
            One-based last column index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.m_rtfString">
            <summary>
            Rich text string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeAddress">
            <summary>
            Returns the range reference in the language of the macro.
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeAddressLocal">
            <summary>
            Returns the range reference for the specified range in the language
            of the user. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeGlobalAddress">
            <summary>
            Returns the range reference in the language of the macro. 
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeR1C1Address">
            <summary>
            Returns the range reference in the language of the macro using R1C1-style reference.
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeR1C1AddressLocal">
            <summary>
            Returns the range reference for the specified range in the language
            of the user using R1C1 style reference . Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BooleanValue">
            <summary>
            Gets / sets boolean value that is contained by this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Borders">
            <summary>
            Returns a  Borders collection that represents the borders of a style
            or a range of cells (including a range defined as part of a
            conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            For big number of ranges can be very slow operation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.CellList">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            For big number of ranges can be very slow operation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Column">
            <summary>
            Returns the number of the first column in the first area in the specified
            range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ColumnGroupLevel">
            <summary>
            Column group level. Read-only.
            -1 - Not all columns in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ColumnWidth">
            <summary>
            Returns or sets the width of all columns in the specified range.
            Read/write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Spire#Xls#Core#IXLSRange#Count">
            <summary>
            Returns the number of objects in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.DateTimeValue">
            <summary>
            Gets / sets DateTime contained by this cell. Read-write DateTime.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.NumberText">
            <summary>
            Returns cell value after number format application. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or
            columns) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or
            rows) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ErrorValue">
            <summary>
            Gets / sets error value that is contained by this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Formula">
            <summary>
            Returns or sets the object's formula in A1-style notation and in
            the language of the macro. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaR1C1">
            <summary>
            Returns or sets the object's formula in R1C1-style notation and in
            the language of the macro. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaArray">
            <summary>
            Represents array-entered formula.
            Visit http://www.cpearson.com/excel/array.htm for more information.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaArrayR1C1">
            <summary>
            Returns or sets the array-entered formula in R1C1-style notation and in
            the language of the macro. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsFormulaHidden">
            <summary>
            True if the formula will be hidden when the worksheet is protected.
            False if at least part of formula in the range is not hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaDateTime">
            <summary>
            Get / set formula DateTime value contained by this cell.
            DateTime.MinValue if not all cells of the range have same DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasDataValidation">
            <summary>
            Indicates whether specified range object has data validation.
            If Range is not single cell, then returns true only if all cells have data validation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasBoolean">
            <summary>
            Indicates whether range contains bool value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasDateTime">
            <summary>
            Indicates whether range contains DateTime value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaBoolValue">
            <summary>
            Indicates if current range has formula bool value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaErrorValue">
            <summary>
            Indicates if current range has formula error value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaDateTime">
            <summary>
            Indicates if current range has formula value formatted as DateTime. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaNumberValue">
            <summary>
            Determines whether the object has a formula that evaluates to a numeric value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaStringValue">
            <summary>
            Determines whether the object has a formula string value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormula">
            <summary>
            True if all cells in the range contain formulas; False if
            at least one of the cells in the range doesn't contain a formula.
            Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasFormulaArray">
            <summary>
            Indicates whether range contains array-entered formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasNumber">
            <summary>
            Indicates whether the range contains number. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasRichText">
            <summary>
            Indicates whether cell contains formatted rich text string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasString">
            <summary>
            Indicates whether the range contains String. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasStyle">
            <summary>
            Indicates whether range has default style. False means default style.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HorizontalAlignment">
            <summary>
            Returns or sets the horizontal alignment for the specified object.
            Read/write HorizontalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Hyperlinks">
            <summary>
            Returns hyperlinks for this ranges collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IndentLevel">
            <summary>
            Returns or sets the indent level for the cell or range. Can be an
            integer from 0 to 15. Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsBlank">
            <summary>
            Indicates whether the range is blank. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasError">
            <summary>
            Indicates whether range contains error value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsGroupedByColumn">
            <summary>
            Indicates whether this range is grouped by column. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsGroupedByRow">
            <summary>
            Indicates whether this range is grouped by row. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsInitialized">
            <summary>
            Indicates whether cell is initialized. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.LastColumn">
            <summary>
            Returns last column of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.LastRow">
            <summary>
            Returns last row of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.NumberValue">
            <summary>
            Gets / sets double value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.NumberFormat">
            <summary>
            Format of current cell. Analog of Style.NumberFormat property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Row">
            <summary>
            Returns the number of the first row of the first area in
            the range. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RowGroupLevel">
            <summary>
            Row group level. Read-only.
            -1 - Not all rows in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RowHeight">
            <summary>
            Returns the height of all the rows in the range specified,
            measured in points. Returns Double.MinValue if the rows in the specified range
            aren't all the same height. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Rows">
            <summary>
            For a Range object, returns an array of Range objects that represent the
            rows in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Columns">
            <summary>
            For a Range object, returns an array of Range objects that represent the
            columns in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Style">
            <summary>
            Returns a Style object that represents the style of the specified
            range. Read/write IStyle.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.CellStyleName">
            <summary>
            Returns name of the Style object that represents the style of the specified
            range. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Text">
            <summary>
            Gets / sets string value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.TimeSpanValue">
            <summary>
            Gets / sets time value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Value">
            <summary>
            Returns or sets the value of the specified range.
            Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Value2">
            <summary>
            Returns or sets the cell value. Read/write Variant.
            The only difference between this property and the Value property is
            that the Value2 property doesn't use the Currency and Date data types.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.VerticalAlignment">
            <summary>
            Returns or sets the vertical alignment of the specified object.
            Read/write VerticalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Worksheet">
            <summary>
            Returns a Worksheet object that represents the worksheet
            containing the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets cell by row and index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Item(System.String)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Item(System.String,System.Boolean)">
            <summary>
            Gets cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ConditionalFormats">
            <summary>
            Collection of conditional formats.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.DataValidation">
            <summary>
            Data validation for the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaStringValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaNumberValue">
            <summary>
            Returns the calculated value of the formula as a Number.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaBoolValue">
            <summary>
            Returns the calculated value of the formula as a boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FormulaErrorValue">
            <summary>
            Returns the calculated value of the formula as a string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Comment">
            <summary>
            Comment assigned to the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RichText">
            <summary>
            String with rich text formatting. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasMerged">
            <summary>
            Indicates whether this range is part of merged range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.MergeArea">
            <summary>
            Returns a Range object that represents the merged range containing
            the specified cell. If the specified cell not part of a merged range,
            this property returns NULL. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsWrapText">
            <summary>
            True if Microsoft Excel wraps the text in the object.
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.HasExternalFormula">
            <summary>
            Indicates is current range has external formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IgnoreErrorOptions">
            <summary>
            Represents ignore error options. If not single cell returs concatenateed flags.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.IsStringsPreserved">
            <summary>
            Indicates whether all values in the range are preserved as strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BuiltInStyle">
            <summary>
            Gets/sets built in style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.RangeGlobalAddress2007">
            <summary>
            Gets address global in the format required by Excel 2007.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Activate(System.Boolean)">
            <summary>
            Activages a single cell, scroll to it and activates the respective sheet
            To select a range of cells, use the Select method.
            </summary>
            <param name="scroll">True to scroll to the cell</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ExportDataTable(Spire.Xls.ExportTableOptions)">
            <summary>
            Exports data to a DataTable based on the provided ExportTableOptions.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Merge">
            <summary>
            Creates a merged cell from the specified Range object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Merge(System.Boolean)">
            <summary>
            Creates a merged cell from the specified Range object.
            </summary>
            <param name="clearCells">Indicates whether to clear unnecessary cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.UnMerge">
            <summary>
            Separates a merged area into individual cells.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FreezePanes">
            <summary>
            Freezes pane at the current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Intersect(Spire.Xls.Core.IXLSRange)">
            <summary>
            Returns intersection of this range with the specified one.
            </summary>
            <param name="range">The Range with which to intersect.</param>
            <returns>Range intersection; if there is no intersection, NULL is returned.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Merge(Spire.Xls.Core.IXLSRange)">
            <summary>
            Returns merge of this range with the specified one.
            </summary>
            <param name="range">The Range to merge with.</param>
            <returns>Merged ranges or NULL if wasn't able to merge ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AutoFitRows">
            <summary>
            Autofits all rows.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AutoFitColumns">
            <summary>
            Autofits all columns. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AddComment">
            <summary>
            Adds comment to the range.
            </summary>
            <returns>Range's comment.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindFirst(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindFirst(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindFirst(System.Boolean)">
            <summary>
            This method seraches for the first cell with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindFirst(System.DateTime)">
            <summary>
            This method seraches for the first cell with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindFirst(System.TimeSpan)">
            <summary>
            This method seraches for the first cell with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindAll(System.DateTime)">
            <summary>
            This method seraches for the all cells with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindAll(System.TimeSpan)">
            <summary>
            This method seraches for the all cells with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindAll(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.FindAll(System.Boolean)">
            <summary>
            This method seraches for the all cells with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderAround">
            <summary>
            Sets around border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderAround(Spire.Xls.LineStyleType)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderAround(Spire.Xls.LineStyleType,System.Drawing.Color)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderAround(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderInside">
            <summary>
            Sets inside border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderInside(Spire.Xls.LineStyleType)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderInside(Spire.Xls.LineStyleType,System.Drawing.Color)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderInside(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.BorderNone">
            <summary>
            Sets none border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.CollapseGroup(Spire.Xls.GroupByType)">
            <summary>
            Collapses current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ExpandGroup(Spire.Xls.GroupByType)">
            <summary>
            Expands current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ExpandGroup(Spire.Xls.GroupByType,Spire.Xls.ExpandCollapseFlags)">
            <summary>
            Expands current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
            <param name="flags">Additional option flags.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.GetNewRangeLocation(System.Collections.Generic.Dictionary{System.String,System.String},System.String@)">
            <summary>
            Gets new address of range.
            </summary>
            <param name="names">HashTable with Worksheet names.</param>
            <param name="sheetName">String that sets as a worksheet name.</param>
            <returns>Returns string with new name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Clones current IXLSRange.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="hashNewNames">Hash table with new names.</param>
            <param name="book">Parent workbook.</param>
            <returns>Returns clone of current instance.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.CellsCount">
            <summary>
            Number of cells in the range. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.ClearConditionalFormats">
            <summary>
            Clears conditional formats.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.GetRectangles">
            <summary>
            Returns array that contains information about range.
            </summary>
            <returns>Rectangles that describes range</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.GetRectanglesCount">
            <summary>
            Returns number of rectangles returned by GetRectangles method.
            </summary>
            <returns>Number of rectangles returned by GetRectangles method.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.WorksheetName">
            <summary>
            Gets name of the parent worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Add(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds new range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AddRange(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Remove(Spire.Xls.Core.IXLSRange)">
            <summary>
            Removes range from the collection.
            </summary>
            <param name="range">Range to remove.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Item(System.Int32)">
            <summary>
            Returns item by index from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.GetColumnRows(System.Boolean)">
            <summary>
            Retrieves an array of CellRange objects representing either columns or rows based on the provided flag.
            </summary>
            <param name="bIsColumn">If true, retrieves columns; if false, retrieves rows.</param>
            <returns>An array of CellRange objects.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AddRowColumnIndex(System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Collections.Generic.KeyValuePair{System.Int32,System.Int32})">
            <summary>
            Adds new element to the list of used rows / columns.
            </summary>
            <param name="list">List to add entry to.</param>
            <param name="iIndex">Row / column index.</param>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.AddRowColumnIndex(System.Collections.Generic.SortedList{System.Int32,System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new element to the list of used rows / columns.
            </summary>
            <param name="list">List to add entry to.</param>
            <param name="iIndex">Row / column index.</param>
            <param name="iSecondaryStart">Start index of the new entry.</param>
            <param name="iSecondaryEnd">End index of the new entry.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.Spire#Xls#Core#IXLSRange#Clear(Spire.Xls.ExcelClearOptions)">
            <summary>
            Clears the cell based on clear options.
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.EnvalutedValue">
            <summary>
            Gets the evaluated value. Currently, this property always returns null.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsRangesCollection.MoveTo(Spire.Xls.Core.IXLSRange)">
            <summary>
            Moves the current object to the specified destination range.
            </summary>
            <param name="destination">The IXLSRange object representing the destination where the current object should be moved.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper">
            <summary>
            Wrapper over conditional format collection for range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.m_range">
            <summary>
            Wrapped range object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.m_condFormats">
            <summary>
            Wrapped conditinal formats collection.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.m_arrConditions">
            <summary>
            List with all wrapped conditions.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.#ctor">
            <summary>
            To prevent creation without arguments.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.#ctor(Spire.Xls.Core.ICombinedRange)">
            <summary>
            Creates wrapper for the specified range object.
            </summary>
            <param name="range">Range to wrap conditional formats for.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An enumerator that can iterate through a collection</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.Count">
            <summary>
            Returns number of elements in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.Item(System.Int32)">
            <summary>
            Returns single element from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.AddCondition">
            <summary>
            Adds new condition to the collection.
            </summary>
            <returns>Newly added condition.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.Remove">
            <summary>
            Removes the Condtional Format at the specified range
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.RemoveAt(System.Int32)">
            <summary>
            Removes the Condtional Format at the Specified Index
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.Parent">
            <summary>
            Parent object for this object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.CreateReadOnlyFormats">
            <summary>
            Creates conditional formats for read-only mode.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.CreateWriteableFormats">
            <summary>
            Creates copy of the current conditional formats collection to enable writing.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.CreateConditionWrappers">
            <summary>
            Creates wrappers for all conditions.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.GetCondition(System.Int32)">
            <summary>
            Returns unwrapped condition.
            </summary>
            <param name="iCondition">Condition index.</param>
            <returns>Unwrapped condition.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.AddRange(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds a range of conditional formats to the current collection.
            </summary>
            <param name="range">The range of conditional formats to add.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.SheetFormats">
            <summary>
            Returns collection of worksheets conditional formats of
            the parent worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.ConditionalFormats">
            <summary>
            Gets the Conditional Formats.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper.Range">
            <summary>
            Gets the range object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection">
            <summary>
            Represents a collection of pivot caches.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsPivotCachesCollection class.
            </summary>
            <param name="parent">The parent object which should be of type XlsWorkbook.</param>
            <returns>
            An instance of XlsPivotCachesCollection.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Parent">
            <summary>
            Gets the parent workbook to which this worksheet belongs.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Workbook">
            <summary>
            Represents an Excel workbook, providing methods and properties to manipulate and access the contents of an Excel file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Count">
            <summary>
            Returns number of items in the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Add(Spire.Xls.CellRange)">
            <summary>
            Creates new chache object inside this collection.
            </summary>
            <param name="range">Range that contains data to cache.</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Add(Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache)">
            <summary>
            Adds single item to the collection.
            </summary>
            <param name="cache">Item to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Clear">
            <summary>
            Clears collection
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Pivot cache.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Remove(Spire.Xls.Core.IPivotCache)">
            <summary>
            Removes the specified pivot cache from the collection.
            </summary>
            <param name="pivotCache">The pivot cache to be removed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotCachesCollection.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the specified parent object.
            </summary>
            <param name="parent">The object to be cloned.</param>
            <returns>A new object that is a copy of the specified parent object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection">
            <summary>
            Represents a collection of pivot tables in an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.#ctor(System.Object)">
            <summary>
            Creates collection and sets its ReservedHandle and Parent values.
            </summary>
            <param name="parent">Parent object of this collection.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Item(System.Int32)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="index">Zero-based index of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Item(System.String)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="name">Pivot table name.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Add(System.String,Spire.Xls.CellRange,Spire.Xls.PivotCache)">
            <summary>
            Adds new pivot table to the collection.
            </summary>
            <param name="name">Name of the new pivot table.</param>
            <param name="location">Pivot table location.</param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Remove(System.String)">
            <summary>
            Removes pivot table from the collection.
            </summary>
            <param name="name">name of the pivot table to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes piovt table from the collection base on the index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Remove(Spire.Xls.Core.IPivotTable)">
            <summary>
            Removes the specified pivot table from the collection and performs necessary cleanup.
            </summary>
            <param name="pivotTable">The pivot table to be removed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Clear">
            <summary>
            Clears the contents of the collection or object, resetting it to its initial state.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.ParentWorksheet">
            <summary>
            Gets the parent worksheet of the current XlsWorksheetBase instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPivotTablesCollection.Clone(Spire.Xls.Core.Spreadsheet.XlsWorksheet,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clones the PivotTablesCollection to a specified worksheet with a mapping of old to new worksheet names.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection">
            <summary>
            Represents a collection of ArcShape objects, providing methods to manage and manipulate a group of arc shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection.Item(System.Int32)">
            <summary>
            Gets the IArcShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection.Item(System.String)">
            <summary>
            Gets the IArcShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection.AddArc(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an arc shape to the specified position with given dimensions.
            </summary>
            <param name="row">The row index where the arc will be placed.</param>
            <param name="column">The column index where the arc will be placed.</param>
            <param name="height">The height of the arc.</param>
            <param name="width">The width of the arc.</param>
            <returns>An IArcShape object representing the added arc.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection.AddCopy(Spire.Xls.Core.IArcShape)">
            <summary>
            Adds a copy of the specified IArcShape to the current collection or object.
            </summary>
            <param name="source">The IArcShape to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ArcShapeCollection.Clear">
            <summary>
            Clears the contents of the collection or object, removing all elements.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection">
            <summary>
            Represents a collection of button shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection.Item(System.Int32)">
            <summary>
            Gets the IButtonShape at the specified index from the list.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection.Item(System.String)">
            <summary>
            Gets the IButtonShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection.AddButton(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a button to the specified position and size.
            </summary>
            <param name="row">The row index where the button should be placed.</param>
            <param name="column">The column index where the button should be placed.</param>
            <param name="height">The height of the button.</param>
            <param name="width">The width of the button.</param>
            <returns>An instance of IButtonShape representing the added button.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection.AddCopy(Spire.Xls.Core.IButtonShape)">
            <summary>
            Adds a copy of the specified IButtonShape to the current collection or object.
            </summary>
            <param name="source">The IButtonShape instance to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ButtonShapeCollection.Clear">
            <summary>
            Clears the contents of the collection or resets the object to its initial state.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection">
            <summary>
            Represents a collection of CheckBox controls.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Index of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.AddCopy(Spire.Xls.Core.ICheckBox)">
            <summary>
            Adds a copy of the provided checkbox to the current collection or container.
            </summary>
            <param name="checkboxsource">The checkbox to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.AddCheckBox(Spire.Xls.Core.ICheckBox)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="checkbox">Checkbox to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.AddCheckBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new textbox to the collection.
            </summary>
            <param name="row">Top row for the new shape.</param>
            <param name="column">Left column for the new shape.</param>
            <param name="height">Height in pixels of the new shape.</param>
            <param name="width">Width in pixels of the new shape.</param>
            <returns>Newly created TextBox object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CheckBoxCollection.Clear">
            <summary>
            Clears the contents of the collection or resets the object to its initial state.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection">
            <summary>
            Represents a collection of ComboBox items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection.Item(System.Int32)">
            <summary>
            Gets the IComboBoxShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection.AddCopy(Spire.Xls.Core.IComboBoxShape)">
            <summary>
            Adds a copy of the specified combo box shape to the current collection or container.
            </summary>
            <param name="comboboxsource">The combo box shape to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection.AddComboBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ComboBoxCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection">
            <summary>
            Represents a collection of GroupBox controls.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection.Item(System.Int32)">
            <summary>
            Gets the IGroupBox at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection.Item(System.String)">
            <summary>
            Gets the IGroupBox associated with the specified name.
            </summary>
            <param name="name">The name of the IGroupBox to retrieve.</param>
            <returns>The IGroupBox with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection.AddGroupBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a group box to the specified position with the given dimensions.
            </summary>
            <param name="row">The row index where the group box will be placed.</param>
            <param name="column">The column index where the group box will be placed.</param>
            <param name="height">The height of the group box.</param>
            <param name="width">The width of the group box.</param>
            <returns>An IGroupBox object representing the newly added group box.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection.AddCopy(Spire.Xls.Core.IGroupBox)">
            <summary>
            Adds a copy of the provided IGroupBox to the current collection or structure.
            </summary>
            <param name="source">The IGroupBox instance to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.GroupBoxCollection.Clear">
            <summary>
            Clears all items from the list by removing each item starting from the last element to the first.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection">
            <summary>
            Represents a collection of LabelShape objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection.Item(System.Int32)">
            <summary>
            Gets the ILabelShape at the specified index in the list.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection.Item(System.String)">
            <summary>
            Gets the ILabelShape associated with the specified name.
            </summary>
            <param name="name">The name of the ILabelShape to retrieve.</param>
            <returns>The ILabelShape associated with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection.AddLabel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a label shape to the specified position and size on a grid.
            </summary>
            <param name="row">The zero-based row index where the label should be placed.</param>
            <param name="column">The zero-based column index where the label should be placed.</param>
            <param name="height">The height of the label.</param>
            <param name="width">The width of the label.</param>
            <returns>An ILabelShape representing the newly added label.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection.AddCopy(Spire.Xls.Core.ILabelShape)">
            <summary>
            Adds a copy of the provided ILabelShape to the current collection or object.
            </summary>
            <param name="source">The ILabelShape to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LabelShapeCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.LineCollection">
            <summary>
            Represents a collection of Line objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.AddLine">
            <summary>
            Adds a new line shape to the document and returns it.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.AddLine(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.LineShapeType)">
            <summary>
            Adds a line shape to the specified row and column with the given width, height, and line shape type.
            </summary>
            <param name="row">The row position where the line shape will be added.</param>
            <param name="column">The column position where the line shape will be added.</param>
            <param name="width">The width of the line shape.</param>
            <param name="height">The height of the line shape.</param>
            <param name="lineShapeType">The type of the line shape to be added.</param>
            <returns>The newly created line shape as an ILineShape object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.AddCopy(Spire.Xls.Core.ILineShape)">
            <summary>
            Adds a copy of the specified source line shape to the current collection or object.
            </summary>
            <param name="source">The ILineShape object to be copied and added.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Index of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.LineCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection">
            <summary>
            Represents a collection of ListBox items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection.Item(System.Int32)">
            <summary>
            Gets the IListBox at the specified index.
            </summary>
            <param name="index">The zero-based index of the IListBox to get.</param>
            <returns>The IListBox at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection.Item(System.String)">
            <summary>
            Gets the IListBox associated with the specified name.
            </summary>
            <param name="name">The name of the IListBox to retrieve.</param>
            <returns>The IListBox associated with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection.AddListBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new ListBox to the specified position and size within a layout.
            </summary>
            <param name="row">The row index where the ListBox will be placed.</param>
            <param name="column">The column index where the ListBox will be placed.</param>
            <param name="height">The height of the ListBox.</param>
            <param name="width">The width of the ListBox.</param>
            <returns>The newly created and added ListBox instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection.AddCopy(Spire.Xls.Core.IListBox)">
            <summary>
            Adds a copy of the items from the source IListBox to the current list.
            </summary>
            <param name="source">The IListBox containing the items to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ListBoxCollection.Clear">
            <summary>
            Clears the contents of the collection or object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection">
            <summary>
            Represents a collection of OvalShape objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection.Item(System.Int32)">
            <summary>
            Gets the IOvalShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection.Item(System.String)">
            <summary>
            Gets the IOvalShape associated with the specified name.
            </summary>
            <param name="name">The name of the IOvalShape to retrieve.</param>
            <returns>The IOvalShape with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection.AddOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an oval shape to the specified position with the given dimensions.
            </summary>
            <param name="row">The row index where the top-left corner of the oval will be placed.</param>
            <param name="column">The column index where the top-left corner of the oval will be placed.</param>
            <param name="height">The height of the oval.</param>
            <param name="width">The width of the oval.</param>
            <returns>The newly created oval shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection.AddCopy(Spire.Xls.Core.IOvalShape)">
            <summary>
            Adds a copy of the specified oval shape to the current collection or object.
            </summary>
            <param name="source">The oval shape to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.OvalShapeCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection">
            <summary>
            Represents a collection of preset geometric shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.Item(System.Int32)">
            <summary>
            Gets the IPrstGeomShape at the specified index in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.Item(System.String)">
            <summary>
            Gets the IPrstGeomShape with the specified name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.Item(Spire.Xls.PrstGeomShapeType)">
            <summary>
            Gets an array of IPrstGeomShape objects that match the specified PrstGeomShapeType.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.AddNotPrimitiveShape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a NotPrimitive shape to prstgeomshape collection;
            </summary>
            <param name="row">shape's first row number in worksheet</param>
            <param name="column">shape's first column number in worksheet</param>
            <param name="width">shape's width, in unit of pixel.</param>
            <param name="height">shape's height, in unit of pixel.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.AddPrstGeomShape(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.PrstGeomShapeType)">
            <summary>
            Add a preset shape to prstgeomshape collection;
            </summary>
            <param name="row">shape's first row number in worksheet</param>
            <param name="column">shape's first column number in worksheet</param>
            <param name="width">shape's width, in unit of pixel.</param>
            <param name="height">shape's height, in unit of pixel.</param>
            <param name="shapeType">shape's type</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.AddCopy(Spire.Xls.Core.IPrstGeomShape)">
            <summary>
            Adds a copy of the specified geometric shape to the current collection or object.
            </summary>
            <param name="source">The geometric shape to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.Remove(Spire.Xls.Core.IShape)">
            <summary>
            Remove a shape in collection;
            </summary>
            <param name="shape">the shape to remove</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection.Clear">
            <summary>
            Clears the contents of the collection or object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection">
            <summary>
            Represents a collection of RadioButton controls.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.AverageWidth">
            <summary>
            Represents the average width value used in the application, set to 140.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.AverageHeight">
            <summary>
            Represents the average height value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Add">
            <summary>
            Adds Option button default Dimension
            </summary>
            <returns>returns option button shape</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Add(System.Int32,System.Int32)">
            <summary>
            Adds the Shape with default size
            </summary>
            <param name="row">Top row for the new shape.</param>
            <param name="column">Left column for the new shape</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new RadioButton to the collection.
            </summary>
            <param name="row">Top row for the new shape.</param>
            <param name="column">Left column for the new shape.</param>
            <param name="height">Height in pixels of the new shape.</param>
            <param name="width">Width in pixels of the new shape.</param>
            <returns>Newly created TextBox object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.AddCopy(Spire.Xls.Core.IRadioButton)">
            <summary>
            Adds a copy of the specified radio button to the current collection or container.
            </summary>
            <param name="source">The radio button to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RadioButtonCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection">
            <summary>
            Represents a collection of Rectangle objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection.Item(System.Int32)">
            <summary>
            Gets the IRectangleShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection.Item(System.String)">
            <summary>
            Gets the IRectangleShape associated with the specified name.
            </summary>
            <param name="name">The name of the IRectangleShape to retrieve.</param>
            <returns>The IRectangleShape associated with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection.AddRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.RectangleShapeType)">
            <summary>
            Adds a rectangle shape to the specified position with given dimensions and type.
            </summary>
            <param name="row">The row index where the rectangle will be placed.</param>
            <param name="column">The column index where the rectangle will be placed.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="rectShapeType">The type of the rectangle shape.</param>
            <returns>An instance of IRectangleShape representing the added rectangle.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection.AddCopy(Spire.Xls.Core.IRectangleShape)">
            <summary>
            Adds a copy of the specified rectangle shape to the current collection or object.
            </summary>
            <param name="source">The rectangle shape to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.RectangleCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection">
            <summary>
            Represents a collection of ScrollBar objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection.Item(System.Int32)">
            <summary>
            Gets the IScrollBarShape at the specified index in the list.
            </summary>
            <param name="index">The zero-based index of the IScrollBarShape to get.</param>
            <returns>The IScrollBarShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection.Item(System.String)">
            <summary>
            Gets the IScrollBarShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection.AddScrollBar(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a scrollbar to the specified position with the given dimensions.
            </summary>
            <param name="row">The row position of the scrollbar.</param>
            <param name="column">The column position of the scrollbar.</param>
            <param name="height">The height of the scrollbar.</param>
            <param name="width">The width of the scrollbar.</param>
            <returns>An instance of IScrollBarShape representing the added scrollbar.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection.AddCopy(Spire.Xls.Core.IScrollBarShape)">
            <summary>
            Adds a copy of the provided IScrollBarShape to the current object.
            </summary>
            <param name="source">The IScrollBarShape instance to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ScrollBarCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase">
            <summary>
            Represents a base class for collections of shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase.Item(System.Int32)">
            <summary>
            Returns single shape from the collection by its index. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase.Item(System.String)">
            <summary>
            Returns single shape from the collection by its name. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase.AddCopy(Spire.Xls.Core.IShape,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds shape copy to shapes collection.
            </summary>
            <param name="sourceShape">Shape to copy.</param>
            <param name="hashNewNames">Hashtable with new names of worksheets.</param>
            <param name="arrFontIndexes">Array list with new font indexes.</param>
            <returns>Added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase.AddCopy(Spire.Xls.Core.IShape)">
            <summary>
            Adds shape copy to the collection.
            </summary>
            <param name="sourceShape">Shape to copy.</param>
            <returns>Added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.ShapeCollectionBase.AddShape(Spire.Xls.Core.Spreadsheet.Shapes.XlsShape)">
            <summary>
            Adds shape copy to the collection.
            </summary>
            <param name="sourceXlsShape">Shape to copy.</param>
            <returns>Added shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection">
            <summary>
            Represents a collection of SpinnerShape objects, providing methods to manage and manipulate a group of spinner shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection.Item(System.Int32)">
            <summary>
            Gets the ISpinnerShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection.Item(System.String)">
            <summary>
            Gets the ISpinnerShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection.AddSpinner(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a spinner shape to the specified position and dimensions within a layout.
            </summary>
            <param name="row">The row index where the spinner should be placed.</param>
            <param name="column">The column index where the spinner should be placed.</param>
            <param name="height">The height of the spinner.</param>
            <param name="width">The width of the spinner.</param>
            <returns>The ISpinnerShape object representing the added spinner.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection.AddCopy(Spire.Xls.Core.ISpinnerShape)">
            <summary>
            Adds a copy of the provided ISpinnerShape to the current collection or object.
            </summary>
            <param name="source">The ISpinnerShape to be copied and added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.SpinnerShapeCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection">
            <summary>
            Represents a collection of TextBox controls.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Index of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection.AddCopy(Spire.Xls.Core.ITextBoxLinkShape)">
            <summary>
            Adds a copy of the specified ITextBoxLinkShape to the current collection or context.
            </summary>
            <param name="textboxsource">The ITextBoxLinkShape to be copied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection.AddTextBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new textbox to the collection.
            </summary>
            <param name="row">Top row for the new shape.</param>
            <param name="column">Left column for the new shape.</param>
            <param name="height">Height in pixels of the new shape.</param>
            <param name="width">Width in pixels of the new shape.</param>
            <returns>Newly created TextBox object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.TextBoxCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection">
            <summary>
            Represents a collection of charts in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Item(System.String)">
            <summary>
            Returns a single Chart object from a Charts collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Add">
            <summary>
            Creates a new chart.
            </summary>
            <returns>Newly created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Add(System.String)">
            <summary>
            Defines a new name.
            </summary>
            <param name="name">Name of the new chart's sheet.</param>
            <returns>Newly created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Remove(System.String)">
            <summary>
            Removes Chart object from the collection.
            </summary>
            <param name="name">Name of the object to remove from the collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves chartsheet of collection source to destination.
            </summary>
            <param name="oldIndex">Old index.</param>
            <param name="newIndex">New index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsChartsCollection.Add(Spire.Xls.Core.IChart)">
            <summary>
            Adds a chart to the collection.
            </summary>
            <param name="chartToAdd">The chart to be added.</param>
            <returns>The added chart.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection">
            <summary>
            Represents a collection of comments in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Returns single entry from the collection by row and column one-based indexes. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.AddComment(System.Int32,System.Int32)">
            <summary>
            Adds comment to the specified range.
            </summary>
            <param name="iRow">Row of the cell to add comment to.</param>
            <param name="iColumn">Column of the cell to add comment to.</param>
            <returns>Newly created comment shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.AddComment(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds comment to the specified range.
            </summary>
            <param name="iRow">Row of the cell to add comment to.</param>
            <param name="iColumn">Column of the cell to add comment to.</param>
            <param name="bIsParseOptions">A boolean flag indicating whether to apply specific color settings to the comment.</param>
            <returns>Newly created comment shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.AddComment(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds a comment to the specified range in an Excel worksheet.
            </summary>
            <param name="parentRange">The range to which the comment will be added.</param>
            <returns>An ICommentShape object representing the added comment, or null if the range is not a single cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsCommentsCollection.Remove(Spire.Xls.Core.ICommentShape)">
            <summary>
            Removes the specified comment shape from the document.
            </summary>
            <param name="comment">The comment shape to be removed.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection">
            <summary>
            Represents a collection of pictures in an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Drawing.Image,System.String)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Drawing.Image,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.String)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="strFileName">Picture file name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="strFileName">Picture file name.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.AddLinkPic(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a linked picture to the specified location with the given dimensions and link target.
            </summary>
            <param name="topRow">The zero-based index of the top row where the picture will be placed.</param>
            <param name="leftColumn">The zero-based index of the left column where the picture will be placed.</param>
            <param name="height">The height of the picture in points.</param>
            <param name="width">The width of the picture in points.</param>
            <param name="linktarget">The URL or target of the link associated with the picture.</param>
            <returns>An IPictureShape object representing the added linked picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream with the picture.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">Name of the shape.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsPicturesCollection.Clear">
            <summary>
            Clears the contents of the collection or object, resetting it to its initial state.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetChartsCollection">
            <summary>
            Represents a collection of charts within an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetChartsCollection.Item(System.Int32)">
            <summary>
            Gets the IChartShape at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper">
            <summary>
            Contains borders for range that contains more than one cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.m_arrCells">
            <summary>
            All cells of the range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.m_book">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates instances for specified range.
            </summary>
            <param name="range">Range for which instance must be created.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write ExcelColors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.Color">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.Item(Spire.Xls.BordersLineType)">
            <summary>
            Returns a Border object that represents one of the borders of either a
            range of cells or a style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read / write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.BordersCollectionArrayWrapper.Value">
            <summary>
            Synonym for Borders.LineStyle. Read / write Variant.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1">
            <summary>
            Provides a base class for a collection of objects that can be individually accessed by index.
            This class implements the IList interface and serves as a base class for creating collections.
            It provides some event such as OnSet OnSetComplete and so on
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.m_arrItems">
            <summary>
            List with collection items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Capacity">
            <summary>
            Gets or sets the number of elements that the System.Collections.CollectionBase can contain.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the System.Collections.CollectionBase instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.InnerList">
            <summary>
            Gets the list of elements in the instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.List">
            <summary>
            Gets the list of elements in the instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in the collection.trigger OnSet and OnSetComplete method when set item
            </summary>
            <param name="i">The zero-based index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the class with the default initial capacity.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.#ctor(System.Int32)">
            
             <summary>
             Initializes a new instance of the class with the specified capacity.
             </summary>
             <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all objects from the System.Collections.CollectionBase instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this instance.
            </summary>
            <returns>An enumerator for this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of this instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of this instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnInsert(System.Int32,`0)">
            <summary>
             Performs additional custom processes before inserting a new element into this instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnInsertComplete(System.Int32,`0)">
            <summary>
             Performs additional custom processes after inserting a new element into this instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnRemove(System.Int32,`0)">
            <summary>
             Performs additional custom processes when removing an element from this instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnRemoveComplete(System.Int32,`0)">
            <summary>
             Performs additional custom processes after removing an element from this instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Performs additional custom processes before setting a value in this instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.OnSetComplete(System.Int32,`0,`0)">
            <summary>
            Performs additional custom processes after setting a value in this instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of this instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of a specified item within the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Add(`0)">
            <summary>
            Adds an item to the collection.trigger OnInsert and OnInsertComplete method when set item
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific item.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection">
            <summary>
            Represents a collection of add-in functions for Excel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.Item(System.Int32)">
            <summary>
            Gets the IAddInFunction at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.Add(System.String,System.String)">
            <summary>
            Adds new add-in function.
            </summary>
            <param name="fileName">File name.</param>
            <param name="functionName">Function name.</param>
            <returns>Index of the new function.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.Add(System.String)">
            <summary>
            Adds new add-in function.
            </summary>
            <param name="functionName">Function to add.</param>
            <returns>Index of the added function.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.Add(System.Int32,System.Int32)">
            <summary>
            Adds a new ExcelAddInFunction to the collection using specified book and name indices.
            </summary>
            <param name="bookIndex">The index of the book in the Excel application.</param>
            <param name="nameIndex">The index of the name in the specified book.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes add-in function with specified index.
            </summary>
            <param name="index">Item index to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.Contains(System.String)">
            <summary>
            Indicates whether collection contains workbook with specified name.
            </summary>
            <param name="workbookName">Name to check.</param>
            <returns>True if collections contains book with specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection.CopyFrom(Spire.Xls.Core.Spreadsheet.Collections.XlsAddInFunctionsCollection)">
            <summary>
            the method is not implemented
            </summary>
            <param name="addinFunctions"></param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection">
            <summary>
            Represents a collection of borders that can be applied to cells in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection.KnownColor">
            <summary>
            Returns or sets the primary excel color of the object. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection.Color">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection.Item(Spire.Xls.BordersLineType)">
            <summary>
            Returns a Border object that represents one of the borders of either a
            range of cells or a style. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection.LineStyle">
            <summary>
            Returns or sets the line style for the border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsBordersCollection.Value">
            <summary>
            Synonym for Borders.LineStyle. Read / write LineStyleType.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection">
            <summary>
            Represents a collection of data validation settings for cells in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.ParentTable">
            <summary>
            Gets parent table. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.Workbook">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.Worksheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.ShapesCount">
            <summary>
            Gets number of required shapes objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.FindByCellIndex(System.Int64)">
            <summary>
            Finds and returns an XlsValidation object associated with the specified cell index.
            </summary>
            <param name="iCellIndex">The index of the cell for which the validation is to be found.</param>
            <returns>The XlsValidation object if found; otherwise, null.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.PromptBoxHPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.PromptBoxVPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.IsPromptBoxVisible">
            <summary>
            Indicates whehter prompt box is visible..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.IsPromptBoxPositionFixed">
            <summary>
            Indicates whehter prompt box has fixed position..
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsDataValidationCollection.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes ranges from collection.
            <param name="rectangles">Ranges to remove.</param>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection">
            <summary>
            Represents a collection of fonts used in an Excel document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.Item(System.Int32)">
            <summary>
            Gets the font at the specified index in the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.Add(Spire.Xls.Core.IFont)">
            <summary>
            Adds the specified font to the collection.
            </summary>
            <param name="font">The font to add.</param>
            <returns>The added font as an IFont object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.ForceAdd(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Forces the addition of the specified XlsFont to the collection, bypassing typical constraints or checks.
            </summary>
            <param name="font">The XlsFont object to be added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.AddRange(Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection)">
            <summary>
            Adds a range of font mappings from the provided XlsFontsCollection to the internal dictionary and returns the updated dictionary.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.Contains(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Determines whether the collection contains a specific XlsFont.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsFontsCollection.Clone(Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Creates a deep copy of the XlsFontsCollection with the specified parent workbook.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection">
            <summary>
            The collection of horizontal page breaks within the print area.
            Each horizontal page break is represented by an HPageBreak object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.ManualBreakCount">
            <summary>
            Gets manual breaks count. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.RecordCode">
            <summary>
            Returns code of the biff storage. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.NeedDataArray">
            <summary>
            Indicates whether data array is required by this record.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.StreamPos">
            <summary>
            Indicates record position in stream. This is a utility member of class and
            is used only in the serialization process. Does not influence the data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.Item(Spire.Xls.Core.IXLSRange)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.Add(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds a horizontal page break. Returns an HPageBreak object. Read-only.
            </summary>
            <param name="location">Object after which new page break must be inserted.</param>
            <returns>HPageBreak which was added.</returns>
            <exception cref="T:System.ArgumentException">
            If specified object couldn't be found in the collection.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.Remove(Spire.Xls.Core.IXLSRange)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.GetPageBreak(System.Int32)">
            <summary>
            Returns page break at the specified row.
            </summary>
            <param name="iRow">One-based row index.</param>
            <returns>Page break with corresponding row or null if not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHPageBreaksCollection.Clone(System.Object)">
            <summary>
            Creates copy of the collection.
            </summary>
            <param name="parent">Parent for new collection.</param>
            <returns>A clone of the current collection.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection">
            <summary>
            Represents a collection of hyperlinks within an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.Add(Spire.Xls.Core.IXLSRange)">
            <summary>
            Defines a new hyperlink.
            </summary>
            <param name="range">
            Range object that represents the range new hyperlink is attached to.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.Add(Spire.Xls.Core.IHyperLink)">
            <summary>
            Adds new hyperlink.
            </summary>
            <param name="link">Hyperlink to add.</param>
            <returns>index of Hyperlink added.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.AddRange(System.Collections.Generic.IList{Spire.Xls.HyperLink})">
            <summary>
            Adds a range of HyperLink objects to the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.IsReadOnly">
            <summary>
            Indicates whether collection is in read-only mode. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.CreateHyperlinkStyles">
            <summary>
            Creates hyperlink styles.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsHyperLinksCollection.GetRangeHyperlinks(Spire.Xls.Core.IXLSRange)">
            <summary>
            Gets hyperlinks for the specified range.
            </summary>
            <param name="range">range object.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection">
            <summary>
            Represents a collection of styles used in Excel documents.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Contains(System.String)">
            <summary>
            Check collection contains style with specified name.
            </summary>
            <param name="name">Style name</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Remove(System.String)">
            <summary>
            Removes style from the colleciton.
            </summary>
            <param name="styleName">Style to remove.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Item(System.String)">
            <summary>
            Returns a single object from a collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Clone(System.Object)">
            <summary>
            Creates copy of the current instance.
            </summary>
            <param name="parent">Parent object for the new collection.</param>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.UpdateStyleRecords">
            <summary>
            Updates style record of each style in the collection according to the xf indexes.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.CompareStyles(Spire.Xls.Core.IStyle,Spire.Xls.Core.IStyle)">
            <summary>
            Compares two IStyle objects to determine if they have the same style properties.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.CompareBorders(Spire.Xls.Core.IBorders,Spire.Xls.Core.IBorders)">
            <summary>
            Compare all Border Collections items.
            </summary>
            <param name="source">First border to compare.</param>
            <param name="destination">Second border to compare.</param>
            <returns>True if borders are the same; otherwise False.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.CompareBorder(Spire.Xls.Core.IBorder,Spire.Xls.Core.IBorder)">
            <summary>
            Compare Border interfaces.
            </summary>
            <param name="source">First border to compare.</param>
            <param name="destination">Second border to compare.</param>
            <returns>True if borders are the same; otherwise False.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Add(System.String)">
            <summary>
            Adds a new style with the specified name to the workbook.
            </summary>
            <param name="name">The name of the style to be added.</param>
            <returns>The newly created style as an IStyle object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.ContainsSameStyle(Spire.Xls.Core.IStyle)">
            <summary>
            Determines whether the current object contains the same style as the specified style.
            </summary>
            <param name="style">The style to compare with the current object.</param>
            <returns>The style if it matches the current object's style, otherwise null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.CreateBuiltInStyle(System.String)">
            <summary>
            Creates a built-in style for an Excel document with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsStylesCollection.Add(Spire.Xls.Core.IStyle)">
            <summary>
            Adds a style to the collection.
            </summary>
            <param name="style">The style to be added.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection">
            <summary>
            A collection of vertical page breaks within the print area.
            Each vertical page break is represented by a VPageBreak object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.Clone(System.Object)">
            <summary>
            Creates copy of the collection.
            </summary>
            <param name="parent">Parent for new collection.</param>
            <returns>A clone of the current collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.ManualBreakCount">
            <summary>
            Gets manual breaks count. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.RecordCode">
            <summary>
            Returns code of the biff storage. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.NeedDataArray">
            <summary>
            Indicates whether data array is required by this record.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.StreamPos">
            <summary>
            Indicates record position in stream. This is a utility member of class and
            is used only in the serialization process. Does not influence the data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.Item(Spire.Xls.Core.IXLSRange)">
            <summary>
            Returns single page break from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.Add(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds a vertical page break. Returns a VPageBreak object.
            </summary>
            <param name="location">Page break location.</param>
            <returns>Newly added page break.</returns>
            <exception cref="T:System.ArgumentException">
            When specified object cannot be found in the collection.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.Remove(Spire.Xls.Core.IXLSRange)">
            <summary>
            Removes vertical page break.
            </summary>
            <param name="location">Page break location.</param>
            <returns>Page break that was removed from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsVPageBreaksCollection.GetPageBreak(System.Int32)">
            <summary>
            Returns page break at the specified column.
            </summary>
            <param name="iColumn">One-based column index.</param>
            <returns>Page break with corresponding column or null if not found.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection">
            <summary>
            Represents a collection of Worksheet or Chartsheet in the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.Workbook">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.Count">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.Item(System.Int32)">
            <summary>
            Gets the ITabSheet at the specified zero-based index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.Item(System.String)">
            <summary>
            Gets the named object by its name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves an element from the old index to the new index within a collection.
            </summary>
            <param name="iOldIndex">The current index of the element to be moved.</param>
            <param name="iNewIndex">The new index where the element should be moved.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.MoveBefore(Spire.Xls.Core.ITabSheet,Spire.Xls.Core.ITabSheet)">
            <summary>
            Moves the specified tab sheet before another tab sheet in the collection.
            </summary>
            <param name="sheetToMove">The tab sheet to be moved.</param>
            <param name="sheetForPlacement">The tab sheet before which the specified tab sheet should be moved.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorkbookObjectsCollection.MoveAfter(Spire.Xls.Core.ITabSheet,Spire.Xls.Core.ITabSheet)">
            <summary>
            Moves the specified tab sheet to a position after another tab sheet in the collection.
            </summary>
            <param name="sheetToMove">The tab sheet that needs to be moved.</param>
            <param name="sheetForPlacement">The tab sheet after which the specified tab sheet should be moved.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection">
            <summary>
            A collection of all the Worksheet objects in the specified or
            active workbook. Each Worksheet object represents a worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Item(System.Int32)">
            <summary>
            Returns a single object from a collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Item(System.String)">
            <summary>
            Returns a single object from a collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.UseRangesCache">
            <summary>
            Indicates whether all created range objects should be cached.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.UseHashForWorksheetLookup">
            <summary>
            Toggles worksheet search algorithm when searching worksheet by name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Create">
            <summary>
            Creates a new worksheet.
            </summary>
            <returns>A new instance of IWorksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Create(System.String)">
            <summary>
            Creates a new worksheet with the specified name.
            </summary>
            <param name="name">The name of the worksheet to be created.</param>
            <returns>A new instance of IWorksheet with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.Boolean)">
            <summary>
            Finds all cell ranges based on the specified condition.
            </summary>
            <param name="findValue">A boolean value indicating the condition to find cell ranges.</param>
            <returns>An array of CellRange objects that match the specified condition.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.DateTime)">
            <summary>
            Finds all CellRange objects that contain the specified DateTime value.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
            Finds all cells in the worksheet that match the specified value and criteria.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.String,Spire.Xls.FindType)">
            <summary>
            Finds all occurrences of a specified value within the worksheet and returns their cell ranges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.String,Spire.Xls.FindType,Spire.Xls.ExcelFindOptions)">
            <summary>
            Finds all occurrences of a specified value within the worksheet and returns their ranges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindAll(System.TimeSpan)">
            <summary>
            Finds all occurrences of a specified time span within a collection and returns their ranges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.Boolean)">
            <summary>
            Finds the first cell in the range that match the bool value.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.DateTime)">
            <summary>
            Finds the first cell in the range that contains the specified DateTime value.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.Double,Spire.Xls.FindType)">
            <summary>
            Finds the first cell in the range that matches the specified numeric value, considering the search flags to determine whether to look in formula values or numeric values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.String,Spire.Xls.FindType)">
            <summary>
            Finds the first occurrence of a specified value within the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.String,Spire.Xls.FindType,Spire.Xls.ExcelFindOptions)">
            <summary>
            Finds the first occurrence of a specified value within the range based on the given find type and options.
            </summary>
            <param name="findValue">The value to search for.</param>
            <param name="flags">The type of value to find, such as text, formula, formula string value, or error.</param>
            <param name="findOptions">Additional options for the find operation.</param>
            <returns>The first range that matches the search criteria, or null if no match is found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the provided find type flags are not valid.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.FindFirst(System.TimeSpan)">
            <summary>
            Finds the first occurrence of a cell with a value matching the specified TimeSpan within the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Remove(Spire.Xls.Core.IWorksheet)">
            <summary>
            Remove specified worksheet from workbook collection.
            </summary>
            <param name="sheet">Reference on worksheet to remove.</param>
            <exception cref="T:System.ArgumentException">
            When specified sheet is last sheet in the workbook.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Remove(System.String)">
            <summary>
            Removes specified worksheet from the collection.
            </summary>
            <param name="sheetName">Name of the sheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Remove(System.Int32)">
            <summary>
            Removes specified worksheet from the collection.
            </summary>
            <param name="index">Index of the sheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes specified worksheet from the collection.
            </summary>
            <param name="index">Index of the sheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopyBefore(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopyBefore(Spire.Xls.Core.IWorksheet,Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <param name="sheetAfter">Represents sheet that, in collection must be after copied sheet.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopyAfter(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection after choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopyAfter(Spire.Xls.Core.IWorksheet,Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <param name="sheetBefore">Represents sheet that, in collection must be before copied sheet.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.IsRightToLeft">
            <summary>
            Determines whether the text direction is right-to-left.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.InnerAdd(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds data to the specified worksheet.
            </summary>
            <param name="sheet">The worksheet to which data will be added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves worksheet..
            </summary>
            <param name="oldIndex">Old index.</param>
            <param name="newIndex">New index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.UpdateSheetIndex(Spire.Xls.Core.Spreadsheet.XlsWorksheet,System.Int32)">
            <summary>
            Updates sheet index after move/insert operation.
            </summary>
            <param name="sheet">Sheet that was changed.</param>
            <param name="iOldRealIndex">Old sheet index in the TabSheets collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.UpdateStringIndexes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates string indexes.
            </summary>
            <param name="newIndexes">ArrayList with new indexes.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.Add(System.String)">
            <summary>
            Adds an empty worksheet.
            </summary>
            <param name="sheetName">Name of the newly created worksheet.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(System.Int32)">
            <summary>
            Adds a copy of the worksheet at the specified index to the workbook.
            </summary>
            <param name="sheetIndex">The zero-based index of the worksheet to copy.</param>
            <returns>The newly created copy of the worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of worksheet.
            </summary>
            <param name="sheet">Worksheet to copy.</param>
            <returns>Copy of worksheet that was added.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(Spire.Xls.Core.IWorksheet,Spire.Xls.WorksheetCopyType)">
            <summary>
            Adds copy of worksheet.
            </summary>
            <param name="sheet">Worksheet to copy.</param>
            <param name="flags">Represetns copy flags.</param>
            <returns>Copy of worksheet that was added.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(Spire.Xls.Core.IWorksheets)">
            <summary>
            Adding worksheets collection to current workbook.
            </summary>
            <param name="worksheets">Source worksheets collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(Spire.Xls.Core.IWorksheets,Spire.Xls.WorksheetCopyType)">
            <summary>
            Adding worksheets collection to current workbook.
            </summary>
            <param name="worksheets">Source worksheets collection.</param>
            <param name="flags">Represents copy option flags.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.AddCopy(System.Int32,Spire.Xls.WorksheetCopyType)">
            <summary>
            Add a copy of the specified worksheet to the worksheet collection.
            </summary>
            <param name="sheetIndex">Index of the workbook that should be copied</param>
            <param name="flags">Represents copy options flags.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetsCollection.InnerRemove(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection. This method is accessible to derived classes and classes within the same assembly.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1">
            <summary>
            This is the base class for all collections.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.Parent">
            <summary>
            Read-oonly. The parent object for the specified object.
            </summary>
        </member>
        <member name="E:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.Changed">
            <summary>
            Change in the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnClear">
            <summary>
            OnClear is invoked before Clear behavior.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnClearComplete">
            <summary>
            OnClear is invoked after Clear behavior.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnInsert(System.Int32,`0)">
            <summary>
            Performs additional processes before inserting
            a new element into the collection.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnInsertComplete(System.Int32,`0)">
            <summary>
            Performs additional processes after inserting
            a new element into the collection.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnRemove(System.Int32,`0)">
            <summary>
            Performs additional processes before removing
            an element from the collection.
            </summary>
            <param name="index">
            The zero-based index at which the value can be found.
            </param>
            <param name="value">
            The value of the element to remove from index.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnRemoveComplete(System.Int32,`0)">
            <summary>
            Performs additional processes after removing 
            an element from the collection.
            </summary>
            <param name="index">The zero-based index at which the value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Performs additional processes before setting
            a value in the collection.
            </summary>
            <param name="index">
            The zero-based index at which oldValue can be found.
            </param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.OnSetComplete(System.Int32,`0,`0)">
            <summary>
            Performs additional processes after setting a value in the collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at the index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.FindParent(System.Type)">
            <summary>
            Method used to find parent within a specific type.
            </summary>
            <param name="parentType">Parent type to search.</param>
            <returns>Found parent if was parent was found or NULL otherwise.</returns>
            <exception cref="T:System.ArgumentException">
            When there is cycle in object tree.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.FindParent(System.Type,System.Boolean)">
             <summary>
             Method used to find parent within a specific type.
             </summary>
             <param name="parentType">Parent type to search.</param>
             <param name="bCheckSubclasses">Indicates whether to look into subclasses.</param>
             <returns>Found parent if was parent was found or NULL otherwise.</returns>
             <exception cref="T:System.ArgumentException">
             When there is cycle in object tree.
             </exception>
            [DebuggerStepThrough]
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.SetParent(System.Object)">
            <summary>
            Sets parent object for class.
            </summary>
            <param name="parent">Parent object for sets.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.Clone(System.Object)">
            <summary>
            Creates copy of the collection.
            </summary>
            <param name="parent">Parent object for the new collection.</param>
            <returns>A copy of the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.EnsureCapacity(System.Int32)">
            <summary>
            Enlarges internal storage if necessary.
            </summary>
            <param name="size">Required size.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.GenerateDefaultName(System.Collections.Generic.ICollection{`0},System.String)">
            <summary>
            Generates default name.
            </summary>
            <param name="namesCollection">Names collection.</param>
            <param name="strStart">Start string.</param>
            <returns>Returns string with new name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.GenerateDefaultName(System.Collections.ICollection,System.String)">
            <summary>
            Generates default name.
            </summary>
            <param name="namesCollection">Names collection.</param>
            <param name="strStart">Start string.</param>
            <returns>Returns string with new name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.GenerateDefaultName(System.String,System.Collections.ICollection[])">
            <summary>
            Generate default name.
            </summary>
            <param name="strStart">Start stirng.</param>
            <param name="arrCollections">Collection with names.</param>
            <returns>Returns new name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionExtended`1.ChangeName(System.Collections.IDictionary,Spire.Xls.Core.Spreadsheet.XlsEventArgs)">
            <summary>
            Changes name.
            </summary>
            <param name="hashNames">Hash table with names</param>
            <param name="e"></param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.CollectionChangeEventArgs`1">
            <summary>
            Class that represent event args.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.CollectionChangeEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Creates new instance of event arguments.
            </summary>
            <param name="index">Changed element index.</param>
            <param name="value">Changed element value.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionChangeEventArgs`1.Index">
            <summary>
            Element index. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.CollectionChangeEventArgs`1.Value">
            <summary>
            Element value. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection">
            <summary>
            Represents a collection of auto filters applied to an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Sorter">
            <summary>
            Gets the DataSorter instance associated with the current object. If the instance does not exist, it initializes a new instance of DataSorter.
            </summary>
            <returns>
            An instance of DataSorter.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Range">
            <summary>
            Range to be filtered.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.AddressR1C1">
            <summary>
            Gets addres of filtered range in R1C1 style. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Worksheet">
            <summary>
            Returns parent worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.HasFiltered">
            <summary>
            Indicates whether sheet has filtered range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Item(System.Int32)">
            <summary>
            Get auto filter item..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Count">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsAutoFiltersCollection.Clone(Spire.Xls.Core.Spreadsheet.XlsWorksheet)">
            <summary>
            Clones current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats">
            <summary>
            Collection of conditional formats for the single-cell range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.MAXIMUM_CF_NUMBER">
            <summary>
            Maximum number of conditional formats in the collection.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.m_sheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.FindParent">
            <summary>
            Finds parent worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.MaxCFNumber">
            <summary>
            Returns maximum conditional formats number. Depends on current Excel version.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddCondition">
            <summary>
            Adds new condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddCellValueCondition(Spire.Xls.ComparisonOperatorType,System.String,System.String)">
            <summary>
            Add new cell value condition to the collection.
            </summary>
            <param name="operatorType">The Comparison operator for conditional formatting in Excel.</param>
            <param name="value1">The first value</param>
            <param name="value2">The second value .If the operatorTypy is Equal or NotEqual or Greater or Less or GreaterOrEqual or LessOrEqual,
            then this parameter must use string.Empty or null</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddCellValueCondition(Spire.Xls.ComparisonOperatorType,System.Double,System.Double)">
            <summary>
            Add new cell value condition to the collection.
            </summary>
            <param name="operatorType">The Comparison operator for conditional formatting in Excel.</param>
            <param name="value1">The first value</param>
            <param name="value2">The second value.If the operatorTypy is Equal or NotEqual or Greater or Less or GreaterOrEqual or LessOrEqual,
            then this parameter must use ***double.NaN***.Don't use null</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddBeginsWithCondition(System.String)">
            <summary>
            Add new begin with condition to the collection.
            </summary>
            <param name="text">begin with text</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddContainsTextCondition(System.String)">
            <summary>
            Add new contain condition to the collection.
            </summary>
            <param name="text">contain text</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddEndsWithCondition(System.String)">
            <summary>
            Add new end with condition to the collection.
            </summary>
            <param name="text">end with text</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddNotContainsTextCondition(System.String)">
            <summary>
            Add new not contain condition to the collection.
            </summary>
            <param name="text">not contain text</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddContainsBlanksCondition">
            <summary>
            Add new contain blanks condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddContainsErrorsCondition">
            <summary>
            Add new contain errors condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddDuplicateValuesCondition">
            <summary>
            Add new duplicate values condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddNotContainsBlanksCondition">
            <summary>
            Add new not contain blanks condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddNotContainsErrorsCondition">
            <summary>
            Add new not contain errors condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddUniqueValuesCondition">
            <summary>
            Add new unique values condition to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddTimePeriodCondition(Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType)">
            <summary>
            Add new time period condition to the collection.
            </summary>
            <param name="timePeriodType">type of the time period</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddAverageCondition(Spire.Xls.AverageType)">
            <summary>
            Add new above or below the average condition to the collection.
            </summary>
            <param name="averageType">type of the average</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddTopBottomCondition(Spire.Xls.TopBottomType,System.Int32)">
            <summary>
            Add new TopN or BottomN condition to the collection.
            </summary>
            <param name="topBottomType">type of the Top or Bottom</param>
            <param name="rank">rank of the Top or Bottom</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Remove(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes the Condtional Format at the specified range
            </summary>
            <param name="startRow">The startRow of the range.</param>
            <param name="startColumn">The startColumn of the range.</param>
            <param name="totalRows">The number of rows of the range.</param>
            <param name="totalColumns">The number of columns of the range.</param>
            <returns>
            Returns TRUE, this FormatCondtionCollection should be removed.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.RemoveAt(System.Int32)">
            <summary>
            Removes the Condtional Format at the Specified Index
            </summary>
            <param name="index">The index of the formatting condition to be removed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.CompareTo(Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats)">
            <summary>
            Compares this collection to another.
            </summary>
            <param name="formats">Collection to compare.</param>
            <returns>True if collections are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.CompareFormats(Spire.Xls.Core.IConditionalFormat,Spire.Xls.Core.IConditionalFormat)">
            <summary>
            Compares two ConditionalFormats.
            </summary>
            <param name="firstFormat">First conditional format to compare.</param>
            <param name="secondFormat">Second conditional format to compare.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddCells(Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats)">
            <summary>
            Adds cells from the collection.
            </summary>
            <param name="formats">Formats collection to get cells from.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Contains(System.Drawing.Rectangle[])">
            <summary>
            Indicates whether collection contains all specified ranges.
            </summary>
            <param name="arrRanges">Ranges to check.</param>
            <returns>True if collection contains all specified ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.ContainsCount(System.Drawing.Rectangle)">
            <summary>
            Returns contains count for specified range.
            </summary>
            <param name="range">Range to check.</param>
            <returns>Contains count</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddCells(System.Collections.IList)">
            <summary>
            Adds cells from the collection.
            </summary>
            <param name="arrCells">Cells to add to the collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddRange(Spire.Xls.Core.IXLSRange)">
            <summary>
            Adds range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddRange(System.Drawing.Rectangle)">
            <summary>
            Adds new cell range to the collection.
            </summary>
            <param name="rect">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes range from the collection of conditional formats.
            </summary>
            <param name="arrRanges">Array of ranges to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.ClearCells">
            <summary>
            Removes all cells from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Equals(System.Object)">
            <summary>
            A hash code for the current Object without taking cell list into account.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.IsEmpty">
            <summary>
            Indicates whether collection is empty. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Address">
            <summary>
            Represents address of cf ranges.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.AddressR1C1">
            <summary>
            Represents address of cf ranges in R1C1 notation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.CellRectangles">
            <summary>
            Gets list of rectangles describing cells with conditional formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.GetByIndex(System.Int32)">
            <summary>
            Returns a single Filter object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Item(System.Int32)">
            <summary>
            Gets the IConditionalFormat for the specified field index.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Clear">
            <summary>
            Clears the contents of the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats">
            <summary>
            Represents a collection of conditional formats applied to an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Find(System.Drawing.Rectangle[])">
            <summary>
            Search for collection that contains all specified ranges.
            </summary>
            <param name="arrRanges"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.FindAll(System.Drawing.Rectangle[])">
            <summary>
            Finds all conditional formats within the specified ranges.
            </summary>
            <param name="arrRanges">An array of Rectangle objects representing the ranges to search for conditional formats.</param>
            <returns>An array of XlsConditionalFormats objects found within the specified ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Contains(Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats)">
            <summary>
            Defines whether collection contains conditional format.
            </summary>
            <param name="formats">Conditional formats.</param>
            <returns>Conditional formats if exists or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Add">
            <summary>
            Adds new item to the collection.
            </summary>
            <returns>Object that contains required cells.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Add(Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="formats">Item to add.</param>
            <returns>Object that contains required cells.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes range from the collection of conditional formats.
            </summary>
            <param name="arrRanges">Array of ranges to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.CopyFrom(Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats)">
            <summary>
            Copies conditional formats from another formats collection.
            </summary>
            <param name="srcFormats">Source collection of conditional formats to copy.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the derived class.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the number of elements in the collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.GetByIndex(System.Int32)">
            <summary>
            Returns a single Filter object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Item(System.Int32)">
            <summary>
            Gets the XlsConditionalFormats at the specified field index.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.GradientType">
            <summary>
            This enumeration specifies all possible gradient types.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GradientType.Liniar">
            <summary>
            This element specifies a linear gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GradientType.Circle">
            <summary>
            Gradient follows a circular path.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GradientType.Rect">
            <summary>
            Gradient follows a rectangular path.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GradientType.Shape">
            <summary>
            Gradient follows the shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue">
            <summary>
            Represents the adjustment parameters of a shape, corresponding to the drag operation points in Excel.
            <para>Each point represents a parameter, with the unit of measurement typically being points.</para>
            <para>The type of parameter that can be set to adjust the shape can be specified according to the types in Office Open XML Part 4, page 3669.</para>
            <para>Currently, there is no specific description for each shape's adjustment.</para>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.#ctor(Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType)">
            <summary>
            Initializes a new instance of the GeomertyAdjustValue class with the specified formula type.
            </summary>
            <param name="type">The formula type to use for the geometry adjustment value.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.Name">
            <summary>
            Gets or sets the name using the AdjustConverter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.Formula">
            <summary>
            Gets the formula from the AdjustConverter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.FormulaType">
            <summary>
            The type of formula used for adjusting geometry values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.SetFormulaParameter(System.Double[])">
            <summary>
            Sets the parameter with an array of double values.
            </summary>
            <param name="args">Each element in the array represents a draggable point.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.SetConverter(System.Object)">
            <summary>
            Sets the converter for geometry adjustment.
            </summary>
            <param name="converter">The converter object to be set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValue.FormulaType2XmlValue(Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType)">
            <summary>
            Converts a GeometryAdjustValueFormulaType to its corresponding XML value.
            </summary>
            <param name="type">The GeometryAdjustValueFormulaType to convert.</param>
            <returns>The XML value corresponding to the given type.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType">
            <summary>
            Enumerates the types of geometry adjustment value formulas used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.MultiplyDivide">
            <summary>
            Multiply Divide Formula. Arguments: 3 (fmla="*/ x y z"). Usage: "*/ x y z" = ((x * y) / z).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.AddSubtract">
            <summary>
            Add Subtract Formula. Arguments: 3 (fmla="+- x y z"). Usage: "+- x y z" = ((x + y) - z).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.AddDivide">
            <summary>
            Add Divide Formula. Arguments: 3 (fmla="+/ x y z"). Usage: "+/ x y z" = ((x + y) / z).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.IfElse">
            <summary>
            If Else Formula. Arguments: 3 (fmla="?: x y z"). Usage: "?: x y z" = if (x &gt; 0), then y, else z.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.AbsoluteValue">
            <summary>
            Absolute Value Formula. Arguments: 1 (fmla="abs x"). <code>Usage: "abs x" = if (x &lt; 0), then (-1) * x, else x.</code>
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.ArcTanFormula">
            <summary>
            ArcTan Formula. Arguments: 2 (fmla="at2 x y"). Usage: "at2 x y" = arctan(y / x).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.CosineArcTan">
            <summary>
            Cosine ArcTan Formula. Arguments: 3 (fmla="cat2 x y z"). Usage: "cat2 x y z" = (x * (cos(arctan(z / y)))).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.Cosine">
            <summary>
            Cosine Formula. Arguments: 2 (fmla="cos x y"). Usage: "cos x y" = (x * cos(y)).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.MaximumValue">
            <summary>
            Maximum Value Formula. Arguments: 2 (fmla="max x y"). Usage: "max x y" = if (x &gt; y), then x, else y.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.MinimumValue">
            <summary>
            Minimum Value Formula. Arguments: 2 (fmla="min x y"). Usage: "min x y" = if (x &lt; y), then x, else y.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.Modulo">
            <summary>
            Modulo Formula. Arguments: 3 (fmla="mod x y z"). Usage: "mod x y z" = sqrt(x^2 + y^2 + z^2).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.PinTo">
            <summary>
            Pin To Formula. Arguments: 3 (fmla="pin x y z"). Usage: "pin x y z" = if (y &lt; x), then x, else if (y &gt; z), then z, else y.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.SineArcTan">
            <summary>
            Sine ArcTan Formula. Arguments: 3 (fmla="sat2 x y z"). Usage: "sat2 x y z" = (x * sin(arctan(z / y))).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.Sine">
            <summary>
            Sine Formula. Arguments: 2 (fmla="sin x y"). Usage: "sin x y" = (x * sin(y)).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.SquareRoot">
            <summary>
            Square Root Formula. Arguments: 1 (fmla="sqrt x"). Usage: "sqrt x" = sqrt(x).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.Tangent">
            <summary>
            Tangent Formula. Arguments: 2 (fmla="tan x y"). Usage: "tan x y" = (x * tan(y)).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GeomertyAdjustValueFormulaType.LiteralValue">
            <summary>
            Literal Value Formula. Arguments: 1 (fmla="val x"). Usage: "val x" = x.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape">
            <summary>
            Represents a chart shape within an Excel worksheet, providing properties and methods to manipulate and retrieve chart data and settings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChartType">
            <summary>
            Type of the chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChangeToChartExType(Spire.Xls.ExcelChartType,Spire.Xls.ExcelChartType,System.Boolean)">
            <summary>
            Change the chart to chart ex type
            </summary>
            <param name="oldChartType">Indicates the old chart type</param>
            <param name="type">input chart type to be modified</param>
            <param name="isSeriesCreation">boolean value indicates whether the series is created or not</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DataRange">
            <summary>
            DataRange for the chart series.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.updataDataRangeChanged(System.Boolean)">
            <summary>
             update dataRange
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DetectAndGetDataRangeForChartEx(System.String@,System.String@,System.String@)">
            <summary>
            from the data range it detects and assign the series and its values.
            </summary>
            <param name="seriesNamesRange">Output parameter representing the range of cells containing the series names.</param>
            <param name="categoryDataRange">Output parameter representing the range of cells containing the category data.</param>
            <param name="seriesDataRange">Output parameter representing the range of cells containing the series data.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.CheckForBlankAndAssignAxis(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange@,System.Boolean)">
            <summary>
            Calculate and retruns the range after removing the input series name range
            </summary>
            <param name="dataRange">The complete input range to calculate</param>
            <param name="nameRangeInput">Input series name range</param>
            <param name="nameRangeOutput">Input series name range modified</param>
            <param name="isSeriesInRows">indicated weather is series in rows</param>
            <returns>the axis range</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GetSerieRanges(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adjusts the input range to get the series ranges based on the provided parameters.
            </summary>
            <param name="inputRange">The initial range from which the series data is extracted.</param>
            <param name="serieNameRange">The range containing the series names.</param>
            <param name="axisRange">The range containing the axis labels.</param>
            <param name="columnCount">The number of columns in the input range.</param>
            <param name="rowCount">The number of rows in the input range.</param>
            <param name="isSeriesInRows">A boolean indicating whether the series are organized in rows.</param>
            <returns>The adjusted range that contains the series data.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GetSeriesRangesForChartEx(System.Int32,System.Int32,System.Boolean,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange@,Spire.Xls.Core.IXLSRange@,Spire.Xls.Core.IXLSRange@)">
            <summary>
            from given information it creates series and its values
            </summary>
            <param name="reqRowsCount">required rows count used series creation</param>
            <param name="reqColsCount">required columns count used series creation</param>
            <param name="isAnySpace">boolean value indicates whether the series ranges have any space</param>
            <param name="inputSerieValue">input series Ranges</param>
            <param name="inputSerieNameRange">input seriesName ranges</param>
            <param name="outputSerieValue">output modified serie value ranges</param>
            <param name="outputSerieNameRange">output modified serie named ranges</param>
            <param name="outputAxisRange">output axis ranges</param>
            <returns>the boolean value indicates whether the series in rows or not</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GetRangeForChartEx(Spire.Xls.Core.Spreadsheet.XlsMigrantRange,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate and retruns count of the required cells inside the range
            </summary>
            <param name="tempRange">input migrant range</param>
            <param name="lastIndex">last index in the column or row wise</param>
            <param name="index">index in the column or row wise</param>
            <param name="constantValue">constant column or row value</param>
            <param name="isChangeRow">boolean value indicates whether the iteration in row or not</param>
            <returns>the number of required cells count</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.IsTreeMapOrSunBurst">
            <summary>
            True if the chart type is treemap or sunburst. Otherwise false
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GetSerieRangeByBlank(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange@,System.Boolean)">
            <summary>
            Calculate the serie name range by empty spaces
            </summary>
            <param name="range">Input data range to calculate</param>
            <param name="serieRange">Input Data Range without series name range</param>
            <param name="isChartEx">boolean value indicates whether the chart is Excel 2016 or not</param>
            <returns>series name range</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.UpdateChartMembersByType(Spire.Xls.ExcelChartType)">
            <summary>
            Updates chart memebers on type.
            </summary>
            <param name="type">Represents new chart type.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SeriesDataFromRange">
            <summary>
            True if series are in rows in DataRange;
            False otherwise.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PageSetup">
            <summary>
            Page setup for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.XPos">
            <summary>
            X coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.YPos">
            <summary>
            Y coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Spire#Xls#Core#IChart#Width">
            <summary>
            Width of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Spire#Xls#Core#IChart#Height">
            <summary>
            Height of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PrimaryCategoryAxis">
            <summary>
            Primary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PrimaryValueAxis">
            <summary>
            Primary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PrimarySerieAxis">
            <summary>
            Primary serie axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SecondaryCategoryAxis">
            <summary>
            Secondary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SecondaryValueAxis">
            <summary>
            Secondary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChartArea">
            <summary>
            Returns an object that represents the complete chart area for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PlotArea">
            <summary>
            Returns plot area frame format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Walls">
            <summary>
            Represents chart walls. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SupportWallsAndFloor">
            <summary>
            Indicates whether this chart supports walls and floor. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Floor">
            <summary>
            Represents chart floor. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DataTable">
            <summary>
            Represents charts dataTable object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasChartTitle">
            <summary>
            Indicates wheather the chart has title
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasChartArea">
            <summary>
            Indicates whether chart has chart area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasDataTable">
             <summary>
             True if the chart has a data table.
             <example>The following code illustrates how data table can be set for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart data table</para>
                 <para>chart.HasDataTable = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasFloor">
            <summary>
            Gets value indicating whether floor object was created.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasWalls">
            <summary>
            Gets value indicating whether floor object was created.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Legend">
            <summary>
            Represents chart legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasLegend">
             <summary>
             True if the chart has a legend object.
             <example>The following code illustrates how to set HasLegend property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set hasLegend</para>
                 <para>chart.HasLegend = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasPivotTable">
            <summary>
            Indicates whether contains pivot table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Rotation">
             <summary>
             Returns or sets the rotation of the 3-D chart view
             (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
             <example>The following code illustrates how to set Rotation for 3-D charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart rotation</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Rotation = 50;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Elevation">
             <summary>
             Returns or sets the elevation of the 3-D chart view, in degrees (?0 to +90 degrees).
             <example>The following code illustrates how to set Rotation for 3-D charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart elevation</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Elevation = 50;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Perspective">
             <summary>
             Returns or sets the perspective for the 3-D chart view (0 to 100).
             <example>The following code illustrates how to set Perspective for the charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart perspective</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Perspective = 70;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HeightPercent">
            <summary>
            Returns or sets the height of a 3-D chart as a percentage of the chart width
            (between 5 and 500 percent).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DepthPercent">
            <summary>
            Returns or sets the depth of a 3-D chart as a percentage of the chart width
            (between 20 and 2000 percent).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GapDepth">
            <summary>
            Returns or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.( 0 - 500 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.RightAngleAxes">
            <summary>
            True if the chart axes are at right angles, independent of chart rotation or elevation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.AutoScaling">
            <summary>
            True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.WallsAndGridlines2D">
            <summary>
            True if gridlines are drawn two-dimensionally on a 3-D chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HasPlotArea">
            <summary>
            Indicates whether chart has plot area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DisplayBlanksAs">
            <summary>
            Represents the way that blank cells are plotted on a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PlotVisibleOnly">
            <summary>
            True if only visible cells are plotted. False if both visible and hidden cells are plotted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SizeWithWindow">
            <summary>
            True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
            False if the chart size isn't attached to the window size. Applies only to chart sheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PivotTable">
            <summary>
            Gets or sets the pivot source.
            </summary>
            <value>The pivot source.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PivotChartType">
            <summary>
            Gets or sets the type of the pivot chart.
            </summary>
            <value>The type of the pivot chart.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DisplayEntireFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show all field buttons].
            </summary>
            <value>
            	<c>true</c> if [show all field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DisplayValueFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show value field buttons].
            </summary>
            <value>
            	<c>true</c> if [show value field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DisplayAxisFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show axis field buttons].
            </summary>
            <value>
            	<c>true</c> if [show axis field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.DisplayLegendFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show legend field buttons].
            </summary>
            <value>
            	<c>true</c> if [show legend field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ShowReportFilterFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show report filter field buttons].
            </summary>
            <value>
            	<c>true</c> if [show report filter field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.TopRow">
            <summary>
            Top row of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.BottomRow">
            <summary>
            Bottom row of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.LeftColumn">
            <summary>
            Left column of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.RightColumn">
            <summary>
            Right column of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChartTitleArea">
            <summary>
            Gets title text area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChartSubTitle">
            <summary>
            Gets the chart's sub-title. Only for ODS format file. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ChartTitle">
            <summary>
            Represents the title of the specified chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.CategoryAxisTitle">
            <summary>
            Title of the category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ValueAxisTitle">
            <summary>
            Title of the value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SecondaryCategoryAxisTitle">
            <summary>
            Title of the secondary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SecondaryValueAxisTitle">
            <summary>
            Title of the secondary value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SeriesAxisTitle">
            <summary>
            Title of the series axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Shapes">
            <summary>
            Returns chart shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.TextBoxes">
            <summary>
            Returns collection with all textboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.CheckBoxes">
            <summary>
            Returns collection with all checkboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.OptionButtons">
            <summary>
            Returns collection with all option buttons inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.ComboBoxes">
            <summary>
            Returns collection with all comboboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.CodeName">
            <summary>
            Gets code name of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.IsRightToLeft">
            <summary>
            Indicates whether chart is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.PrimaryFormats">
            <summary>
            Returns chart format collection in primary axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.SecondaryFormats">
            <summary>
            Returns chart format collection in secondary axis.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.AddShapeInChart(Spire.Xls.ExcelShapeType,Spire.Xls.ResizeBehaveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a shape to the chart in Excel with the specified type, placement behavior, and dimensions.
            </summary>
            <param name="type">The type of shape to add, specified by the ExcelShapeType enumeration.</param>
            <param name="placement">The behavior of the shape when the chart is resized, specified by the ResizeBehaveType enumeration.</param>
            <param name="left">The distance from the left edge of the chart to the left edge of the shape, in points.</param>
            <param name="top">The distance from the top edge of the chart to the top edge of the shape, in points.</param>
            <param name="height">The height of the shape, in points.</param>
            <param name="width">The width of the shape, in points.</param>
            <returns>An IShape object representing the added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.RefreshChart">
            <summary>
            Refreshes the chart by updating the pivot data.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Hashtable with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicated weather add to collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.GetCategoryLabels">
            <summary>
            Gets category labels array.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsChartShape.HideCategoryLabels(System.String[])">
            <summary>
            Hide the category labels in chart.
            </summary>
            <param name="needHideLabels">Need hide category labels.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop">
            <summary>
            Represents a gradient stop within an Excel gradient fill. A gradient stop defines a color and its position along the gradient line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Size">
            <summary>
            Size of the binary data.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.m_color">
            <summary>
            Gradient stop color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.m_iPosiiton">
            <summary>
            Stop position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.m_iTransparency">
            <summary>
            Transparency.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.m_iTint">
            <summary>
            Tint of the color for this gradient stop.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.m_iShade">
            <summary>
            Shade of the color for this gradient stop.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.#ctor">
            <summary>
            Initializes a new instance of the XlsGradientStop class with a default OColor.
            </summary>
            <returns>
            An instance of XlsGradientStop with m_color property initialized to a new OColor.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.#ctor(Spire.Xls.OColor,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the XlsGradientStop class with the specified color, position, and transparency.
            </summary>
            <param name="color">The color of the gradient stop.</param>
            <param name="position">The position of the gradient stop.</param>
            <param name="transparency">The transparency level of the gradient stop.</param>
            <returns>
            An instance of XlsGradientStop.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.OColor">
            <summary>
            Gets / sets color of this gradient stop.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Position">
            <summary>
            Gets / sets position of this gradient stop.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Transparency">
            <summary>
            Gets / sets transparency of this gradient stop.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Tint">
            <summary>
            Gets / sets tint of the color for this gradient stop.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Shade">
            <summary>
            Gets / sets shade of the color for this gradient stop.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop.Serialize(System.IO.Stream)">
            <summary>
            Serializes gradient stop into specified stream.
            </summary>
            <param name="stream">Stream to serialize data into.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops">
            <summary>
            Represents a collection of gradient stops for a gradient effect.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.MaxPosition">
            <summary>
            Maximum possible gradient position.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.#ctor">
            <summary>
            Initializes a new instance of the GradientStops class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.Angle">
            <summary>
            Gets / sets gradient angle.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.GradientType">
            <summary>
            Gets / sets type of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.FillToRect">
            <summary>
            This element defines the "focus" rectangle for the center shade,
            specified relative to the XlsFill tile rectangle.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.IsDoubled">
            <summary>
            Returns true if gradient stops are symmetric. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.DoubleGradientStops">
            <summary>
            Doubles gradient stops in the collection and updates their positions.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.InvertGradientStops">
            <summary>
            Inverts gradient stops order and updates their positions correctly.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.ShrinkGradientStops">
            <summary>
            Creates a new GradientStops object with half the number of stops by reducing the position of each stop to half its original value.
            </summary>
            <returns>A new GradientStops object with half the number of stops.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.Clone">
            <summary>
            Creates copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.Add(Spire.Xls.Core.Spreadsheet.Shapes.XlsGradientStop)">
            <summary>
            Adds a gradient stop to the chart.
            If the stop does not have a conversion object, it creates a new one, sets its properties, and adds it to the conversion collection.
            If the stop already has a conversion object, it checks if the stop is already in the collection. If not, it adds the conversion object to the collection and the stop to the base collection.
            </summary>
            <param name="stop">The gradient stop to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.Add(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a gradient stop to the gradient fill.
            </summary>
            <param name="color">The color of the gradient stop.</param>
            <param name="position">The position of the gradient stop.</param>
            <param name="transparency">The transparency of the gradient stop.</param>
            <param name="tint">The tint of the gradient stop.</param>
            <param name="shade">The shade of the gradient stop.</param>
            <returns>The added gradient stop.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.GradientStops.Serialize(System.IO.Stream)">
            <summary>
            Saves gradient stops into stream in binary format.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange">
            <summary>
            Represents a range of comments.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates an instance for the specified range.
            </summary>
            <param name="parentRange">The parent range.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Ranges">
            <summary>
            Gets the range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Author">
            <summary>
            Gets or sets the author of the comment. If the comments in the range have different authors, returns null.
            </summary>
            <value>
            The author of the comment.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsVisible">
            <summary>
            Gets or sets the visibility of the object.
            </summary>
            <returns>
            A boolean value indicating whether the object is visible.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Row">
            <summary>
            Gets the row of the commented cell. If there are multiple cells with comments and they are not in the same row, returns int.MinValue.
            </summary>
            <returns>The row of the commented cell, or int.MinValue if comments are not in the same row.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Column">
            <summary>
            Gets the column of the commented cell. Returns int.MinValue if there are no commented cells or if the commented cells are in different columns.
            </summary>
            <returns>The column of the commented cell, or int.MinValue if there are no commented cells or if the commented cells are in different columns.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.RichText">
            <summary>
            Gets the rich text representation of the comment.
            </summary>
            <returns>
            An instance of IRichTextString containing the rich text of the comment.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Text">
            <summary>
            Gets or sets the text content of the RichText property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.HtmlString">
            <summary>
            Gets or sets the HTML string of the comments in the cell range.
            </summary>
            <returns>The HTML string of the comments if all comments have the same HTML string; otherwise, an empty string.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsMoveWithCell">
            <summary>
            Indicates whether shape must be moved with cells.
            </summary>
            <returns>
            A boolean value indicating whether the shape should be moved with cells.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.AutoSize">
            <summary>
            Gets or sets a value indicating whether the size of the specified object is changed automatically to fit text within its boundaries.
            </summary>
            <returns>
            true if the size of the specified object is changed automatically to fit text within its boundaries; otherwise, false.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Remove">
            <summary>
            Removes all comments from the cells in the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Scale(System.Int32,System.Int32)">
            <summary>
            Scales all comments in the array.
            </summary>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.ResizeBehave">
            <summary>
            Gets or sets the resize behavior type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Visible">
            <summary>
            Gets or sets whether the object is visible. 
            </summary>
            <returns>
            A boolean value indicating whether the object is visible.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Height">
            <summary>
            Gets or sets the height of the comments in the cell range.
            If all comments have the same height, returns that height; otherwise, returns int.MinValue.
            </summary>
            <value>The height of the comments.</value>
            <returns>The height of the comments, or int.MinValue if comments have varying heights.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.ID">
            <summary>
            Gets the unique identifier for the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsSmartArt">
            <summary>
            Indicates whether the current object is a SmartArt shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Left">
            <summary>
            Gets or sets the left position of the comment in the cell range.
            </summary>
            <value>The left position of the comment.</value>
            <returns>The left position of the comment, or int.MinValue if comments have inconsistent left positions.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Name">
            <summary>
            Gets or sets the name of the comments in the cell range.
            </summary>
            <returns>The name of the comments if all comments have the same name, otherwise null.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Top">
            <summary>
            Gets or sets the top position of the comments in the cell range.
            </summary>
            <returns>The top position of the comments. If the comments have different top positions, returns int.MinValue.</returns>
            <param name="value">The top position to set for the comments.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Width">
            <summary>
            Gets or sets the width of the comments in the cell range.
            If the comments have different widths, the property returns int.MinValue.
            </summary>
            <value>The width of the comments.</value>
            <returns>The width of the comments if all comments have the same width; otherwise, int.MinValue.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.ShapeType">
            <summary>
            Gets or sets the shape type of the Excel shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.AlternativeText">
            <summary>
            Gets or sets the alternative text of the comments in the cell range.
            </summary>
            <value>
            The alternative text.
            </value>
            <returns>
            The alternative text if all comments have the same alternative text, otherwise null.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.TextFrame">
            <summary>
            Gets the text frame associated with the current object.
            </summary>
            <returns>
            An ITextFrame object representing the text frame, or throws a NotSupportedException if the property is not supported in the current context.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Fill">
            <summary>
            Gets the fill property of the shape.
            </summary>
            <returns>The fill property of the shape.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the property is accessed.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Line">
            <summary>
            This property doesn't support in this class.
            </summary>
            <returns>
            The line format of the shape.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This property doesn't support in this class.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.OnAction">
            <summary>
            Gets or sets macro associated with this shape
            </summary>
            <returns>
            The macro associated with this shape.
            </returns>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to get or set the linked cell.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.LinkedCell">
            <summary>
            Gets or sets the linked cell of the range.
            </summary>
            <returns>The linked cell of the range.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to get or set the linked cell.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Rotation">
            <summary>
            Returns or sets the rotation of the shape, in degrees.
            </summary>
            <value>The rotation of the shape, in degrees.</value>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to get or set the property.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.ThreeD">
            <summary>
            Gets the chart3D properties.
            </summary>
            <value>The chart3D properties.</value>
            <returns>
            The chart3D properties.
            </returns>
            <exception cref="T:System.NotSupportedException">This property can not be supported.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Glow">
            <summary>
            Gets the glow properties.
            </summary>
            <value>The glow properties.</value>
            <returns>
            Throws a NotSupportedException because this property cannot be supported.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
            <returns>
            The shadow properties.
            </returns>
            <exception cref="T:System.NotSupportedException">This property can not be supported.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.Reflection">
            <summary>
            Gets the reflection effect of the cell.
            </summary>
            <returns>
            A <see cref="T:Spire.Xls.Core.Interfaces.IReflectionEffect"/> object representing the reflection effect of the cell.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This property can not be supported.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsLockAspectRatio">
            <summary>
            Gets or sets the lock aspect ratio property, which is not supported in this class.
            </summary>
            <value>
            The lock aspect ratio property.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property doesn't support in this class.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsPrintable">
            <summary>
            Gets or sets the value indicating whether the object is printable.
            </summary>
            <value>
            Always throws a <see cref="T:System.NotSupportedException"/> because this property doesn't support in this class.
            </value>
            <exception cref="T:System.NotSupportedException">Thrown when trying to get or set the value of this property.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsLocked">
            <summary>
            Gets or sets a value indicating whether the current instance is locked.
            </summary>
            <value>
            <c>true</c> if the current instance is locked; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property doesn't support in this class.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text in the range of cells.
            </summary>
            <value>
            The horizontal alignment type.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the text in the comment of the cells within the range.
            </summary>
            <value>
            The vertical alignment type.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.TextRotation">
            <summary>
            Gets or sets the text rotation for the cells in the range.
            </summary>
            <value>The text rotation type.</value>
            <returns>The text rotation type for the cells in the range.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.CommentsRange.IsTextLocked">
            <summary>
            Gets or sets whether the comment text is locked for all cells in the range.
            </summary>
            <returns>
            A boolean value indicating whether the comment text is locked.
            </returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape">
            <summary>
            Represents an arc shape within an Excel spreadsheet, inheriting from a base shape class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsArcShape class with the specified parent.
            </summary>
            <param name="parent">The parent object to which this shape belongs.</param>
            <returns>
            An instance of the XlsArcShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always an Arc in this implementation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text of the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.TextRotation">
            <summary>
            Gets or sets the rotation type of the text.
            </summary>
            <value>
            The rotation type of the text, represented by the TextRotationType enum.
            </value>
            <returns>
            The current text rotation type.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.RichText">
            <summary>
            Gets the rich text string associated with the current instance.
            If the rich text string is not already created, it initializes a new RichTextShape instance.
            </summary>
            <returns>
            An IRichTextString object representing the rich text.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment text.
            </summary>
            <returns>The horizontal alignment of the comment text as a CommentHAlignType.</returns>
            <param name="value">The horizontal alignment of the comment text to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment.
            </summary>
            <returns>The vertical alignment type of the comment.</returns>
            <param name="value">The vertical alignment type to set for the comment.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.Weight">
            <summary>
            Gets or sets the weight of the line format for the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.Color">
            <summary>
            Gets or sets the color of the shape's line format.
            </summary>
            <value>
            The color of the line format.
            </value>
            <returns>
            The color of the line format.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.Style">
            <summary>
            Gets or sets the style of the line for the shape.
            </summary>
            <param name="value">The style to be applied to the line of the shape.</param>
            <returns>The current style of the line for the shape.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.DashStyle">
            <summary>
            Gets or sets the dash style of the line for the shape.
            </summary>
            <returns>The current dash style of the line.</returns>
            <param name="value">The dash style to set for the line.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.BeginArrowheadWidth">
            <summary>
            Gets or sets the width type of the begin arrowhead of the shape's line.
            </summary>
            <returns>The width type of the begin arrowhead.</returns>
            <param name="value">The width type to set for the begin arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.BeginArrowHeadStyle">
            <summary>
            Gets or sets the style of the arrowhead at the beginning of the line.
            </summary>
            <value>
            A ShapeArrowStyleType enumeration value representing the style of the arrowhead.
            </value>
            <returns>
            The current style of the arrowhead at the beginning of the line.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.BeginArrowheadLength">
            <summary>
            Gets or sets the length type of the arrowhead at the beginning of the line.
            </summary>
            <returns>The length type of the arrowhead at the beginning of the line.</returns>
            <param name="value">The length type of the arrowhead to set at the beginning of the line.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.EndArrowHeadStyle">
            <summary>
            Gets or sets the style of the end arrowhead of the shape.
            </summary>
            <returns>The style of the end arrowhead.</returns>
            <param name="value">The style to set for the end arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.EndArrowheadLength">
            <summary>
            Gets or sets the length of the end arrowhead of the shape.
            </summary>
            <returns>The length of the end arrowhead.</returns>
            <param name="value">The length of the end arrowhead to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.EndArrowheadWidth">
            <summary>
            Gets or sets the width of the end arrowhead of the shape.
            </summary>
            <returns>
            A ShapeArrowWidthType value representing the width of the end arrowhead.
            </returns>
            <param name="value">The ShapeArrowWidthType value to set for the end arrowhead width.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.HyLink">
            <summary>
            Gets the hyperlink associated with the shape converter. If no hyperlink exists, it adds a new empty hyperlink.
            </summary>
            <returns>
            An instance of IHyperLink representing the hyperlink.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.PrstShapeType">
            <summary>
            Gets the predefined shape type for the geometry of the shape, which is set to Arc.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsArcShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape">
            <summary>
            Represents a bitmap shape within an Excel worksheet, allowing for the manipulation and insertion of images.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Remove(System.Boolean)">
            <summary>
            Removes the current picture shape from the sheet's picture collection and the shapes collection.
            If the shape converter is an instance of OleObject, the method returns without performing any removal.
            </summary>
            <param name="removeImage">A boolean parameter that is not used within the method.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.BlipId">
            <summary>
            Blip id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.ColorTo">
            <summary>
            Gets or sets the target color for a color change operation in a shape's picture format.
            </summary>
            <returns>
            The target color after the color change operation.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.RefRange">
            <summary>
            Gets or sets the reference range for the camera source.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.IsDDE">
            <summary>
            Gets or sets a value indicating whether DDE (Dynamic Data Exchange) is enabled.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.IsCamera">
            <summary>
            Gets or sets a value indicating whether the shape is configured as a camera.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.ColorFrom">
            <summary>
            Gets or sets the starting color for a color change effect in a shape.
            </summary>
            <returns>
            A <see cref="T:System.Drawing.Color"/> object representing the starting color of the color change effect.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Picture">
            <summary>
            Represents the picture as an Image object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Compress(System.Int32)">
            <summary>
            Compress the Picture quality for reduce file size
            </summary>
            <param name="quality">picture quality.Range is 0~100</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.CropLeftOffset">
            <summary>
            Gets or sets the left offset for cropping a picture, scaled by 100,000.
            </summary>
            <value>
            The left offset for cropping, where the actual offset is the value divided by 100,000.
            </value>
            <returns>
            The current left offset for cropping, scaled by 100,000.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.CropRightOffset">
            <summary>
            Gets or sets the right offset for cropping the picture. The value is stored and retrieved in hundred-thousandths of a unit.
            </summary>
            <value>The right offset for cropping the picture in hundred-thousandths of a unit.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.CropBottomOffset">
            <summary>
            Gets or sets the bottom offset for cropping the picture, represented as an integer scaled by 100,000.
            </summary>
            <value>
            The bottom offset value, scaled by 100,000.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.CropTopOffset">
            <summary>
            Gets or sets the top offset for cropping a picture, expressed in hundred-thousandths of a percent.
            </summary>
            <value>
            The top offset for cropping, where the value is divided by 100,000 to get the actual percentage.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Macro">
            <summary>
            Gets or sets the macro string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always a Picture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Dispose">
            <summary>
            Disposes of the current instance, releasing any resources it holds and calling the base class's Dispose method.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.SetHyperLink(System.String,System.Boolean)">
            <summary>
            Sets a hyperlink for the shape.
            </summary>
            <param name="linkString">The URL or reference string for the hyperlink.</param>
            <param name="isExternal">A boolean indicating whether the hyperlink is external.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.GetHyperLink">
            <summary>
            Creates and returns a new HyperLink object associated with the current worksheet.
            </summary>
            <returns>A new HyperLink object configured with the current worksheet and hyperlink conversion settings.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsBitmapShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Hashtable with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollection">indecated weather add to collection.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape">
            <summary>
            Represents a button shape within an Excel worksheet, allowing for interactive elements like clickable buttons.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsButtonShape class with the specified parent.
            </summary>
            <param name="parent">The parent object to which this XlsButtonShape belongs.</param>
            <returns>
            An instance of the XlsButtonShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text of the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.TextRotation">
            <summary>
            Gets or sets the rotation type of the text.
            </summary>
            <value>
            The rotation type of the text, represented by the <see cref="T:Spire.Xls.TextRotationType"/> enum.
            </value>
            <returns>
            The current rotation type of the text.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.RichText">
            <summary>
            Gets the rich text string associated with the current instance. If the rich text string is not already initialized, it creates a new instance of RichTextShape.
            </summary>
            <returns>
            An instance of IRichTextString representing the rich text string associated with the current instance.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment text.
            </summary>
            <returns>The horizontal alignment of the comment text as a CommentHAlignType.</returns>
            <param name="value">The CommentHAlignType value to set the horizontal alignment of the comment text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment.
            </summary>
            <returns>The vertical alignment type of the comment.</returns>
            <param name="value">The vertical alignment type to set for the comment.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.ShapeType">
            <summary>
            Gets the type of the Excel shape, which is always a Button.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Spire.Xls.Core.Spreadsheet.Shapes.XlsButtonShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)" -->
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape">
            <summary>
            Represents a checkbox shape within an Excel worksheet. This class provides properties and methods to manipulate and retrieve information about the checkbox, such as its checked state, position, and size.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsCheckBoxShape class.
            </summary>
            <param name="parent">The parent object to which this checkbox shape belongs.</param>
            <returns>
            An instance of the XlsCheckBoxShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.CheckState">
            <summary>
            Gets or sets the check state of the checkbox.
            </summary>
            <returns>The check state of the checkbox.</returns>
            <param name="value">The check state to set for the checkbox.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text within the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is applied to the checkbox.
            </summary>
            <returns>
            A boolean value. True if 3D shading is applied; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.ShapeType">
            <summary>
            Gets the type of the shape, which is specifically a CheckBox.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment text.
            </summary>
            <value>
            An instance of CommentHAlignType representing the horizontal alignment.
            </value>
            <returns>
            The current horizontal alignment of the comment text.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment text.
            </summary>
            <returns>The vertical alignment type of the comment text.</returns>
            <param name="value">The vertical alignment type to set for the comment text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.TextRotation">
            <summary>
            Gets or sets the rotation type of the text within the shape.
            </summary>
            <returns>
            The current rotation type of the text.
            </returns>
            <param name="value">
            The new rotation type to apply to the text.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsCheckBoxShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape">
            <summary>
            Represents a ComboBox shape within an Excel worksheet, allowing for the creation and manipulation of dropdown lists.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.ComboType">
            <summary>
            Gets type of the combo box object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.SelectedValue">
            <summary>
            Gets value selected in combobox.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.Display3DShading">
            <summary>
            Gets or sets value indicating whether 3D shadow is present.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.DropDownLines">
            <summary>
            Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.SelectedIndex">
            <summary>
            Gets or sets selected item index of the combo box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.ListFillRange">
            <summary>
            Gets or sets the worksheet range used to fill the specified list box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always a ComboBox in this context.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsComboBoxShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment">
            <summary>
            Represents a comment within an Excel worksheet. This class is designed to encapsulate the properties and behaviors of a comment, such as the author, the text content, and the cell to which it is associated.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.ShapeType">
            <summary>
            Gets the type of the shape, which is always Comment in this implementation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Author">
            <summary>
            Comment's author.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control automatically adjusts its size to fit its contents.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Column">
            <summary>
            Column of the commented cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Row">
            <summary>
            Row of the commented cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Text">
            <summary>
            Gets or sets the text of the comment.
            </summary>
            <returns>
            The text of the comment.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.TextRotation">
            <summary>
            Gets or sets the rotation type of the text.
            </summary>
            <returns>The current rotation type of the text.</returns>
            <param name="value">The rotation type to set for the text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.RichText">
            <summary>
            Gets the rich text string associated with the object.
            If the rich text string has not been initialized, it creates a new instance of RichTextShape.
            </summary>
            <returns>
            An instance of IRichTextString representing the rich text string.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment.
            </summary>
            <value>
            A CommentHAlignType value representing the horizontal alignment.
            </value>
            <returns>
            The current horizontal alignment of the comment.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Remove">
            <summary>
            Removes the current comment from the worksheet's comments collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment.
            </summary>
            <value>
            The vertical alignment of the comment, represented by a CommentVAlignType enum.
            </value>
            <returns>
            The current vertical alignment of the comment.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.IsVisible">
            <summary>
            Indicates whether comment is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Fill">
            <summary>
            Gets the fill style of the shape.
            </summary>
            <returns>
            An IShapeFill object representing the fill style of the shape.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsComment.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Hashtable with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape">
            <summary>
            Represents a group box shape in an Excel worksheet, used to visually group related controls or information.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsGroupBoxShape class with the specified parent.
            </summary>
            <param name="parent">The parent object to which the XlsGroupBoxShape belongs.</param>
            <returns>
            An instance of the XlsGroupBoxShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is applied to the group box.
            </summary>
            <returns>
            A boolean value where true indicates that 3D shading is applied, and false indicates that it is not.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.Text">
            <summary>
            Gets or sets the text of the shape using the shapeConverter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text within the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always GroupBox for this property.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsGroupBoxShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape">
            <summary>
            Represents a label shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsLabelShape class with a specified parent.
            </summary>
            <param name="parent">The parent object to which this XlsLabelShape belongs.</param>
            <returns>
            An instance of the XlsLabelShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text of the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape.ShapeType">
            <summary>
            Gets the type of the Excel shape, which is always a Label in this implementation.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsLabelShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape">
            <summary>
            Represents a line shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsLineShape class with a specified parent.
            </summary>
            <param name="parent">The parent object to which this XlsLineShape belongs.</param>
            <returns>
            An instance of XlsLineShape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.LineShapeType">
            <summary>
            Gets or sets the type of the line shape.
            </summary>
            <returns>
            The type of the line shape, which can be Line, CurveLine, or ElbowLine.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the shapeConverter is not of the expected type or the provided value is not a valid LineShapeType.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.Weight">
            <summary>
            Gets or sets the weight of the line format for the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.MiddleOffset">
            <summary>
            Gets or sets the middle offset value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.MiddleOffsetPercent">
            <summary>
            Gets or sets the middle offset as a percentage.
            </summary>
            <value>The middle offset expressed as a percentage.</value>
            <returns>The middle offset as a percentage.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.Transparency">
            <summary>
            Gets or sets the transparency level of the line format for the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.Color">
            <summary>
            Gets or sets the color of the shape's line format.
            </summary>
            <returns>
            The color of the line format.
            </returns>
            <param name="value">The color to set for the line format.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.Style">
            <summary>
            Gets or sets the style of the line for the shape.
            </summary>
            <param name="value">The style to be applied to the line of the shape.</param>
            <returns>The current style of the line for the shape.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.DashStyle">
            <summary>
            Gets or sets the dash style of the shape's line.
            </summary>
            <returns>The dash style of the shape's line as a ShapeDashLineStyleType.</returns>
            <param name="value">The dash style to set for the shape's line as a ShapeDashLineStyleType.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.BeginArrowheadWidth">
            <summary>
            Gets or sets the width type of the begin arrowhead for the shape.
            </summary>
            <returns>The width type of the begin arrowhead.</returns>
            <param name="value">The width type of the begin arrowhead to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.BeginArrowHeadStyle">
            <summary>
            Gets or sets the style of the arrowhead at the beginning of the line.
            </summary>
            <value>
            A ShapeArrowStyleType value representing the style of the arrowhead.
            </value>
            <returns>
            The current ShapeArrowStyleType of the arrowhead at the beginning of the line.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.BeginArrowheadLength">
            <summary>
            Gets or sets the length of the begin arrowhead of the shape.
            </summary>
            <returns>The length type of the begin arrowhead.</returns>
            <param name="value">The length type to set for the begin arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.EndArrowHeadStyle">
            <summary>
            Gets or sets the style of the end arrowhead for the shape's line.
            </summary>
            <returns>The <see cref="T:Spire.Xls.ShapeArrowStyleType"/> representing the style of the end arrowhead.</returns>
            <param name="value">The <see cref="T:Spire.Xls.ShapeArrowStyleType"/> to set as the style of the end arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.EndArrowheadLength">
            <summary>
            Gets or sets the length type of the end arrowhead of the shape.
            </summary>
            <returns>
            The length type of the end arrowhead.
            </returns>
            <param name="value">The length type to set for the end arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.EndArrowheadWidth">
            <summary>
            Gets or sets the width of the end arrowhead of the shape.
            </summary>
            <returns>
            A ShapeArrowWidthType value representing the width of the end arrowhead.
            </returns>
            <param name="value">The ShapeArrowWidthType value to set the width of the end arrowhead.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.HyLink">
            <summary>
            Gets the hyperlink associated with the shape. If no hyperlink exists, it adds a new hyperlink with an empty URL.
            </summary>
            <returns>
            An instance of IHyperLink representing the hyperlink of the shape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.PrstShapeType">
            <summary>
            Gets the type of the preset geometric shape based on the LineShapeType.
            </summary>
            <returns>
            The PrstGeomShapeType corresponding to the <see cref="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.LineShapeType"/>.
            Throws ArgumentNullException if the LineShapeType does not match any known type.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.StartPoint">
            <summary>
            Gets or sets the starting point of the shape in pixels relative to the top-left corner of the worksheet.
            </summary>
            <value>
            A Point object representing the X and Y coordinates of the starting point.
            </value>
            <returns>
            The starting point of the shape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.EndPoint">
            <summary>
            Gets or sets the end point of the shape in the spreadsheet.
            </summary>
            <value>
            A Point object representing the end coordinates of the shape.
            </value>
            <returns>
            The end point of the shape as a Point object.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.FlipH">
            <summary>
            Gets or sets a value indicating whether the object is flipped horizontally.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.FlipV">
            <summary>
            Gets or sets a value indicating whether the vertical flip is applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always a Line in this implementation.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsLineShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape">
            <summary>
            Represents a list box shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsListBoxShape class with the specified parent.
            </summary>
            <param name="parent">The parent object to which this XlsListBoxShape belongs.</param>
            <returns>
            An instance of the XlsListBoxShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is applied to the ListBox shape.
            </summary>
            <returns>
            A boolean value where true indicates that 3D shading is applied, and false indicates that it is not.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.LinkedCell">
            <summary>
            Gets or sets the linked cell for the shape.
            </summary>
            <value>
            An IXLSRange object representing the linked cell. If no cell is linked, returns null.
            </value>
            <returns>
            The IXLSRange object representing the linked cell.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.ListFillRange">
            <summary>
            Gets or sets the range of cells that are used to fill the list box.
            </summary>
            <returns>
            An IXLSRange object representing the range of cells used to fill the list box, or null if no range is set.
            </returns>
            <param name="value">The IXLSRange object representing the range of cells to use for filling the list box.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item in the ListBox.
            </summary>
            <returns>
            The zero-based index of the currently selected item. Returns -1 if no item is selected.
            </returns>
            <param name="value">The zero-based index of the item to select.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.SelectionType">
            <summary>
            Gets or sets the selection type of the ListBox.
            </summary>
            <returns>The SelectionType of the ListBox.</returns>
            <param name="value">The SelectionType to set for the ListBox.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always ListBox in this implementation.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsListBoxShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape">
            <summary>
            Represents an oval shape within an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsOvalShape class with the specified parent.
            </summary>
            <param name="parent">The parent object to which this oval shape belongs.</param>
            <returns>
            An instance of the XlsOvalShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always an Oval in this implementation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text of the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.TextRotation">
            <summary>
            Gets or sets the rotation type of the text.
            </summary>
            <returns>The current rotation type of the text.</returns>
            <param name="value">The rotation type to set for the text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.RichText">
            <summary>
            Gets the rich text associated with the current object. If no rich text is currently set, a new RichTextShape is created and returned.
            </summary>
            <returns>
            An instance of IRichTextString representing the rich text associated with the object.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment text.
            </summary>
            <returns>The horizontal alignment type of the comment text.</returns>
            <param name="value">The horizontal alignment type to set for the comment text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment text.
            </summary>
            <value>
            The vertical alignment of the comment text.
            </value>
            <returns>
            The vertical alignment type of the comment text.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.HyLink">
            <summary>
            Gets a hyperlink associated with the shape converter. If no hyperlink exists, an empty hyperlink is added.
            </summary>
            <returns>
            An instance of IHyperLink representing the hyperlink associated with the shape converter.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.PrstShapeType">
            <summary>
            Gets the predefined geometric shape type, which is an ellipse in this case.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.GeomPaths">
            <summary>
            Gets a collection of IGeomPath objects representing geometric paths. If the collection is not already initialized, it creates a new instance of CollectionExtended and populates it with ShapeGeomPath objects based on the PathList from shapeConverter.PathsInfo.
            </summary>
            <returns>
            A CollectionExtended containing the geometric paths.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsOvalShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape">
            <summary>
            Represents an Excel shape with a preset geometry, inheriting from XlsShape and implementing the IPrstGeomShape interface.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsPrstGeomShape class with a specified parent.
            </summary>
            <param name="parent">The parent object to which this shape belongs.</param>
            <returns>
            An instance of the XlsPrstGeomShape class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.PrstShapeType">
            <summary>
            Gets the predefined shape type of the geometry.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.SetPrstGeomShapeType(Spire.Xls.PrstGeomShapeType)">
            <summary>
            Sets the preset geometry shape type for the object.
            </summary>
            <param name="shapeType">The shape type to be set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always ExcelShapeType.PrstGomShape for this property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.GeomPaths">
            <summary>
            Gets the collection of extended geometric paths. If the collection is not initialized, it initializes the collection and populates it with ShapeGeomPath objects based on the available path information from the shape converter.
            </summary>
            <returns>A CollectionExtended of IGeomPath objects.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.IsTextPlainType">
            <summary>
            Determines whether the shape is of type TextPlainText.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.ShapeAdjustValues">
            <summary>
            Gets the collection of geometry adjustment values for the shape.
            </summary>
            <returns>
            A GeomertyAdjustValuesCollection object that represents the geometry adjustment values.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsPrstGeomShape.HyLink">
            <summary>
            Gets the hyperlink . If no hyperlink exists, an empty hyperlink is added.
            </summary>
            <returns>
            An instance of IHyperLink.
            </returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.ShapeGeomPath">
            <summary>
            Represents a geometric path that defines the shape of an object, implementing the IGeomPath interface.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.ShapeGeomPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Spreadsheet.Shapes.ShapeGeomPath"/> class.
            </summary>
            <returns>
            A new instance of the <see cref="T:Spire.Xls.Core.Spreadsheet.Shapes.ShapeGeomPath"/> class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.ShapeGeomPath.SegmentPaths">
            <summary>
            Gets the collection of ShapeSegmentPath objects. Initializes the collection if it is null and populates it with ShapeSegmentPath objects created from the PathSegementList.
            </summary>
            <returns>A CollectionExtended of ShapeSegmentPath objects.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.ShapeSegmentPath">
            <summary>
            Represents a path composed of shape segments, which can be used to define complex geometric shapes or outlines.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.ShapeSegmentPath.#ctor">
            <summary>
            Initializes a new instance of the ShapeSegmentPath class.
            </summary>
            <returns>
            A new instance of the ShapeSegmentPath class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.ShapeSegmentPath.ShapePathPoints">
            <summary>
            Gets a collection of System.Drawing.Point representing the shape path points.
            If the points collection is null, it initializes the collection and populates it with points from segmentconvert.PointList.
            </summary>
            <returns>
            A CollectionExtended containing the shape path points.
            </returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape">
            <summary>
            Represents a radio button shape in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.Text">
            <summary>
            Gets or sets the text of the shape using the shapeConverter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text within the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.LinkedCell">
            <summary>
            Gets or sets the linked cell for the radio button shape.
            </summary>
            <returns>
            The linked cell as an IXLSRange object if a linked cell is set; otherwise, null.
            </returns>
            <param name="value">The IXLSRange object to set as the linked cell for the radio button.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is applied to the radio button.
            </summary>
            <returns>
            A boolean value. True if 3D shading is enabled; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.IsFirstButton">
            <summary>
            Gets a value indicating whether the radio button is the first button in the group.
            </summary>
            <returns>
            True if the radio button is the first button in the group; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.CheckState">
            <summary>
            Gets or sets the check state of the RadioButton shape.
            </summary>
            <returns>
            The check state of the RadioButton shape, which can be Checked, Unchecked.
            Throws NotSupportedException if Mixed state is set.
            </returns>
            <param name="value">The check state to set the RadioButton shape to.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.ShapeType">
            <summary>
            Gets the type of the Excel shape, which is specifically a RadioButton.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.HAlignment">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.VAlignment">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.TextRotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRadioButtonShape.RichText">
            <summary>
            Rich Text
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape">
            <summary>
            Represents a rectangle shape within an Excel worksheet, allowing for customization and manipulation of its properties such as size, position, and formatting.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.m_rithtext">
            <summary>
            Represents a rich text shape within a document or presentation, allowing for formatted text to be embedded and styled.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always a rectangle in this implementation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.RectShapeType">
            <summary>
            Gets the type of rectangle shape.
            </summary>
            <returns>
            Returns the RectangleShapeType.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text of the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.TextRotation">
            <summary>
            Gets or sets the rotation type of the text.
            </summary>
            <value>
            The rotation type of the text, which can be values like horizontal, vertical, etc.
            </value>
            <returns>
            Returns the current text rotation type.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.RichText">
            <summary>
            Gets the rich text string associated with this object.
            If the rich text string has not been initialized, it will be created.
            </summary>
            <returns>
            An instance of IRichTextString representing the rich text.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment text.
            </summary>
            <returns>The horizontal alignment of the comment text as a CommentHAlignType.</returns>
            <param name="value">The horizontal alignment to set for the comment text as a CommentHAlignType.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment text.
            </summary>
            <returns>The vertical alignment type of the comment text.</returns>
            <param name="value">The vertical alignment type to set for the comment text.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.PrstShapeType">
            <summary>
            Gets the predefined shape type based on the RectShapeType property.
            </summary>
            <returns>
            The corresponding PrstGeomShapeType value.
            </returns>
            <summary>
            Gets the predefined shape type based on the RectShapeType property.
            </summary>
            <returns>
            The corresponding PrstGeomShapeType value.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsRectangleShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape">
            <summary>
            Represents a scrollbar shape in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is applied to the scroll bar.
            </summary>
            <returns>
            A boolean value. True if 3D shading is applied; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.CurrentValue">
            <summary>
            Gets or sets the current value of the scroll bar.
            </summary>
            <value>
            The current value of the scroll bar.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.Min">
            <summary>
            Gets or sets the minimum value of the scrollbar.
            </summary>
            <returns>The minimum value of the scrollbar.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.Max">
            <summary>
            Gets or sets the maximum value of the scrollbar.
            </summary>
            <returns>The maximum value of the scrollbar.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.IncrementalChange">
            <summary>
            Gets or sets the incremental change value of the scrollbar.
            </summary>
            <value>The amount by which the scrollbar's position changes when the user clicks the arrow buttons.</value>
            <returns>The incremental change value.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.PageChange">
            <summary>
            Gets or sets the number of positions the scroll bar moves when the user clicks the scroll bar's page up or page down regions.
            </summary>
            <returns>
            An integer representing the number of positions the scroll bar moves.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.IsHorizontal">
            <summary>
            Gets or sets a value indicating whether the scrollbar is horizontal.
            </summary>
            <returns>
            True if the scrollbar is horizontal; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.ShapeType">
            <summary>
            Gets the type of the Excel shape, which is set to ScrollBar.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsScrollBarShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape">
            <summary>
            Represents an Excel shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Name">
            <summary>
            Name of object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SetName(System.String)">
            <summary>
            Sets object name
            </summary>
            <param name="name">Name to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ChangeLayer(Spire.Xls.ShapeLayerChangeType)">
            <summary>
            Changes the layer position of a shape within a group based on the specified change type.
            </summary>
            <param name="changeType">The type of change to apply to the shape's layer position (e.g., SendToBack, SendBackward, BringForward, BringToFront).</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Height">
            <summary>
            Height of object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ID">
            <summary>
            ID of object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ShapeId">
            <summary>
            Gets / sets shape id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Left">
            <summary>
            X of object
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Top">
            <summary>
            Top of object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Width">
            <summary>
            Width of object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ShapeType">
            <summary>
            Type of shape , Read Only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.VmlShape">
            <summary>
            Indicates whether this is vml shape or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsRelativeResize">
            <summary>
            True means that is relative to original size of picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsRelative">
            <summary>
            Gets or sets a value indicating whether the shape is relative.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Instance">
            <summary>
            Returns instance value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsShortVersion">
            <summary>
            Indiicates whether it is short version of the shape
            (without obj and maybe some other properties).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ShapeCount">
            <summary>
            Returns number of shapes contained by this shape (1 means no sub shapes). Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Visible">
            <summary>
            Gets or sets the visibility of the shape. When set to true, the shape is visible; when set to false, the shape is hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.AlternativeText">
            <summary>
            Returns or sets the descriptive (alternative) text string for a Shape object when the object is saved to a Web page. Read/write String
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Fill">
            <summary>
            Represents fill properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.UpdatePositions">
            <summary>
            Indicates whether we have to update absolute positions after setting TopRow,
            BottomRow, LeftColumn, RightColumn.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.HasFill">
            <summary>
            Indicates whether XlsFill item was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.HasLineFormat">
            <summary>
            Indicates whether line item was created. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsFlipH">
            <summary>
            Returns or sets if the shape flips Horizontal.false is default;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsFlipV">
            <summary>
            Returns or sets if the shape flips Vertical.false is default;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsGroup">
            <summary>
            This shape is group shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsInGroup">
            <summary>
            This shape is child shape of group shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.AlternativeTextTitle">
            <summary>
            Returns or sets the descriptive (alternative) text title string for a Shape object when the object is saved to a Web page. Read/write String
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.OnAction">
            <summary>
            Gets or sets macro-command that is called when action happens.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsLocked">
            <summary>
            Gets or sets a value indicating whether the shape is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsPrintable">
            <summary>
            Gets or sets a value indicating whether the shape is printable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ResizeBehave">
            <summary>
            Specifies all possible settings for how drawing object shall be resized when the rows and columns between its start and ending anchor are resized or inserted(ComboBoxShape and CheckBoxShape and RadioButtonShape set MoveAndResize type value is invalid)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsLockAspectRatio">
            <summary>
            True means that don't allow changes in aspect ratio.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.BottomRow">
            <summary>
            Bottom row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.BottomRowOffset">
            <summary>
            Bottom row offset.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.LeftColumn">
            <summary>
            Left column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.LeftColumnOffset">
            <summary>
            Left column offset. 1024 means whole column offset
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.RightColumn">
            <summary>
            Right column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.RightColumnOffset">
            <summary>
            Right column offset.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.TopRow">
            <summary>
            Top row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.TopRowOffset">
            <summary>
            Top row offset.256 means whole row offset
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Line">
            <summary>
            Represents line format properties. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.AutoSize">
            <summary>
            True if the size of the specified object is changed automatically
            to fit text within its boundaries.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Rotation">
            <summary>
            Returns or sets the rotation of the shape, in degrees.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Glow">
            <summary>
            Gets the glow properties.
            </summary>
            <value>The glow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Reflection">
            <summary>
            Gets the reflection effect applied to the shape.
            </summary>
            <returns>
            An instance of IReflectionEffect representing the reflection properties of the shape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.RichText">
            <summary>
            Gets the rich text string associated with the current object. If the rich text string has not been initialized, it creates a new instance of RichTextShape.
            </summary>
            <returns>
            An instance of IRichTextString representing the rich text string.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.ThreeD">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsMoveWithCell">
            <summary>
            Determines whether the object moves with the cell it is associated with.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsSizeWithCell">
            <summary>
            Determines whether the size is calculated based on the cell dimensions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.IsSmartArt">
            <summary>
            Determines whether the shape is a SmartArt graphic based on the presence of a linked drawing.
            </summary>
            <returns>
            Returns true if the shape is a SmartArt graphic; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.TextFrame">
            <summary>
            Gets the text frame associated with the shape.
            </summary>
            <returns>
            An instance of ITextFrame representing the text frame of the shape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.TextVerticalAlignment">
            <summary>
            Get or set Text Vertical Alignment in shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.LinkedCell">
            <summary>
            Gets or sets the linked cell for the shape.
            </summary>
            <value>
            The IXLSRange object representing the linked cell. If no cell is linked, it returns null.
            </value>
            <returns>
            The IXLSRange object representing the linked cell.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Remove">
            <summary>
            Removes object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the shape.
            </summary>
            <param name="scaleWidth">Width scale in percent.</param>
            <param name="scaleHeight">Height scale in percent.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SaveToImage">
            <summary>
            Save shape to image.
            </summary>
            <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SaveToImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save shape to image.
            </summary>
            <param name="fileStream">Output stream. It is ignored if null.</param>
            <param name="imageFormat">Type of the image to create.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SaveToImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save shape to image.
            </summary>
            <param name="fileName">Output file name.</param>
            <param name="imageFormat">Type of the image to create.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SaveToImage(System.IO.Stream)">
            <summary>
            Save shape to image.
            </summary>
            <param name="fileStream">Output stream. It is ignored if null.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SaveToImage(System.String)">
            <summary>
            Save shape to image.
            </summary>
            <param name="fileName">Output file name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SetTextEffect(Spire.Xls.PresetTextEffect,System.String)">
            <summary>
            Sets the text effect and updates the text for a shape.
            </summary>
            <param name="effect">The preset text effect to apply.</param>
            <param name="text">The text to display with the effect.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Clone(System.Object)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Hashtable with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicated weather add to collections</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShape.SetParents">
            <summary>
            Sets the parent shapes collection for the current object by searching for a parent of type XlsShapesCollection.
            Throws an ArgumentNullException if the parent collection is not found.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat">
            <summary>
            Represents the line format of a shape in an Excel document, inheriting from XlsObject and implementing the IShapeLineFormat interface.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.DEF_LINE_WEIGHT_MULL">
            <summary>
            Represents default line weight mull.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.DEF_LINE_MAX_WEIGHT">
            <summary>
            Represents max line weight.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.DEF_PARSE_ARR_LENGTH">
            <summary>
            Represents length of helper parse array.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Weight">
            <summary>
            Represents weight of the line in pts.( 0 - 1584 )
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.BackKnownColor">
            <summary>
            Represents background color index.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.BeginArrowHeadStyle">
            <summary>
            Represents begin arrow head style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.EndArrowHeadStyle">
            <summary>
            Represents end arrow head style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.BeginArrowheadLength">
            <summary>
            Represents begin arrow head length.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.EndArrowheadLength">
            <summary>
            Represents end arrow head length.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.BeginArrowheadWidth">
            <summary>
            Represents begin arrow head width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.EndArrowheadWidth">
            <summary>
            Represents end arrow head width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.DashStyle">
            <summary>
            Represents the dash style for the specified line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Style">
            <summary>
            Represents line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Transparency">
            <summary>
            Represents line transparency.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Visible">
            <summary>
            Represents if line format is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Pattern">
            <summary>
            Represents line pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.HasPattern">
            <summary>
            Indicates if current line format contain pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.IsRound">
            <summary>
            Indicates whether join is round.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.NoFill">
            <summary>
            Getts and Setts the m_bNoFill;
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeLineFormat.Clone(System.Object)">
            <summary>
            Clones current ojbect.
            </summary>
            <param name="parent">Represents parent object for new instance.</param>
            <returns>Returns cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape">
            <summary>
            Represents a spinner shape in an Excel worksheet, allowing for interactive adjustment of numeric values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the spinner shape.
            </summary>
            <returns>
            A boolean value where true indicates that 3D shading is enabled, and false indicates that it is disabled.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.CurrentValue">
            <summary>
            Gets or sets the current value of the spinner shape.
            </summary>
            <returns>The current value of the spinner.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.Min">
            <summary>
            Gets or sets the minimum value of the spinner control.
            </summary>
            <returns>The minimum value of the spinner control.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.Max">
            <summary>
            Gets or sets the maximum value of the spinner control.
            </summary>
            <value>
            The maximum value that the spinner control can reach.
            </value>
            <returns>
            The current maximum value of the spinner control.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.IncrementalChange">
            <summary>
            Gets or sets the incremental change value for the spinner control.
            </summary>
            <value>
            The amount by which the spinner's value changes when the user clicks the up or down button.
            </value>
            <returns>
            The current incremental change value of the spinner.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always Spinner for this property.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsSpinnerShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape">
            <summary>
            Represents a text box shape in an Excel document, inheriting from XlsShape and implementing interfaces ITextBoxLinkShape and TextBoxShapeBase.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.ShapeType">
            <summary>
            Gets the type of the shape, which is always a TextBox in this implementation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.Text">
            <summary>
            Gets or sets the text of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.IsTextLocked">
            <summary>
            Indicates whether comment text is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.IsWrapText">
            <summary>
            Indicates whether comment text is Wrapped.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.TextRotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.RichText">
            <summary>
            Comment text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.HAlignment">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.VAlignment">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.Coordinates2007">
            <summary>
            Gets or sets the coordinates of the shape in the Excel07 format.
            </summary>
            <returns>
            A Rectangle representing the coordinates of the shape.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.HasStyleProperties">
            <summary>
            Gets a value indicating whether the shape converter has any style properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.TextFieldId">
            <summary>
            Gets or sets the id for the text field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.TextFieldType">
            <summary>
            Gets or sets the type of the text field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.FillColor">
            <summary>
            Shape filling color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.InsetMode">
            <summary>
            Gets or sets the inset mode for the shape converter.
            </summary>
            <value>
            Returns "auto" if auto inset mode is enabled, otherwise returns null.
            When setting, if the value is "auto", it enables auto inset mode; otherwise, it disables it.
            </value>
            <returns>
            The current inset mode as a string ("auto" or null).
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.LeftMarginEMU">
            <summary>
            Gets or sets the left margin of the text frame in EMU (English Metric Units).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.TopMarginEMU">
            <summary>
            Gets or sets the top margin of the text frame in EMU (English Metric Units).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.RightMarginEMU">
            <summary>
            Gets or sets the right margin of the text frame in EMU (English Metric Units).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.BottomMarginEMU">
            <summary>
            Gets or sets the bottom margin of the text frame in EMU (English Metric Units).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.InnerBottomMargin">
            <summary>
            Gets or sets the bottom margin of the inner text frame in centimeters.
            </summary>
            <returns>The bottom margin in centimeters.</returns>
            <param name="value">The bottom margin to set in centimeters.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.InnerLeftMargin">
            <summary>
            Gets or sets the left margin of the text frame in centimeters.
            </summary>
            <value>The left margin in centimeters.</value>
            <returns>The current left margin of the text frame in centimeters.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.InnerRightMargin">
            <summary>
            Gets or sets the inner right margin of the text frame in centimeters.
            </summary>
            <value>The right margin in centimeters.</value>
            <returns>The current right margin in centimeters when getting; sets the right margin in centimeters when setting.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.InnerTopMargin">
            <summary>
            Gets or sets the top margin of the text frame in centimeters.
            </summary>
            <value>
            The top margin in centimeters.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.VertOverflow">
            <summary>
            Gets or sets the vertical overflow behavior of the text within the shape.
            </summary>
            <returns>A string representing the vertical overflow type.</returns>
            <param name="value">The string value to set the vertical overflow type.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.HorzOverflow">
            <summary>
            Gets or sets the horizontal overflow type for the text in the shape.
            </summary>
            <value>
            A string representing the horizontal overflow type.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.Anchor">
            <summary>
            Gets or sets the vertical text alignment of the shape in terms of chart text anchor.
            </summary>
            <value>
            A string representing the vertical text alignment.
            </value>
            <returns>
            The current vertical text alignment of the shape as a string.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.Vert">
            <summary>
            Gets or sets the text orientation of the shape.
            </summary>
            <value>
            A string representing the text orientation type.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.IsTextWrapped">
            <summary>
            Gets or sets a value indicating whether the text within the shape is wrapped.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.UpRight">
            <summary>
            Gets or sets the UpRight property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.HyLink">
            <summary>
            Gets the hyperlink . If no hyperlink exists, an empty hyperlink is added.
            </summary>
            <returns>
            An instance of IHyperLink representing the hyperlink for the shape.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsTextBoxShape.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Creates a clone of the current shape.
            </summary>
            <param name="parent">New parent for the shape object.</param>
            <param name="hashNewNames">Dictionary with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="addToCollections">Indicates whether we should add created
            shape into all necessary parent collections.</param>
            <returns>A copy of the current shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill">
            <summary>
            Represents XlsFill format in shape object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.m_picture">
            <summary>
            Represents the image associated with the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.GradientStops">
            <summary>
            Returns collection of gradient stops that stores gradient XlsFill settings. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.FillType">
            <summary>
            Represents shape XlsFill type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.GradientVariant">
            <summary>
            Represents current shading variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Transparency">
            <summary>
            Returns the transparency level of the specified Solid color shaded XlsFill as a floating-point
            value from 0.0 (opaque) through 1.0(transparent)
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.TransparencyFrom">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.TransparencyTo">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Visible">
            <summary>
            Represents if XlsFill style visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.BackColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.ForeColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.GradientColorType">
            <summary>
            Represents gradient style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Texture">
            <summary>
            Represents gradient texture
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Pattern">
            <summary>
            Represents gradient pattern
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PresetGradientType">
            <summary>
            Represents presed gradient type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Picture">
            <summary>
            Represents user defined picture or textture. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PictureName">
            <summary>
            Returns user defined picture of texture name. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.GradientDegree">
            <summary>
            Returns the gradient degree of the specified one-color shaded XlsFill as a floating-point
             value from 0.0 (dark) through 1.0 (light)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.IsGradientSupported">
            <summary>
            Gets or sets a value indicating whether gradient rendering is supported.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Tile">
            <summary>
            Represents whether picture is tiled or stretched.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PicStretch">
            <summary>
            Gets or sets pictrue format option.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PicTile">
            <summary>
            Gets or sets tile picture option.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.IsDoubled(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Detects whether color sequence should be doubled or not.
            </summary>
            <param name="gradientStyle">Gradient style.</param>
            <param name="variant">Gradient variant.</param>
            <returns>True if color sequence should be doubled.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.StandardDoubled(Spire.Xls.GradientVariantsType)">
            <summary>
            Detects whether color sequence should be doubled for the most of gradient
            styles (all except From_Corner).
            </summary>
            <param name="variant">Gradient variant.</param>
            <returns>True if color sequence should be doubled.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.IsInverted(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Returns true if colors should be placed in inverted order.
            </summary>
            <param name="gradientStyle">Gradient style.</param>
            <param name="variant">Gradient variant.</param>
            <returns>True if colors should be placed in inverted order.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.StandardInverted(Spire.Xls.GradientVariantsType)">
            <summary>
            Evaluates whether colors should be placed in inverted order for the most
            of gradient styles (Horizontal, Vertical, DiagonalUp and FromCenter).
            </summary>
            <param name="variant"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.DiagonalDownInverted(Spire.Xls.GradientVariantsType)">
            <summary>
            Evaluates whether colors should be placed in inverted order for DiagonalDown gradient style.
            </summary>
            <param name="variant">Gradient variant to check.</param>
            <returns>True if colors should be placed in inverted order.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.CompareTo(Spire.Xls.Core.IGradient)">
            <summary>
            Compares with shape XlsFill impl.
            </summary>
            <param name="twin">Shape XlsFill to compare with.</param>
            <returns>Zero if shape fills are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.CustomPicture(System.String)">
            <summary>
            Sets user defined picture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.CustomPicture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined picture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.CustomTexture(System.String)">
            <summary>
            Sets user defined texture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.CustomTexture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined texture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Patterned(Spire.Xls.GradientPatternType)">
            <summary>
            Sets the specified XlsFill to a pattern.
            </summary>
            <param name="pattern">Pattern to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PresetGradient(Spire.Xls.GradientPresetType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
            <param name="shadVar">Represents gradient variant for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.PresetTextured(Spire.Xls.GradientTextureType)">
            <summary>
            Sets the specified XlsFill format to a preset texture.
            </summary>
            <param name="texture">Represents texture to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.TwoColorGradient">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.TwoColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.OneColorGradient">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.OneColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.OneColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Solid">
            <summary>
            Sets the specified XlsFill to a uniform color.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.Clone(System.Object)">
            <summary>
            Clones current object.
            </summary>
            <param name="parent">Represents parent object.</param>
            <returns>Returns cloned methods.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Shapes.XlsShapeFill.FindParents">
            <summary>
            Finds parent objects.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.FillPictureType">
            <summary>
            Represents the different types of fill pictures that can be applied to a shape or object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.FillPictureType.Stretch">
            <summary>
            Stretches the image to fit the dimensions of the shape, potentially distorting the image.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.FillPictureType.Stack">
            <summary>
            Tiles the image across the shape without resizing, repeating the image as needed.
            /// </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Shapes.FillPictureType.StackAndScale">
            <summary>
            Tiles the image across the shape, resizing the image to fit the shape's dimensions while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.PicTile">
            <summary>
            Represents tile picture as texture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicTile.OffsetX">
            <summary>
            Gets or sets the X offset for tiling picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicTile.OffsetY">
            <summary>
            Gets or sets the Y offset for tiling picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicTile.ScaleX">
            <summary>
            Gets or sets the X scale for tiling picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicTile.ScaleY">
            <summary>
            Gets or sets the Y scale for tiling picture.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch">
            <summary>
            Represents a class responsible for stretching or manipulating images.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Type">
            <summary>
            Gets or sets the picture fill type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Scale">
            <summary>
            Gets or sets how many the picture stack and scale with. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Left">
            <summary>
            Gets or sets the left offset for stretching picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Top">
            <summary>
            Gets or sets the top offset for stretching picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Bottom">
            <summary>
            Gets or sets the bottom offset for stretching picture.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Shapes.PicStretch.Right">
            <summary>
            Gets or sets the right offset for stretching picture.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.WriteProtection">
            <summary>
            Represents a class that manages write protection settings for a resource.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.WriteProtection.#ctor(Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Initializes a new instance of the WriteProtection class with the specified XlsWorkbook.
            </summary>
            <param name="workbook">The XlsWorkbook for which write protection is to be applied.</param>
            <returns>
            An instance of the WriteProtection class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.WriteProtection.Author">
            <summary>
            Gets and sets the author.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.WriteProtection.IsWriteProtected">
            <summary>
            Gets whether this workbook is write protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.WriteProtection.Password">
            <summary>
            Sets the protected password to modify the file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.WriteProtection.RecommendReadOnly">
            <summary>
            Gets or sets whether the Read Only Recommended option is selected.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper">
            <summary>
            The base style class.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.m_book">
            <summary>
            Represents the workbook object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.#ctor(Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Initializes a new instance of the AddtionalFormatWrapper class with the specified workbook.
            </summary>
            <param name="book">The workbook to be wrapped.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BuiltIn">
            <summary>
            Gets a value indicating whether the item is built-in.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Name">
            <summary>
            Gets the name of the style converter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IsInitialized">
            <summary>
            Checks if the current style is initialized.
            </summary>
            <returns>
            True if the style is initialized, otherwise false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Parent">
            <summary>
            Gets the parent object, which is typically a book in this context.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Workbook">
            <summary>
            Gets the workbook associated with the current spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BottomBorderColor">
            <summary>
            Gets the bottom border color of the style.
            </summary>
            <returns>The bottom border color as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.TopBorderColor">
            <summary>
            Gets the top border color of the style.
            </summary>
            <returns>The top border color as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.LeftBorderColor">
            <summary>
            Gets the left border color of the object.
            </summary>
            <returns>The left border color as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.RightBorderColor">
            <summary>
            Gets the right border color of the style.
            </summary>
            <returns>The right border color as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.HorizontalBorderColor">
            <summary>
            Gets the horizontal border color.
            </summary>
            <returns>The horizontal border color.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.VerticalBorderColor">
            <summary>
            Gets the vertical border color.
            </summary>
            <returns>The vertical border color as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.DiagonalBorderColor">
            <summary>
            Gets the color of the diagonal border.
            </summary>
            <returns>The color of the diagonal border as an OColor object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.LeftBorderLineStyle">
            <summary>
            Gets or sets the line style of the left border.
            </summary>
            <returns>The line style of the left border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.RightBorderLineStyle">
            <summary>
            Gets or sets the line style of the right border of the cell.
            </summary>
            <returns>The line style of the right border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.TopBorderLineStyle">
            <summary>
            Gets or sets the line style of the top border.
            </summary>
            <value>
            The line style of the top border.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BottomBorderLineStyle">
            <summary>
            Gets or sets the line style of the bottom border.
            </summary>
            <returns>The line style of the bottom border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.DiagonalUpBorderLineStyle">
            <summary>
            Gets or sets the line style of the diagonal up border.
            </summary>
            <returns>The line style of the diagonal up border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.DiagonalDownBorderLineStyle">
            <summary>
            Gets or sets the line style of the diagonal down border.
            </summary>
            <returns>The line style of the diagonal down border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.HorizontalBorderLineStyle">
            <summary>
            Gets or sets the line style for the horizontal border.
            </summary>
            <returns>The line style of the horizontal border.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.VerticalBorderLineStyle">
            <summary>
            Gets or sets the line style for the vertical border.
            </summary>
            <value>
            The line style for the vertical border.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.DiagonalUpVisible">
            <summary>
            Gets or sets the visibility of the diagonal line from the bottom left to the top right.
            </summary>
            <value>
            true if the diagonal line is visible, false otherwise.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.DiagonalDownVisible">
            <summary>
            Gets or sets the visibility of the diagonal line starting from the top-left corner.
            </summary>
            <value>
            <c>true</c> if the diagonal line is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.FillPattern">
            <summary>
            Gets or sets the fill pattern of the cell.
            </summary>
            <value>
            The fill pattern.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ExtendedFormatIndex">
            <summary>
            Gets the index of the extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BackgroundKnownColor">
            <summary>
            Gets or sets the background known color of the cell.
            </summary>
            <returns>The background known color of the cell.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BackgroundColor">
            <summary>
            Gets or sets the background color of the cell.
            </summary>
            <returns>The background color of the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Sets the theme color for the foreground.
            </summary>
            <param name="type">The type of theme color.</param>
            <param name="tint">The tint value for the theme color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Retrieves the theme color and tint for the current style.
            </summary>
            <param name="type">The theme color type.</param>
            <param name="tint">The tint value of the theme color.</param>
            <returns>True if a theme color is found, otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.SetBackgroundThemeColor(Spire.Xls.ThemeColorType,System.Int32)">
            <summary>
            Sets the background theme color for the style.
            </summary>
            <param name="type">The theme color type.</param>
            <param name="tint">The tint value for the theme color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.GetBackgroundThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Retrieves the background theme color and its tint.
            </summary>
            <param name="type">The theme color type.</param>
            <param name="tint">The tint value of the theme color.</param>
            <returns>True if the theme color is retrieved successfully; otherwise, false.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ForegroundKnownColor">
            <summary>
            Gets or sets the foreground color of the cell.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the cell.
            </summary>
            <returns>The foreground color of the cell.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.NumberFormatIndex">
            <summary>
            Gets or sets the index of the number format.
            </summary>
            <returns>The index of the number format.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text in the cell.
            </summary>
            <returns>The horizontal alignment of the text in the cell.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludeAlignment">
            <summary>
            Gets or sets a value indicating whether alignment is included.
            </summary>
            <returns>
            true if alignment is included; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludeBorder">
            <summary>
            Gets or sets a value indicating whether to include borders in the style.
            </summary>
            <value>
            <c>true</c> if borders should be included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludeFont">
            <summary>
            Gets or sets a value indicating whether the font is included.
            </summary>
            <value>
            <c>true</c> if the font is included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludeNumberFormat">
            <summary>
            Gets or sets a value indicating whether the number format is included.
            </summary>
            <value>
            true if the number format is included; otherwise, false.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludePatterns">
            <summary>
            Gets or sets a value indicating whether patterns are included.
            </summary>
            <value>
            <c>true</c> if patterns are included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IncludeProtection">
            <summary>
            Gets or sets a value indicating whether protection is included.
            </summary>
            <value>
            <c>true</c> if protection is included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IndentLevel">
            <summary>
            Gets or sets the indentation level of the style converter.
            </summary>
            <returns>The current indentation level.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.FormulaHidden">
            <summary>
            Gets or sets whether the formula is hidden.
            </summary>
            <returns>
            true if the formula is hidden; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Locked">
            <summary>
            Gets or sets a value indicating whether the style converter is locked.
            </summary>
            <value>
            <c>true</c> if the style converter is locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.JustifyLast">
            <summary>
            Gets or sets a value indicating whether the last item should be justified.
            </summary>
            <returns>
            <c>true</c> if the last item should be justified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.NumberFormat">
            <summary>
            Gets or sets the number format string for the cell.
            </summary>
            <returns>The number format string.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.NumberFormatLocal">
            <summary>
            Gets or sets the number format.
            </summary>
            <value>
            The number format.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.NumberFormatSettings">
            <summary>
            Gets the number format settings for the specified number format index.
            </summary>
            <returns>The number format settings.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ReadingOrder">
            <summary>
            Gets or sets the reading order of the text.
            </summary>
            <value>
            The reading order.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Rotation">
            <summary>
            Gets or sets the rotation angle of the style.
            </summary>
            <returns>The rotation angle in degrees.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ShrinkToFit">
            <summary>
            Gets or sets a value indicating whether the control should shrink to fit its content.
            </summary>
            <returns>
            true if the control should shrink to fit its content; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text in the cell.
            </summary>
            <returns>The vertical alignment type.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.WrapText">
            <summary>
            Gets or sets a value indicating whether text is wrapped within a cell.
            </summary>
            <value>
            <c>true</c> if text is wrapped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Font">
            <summary>
            Gets the font associated with the current style.
            </summary>
            <returns>The font object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Borders">
            <summary>
            Gets the borders associated with the cell.
            </summary>
            <returns>The BordersCollectionWrapper object representing the borders.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IsFirstSymbolApostrophe">
            <summary>
            Gets or sets a value indicating whether the first symbol is an apostrophe.
            </summary>
            <value>
            true if the first symbol is an apostrophe; otherwise, false.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.PatternKnownColor">
            <summary>
            Gets or sets the known color of the pattern.
            </summary>
            <value>The known color of the pattern.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.PatternColor">
            <summary>
            Gets or sets the pattern color of the style.
            </summary>
            <value>
            The pattern color.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.KnownColor">
            <summary>
            Gets or sets the known color of the foreground.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Color">
            <summary>
            Gets or sets the color of the style.
            </summary>
            <returns>The color of the style.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Interior">
            <summary>
            Gets the interior style of the cell.
            </summary>
            <returns>The interior style of the cell.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.IsModified">
            <summary>
            Gets a value indicating whether the current style has been modified.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.BeginUpdate">
            <summary>
            Begins the update process for the control.This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.EndUpdate">
            <summary>
            Ends the update process, making the control available for interaction.This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.SetFormatIndex(System.Int32)">
            <summary>
            Sets the format index for the current style converter.
            </summary>
            <param name="index">The index of the style to be copied from the style pool.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.SetConvert(Spire.Xls.Core.Converter.Spreadsheet.ExcelStyle.Style,System.Int32)">
            <summary>
            Sets the style converter with the provided ExcelStyle and assigns an index.
            </summary>
            <param name="convert">The ExcelStyle to convert.</param>
            <param name="index">The index to assign to the style converter.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Clone(System.Object)">
            <summary>
            Clones the current object and sets the parent object.
            </summary>
            <param name="parent">The parent object.</param>
            <returns>A new object that is a clone of the current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.WrappedFontAfterChangeEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the AfterChangeEvent event for the WrappedFont.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.WrappedInteriorAfterChangeEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the AfterChangeEvent event of the WrappedInterior control.
            Begins and ends the update process to prevent flickering.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.ChangeFillPattern">
            <summary>
            Changes the fill pattern of the current cell to solid if it is currently none or gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AddtionalFormatWrapper.Gradient">
            <summary>
            Gets or sets the gradient fill style for the cell.
            </summary>
            <value>
            The gradient fill style.
            </value>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotCalculatedFieldsCollection">
            <summary>
            Represents a collection of calculated fields used in a pivot table to perform calculations on data.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotCalculatedFieldsCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the PivotCalculatedFieldsCollection class with the specified parent.
            </summary>
            <param name="parent">The parent object to which the PivotCalculatedFieldsCollection belongs.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotCalculatedFieldsCollection.Parent">
            <summary>
            Gets the parent XlsPivotTable of the current object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotCalculatedFieldsCollection.Add(System.String,System.String)">
            <summary>
            Adds a calculated field to the pivot table with the specified name and formula.
            </summary>
            <param name="name">The name of the calculated field.</param>
            <param name="formula">The formula for the calculated field.</param>
            <returns>A new instance of the PivotField representing the added calculated field.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormatCollection">
            <summary>
            Represents a collection of conditional formats that can be applied to pivot table cells based on specific conditions.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormatCollection.AddPivotConditionalFormat">
            <summary>
            Add pivot table condition format.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormatCollection.AddPivotConditionalFormat(Spire.Xls.Core.IPivotField)">
            <summary>
            Add pivot field condition format.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormatCollection.AddPivotConditionalFormat(Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField)">
            <summary>
            Add pivot data field condition format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormatCollection.Item(System.Int32)">
            <summary>
            Gets the PivotConditionalFormat at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields">
            <summary>
            Represents a collection of data fields used in a pivot table to define the data that is summarized and displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Item(System.Int32)">
            <summary>
            Gets single entry from the collection. Read-only.
            </summary>
            <param name="index">Item's index to get from the collection.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Item(System.String)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Parent">
            <summary>
            Gets the parent XlsPivotTable of the current instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Add(Spire.Xls.Core.IPivotField,System.String,Spire.Xls.SubtotalTypes)">
            <summary>
            Adds new data field to the collection.
            </summary>
            <param name="iField">Parent field to use.</param>
            <param name="name">Name for the new data field.</param>
            <param name="subtotal">Subtotal function for the new data field.</param>
            <returns>Newly added data field.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Remove(Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField)">
            <summary>
            Removes the first occurrence of a specific object from the PivotDataField collection.
            </summary>
            <param name="item">The PivotDataField object to remove from the collection.</param>
            <returns>true if item was successfully removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the number of elements in the collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataFields.Clear">
            <summary>
            Clears the contents of the collection or object, resetting it to its initial state.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.AutoSortScope">
            <summary>
            Preserves the sorting elements of the field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.AutoSortScope.Parent">
            <summary>
            Gets the parent PivotField of the current instance.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormat">
            <summary>
            Represents a conditional format that can be applied to a pivot table in a spreadsheet application. This class allows you to define rules and styles that are applied to pivot table cells based on specific conditions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormat.scope">
            <summary>
            Specifies the scope of PivotTable conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormat.Item(System.Int32)">
            <summary>
            Gets the conditional format at the specified index.
            </summary>
            <param name="index">The zero-based index of the conditional format to get.</param>
            <returns>The conditional format at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotConditionalFormat.AddCondition">
            <summary>
            Adds a new conditional format condition to the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField">
            <summary>
            Represents a data field in a pivot table, which is used to perform aggregate calculations such as sum, average, count, etc.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.Name">
            <summary>
            Gets / sets name of the data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.CustomName">
            <summary>
            Gets/sets pivot field custom name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.Subtotal">
            <summary>
            Gets/ sets subtotal function used for data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.BaseItem">
            <summary>
            Gets or sets the base item.
            </summary>
            <value>The base item.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.BaseField">
            <summary>
            Gets or sets the base field.
            </summary>
            <value>The base field.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.ShowDataAs">
            <summary>
            Gets or sets the show data as.
            </summary>
            <value>The show data as.</value>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField.Clone(System.Object)">
            <summary>
            Creates and returns a copy of the specified object.
            </summary>
            <param name="parent">The object to be cloned.</param>
            <returns>A new object that is a copy of the specified object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem">
            <summary>
            Represents a item in a PivotField report.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the PivotItem class with the specified parent.
            </summary>
            <param name="parent">The parent object, which should be of type PivotItemsCollection.</param>
            <returns>
            An instance of the PivotItem class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.HasChildItems">
            <summary>
            Specifies a boolean value that indicates whether the approximate number of child items for this item is greater than zero.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsExpaned">
            <summary>
            Specifies a boolean value that indicates whether this item has been expanded in the PivotTable view.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.DrillAcross">
            <summary>
            Specifies a boolean value that indicates whether attribute hierarchies nested next to
            each other on a PivotTable row or column will offer drilling "across" each other or not
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsCalculatedItem">
            <summary>
            Specifies a boolean value that indicates whether this item is a calculated member
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsHidden">
            <summary>
            Specifies a boolean value that indicates whether the item is hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsMissing">
            <summary>
            Specifies a boolean value that indicate whether the item has a missing value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.UserCaption">
            <summary>
            Specifies the user caption of the item.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsChar">
            <summary>
            Specifies a boolean value that indicates whether the item has a character value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.IsHiddenDetails">
            <summary>
            Specifies a boolean value that indicates whether the details are hidden for this item.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotItem.ItemType">
            <summary>
            Specifies the type of the item. Value of 'default' indicates a grand total as the last row item value
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter">
            <summary>
            Represent the report filter of PivotTable
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.m_bIsMultipleSelect_temp">
            <summary>
            Indicated whether multiple select the filter field . use only for PivotReportFilter(string fieldName, bool isNew) 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.m_listFilterItemsStrings_temp">
            <summary>
            Represent the filter items string collection,the possible value must be from field values . use only for PivotReportFilter(string fieldName, bool isNew) 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.m_iFilterFieldIndex_temp">
            <summary>
            Represent the fld attribute of pagefield. use only for PivotReportFilter(string fieldName, bool isNew) 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.m_iItemIndex_temp">
            <summary>
            Represent the index of the pagefield's item attribute. use only for PivotReportFilter(string fieldName, bool isNew) 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.m_strFieldString_temp">
            <summary>
            Represent the page field string
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Creat an instance of reportfilter
            </summary>
            <param name="fieldName">The field name of this reportfilter</param>
            <param name="isNew">it is true if this reportfilter does not exist in the pivottable</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.#ctor(System.String,Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable)">
            <summary>
            Creat an instance of reportfilter
            </summary>
            <param name="fieldName">The field name of this reportfilter</param>
            <param name="pivotTable">pivottable</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.#ctor(Spire.Xls.PivotField,Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable)">
            <summary>
            Initializes a new instance of the PivotReportFilter class with the specified PivotField and XlsPivotTable.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.#ctor(System.Int32,Spire.Xls.PivotTable)">
            <summary>
            Initializes a new instance of the PivotReportFilter class with the specified index and pivot table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.#ctor(System.String)">
            <summary>
            Creat an instance of reportfilter
            </summary>
            <param name="fieldName">The field name of this reportfilter</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.IsMultipleSelect">
            <summary>
            Indicated whether multiple select the filter field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.FilterItemStrings">
            <summary>
            Represent the filter field string collection.When IsMultipleSelect is false,Only the first value of string array will be used.
            The possible value must be from field values
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.FieldString">
            <summary>
            Represent the page field string of pivottable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.FieldName">
            <summary>
            Represents the name of filter field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.FieldIndex">
            <summary>
            Represent the fld attribute of pagefield or the index of pivotfield.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter.ItemIndex">
            <summary>
            Represent the index of the pagefield's item attribute.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters">
            <summary>
            Represents a collection of filters used to refine the data in a pivot report.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the PivotReportFilters class with the specified parent.
            </summary>
            <param name="parent">The parent object from which the PivotReportFilters instance is created. Expected to be of type XlsPivotTable.</param>
            <returns>
            An instance of PivotReportFilters.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.Item(System.Int32)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="index">Item index to return.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.Item(System.String)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the size of the collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.Remove(Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter)">
            <summary>
            Removes the first occurrence of a specific object from the PivotReportFilter collection.
            </summary>
            <param name="item">The PivotReportFilter object to remove from the collection.</param>
            <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilters.Add(Spire.Xls.Core.Spreadsheet.PivotTables.PivotReportFilter)">
            <summary>
            Adds a PivotReportFilter item to the collection.
            </summary>
            <param name="item">The PivotReportFilter item to be added.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle">
            <summary>
            Represents the style and appearance settings for a pivot table
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle.#ctor(Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Initializes a new instance of the PivotStyle class with the specified workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle.Parent">
            <summary>
            Gets the parent PivotTableStyle of the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle.Font">
            <summary>
            Get or Set the Font of the Pivot Style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle.Borders">
            <summary>
             Get or Set Borders of the Pivot Style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotStyle.Fill">
            <summary>
            Get or Set the Fill of the Pivot Style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableOptions.IsAutoFormat">
            <summary>
            Indicates whether the PivotTable has an autoformat applied.
             Checkbox "autofit column width on update"which in pivot table Options :Layout Format for Excel 2007
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableOptions.ReportLayout">
            <summary>
            This property specifies layout settings of the pivot table  
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableOptions.RowLayout">
            <summary>
            This property specifies layout settings of the pivot table row 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle">
            <summary>
            Represents a style that can be applied to a pivot table in a spreadsheet application. This class encapsulates various styling properties that can be customized to enhance the visual presentation of pivot tables.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PivotTableStyle class with the specified name.
            </summary>
            <param name="name">The name of the pivot table style.</param>
            <returns>
            An instance of the PivotTableStyle class.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle.SetConverter(System.Object)">
            <summary>
            Sets the converter for table styles.
            </summary>
            <param name="converter">The converter object to be set. Must be of type Spire.Xls.Core.Converter.Tables.TableStyle.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided converter is not of type Spire.Xls.Core.Converter.Tables.TableStyle.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle.IsDefaultStyle">
            <summary>
            Gets or sets a value indicating whether the style is the default style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle.Styles">
            <summary>
            Represents a collection of styles associated with elements in a pivot table, where each key is a PivotTableElement and the corresponding value is the PivotStyle applied to that element.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache">
            <summary>
            Represents a pivot cache in an Excel workbook, which is used to store and manage the data for one or more PivotTables.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.Index">
            <summary>
            Gets zero-based cache index.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.SourceType">
            <summary>
            Data source is one of:
            1 - Excel worksheet,
            2 - external data,
            4 - consolidation,
            8 - scenario PivotTable.
             Specifies the pivot table cache source type.Read-only.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.SourceRange">
             <summary>
             Returns the data source for the PivotTable report. Read-only.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.Parent">
            <summary>
            Gets parent object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsUpgradeOnRefresh">
            <summary>
            Specifies a boolean value that indicates whether the cache is scheduled for version
            upgrade.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.RefreshedBy">
            <summary>
            Gets or sets the name or identifier of the user or process that last refreshed the data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsSupportSubQuery">
            <summary>
            Specifies whether the cache's data source supports subqueries
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsSaveData">
            <summary>
            Specifies a boolean value that indicates whether the pivot records are saved with the
            cache.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsOptimizedCache">
            <summary>
            Specifies a boolean value that indicates whether the application will apply optimizations
            to the cache to reduce memory usage
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.EnableRefresh">
            <summary>
            Specifies a boolean value that indicates whether the user can refresh the cache. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsBackgroundQuery">
            <summary>
            Specifies a boolean value that indicates whether the application should query and
               retrieve records asynchronously from the cache.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.CreatedVersion">
            <summary>
            Specifies the version of the application that created the cache. This attribute is
            application-dependent.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.CalculatedItemIndex">
            <summary>
            Gets the calculated index of the item. This property always returns 1.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.MinRefreshableVersion">
            <summary>
            Specifies the earliest version of the application that is required to refresh the cache. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.RefreshedVersion">
             <summary>
             Specifies the version of the application that last refreshed the cache. This attribute
            depends on whether the application exposes mechanisms via the user interface whereby
            the end-user can refresh the cache.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsInvalidData">
            <summary>
            Specifies a boolean value that indicates whether the cache needs to be refreshed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.SupportAdvancedDrill">
            <summary>
            Specifies whether the cache's data source supports attribute drilldown.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.IsRefreshOnLoad">
            <summary>
            Specifies a boolean value that indicates whether the application will refresh the cache
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.NeedDataArray">
            <summary>
            Indicates whether data array is required by this record.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.RefreshDate">
            <summary>
            Gets/sets refresh date of the cache.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.RangeName">
            <summary>
            Contains the name of the pivot cache NamedRange
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.HasNamedRange">
            <summary>
            Indicates whether the pivot cache has named range
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.InRange(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.Spreadsheet.XlsWorksheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates whether specified insert row/column operation affected pivot cache in some way.
            </summary>
            <param name="sourceRange"></param>
            <param name="worksheet"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="isRow"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.Clone(System.Object)">
            <summary>
            Creates a clone of the current object with a new parent for worksheets.
            </summary>
            <param name="parent">The new parent object for the cloned object.</param>
            <returns>A new object that is a clone of the current object with the specified parent and new worksheet names.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCache.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a clone of the current object with a new parent and a dictionary of new names for worksheets.
            </summary>
            <param name="parent">The new parent object for the cloned object.</param>
            <param name="hashNewNames">A dictionary containing new names for worksheets.</param>
            <returns>A new object that is a clone of the current object with the specified parent and new worksheet names.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField">
            <summary>
            Represents a field in a pivot cache, which is used in Excel to store and organize data for pivot tables.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.Formula">
            <summary>
            Specifies the formula for the calculated field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsDataBaseField">
            <summary>
            Specifies a boolean value that indicates whether this field came from the source
            database 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsDouble">
            <summary>
            Gets or sets a value indicating whether the cache field contains a double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsDoubleInt">
            <summary>
            Gets or sets a value indicating whether the cache field contains an integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsString">
            <summary>
            Gets or sets a value indicating whether the cache field contains an string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsDate">
            <summary>
            Gets a value indicating whether the cache field is set to handle only dates.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.ItemCount">
            <summary>
            Gets the count of items in the data collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.Index">
            <summary>
            Gets/sets item's index in the parent collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.DataType">
            <summary>
            Gets type of the data. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.IsFormulaField">
            <summary>
            Indicates the field is formula field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.Caption">
            <summary>
            Specifies the caption of the cache field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.isfieldgroup">
            <summary>
            Represents the cache field is Field group
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotCacheField.GetValue(System.Int32)">
            <summary>
            Returns value at index.
            </summary>
            <param name="index">Index of the value to get.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField">
            <summary>
            Represents a pivot field in an Excel pivot table, encapsulating the properties and behaviors of a field within a pivot table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the XlsPivotField class with the specified parent.
            </summary>
            <param name="parent">The parent object which should be of type PivotTableFields.</param>
            <returns>
            An instance of the XlsPivotField class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Parent">
            <summary>
            Gets the parent PivotTableFields object of the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Name">
            <summary>
            Returns pivot field name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CustomName">
            <summary>
            Gets/sets pivot field custom name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Axis">
            <summary>
            Gets/sets field axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.NumberFormat">
            <summary>
            Gets/sets number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Subtotals">
            <summary>
            Gets or sets type of field subtotals.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CanDragToRow">
            <summary>
            User can drag field to row area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CanDragToColumn">
            <summary>
            User can drag field to column area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CanDragToPage">
            <summary>
            User can drag field to page area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CanDragOff">
            <summary>
            User can remove field from view.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CanDragToData">
            <summary>
            True if the specified field can be dragged to the data position. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.DataField">
            <summary>
            Gets/sets value indicating whether this is data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsDataField">
            <summary>
            Gets/sets value indicating whether this is data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.NumberFormatIndex">
            <summary>
            Gets / sets number format index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.SubtotalCaption">
            <summary>
            Specifies the custom text that is displayed for the subtotals caption.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.SubtotalTop">
            <summary>
            Get or set whether show 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsAutoShow">
            <summary>
            Autoshow is enabled.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsDragToHide">
            <summary>
            User can remove field from fiew.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowNewItemsInFilter">
            <summary>
            Specifies a boolean value that indicates whether manual filter is in inclusive mode.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowNewItemsOnRefresh">
             <summary>
             Specifies a boolean value that indicates whether new items that appear after a refresh
            should be hidden by default.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowBlankRow">
            <summary>
            True if a blank row is inserted after the specified row field in a PivotTable report.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowPageBreak">
            <summary>
            True if a page break is inserted after each field. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ItemsPerPage">
            <summary>
            Specifies the number of items showed per page in the PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsMultiSelected">
             <summary>
             Specifies a boolean value that indicates whether the field can have multiple items
            selected in the page field.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsShowAllItems">
            <summary>
            Show all items for this field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowOutline">
             <summary>
             Specifies a boolean value that indicates whether the items in this field should be shown
            in Outline form.
            If the parameter is true, the field layout is "Show item labels in outline form".
            If the parameter is false, the field layout is "Show item labels in tabular form".
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowDropDown">
            <summary>
            True if the flag for the specified PivotTable field or PivotTable item is set to "drilled" (expanded, or visible).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowPropAsCaption">
             <summary>
             Specifies a boolean value that indicates whether to show the property as a member
            caption.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowToolTip">
            <summary>
            Specifies a boolean value that indicates whether to show the member property value in a
            tooltip on the appropriate PivotTable cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.SortType">
            <summary>
            Specifies the type of sort that is applied to this field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Caption">
             <summary>
             Specifies the unique name of the member property to be used as a caption for the field
            and field items.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Compact">
             <summary>
             Specifies a boolean value that indicates whether the application will display fields
            compactly in the sheet on which this PivotTable resides
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Formula">
            <summary>
            Specifies the formula for the calculated field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsFormulaField">
            <summary>
            Indicates whether this field is formula field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.RepeatItemLabels">
            <summary>
            True if the field repeat item labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.AutoSort">
            <summary>
            Preserves the sorting elements of the field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.ShowDataAs">
            <summary>
            Gets or sets the show data as.
            </summary>
            <value>The show data as.</value>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.AddItemOption(System.Int32)">
            <summary>
            Represents the index of item and itemoptions key pairs
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsHiddenItemDetail(System.Int32)">
            <summary>
            Indicates whether the specific PivotItem is hidden detail.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="index">the index of the pivotItem in the pivotField.</param>
            <returns>whether the specific PivotItem is hidden detail</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideItemDetail(System.Int32,System.Boolean)">
            <summary>
             Sets whether the specific PivotItem in a pivot field is hidden detail.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="index">the index of the pivotItem in the pivotField.</param>
            <param name="isHiddenDetail">whether the specific PivotItem is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideItemDetail(System.String,System.Boolean)">
            <summary>
             Sets whether the PivotItems in a pivot field is hidden detail.That is collapse/expand this field.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="itemValue">the value of the pivotItem in the pivotField.</param>
            <param name="isHiddenDetail">whether the specific PivotItem is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideDetail(System.Boolean)">
            <summary>
             Sets whether the PivotItems in a pivot field is hidden detail.That is collapse/expand this field.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="isHiddenDetail">whether DetailItems is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.IsHiddenItem(System.Int32)">
            <summary>
            Indicates whether the specific PivotItem is hidden.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="index">the index of the pivotItem in the pivotField.</param>
            <returns>whether the specific PivotItem is hidden</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideItem(System.Int32,System.Boolean)">
            <summary>
             Sets whether the specific PivotItem in a data field is hidden.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="index">the index of the pivotItem in the pivotField.</param>
            <param name="isHidden">whether the specific PivotItem is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideAllItem(System.Boolean)">
            <summary>
             Sets whether the all PivotItem in a data field is hidden.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="isHidden">whether the specific PivotItem is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.HideItem(System.String,System.Boolean)">
            <summary>
             Sets whether the specific PivotItem in a data field is hidden.
             Must call after pivottable CalculateData function.
            </summary>
            <param name="itemValue">the value of the pivotItem in the pivotField.</param>
            <param name="isHidden">whether the specific PivotItem is hidden</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Sort(System.Boolean,Spire.Xls.Core.Spreadsheet.PivotTables.PivotDataField)">
            <summary>
            Sort row fildes or col fields by data field.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CreateGroup(System.DateTime,System.DateTime,Spire.Xls.PivotGroupByTypes[])">
            <summary>
            Create group for current field.
            </summary>
            <param name="start">The start date time</param>
            <param name="end">The end date time</param>
            <param name="groupByArray">The array of group by types</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CreateGroup(System.DateTime,System.DateTime,Spire.Xls.PivotGroupByTypes[],System.Int32)">
            <summary>
            Create group for current field.
            </summary>
            <param name="start">The start date time</param>
            <param name="end">The end date time</param>
            <param name="groupByArray">The array of group by types</param>
            <param name="days">The days</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.CreateGroup(System.Double,System.Double,System.Double)">
            <summary>
            Create group for current field.
            </summary>
            <param name="startValue">The start number value</param>
            <param name="endValue">The end number value</param>
            <param name="intervalValue">The interval number value</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.AddLabelFilter(Spire.Xls.PivotLabelFilterType,System.Object,System.Object)">
            <summary>
            Add label filter for pivot field, only for row and column field.
            </summary>
            <param name="type">Filter type.</param>
            <param name="value1">First filter value.</param>
            <param name="value2">Second filter value, only for Between and NotBetween type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.AddValueFilter(Spire.Xls.PivotValueFilterType,Spire.Xls.Core.IPivotDataField,System.Object,System.Object)">
            <summary>
            Add value filter for pivot field, only for row and column field.
            </summary>
            <param name="type">Filter type.</param>
            <param name="dataField">Filter data field.</param>
            <param name="value1">First filter value.</param>
            <param name="value2">Second filter value, only for Between and NotBetween type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotField.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable">
            <summary>
            Represents a pivot table in an Excel worksheet, providing functionalities to manipulate and retrieve data from pivot tables.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.m_location">
            <summary>
            Table location.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.m_worksheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.m_AllSubTotalTop">
            <summary>
            Indicated whether diplay all subtotal at top of group
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.#ctor(System.Object,System.Int32,Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates collection and sets its Application and Parent values.
            </summary>
            <param name="parent">Parent object of this collection.</param>
            <param name="cacheIndex">Cache index.</param>
            <param name="location">Pivot table location.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Name">
            <summary>
            Gets pivot table name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PivotFields">
            <summary>
            Gets collection of pivot fields. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.DataFields">
            <summary>
            Gets collection of pivot table data fields. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.IsRowGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains row with grand totals for columns (same as RowGrand in VBA).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.IsColumnGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains column with grand totals for rows (same as ColumnGrand in VBA).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowDrillIndicators">
            <summary>
            The ShowDrillIndicators property is used for toggling the display of
            drill indicators in the PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.DisplayFieldCaptions">
            <summary>
            Gets/sets value controlling whether or not filter buttons and PivotField
            captions for rows and columns are displayed in the grid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.RepeatItemsOnEachPrintedPage">
            <summary>
            True if row, column, and item labels appear on the first row of each page when
            the specified PivotTable report is printed. False if labels are printed only on
            the first page. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.BuiltInStyle">
            <summary>
            Gets/sets built-in pivot style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowRowGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains grand totals for rows.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowColumnGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains grand totals for columns.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.CacheIndex">
            <summary>
            Gets Index of the pivot Cache.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.AutoFormatType">
            <summary>
             Gets/sets the auto format type of PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.IsCompatibleWithExcel2003">
            <summary>
             Gets/sets whether compatible with excel2003. The default value is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Location">
            <summary>
            Returns pivot table location.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Options">
            <summary>
            Represents the pivot table options.Read-only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.RowsPerPage">
            <summary>
            Specifies the number of rows per page for this PivotTable that the filter area will occupy.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ColumnsPerPage">
            <summary>
            Specifies the number of columns per page for this PivotTable that the filter area will occupy.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.CalculatedFields">
            <summary>
            Returns the collection of calculated fields of the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PageFields">
            <summary>
            Returns the collection of page field for the specified pivot table,Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.RowFields">
            <summary>
            Returns the collection of Row field for the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ColumnFields">
            <summary>
            Returns the collection of Column field for the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.GetPivotFields(Spire.Xls.AxisTypes)">
            <summary>
            Gets the collection of pivot fields based on pivot axis.
            </summary>
            <param name="pivotAxisTypes">axis type.</param>
            <returns>Pivot fields collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowSubtotals">
            <summary>
            Gets or sets a value indicating whether subtotals are shown for all fields in the pivot table.
            </summary>
            <value>
            Returns true if subtotals are shown for all fields; otherwise, false.
            </value>
            <returns>
            A boolean value representing the visibility of subtotals across all pivot fields.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Clear">
            <summary>
            This method clears all the fields, deletes all filtering and sorting applied to the PivotTable.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ClearPivotRange">
            <summary>
            Clear the data and the format of the pivot table
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ClearRowFieldFilter(System.String)">
            <summary>
            clear the row field filter.
            </summary>
            <param name="fieldName">the row field name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ClearColumnFieldFilter(System.String)">
            <summary>
            clear the column field filter.
            </summary>
            <param name="fieldName">the column field name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ClearFilter(System.String)">
            <summary>
            clear the row and column field filter depends on field name.
            </summary>
            <param name="fieldName">the row and column field name.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Parent">
            <summary>
            Gets the parent XlsPivotTablesCollection of the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.DisplayErrorString">
            <summary>
            True if the PivotTable report displays a custom error string in cells
            that contain errors. The default value is False.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.DisplayNullString">
            <summary>
            True if the PivotTable report displays a custom string in cells
            that contain null values. The default value is True. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.EnableDrilldown">
            <summary>
            True if drilldown is enabled. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.EnableFieldDialog">
            <summary>
            True if the PivotTable Field dialog box is available when the user
            double-clicks the PivotTable field. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.EnableWizard">
            <summary>
            True if the PivotTable Wizard is available.
            The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ErrorString">
            <summary>
            Returns or sets the string displayed in cells that contain errors
            when the DisplayErrorString property is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ManualUpdate">
            <summary>
            True if the PivotTable report is recalculated only at the user's request.
            The default value is False.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.MergeLabels">
            <summary>
            True if the specified PivotTable report outer-row item,
            column item, subtotal, and grand total labels use merged cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.NullString">
            <summary>
            Returns or sets the string displayed in cells that contain null
            values when the DisplayNullString property is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PageFieldOrder">
            <summary>
            Returns or sets the order in which page fields are added to the PivotTable report layout.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PageFieldStyle">
            <summary>
            Returns or sets the style used in the bound page field area.
            The default value is a null string (no style is applied by default).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PageFieldWrapCount">
            <summary>
            Returns or sets the number of page fields in each column
            or row in the PivotTable report.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PivotPageFields">
            <summary>
            Returns the collection of Pivot Page field for the specified pivot table.
            </summary>
            <value>The pivot page fields.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Cache">
            <summary>
            Returns cache used by this pivot table. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.InternalFields">
            <summary>
            Returns collection of pivot fields. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.PivotConditionalFormats">
            <summary>
            Returns collection of pivot conditional format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Workbook">
            <summary>
            Gets parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Worksheet">
            <summary>
            Gets the worksheet associated with the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.FirstDataCol">
             <summary>
             Specifies the first column of the PivotTable data, relative to the top left cell in the ref
            value
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.FirstDataRow">
             <summary>
             Specifies the first column of the PivotTable data, relative to the top left cell in the ref
            value
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.FirstHeaderRow">
             <summary>
             Specifies the first row of the PivotTable header, relative to the top left cell in the ref
            value.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowColHeaderStyle">
            <summary>
            Specifies a boolean value that indicates whether to show column headers for the table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowColStripes">
             <summary>
             Specifies a boolean value that indicates whether to show column stripe formatting for
            the table.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowLastCol">
            <summary>
            Specifies a boolean value that indicates whether to show the last column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowRowHeaderStyle">
            <summary>
            Specifies a boolean value that indicates whether to show row headers for the table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowRowStripes">
             <summary>
             Specifies a boolean value that indicates whether to show row stripe formatting for the
            table.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ShowDataFieldInRow">
            <summary>
            Represents the pivot table to add the Calculated 
            Data field in rows
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ReportFilters">
            <summary>
            Gets or sets report filter collection
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.AllSubTotalTop">
            <summary>
            Indicated whether diplay all subtotal at top of group,
            Change will cover every field's setting
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.CustomTableStyleName">
            <summary>
            Gets or sets the name of the custom table style for the pivot table.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ApplyStyleToRange(Spire.Xls.Core.IXLSRange,Spire.Xls.CellStyle)">
            <summary>
            Apply style to range in pivot table.
            </summary>
            <param name="cellRange">Range in pivot table.</param>
            <param name="style">Style that apply to range.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.CalculateData">
            <summary>
            Calculates pivottable's data to cells.
            </summary>
            <remarks>
            Use define data in A model,Calculate Data By B model
            then copy calculated value to cell
            </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.ChangeDataSource(Spire.Xls.Core.IXLSRange)">
            <summary>
            Change the data source of pivotTable.
            </summary>
            <param name="dataSource">New data source range.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Clone(System.Object)">
            <summary>
            Creates a clone of the specified parent object using the default cache index and no additional parameters.
            </summary>
            <param name="parent">The object to be cloned.</param>
            <returns>A new object that is a clone of the specified parent object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.PivotTables.XlsPivotTable.Clone(System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a clone of the specified object with additional parameters for caching and worksheet name mapping.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ISparkline">
            <summary>
            Defines the contract for a sparkline, which is a small embedded chart typically used to display trends over a small number of data points.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparkline.DataRange">
            <summary>
            Represents the data range of the sparkline.
            </summary>
            <value>The data range.</value>
            <exception cref="!:ArgumentOutOfRange">
            if the value.Rows.Length is not equal to 1.
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparkline.RefRange">
            <summary>
            Represents the reference range of the sparkline.
            </summary>
            <value>The reference range.</value>
            <exception cref="!:ArgumentOutOfRange">
            if the value.Rows.length and value.Columns.Length is not equal to 1;
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparkline.Column">
            <summary>
            Gets the column index of a sparkline.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparkline.Row">
            <summary>
            Gets the row index of a sparkline.
            </summary>
            <value>The row index.</value>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ISparklineGroup">
            <summary>
            Represents a group of sparklines, providing functionality to manage a collection of sparkline objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowHorizontalAxis">
            <summary>
            Indicates whether to show the sparkline horizontal axis. The horizontal axis appears if the sparkline has data that crosses the zero axis.
            </summary>
            <value><c>true</c> if [display axis]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.IsDisplayHidden">
            <summary>
            Indicates whether to show data in hidden rows and columns.
            </summary>
            <value><c>true</c> if [display hidden RC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.PlotRightToLeft">
            <summary>
            Indicates whether the plot data is right to left. 
            </summary>
            <value><c>true</c> if [plot right to left]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowFirstPoint">
            <summary>
            Indicates whether to highlight the first point of data in the sparkline group. 
            </summary>
            <value><c>true</c> if [show first point]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowLastPoint">
            <summary>
            Indicates whether to highlight the last point of data in the sparkline group. 
            </summary>
            <value><c>true</c> if [show last point]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowLowPoint">
            <summary>
            Indicates whether to highlight the lowest points of data in the sparkline group.
            </summary>
            <value><c>true</c> if [show low point]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowHighPoint">
            <summary>
            Indicates whether to highlight the highest points of data in the sparkline group. 
            </summary>
            <value><c>true</c> if [show high point]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowNegativePoint">
            <summary>
            Indicates whether to highlight the negative values on the sparkline group with a different color or marker.
            </summary>
            <value><c>true</c> if [show negative point]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.ShowMarkers">
            <summary>
            Indicates whether to highlight each point in each line sparkline in the sparkline group.  
            </summary>
            <value><c>true</c> if [show markers]; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotSupportedException">If Sparklinetype is not equal to Line</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.SparklineType">
            <summary>
            Indicates the sparkline type of the sparkline group.
            </summary>
            <value>The SparklineType property gets/sets the m_sparklineType member.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.IsHorizontalDateAxis">
            <summary>
            The HorizontalDateAxis property represents the horizontal axis type as Dateaxis.
            </summary>
            <value><c>true</c> if [horizontal date axis]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.EmptyCellsType">
            <summary>
            Indicates how to display empty cells.
            </summary>
            <value>The DisplayEmptyCellsAs property gets/sets the m_displayEmptyCellsAs data member.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.HorizontalDateAxisRange">
            <summary>
            Represents the range that contains the date values for the sparkline data.
            </summary>
            <value>The HorizontalDateAxisRange property gets/sets the m_horizontalDateAxisRange data member.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.HorizontalAxisColor">
            <summary>
            Gets and sets the color of the horizontal axis in the sparkline group.
            </summary>
            <value>The color of the axis.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.FirstPointColor">
            <summary>
            Gets and sets the color of the first point of data in the sparkline group. 
            </summary>
            <value>The first color of the point.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.HighPointColor">
            <summary>
            Gets and sets the color of the highest points of data in the sparkline group. 
            </summary>
            <value>The color of the high point.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.LastPointColor">
            <summary>
            Gets and sets the color of the last point of data in the sparkline group.
            </summary>
            <value>The last color of the point.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.LineWeight">
            <summary>
            Gets and sets the line weight in each line sparkline in the sparkline group, in the unit of points. 
            </summary>
            <value>The line weight value should be between 0 and 1584.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">if the value is not between 0 and 1584</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.LowPointColor">
            <summary>
            Gets and sets the color of the lowest points of data in the sparkline group.
            </summary>
            <value>The color of the low point.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.MarkersColor">
            <summary>
            Gets and sets the color of points in each line sparkline in the sparkline group.
            </summary>
            <value>The color of the markers.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.NegativePointColor">
            <summary>
            Gets and sets the color of the negative values on the sparkline group.
            </summary> {get; set; }
            <value>The color of the negative point.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ISparklineGroup.SparklineColor">
            <summary>
            Gets and sets the color of the sparklines in the sparkline group. 
            </summary>
            <value>The color of the sparkline.</value>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklineGroup.Add">
            <summary>
            Adds a new Sparkline to the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ISparklines">
            <summary>
            Represents a collection of sparklines, implementing the IList interface to manage a list of ISparkline objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.Add">
            <summary>
            Adds Sparkline instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.Add(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.RefreshRanges(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.Add(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.RefreshRanges(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ISparklines.Clear(Spire.Xls.Sparkline)">
            <summary>
            Clears the sparkline.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.TemplateMarkers.DataMarkerDirection">
            <summary>
            Possible directions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.TemplateMarkers.DataMarkerDirection.Vertical">
            <summary>
            Vertical direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.TemplateMarkers.DataMarkerDirection.Horizontal">
            <summary>
            Horizontal direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.TemplateMarkers.DataMarkerDirection.HorizontalToLeft">
            <summary>
            Horizontal direction right to left.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.TemplateMarkers.DataMarkerDirection.VerticalToTop">
            <summary>
            Vertical direction bottom to top.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Spire.Xls.Core.Spreadsheet.TemplateMarkers.XlsTemplateMarkers.IsDataView(System.Object)" -->
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsFill">
             <summary>
             Summary description for XlsFill.
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_color">
            <summary>
            Represents the color associated with this object, initialized to a default OColor.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_patternColor">
            <summary>
            Represents the color pattern used in the object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_pattern">
             <summary>
             Represents the Patterns style type.
             </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_gradientStyle">
            <summary>
            Gradient XlsFill style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_gradientVariant">
            <summary>
            Gradient XlsFill variant.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsFill.m_fillType">
            <summary>
            Gradient XlsFill type.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.#ctor">
             <summary>
             Prevents user from creating such items without arguments.
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.#ctor(Spire.Xls.Core.Spreadsheet.XlsExtendedFormat)">
             <summary>
             Initilizes new instance of the XlsFill.
             </summary>
             <param name="format">Parent extended format.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.#ctor(Spire.Xls.ExcelPatternType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes new instance of the XlsFill.
            </summary>
            <param name="pattern"></param>
            <param name="color"></param>
            <param name="patternColor"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.#ctor(Spire.Xls.ExcelPatternType,Spire.Xls.OColor,Spire.Xls.OColor)">
            <summary>
            Initializes new instance of the XlsFill.
            </summary>
            <param name="pattern">Represents pattern.</param>
            <param name="color">Represents color.</param>
            <param name="patternColor">Represents pattern color.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.OColor">
             <summary>
             Returns the color of the interior. The color is specified as
             an index value into the current color palette. Read-only.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.PatternColorObject">
             <summary>
             Returns the color of the interior pattern as an index into the current
             color palette. Read-only.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.Pattern">
             <summary>
             Returns XlsFill pattern. Read-only.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.GradientStyle">
            <summary>
            Gets / sets gradient style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.GradientVariant">
            <summary>
            Gets / sets gradient variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFill.FillType">
            <summary>
            Gets or sets XlsFill type.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.Equals(System.Object)">
             <summary>
             Determines whether the specified Object is equal to the current Object.
             </summary>
             <param name="obj">The Object to compare with the current Object.</param>
             <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.GetHashCode">
             <summary>
             Serves as a hash function for a particular type, suitable for use
             in hashing algorithms and data structures like a hash table.
             </summary>
             <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFill.Clone">
            <summary>
            Creates copy of the current object.
            </summary>
            <returns>A copy of the current object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Ole.DVAspect">
            <summary>
            Represents the OleObject Display Behaviour.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Ole.DVAspect.DVASPECT_CONTENT">
            <summary>
            Returns the OleObject Display as Content.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Ole.DVAspect.DVASPECT_ICON">
            <summary>
            Returns the OleObject Display as Icon.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.OleData">
            <summary>
            Gets or sets the file native data.
            </summary>
            <value>The file native data.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.DisplayAsIcon">
            <summary>
            Gets or sets a value indicating whether [display as icon].
            </summary>
            <value><c>true</c> if [display as icon]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.Shape">
            <summary>
            Gets shape associated with this ole object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.Picture">
            <summary>
            Gets or sets the picture.
            </summary>
            <value>The picture.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.ContentType">
            <summary>
            Gets or sets xlsx content type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.DvAspect">
            <summary>
            Gets or sets the dv aspect.
            </summary>
            <value>The dv aspect.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.OleSheet">
            <summary>
            Gets or sets the index of the OLE sheet.
            </summary>
            <value>The index of the OLE sheet.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Ole.OleObject.OleType">
            <summary>
            Gets or sets the type of the OLE.
            </summary>
            <value>The type of the OLE.</value>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Ole.OleObject.ToOleString(Spire.Xls.OleObjectType)">
            <summary>
            Converts the string to "OleObjectType"
            </summary>
            <param name="oleType">The OLE type.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RichTextShape">
            <summary>
            Represents a shape that can contain rich text content.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the RichTextShape class.
            </summary>
            <param name="parent">The parent object of the RichTextShape.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.Text">
            <summary>
            Gets or sets the text content of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.RtfText">
            <summary>
            Gets the RTF text content.
            </summary>
            <returns>The RTF text content.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.IsFormatted">
            <summary>
            Gets a value indicating whether the shape is formatted with rich text.
            </summary>
            <returns>
            true if the shape is formatted with rich text; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.Parent">
            <summary>
            Gets the parent object of the current instance.
            </summary>
            <returns>The parent object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.GetFont(System.Int32)">
            <summary>
            Retrieves the font at the specified index.
            </summary>
            <param name="index">The index of the font to retrieve.</param>
            <returns>The font at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is out of range.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets the font for a range of text in a shape's text object.
            Validates the input parameters, checks for existing font settings, and updates the font settings accordingly.
            </summary>
            <param name="startIndex">The starting index of the text range.</param>
            <param name="endIndex">The ending index of the text range.</param>
            <param name="font">The font to apply to the specified text range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the startIndex is greater than or equal to the text length, or when startIndex is greater than endIndex.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.GetPreviousPosition(System.Int32,System.Collections.SortedList)">
            <summary>
            Retrieves the previous position in a sorted list of formatting runs based on a given position.
            </summary>
            <param name="iPos">The position to find the previous formatting run for.</param>
            <param name="m_arrFormattingRuns">The sorted list of formatting runs.</param>
            <returns>The position of the previous formatting run, or -1 if no such run exists.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.RemoveAllInsideRange(System.Int32,System.Int32,System.Collections.SortedList)">
            <summary>
            Removes all formatting runs within a specified range from a SortedList.
            </summary>
            <param name="iStartPos">The starting position of the range. If -1, the range starts from the first element.</param>
            <param name="iEndPos">The ending position of the range. If -1, the range ends at the last element.</param>
            <param name="m_arrFormattingRuns">The SortedList containing the formatting runs to be removed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.ClearFormatting">
            <summary>
            Clears the formatting of the characters in the shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.Clear">
            <summary>
            Clears the text in the shape converter.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends text to the shape's text and sets the font for the appended text.
            </summary>
            <param name="text">The text to append.</param>
            <param name="font">The font to apply to the appended text.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.BeginUpdate">
            <summary>
            Begins the update process for a control or container.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.EndUpdate">
            <summary>
            Ends the update process of the control, applying any changes made during the update.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.GenerateRtfText">
            <summary>
            Generates RTF text based on the current state of the text object.
            </summary>
            <returns>The generated RTF text as a string.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.WriteText(Spire.Xls.Core.Spreadsheet.RtfTextWriter,Spire.Xls.Core.IFont,System.String)">
            <summary>
            Writes the specified text to the RTF document using the specified font.
            </summary>
            <param name="writer">The RtfTextWriter to write to.</param>
            <param name="iFontIndex">The font index to use for the text.</param>
            <param name="strText">The text to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.WriteFormattingRun(Spire.Xls.Core.Spreadsheet.RtfTextWriter,System.Int32,System.Int32)">
            <summary>
            Writes a formatting run to the RtfTextWriter.
            </summary>
            <param name="writer">The RtfTextWriter to write to.</param>
            <param name="iRunIndex">The index of the formatting run to write.</param>
            <param name="iStartPos">The starting position of the text to write.</param>
            <returns>The end position of the text that was written.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.AddFonts(Spire.Xls.Core.Spreadsheet.RtfTextWriter)">
            <summary>
            Adds fonts to the RTF writer.
            </summary>
            <param name="writer">The RTF writer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the writer is null.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.AddFont(Spire.Xls.Core.Spreadsheet.XlsFont,Spire.Xls.Core.Spreadsheet.RtfTextWriter)">
            <summary>
            Adds a font to the RtfTextWriter.
            </summary>
            <param name="fontToAdd">The font to add.</param>
            <param name="writer">The RtfTextWriter to add the font to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if fontToAdd or writer is null.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.DefaultFont">
            <summary>
            Gets or sets the default font for the workbook.
            </summary>
            <value>The default font.</value>
            <returns>The default font for the workbook.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.DefaultFontIndex">
            <summary>
            Gets or sets the default font index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.FormattingRuns">
            <summary>
            Retrieves a sorted list of font formatting runs for the shape's text.
            </summary>
            <returns>A SortedList containing the start index and font for each formatting run.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextShape.FormattingRunsCount">
            <summary>
            Gets the count of formatting runs.
            </summary>
            <returns>The number of formatting runs.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there are no formatting runs.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.GetSpace(System.Int32)">
            <summary>
            Retrieves the spacing between characters for a specific formatting run.
            </summary>
            <param name="FormattingRunsIndex">The index of the formatting run.</param>
            <returns>The character spacing for the specified formatting run.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there are no formatting runs available.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextShape.SetSpace(System.Int32,System.Int32)">
            <summary>
            Sets the space value for a specific formatting run.
            </summary>
            <param name="FormattingRunsIndex">The index of the formatting run to modify.</param>
            <param name="SpaceValue">The new space value to set.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RTFCommentArray">
            <summary>
            Represents an array of RTF comments in an Excel document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RTFCommentArray.m_range">
            <summary>
            Parent range.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.#ctor(System.Object)" -->
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.GetFont(System.Int32)">
            <summary>
            Returns font for character at specified position.
            </summary>
            <param name="iPosition">Position of the symbol.</param>
            <returns>
            Font for character at specified position if it is equal for all
            cells in the parent range, otherwise NULL is returned.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets font for specified range of characters.
            </summary>
            <param name="iStartPos">First character to set font.</param>
            <param name="iEndPos">Last character to set.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.ClearFormatting">
            <summary>
            Clears formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends rich text string with specified text and font.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.Clear">
            <summary>
            Clears text and formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFCommentArray.Text">
            <summary>
            Gets or sets the text of the comments for the cells in the range.
            </summary>
            <returns>The text of the comments if all comments are the same; otherwise, null.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFCommentArray.RtfText">
            <summary>
            Gets the RTF text of the comments in the range if they are consistent.
            </summary>
            <returns>The RTF text of the comments if they are consistent, otherwise null.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFCommentArray.IsFormatted">
            <summary>
            Indicates whether rich text string has formatting runs. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.BeginUpdate">
            <summary>
            Begins the update process, preventing the control from redrawing until the EndUpdate method is called.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFCommentArray.EndUpdate">
            <summary>
            Ends the update process for the control.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Security.EncryptedKeyInfo">
            <summary>
            Represents the attributes used to generate the encrypting key.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Security.SecurityHelper.EncryptionInfoStream">
            <summary>
            Name of encryption info stream.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.CellBaseStyle">
            <summary>
            Represents the base style for the cell.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CellBaseStyle.#ctor(Spire.Xls.Core.Spreadsheet.XlsRange)">
            <summary>
            Initializes a new instance of the CellBaseStyle class with the specified XlsRange.
            </summary>
            <param name="range">The XlsRange associated with the cell style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CellBaseStyle.BeginUpdate">
            <summary>
            Begins the update process.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CellBaseStyle.EndUpdate">
            <summary>
            Ends the update process for the range and applies the style changes.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Tables.ListObjectCollection">
            <summary>
            Represents a collection of ListObject objects, providing methods to manage and manipulate a list of ListObject items.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Tables.ListObjectCollection.Create(System.String,Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates new list object and adds it to the collection.
            </summary>
            <param name="name">Name of the new list object.</param>
            <param name="range">Destination range.</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectCollection.Item(System.String)">
            <summary>
            Gets the IListObject by its name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObject.DisplayHeaderRow">
            <summary>
            Indicates whether show header row.
            </summary>   
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectColumn.Name">
            <summary>
            Gets or sets name of the column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectColumn.Index">
            <summary>
            Gets column index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectColumn.TotalsCalculation">
            <summary>
            Gets or sets function used for totals calculation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectColumn.TotalsRowLabel">
            <summary>
            Gets or sets label of the totals row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Tables.ListObjectColumn.CalculatedFormula">
            <summary>
            Gets or sets calculated formula value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Black">
            <summary>
            Contains black color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.White">
            <summary>
            Contains white color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Empty">
            <summary>
            Contains empty color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Red">
            <summary>
            Contains red color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Blue">
            <summary>
            Contains blue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.DarkGray">
            <summary>
            Contains dark gray color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Yellow">
            <summary>
            Contains yellow color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Cyan">
            <summary>
            Contains cyan color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Magenta">
            <summary>
            Contains magenta color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.Gray">
            <summary>
            Contains gray color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.ChartForeground">
            <summary>
            Chart foreground color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.ChartBackground">
            <summary>
            Chart background color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.ChartNeutral">
            <summary>
            Chart neutral color.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a r g b value into Color.
            </summary>
            <param name="alpha">Color alpha to convert.</param>
            <param name="red">Color red to convert.</param>
            <param name="green">Color green to convert.</param>
            <param name="blue">Color blue to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Drawing.ColorExtension.FromArgb(System.Int32)">
            <summary>
            Converts Int32 value into Color.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.CommonWrapper">
            <summary>
            Represents a common wrapper class .
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.CommonWrapper.m_iBeginCount">
            <summary>
            Number of begin update calls that have no corresponding end update.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.CommonWrapper.BeginCallsCount">
            <summary>
            Returns number of begin update calls that have no corresponding end update. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CommonWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CommonWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.CommonWrapper.Clone(System.Object)">
            <summary>
            Creates a copy of the current object.
            </summary>
            <param name="parent">Parent object for the new object.</param>
            <returns>A copy of the current object.</returns>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ExcelConstants.DoubleSize">
            <summary>
            Size of the Double value in bytes.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.FontArrayWrapper">
            <summary>
            Class that is created when user accesses the
            font in a multicell range. Redirects all calls 
            to the fonts of the individual cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.m_arrCells">
            <summary>
            Array that contains all cells of the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="range">Base range.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsItalic">
            <summary>
            True if the font is bold. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the 
            table. Use the RGB function to create a color value. 
            Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.Color">
            <summary>
            Gets / sets font color. If there is at least one free color, 
            define a new color. If not, search for the closest one in 
            workbook palette.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsBold">
            <summary>
            True if the font style is italic. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.Size">
            <summary>
            Returns or sets the size of the font. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line. 
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.StrikethroughType">
            <summary>
            Gets or sets the strikethrough type for all cells in the collection.
            </summary>
            <value>
            The strikethrough type.
            </value>
            <returns>
            The strikethrough type for all cells in the collection, or an empty string if the strikethrough types are inconsistent.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsSubscript">
            <summary>
            True if the font is formatted as subscript. 
            False by default. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsSuperscript">
            <summary>
            True if the font is formatted as superscript; False by default. 
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.Underline">
            <summary>
            Returns or sets the type of underline applied to the font. Can 
            be one of the following FontUnderlineTypeStyle constants. 
            Read/write FontUnderlineType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.FontName">
            <summary>
            Returns or sets the font name. Read/write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.VerticalAlignment">
            <summary>
            Gets / sets font vertical alignment.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.IsAutoColor">
            <summary>
            Indicates whether color is automatically selected. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontArrayWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.FontWrapper">
            <summary>
            Represents a wrapper class for handling font properties .
            This class inherits from CommonWrapper and implements interfaces for font functionality.
            It provides a structured way to manage font attributes such as font name, size, style, and color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontWrapper.m_font">
            <summary>
            Wrapped font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontWrapper.m_bReadOnly">
            <summary>
            Indicates whether font is read-only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontWrapper.m_bRaiseEvents">
            <summary>
            Incicates whether raise events.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontWrapper.m_bDirectAccess">
            <summary>
            Indicates whether wrapped font is accessed directly (without creating
            new font in OnBeforeChange, OnAfterChange methods).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.FontWrapper.m_fontColor">
            <summary>
            Font color object
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.#ctor">
            <summary>
            Creates new font wrapper.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.#ctor(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Creates new font wrapper.
            </summary>
            <param name="font">Font to wrap.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.#ctor(Spire.Xls.Core.Spreadsheet.XlsFont,System.Boolean,System.Boolean)">
            <summary>
            Creates new font wrapper.
            </summary>
            <param name="font">Font to wrap.</param>
            <param name="bReadOnly">Indicates whether wrapper should be read-only.</param>
            <param name="bRaiseEvents">
            Indicates whether to call OnBeforeChange and OnAfterChange when any property changes.
            </param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Parent">
            <summary>
            Gets the parent object of the font.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.BeginUpdate">
            <summary>
            Begins the update process for the control.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.EndUpdate">
            <summary>
            Ends the update process and raises the AfterChangeEvent event.
            </summary>
        </member>
        <member name="E:Spire.Xls.Core.Spreadsheet.FontWrapper.AfterChangeEvent">
            <summary>
            Event raised after wrapped font changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsBold">
            <summary>
            True if the font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.KnownColor">
            <summary>
            Returns or sets the primary excel color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Color">
            <summary>
            Returns or sets the primary color of the font.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the foreground theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the foreground theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the forground color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.MacOSOutlineFont">
            <summary>
            True if the font is an outline font. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.MacOSShadow">
            <summary>
            True if the font is a shadow font or if the object has
            a shadow. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Size">
            <summary>
            Returns or sets the size of the font. Read / write integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.StrikethroughType">
            <summary>
            Gets or sets the strikethrough type of the font.
            </summary>
            <value>
            The strikethrough type.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Underline">
            <summary>
            Returns or sets the type of underline applied to the font. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.VerticalAlignment">
            <summary>
            Gets / sets font vertical alignment.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsAutoColor">
            <summary>
            Indicates whether color is automatically selected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Index">
            <summary>
            Returns index of the font. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Font">
            <summary>
            Returns internal font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.FontIndex">
            <summary>
            Gets the index of the font.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.InvokeAfterChange">
            <summary>
            Invokes after change event.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.IsReadOnly">
            <summary>
            Indicates whether font is read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.FontWrapper.Workbook">
            <summary>
            Returns workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.ColorObjectUpdate">
            <summary>
            Updates the color of the object by copying the font color to the object's color.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.FontWrapper.Clone(Spire.Xls.Core.Spreadsheet.XlsWorkbook,System.Object,System.Collections.IDictionary)">
            <summary>
            Clones the current FontWrapper object.
            </summary>
            <param name="book">The XlsWorkbook object that contains the cloned FontWrapper.</param>
            <param name="parent">The parent object of the cloned FontWrapper.</param>
            <param name="dicFontIndexes">A dictionary containing font indexes.</param>
            <returns>A new FontWrapper object that is a clone of the current object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper">
            <summary>
            Summary description for GradientArrayWrapper.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.m_arrCells">
            <summary>
            Array that contains all cells of the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="range">Base range.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.BackColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.ForeColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.GradientVariant">
            <summary>
            Represents gradient shading variant.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.CompareTo(Spire.Xls.Core.IGradient)">
            <summary>
            Compares with shape XlsFill impl.
            </summary>
            <param name="gradient">Gradient to compare with.</param>
            <returns>Zero if shape fills are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.TwoColorGradient">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.GradientArrayWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.HTMLOptions">
            <summary>
            Represents options for HTML rendering.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.Default">
            <summary>
            Provides a default instance of the HTMLOptions class.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.HTMLOptions.GetText">
            <summary>
            Represents the type input text mode.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.GetText.NumberText">
            <summary>
            Represents a text that is related to a number.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.GetText.Value">
            <summary>
            Represents a text that is related to a value.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImageLocationTypes">
            <summary>
            Enum representing different types of image location.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImageLocationTypes.GlobalAbsolute">
            <summary>
            Represents a global absolute value or position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImageLocationTypes.TableRelative">
            <summary>
            Represents a relative position within a table.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.HTMLOptions.StyleDefineType">
            <summary>
            Represents different types of style definitions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.StyleDefineType.Head">
            <summary>
            Head
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.HTMLOptions.StyleDefineType.Inline">
            <summary>
            Inline
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.HTMLOptions.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Spreadsheet.HTMLOptions"/> class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.HTMLOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Spreadsheet.HTMLOptions"/> class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.TextMode">
            <summary>
            Gets or sets the input text mode
            </summary>
            <remarks>Useful to convert sheet data based on either DisplayText or Value</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImageLocationType">
            <summary>
            Gets or sets the Image Location type.
            GlobalAbsolute or Relative to Table
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.ImageEmbedded">
            <summary>
            If false,indicates exporting the image as a single file; 
            If true, embedding the image into the html code using Data URI scheme.
            The default value is false.
            Note: Internet Explorer 8 limits data URIs to a maximum length of 32KB.
            </summary>
            <value>The value of the HTML export image style sheet.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.StyleDefine">
            <summary>
            where is the style defined; default : head
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.IsFixedTableColWidth">
            <summary>
            Gets or sets whether the width of td is fixed :
            If true, the width of td is fixed, same as width of column in excel view.
            If false, the width of td is not fixed.
            Default is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.IsStandAloneHtmlFile">
            <summary>
            Gets or sets a value indicating whether the file is a standalone HTML file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.HTMLOptions.IsSaveBlankCell">
            <summary>
            Gets or sets whether save blank cell to html.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper">
            <summary>
            Class that is created when user accesses the interior in a multicell range.
            Redirects all calls to the interiors of the individual cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.m_arrCells">
            <summary>
            Array that contains all cells of the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="range">Base range.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.PatternKnownColor">
            <summary>
            Returns or sets the color of the interior pattern as an index into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.PatternColor">
            <summary>
            Returns or sets the color of the interior pattern as an System.Drawing.Color value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.KnownColor">
            <summary>
            Returns or sets the color of the interior. The color is specified as
            an index value into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.Color">
            <summary>
            Returns or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.Gradient">
            <summary>
            Returns gradient object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.FillPattern">
            <summary>
            Gets / Sets XlsFill pattern.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.InteriorArrayWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RangeRichTextString">
            <summary>
            Represents a rich text string with range-based formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RangeRichTextString.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RangeRichTextString class.
            </summary>
            <param name="parent">XlsWorksheet.</param>
            <param name="row">The row index of the range rich text string.</param>
            <param name="column">The column index of the range rich text string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RangeRichTextString.Dispose">
            <summary>
            Suppresses finalization for the current object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RangeRichTextString.Index">
            <summary>
            Gets the index of the string in the shared string table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RangeRichTextString.DefaultFont">
            <summary>
            Gets the default font for the cell at the specified row and column.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RichTextString">
            <summary>
            Represents a string that supports rich text formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextString.Parent">
            <summary>
            Returns parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.GetFont(System.Int32)">
            <summary>
            Returns font which is applied to character at the specified position.
            </summary>
            <param name="index">Character index.</param>
            <returns>Font which is applied to character at the specified position.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets font for range of characters.
            </summary>
            <param name="startIndex">First character of the range.</param>
            <param name="endIndex">Last character of the range.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.ClearFormatting">
            <summary>
            Clears string formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.Clear">
            <summary>
            Clears text and formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends rich text string with specified text and font.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextString.Text">
            <summary>
            Gets / sets text of the string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextString.RtfText">
            <summary>
            Returns text in rtf format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextString.IsFormatted">
            <summary>
            Indicates whether rich text string has formatting runs. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.AddFont(Spire.Xls.Core.IFont)">
            <summary>
            Adds a font to the worksheet.
            </summary>
            <param name="font">The font to add.</param>
            <returns>The index of the added font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RichTextString.SetRichTextFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets the font for a specified range of text in a rich text string.
            </summary>
            <param name="iStartPos">The starting position of the range to apply the font.</param>
            <param name="iEndPos">The ending position of the range to apply the font.</param>
            <param name="font">The font to apply to the specified range.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RichTextString.DefaultFont">
            <summary>
            Gets or sets the default font for the workbook.
            </summary>
            <value>The default font.</value>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RtfTextWriter">
            <summary>
            Rtf text writer used for converting rtf string into rtf format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.StrikeThroughTags">
            <summary>
            Strike through tags.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.DEF_TAGS">
            <summary>
            Other tags.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.m_arrColors">
            <summary>
            Array list with all used colors.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.m_hashFonts">
            <summary>
            Fonts hashtable. Font - to - font index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.m_hashColorTable">
            <summary>
            Colors hashtable. Color - to - color index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.m_bEnableFormatting">
            <summary>
            Indicates whether formatting is enabled.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTextWriter.m_innerWriter">
            TODO: maybe it's better to create two inner writers first for header, second for body.
            <summary>
            Inner text writer.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.Core.Spreadsheet.RtfTextWriter"/> class with a default <see cref="T:System.IO.StringWriter"/> and sets the owner flag to true.
            </summary>
            <returns>
            An instance of <see cref="T:Spire.Xls.Core.Spreadsheet.RtfTextWriter"/>.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RtfTextWriter class with the specified formatting option.
            </summary>
            <param name="enableFormatting">A boolean value indicating whether formatting should be enabled.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the RtfTextWriter class with the specified TextWriter and sets the auto-flush behavior to true.
            </summary>
            <param name="underlyingWriter">The TextWriter to which the RTF content will be written.</param>
            <returns>
            An instance of the RtfTextWriter class.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Initializes a new instance of the RtfTextWriter class with the specified TextWriter and formatting option.
            </summary>
            <param name="underlyingWriter">The TextWriter to which the RTF content will be written.</param>
            <param name="enableFormatting">A boolean indicating whether formatting should be enabled.</param>
            <returns>
            An instance of the RtfTextWriter class.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.OutputTabs">
            <summary>
            Outputs any pending tabs if there are any,and resets the pending tabs flag.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.GetImageRTF(System.String)">
            <summary>
            Gets the image RTF.
            </summary>
            <param name="rtf">The RTF.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteString(System.String,System.String,System.String)">
            <summary>
            Writes a string to the output.
            </summary>
            <param name="value">The string to write.</param>
            <param name="image">The image to use as a replacement.</param>
            <param name="align">The alignment of the text.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.ToString">
            <summary>
            Returns string that implement current object.
            </summary>
            <returns>Returns string that implement current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Boolean)">
            <summary>
            Writes a bool to the text stream.
            </summary>
            <param name="value">Bool param to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">Char value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Char[])">
            <summary>
            Writes a array of characters to the text stream.
            </summary>
            <param name="buffer">Array param to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Double)">
            <summary>
            Writes a double to the text stream.
            </summary>
            <param name="value">Double param to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Int32)">
            <summary>
            Writes a int value to the text stream.
            </summary>
            <param name="value">Int value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Int64)">
            <summary>
            Writes a long value to the text stream.
            </summary>
            <param name="value">Long value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Object)">
            <summary>
            Writes a object to the text stream.
            </summary>
            <param name="value">Object value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Single)">
            <summary>
            Writes a float value to the text stream.
            </summary>
            <param name="value">Float value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="s">Streang to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.UInt32)">
            <summary>
            Writes a uint value to the text stream.
            </summary>
            <param name="value">Uint value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as String.Format.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, using the same semantics as String.Format.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg">The object array to write into the formatted string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as String.Format.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <param name="arg1">An object to write into the formatted string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write. </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine">
            <summary>
            Writes a line terminator to the text stream.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean followed by a line 
            terminator to the text stream.
            </summary>
            <param name="value">The Boolean to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Char)">
            <summary>
            Writes a character followed by a line terminator to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Char[])">
            <summary>
            Writes an array of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Double)">
            <summary>
            Writes the text representation of a 8-byte floating-point value followed 
            by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer 
            followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed 
            integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte signed integer to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object by calling 
            ToString on this object, followed by a line terminator to the text stream.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point 
            value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer followed 
            by a line terminator to the text stream. 
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as Format.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg">The object array to write into format string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as Format.
            </summary>
            <param name="format">The formatted string.</param>
            <param name="arg0">The object to write into the formatted string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as Format.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the format string.</param>
            <param name="arg1">The object to write into the format string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
            <param name="index">The index into buffer at which to begin reading.</param>
            <param name="count">The maximum number of characters to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.AddFont(System.Drawing.Font)">
            <summary>
            Adds new font to the collection.
            </summary>
            <param name="font">Font to add.</param>
            <returns>Index of the font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.AddColor(System.Drawing.Color)">
            <summary>
            Adds color to the colors table.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteFontTable">
            <summary>
            Writes fonts table into inner text writer.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteColorTable">
            <summary>
            Writes colors table into inner text writer.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteText(System.Drawing.Font,System.String)">
            <summary>
            Writes the specified text using the provided font.
            </summary>
            <param name="font">The font to be used for rendering the text.</param>
            <param name="strText">The string of text to be written.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteText(System.Drawing.Font,System.Drawing.Color,System.String)">
            <summary>
            Writes text with specified font, foreground color, and string text.
            </summary>
            <param name="font">The font information for the text.</param>
            <param name="foreColor">The foreground color of the text.</param>
            <param name="strText">The string text to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteText(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.String)">
            <summary>
            Writes text with specified font, foreground color, and background color.
            </summary>
            <param name="font">The font used to draw the text.</param>
            <param name="foreColor">The color of the text.</param>
            <param name="backColor">The background color behind the text.</param>
            <param name="strText">The text string to be drawn.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteText(Spire.Xls.Core.IFont,System.String)">
            <summary>
            Writes the specified text using the provided font.
            </summary>
            <param name="font">The font to be used for writing the text.</param>
            <param name="strText">The text to be written.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteImageText(Spire.Xls.Core.IFont,System.String,System.String,System.String)">
            <summary>
            Writes the image text.
            </summary>
            <param name="font">The font.</param>
            <param name="strText">The STR text.</param>
            <param name="image">The image.</param>
            <param name="align">The align.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteFontAttribute(System.Drawing.Font)">
            <summary>
            Writes the attributes of the specified Font object.
            </summary>
            <param name="font">The Font object whose attributes are to be written.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteFont(System.Drawing.Font)">
            <summary>
            Writes the specified font.
            </summary>
            <param name="font">The font to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteFont(Spire.Xls.Core.IFont)">
            <summary>
            Writes the specified IFont.
            </summary>
            <param name="font">The IFont to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteSubSuperScript(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Writes the specified font with subscript and superscript formatting.
            </summary>
            <param name="font">The XlsFont to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteFontItalicBoldStriked(System.Drawing.Font)">
            <summary>
            Writes a string using the specified font with italic, bold, and strikethrough styles applied.
            </summary>
            <param name="font">The Font to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteUnderline(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Writes an underline style to the specified XlsFont object.
            </summary>
            <param name="font">The XlsFont to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteUnderlineAttribute">
            <summary>
            Writes an underline attribute.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteUnderlineAttribute(Spire.Xls.Core.Spreadsheet.UnderlineStyle)">
            <summary>
            Writes an underline attribute with the specified style.
            </summary>
            <param name="style">The style of the underline to be applied.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteStrikeThrough(Spire.Xls.Core.Spreadsheet.StrikeThroughStyle)">
            <summary>
            Writes text with a strike-through style applied.
            </summary>
            <param name="style">The style of the strike-through to apply.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteBackColorAttribute(System.Drawing.Color)">
            <summary>
            Writes the background color attribute.
            </summary>
            <param name="color">The color to be set as the background color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteForeColorAttribute(System.Drawing.Color)">
            <summary>
            Sets the foreground color attribute.
            </summary>
            <param name="color">The color to set as the foreground color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteLineNoTabs(System.String)">
            <summary>
            Writes the specified string to the standard output stream without any tab characters.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteTag(Spire.Xls.Core.Spreadsheet.RtfTags)">
            <summary>
            Writes the specified RTF tag to the inner writer if formatting is enabled.
            </summary>
            <param name="tag">The RTF tag to write.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteTag(Spire.Xls.Core.Spreadsheet.RtfTags,System.Object[])">
            <summary>
            Writes an RTF tag to the output with optional parameters.
            </summary>
            <param name="tag">The RTF tag to write.</param>
            <param name="arrParams">Optional parameters to format the tag with.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RtfTextWriter.WriteAlignment(System.String)">
            <summary>
            Writes the alignment.
            </summary>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Escape">
            <summary>
            Determines whether characters should be escaped during writing. When `Escape` is `true`, certain characters are escaped to prevent them from being interpreted as special characters.When `Escape` is `false`, characters are written as-is without any escaping.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RtfTextWriter.Encoding">
            Properties
            <summary>
            Returns current Encoding.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.LOGFONT">
            <summary>
            Represents LogFont structure that defines the attributes of a font. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfHeight">
            <summary>
            Specifies the height, in logical units, of the font's character cell or character.
             The character height value (also known as the em height) is the character cell
             height value minus the internal-leading value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfWidth">
            <summary>
            Specifies the average width, in logical units, of characters in the font.
            If lfWidth is zero, the aspect ratio of the device is matched against the
            digitization aspect ratio of the available fonts to find the closest match,
            determined by the absolute value of the difference.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfEscapement">
            <summary>
            Specifies the angle, in tenths of degrees, between the escapement vector
            and the x-axis of the device. The escapement vector is parallel
            to the base line of a row of text. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfOrientation">
            <summary>
            Specifies the angle, in tenths of degrees, between each character's base
            line and the x-axis of the device.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfWeight">
            <summary>
            Specifies the weight of the font in the range 0 through 1000.
            For example, 400 is normal and 700 is bold. If this value is zero,
            a default weight is used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfItalic">
            <summary>
            Specifies an italic font if set to TRUE.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfUnderline">
            <summary>
            Specifies an underlined font if set to TRUE.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfStrikeOut">
            <summary>
            Specifies a strikeout font if set to TRUE.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfCharSet">
            <summary>
            Specifies the character set. The following values are predefined.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfOutPrecision">
            <summary>
            Specifies the output precision. The output precision defines how closely
            the output must match the requested font's height, width, character
            orientation, escapement, pitch, and font type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfClipPrecision">
            <summary>
            Specifies the clipping precision. The clipping precision defines how
            to clip characters that are partially outside the clipping region.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfQuality">
            <summary>
            Specifies the output quality. The output quality defines how carefully
            the graphics device interface (GDI) must attempt to match the logical-font
            attributes to those of an actual physical font.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfPitchAndFamily">
            <summary>
            Specifies the pitch and family of the font. The two low-order bits
            specify the pitch of the font. Font families describe the look of
            a font in a general way. They are intended for specifying fonts when
            the exact typeface desired is not available.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.LOGFONT.lfFaceName">
            <summary>
            A null-terminated string that specifies the typeface name of the font.
            The length of this string must not exceed 32 characters, including
            the terminating null character. The EnumFontFamiliesEx function can
            be used to enumerate the typeface names of all currently available fonts.
            If lfFaceName is an empty string, GDI uses the first font that matches
            the other specified attributes.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.LOGFONT.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RtfTags">
            <summary>
            Elements order is very important.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.FontTableBegin">
            <summary>
            Font table begins.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.FontTableEnd">
            <summary>
            Font table ends.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.ColorTableStart">
            <summary>
            Color table starts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.ColorTableEnd">
            <summary>
            Color table ends.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.BoldOn">
            <summary>
            Bold on.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.BoldOff">
            <summary>
            Bold off.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.ItalicOn">
            <summary>
            Italic on.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.ItalicOff">
            <summary>
            Italic off.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.RtfBegin">
            <summary>
            Rtf begins.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.RtfEnd">
            <summary>
            Rtf ends.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.GroupStart">
            <summary>
            Group starts.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.GroupEnd">
            <summary>
            Group ends.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.EndLine">
            <summary>
            End of line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.ForeColor">
            <summary>
            Foreground color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.BackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.SubScript">
            <summary>
            Substcribt.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RtfTags.SuperScript">
            <summary>
            SuperScribt.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.UnderlineStyle">
            <summary>
            \ul Continuous underline. \ul0 turns off all underlining. 
            \ulcN Underline color 
            \uld Dotted underline. 
            \uldash Dash underline. 
            \uldashd Dash dot underline. 
            \uldashdd Dash dot dot underline. 
            \uldb Double underline. 
            \ulhwave Heavy wave underline 
            \ulldash  Long dash underline 
            \ulnone Stops all underlining. 
            \ulth Thick underline 
            \ulthd Thick dotted underline 
            \ulthdash  Thick dash underline 
            \ulthdashd  Thick dash dot underline 
            \ulthdashdd  Thick dash dot dot underline
            \ulthldash  Thick long dash underline
            \ululdbwave Double wave underline
            \ulw Word underline.
            \ulwave Wave underline.
            
            Elements order is very important.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Continuous">
            <summary>
            Continuous underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.TurnOff">
            <summary>
            Turns off all underlining.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Dotted">
            <summary>
            Dotted underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Dash">
            <summary>
            Dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.DashDot">
            <summary>
            Dash dot underline. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.DashDotDot">
            <summary>
            Dash dot dot underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Double">
            <summary>
            Double underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.HeavyWave">
            <summary>
            Heavy wave underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.LongDash">
            <summary>
            Long dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.None">
            <summary>
            Stops all underlining.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Thick">
            <summary>
            Thick underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.ThickDotted">
            <summary>
            Thick dotted underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.ThickDash">
            <summary>
            Thick dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.ThickDashDot">
            <summary>
            Thick dash dot underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.ThickDashDotDot">
            <summary>
            Thick dash dot dot underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.ThickLongDash">
            <summary>
            Thick long dash underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.DoubleWave">
            <summary>
            Double wave underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Word">
            <summary>
            Word underline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UnderlineStyle.Wave">
            <summary>
            Wave underline.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.StrikeThroughStyle">
            <summary>
            Elements order is very important.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StrikeThroughStyle.SingleOn">
            <summary>
            Single is on.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StrikeThroughStyle.SingleOff">
            <summary>
            Single is off.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StrikeThroughStyle.DoubleOn">
            <summary>
            Double is on.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StrikeThroughStyle.DoubleOff">
            <summary>
            Double is off.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.RTFStringArray">
            <summary>
            Represents an array of RTF (Rich Text Format) strings within an Excel object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.GetFont(System.Int32)">
            <summary>
            Retrieves the font at the specified position from the range's cell list.
            </summary>
            <param name="iPosition">The position of the font to retrieve.</param>
            <returns>The font at the specified position if all cells have the same font at that position; otherwise, null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets font for range of characters.
            </summary>
            <param name="iStartPos">First character of the range.</param>
            <param name="iEndPos">Last character of the range.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.ClearFormatting">
            <summary>
            Clears string formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends rich text string with specified text and font.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFStringArray.Text">
            <summary>
            Gets / sets text of the string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFStringArray.RtfText">
            <summary>
            Returns text in rtf format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.RTFStringArray.IsFormatted">
            <summary>
            Indicates whether rich text string has formatting runs. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.Clear">
            <summary>
            Clears the rich text content from all cells in the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RTFStringArray.EndUpdate">
            <summary>
            This method should be called after several updates to the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter">
            <summary>
            This class used to Sort the Range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.m_algorithm">
            <summary>
            Represents the algorithm to sort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.IsCaseSensitive">
            <summary>
            Indicates whether to perform case sensitive sort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.IsIncludeTitle">
            <summary>
            Indicates whether the cell range has title.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.Orientation">
            <summary>
            Represents the sort orientation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.SortColumns">
            <summary>
            Represents the SortFields Collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.SortedWay">
            <summary>
            Represents the algorithm to sort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.SortLeftToRight">
            <summary>
            True means that sorting orientation is from left to right.
            False means that sorting orientation is from top to bottom.
            The default value is false.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.Sort(Spire.Xls.CellRange)">
            <summary>
            Sorts the range based on the sort fields.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.DataSorter.SortBy(System.Int32[],Spire.Xls.OrderBy[],System.Drawing.Color[])">
            <summary>
            Sorts the range with the given parameter.
            </summary>
            <param name="iColumns">Column indexes to sort.</param>
            <param name="orderBy">Represents the sort order.</param>
            <param name="colors">Colors to sort by.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn">
            <summary>
            Represents the sort Field attributes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.m_parent">
            <summary>
            Parent class object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.Key">
            <summary>
            Represents the column to be sorted on.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.ComparsionType">
            <summary>
            Represents the sort by in the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.Order">
            <summary>
            Represents the sort order.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.CustomSortOrder">
            <summary>
            Represents the custom sort order data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.Color">
            <summary>
            Represents the color to sort. Throws exception when SortOn type is Values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.#ctor(Spire.Xls.Core.Spreadsheet.Sorting.SortColumns,Spire.Xls.Core.Converter.Spreadsheet.DataSorting.DataSorterKey)">
            <summary>
            Initialize the sort field.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.#ctor(Spire.Xls.Core.Spreadsheet.Sorting.SortColumns,System.Int32,Spire.Xls.SortComparsionType,Spire.Xls.OrderBy)">
            <summary>
            Initializes a new instance of the SortColumn class with the specified parent, key, sort comparison type, and order by.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.#ctor(Spire.Xls.Core.Spreadsheet.Sorting.SortColumns,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the SortColumn class with the specified parent, key, and custom sort order.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn.SetLevel(System.Int32)">
            <summary>
            Sets sorting level.
            </summary>
            <param name="priority">0 represents high level.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns">
            <summary>
            Represents the sort column collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Add(System.Int32,Spire.Xls.SortComparsionType,Spire.Xls.OrderBy)">
            <summary>
            Adds the item in the collection.
            </summary>
            <param name="key">Column Index to sort the data.</param>
            <param name="sortComparsionType">Compare value type.</param>
            <param name="orderBy">To order the sorted data.</param>
            <returns>Added sort column.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Add(System.Int32,Spire.Xls.OrderBy)">
            <summary>
             Adds the item in the collection.
            </summary>
            <param name="key">Column Index to sort the data.</param>
            <param name="orderBy">To order the sorted data.</param>
            <returns>Added sort column.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Add(System.Int32,System.String[])">
            <summary>
             Adds the item in the collection.
            </summary>
            <param name="key">Column Index to sort the data.</param>
            <param name="customSortOrder">Custom order to order the sorted data.</param>
            <returns>Added sort column.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Remove(Spire.Xls.Core.Spreadsheet.Sorting.SortColumn)">
            <summary>
            Removes the item in the collection.
            </summary>
            <param name="sortColumn">Sort column to remove from the collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Remove(System.Int32)">
            <summary>
            Remvoes the Sort item in the collection.
            </summary>
            <param name="key">Field index to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.SetLevel(Spire.Xls.Core.Spreadsheet.Sorting.SortColumn,System.Int32)">
            <summary>
            Sets the level of the column to sort.
            </summary>
            <param name="sortField"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the derived class instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the count of elements in the collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.GetByIndex(System.Int32)">
            <summary>
            Returns a single Filter object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Item(System.Int32)">
            <summary>
            Gets <see cref="T:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn"/> object at the special field.
            </summary>
            <param name="fieldIndex">The integer offset of the field on which you want to base the filter 
            (from the left of the list; the leftmost field is field 0).
            </param>
            <returns>
            Returens <see cref="T:Spire.Xls.Core.Spreadsheet.Sorting.SortColumn"/> object.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Clear">
            <summary>
            Clears the contents of the collection or resets the object to its initial state.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.Sorting.SortColumns.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper">
            <summary>
            A object contain all styles that are used by range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.m_arrRanges">
            <summary>
            Array that contains all cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.m_book">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates object that will contain all styles that are used by range.
            </summary>
            <param name="range">Range from which styles must be taken.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IsModified">
            <summary>
            Gets value indicating whether format was modified, compared to parent format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Borders">
            <summary>
            Returns a  Borders collection that represents the borders of a
            style or a range of cells (including a range defined as part of
            a conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.BuiltIn">
            <summary>
            True if the style is a built-in style. Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FillPattern">
            <summary>
            Gets / sets XlsFill pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FillBackground">
            <summary>
            Gets / sets index of XlsFill background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FillBackgroundRGB">
            <summary>
            Gets / sets XlsFill background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FillForeground">
            <summary>
            Gets / sets index of XlsFill foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FillForegroundRGB">
            <summary>
            Gets / sets XlsFill foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Font">
            <summary>
            Returns a Font object that represents the font of the specified 
            object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.FormulaHidden">
            <summary>
            True if the formula will be hidden when the worksheet is protected. 
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.HorizontalAlignment">
            <summary>
            Returns or sets the horizontal alignment for the specified object. 
            For all objects, this can be one of the following HorizontalAlignType constants. 
            Read/write HorizontalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludeAlignment">
            <summary>
            True if the style includes the AddIndent, HorizontalAlignment, 
            VerticalAlignment, WrapText, and Orientation properties. 
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludeBorder">
            <summary>
            True if the style includes the Color, ColorIndex, LineStyle, 
            and Weight border properties. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludeFont">
            <summary>
            True if the style includes the Background, Bold, Color,
            ColorIndex, FontStyle, Italic, Name, OutlineFont, Shadow,
            Size, Strikethrough, Subscript, Superscript, and Underline
            font properties. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludeNumberFormat">
            <summary>
            True if the style includes the NumberFormat property. 
            Read/write Boolean. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludePatterns">
            <summary>
            True if the style includes the Color, ColorIndex, 
            InvertIfNegative, Pattern, PatternColor, and PatternColorIndex 
            interior properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IncludeProtection">
            <summary>
            True if the style includes the FormulaHidden and Locked protection 
            properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IndentLevel">
            <summary>
            Returns or sets the indent level for the style. Read/write.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IsInitialized">
            <summary>
            Indicates whether style is initialized (differs from Normal style).
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Locked">
            <summary>
            True if the object is locked, False if the object can be 
            modified when the sheet is protected. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Name">
            <summary>
            Returns or sets the name of the object. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.NumberFormat">
            <summary>
            Returns or sets the format code for the object. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.NumberFormatIndex">
            <summary>
            Gets / sets index of the number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.NumberFormatSettings">
            <summary>
            Returns object that describes number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Rotation">
            <summary>
            Text rotation angle:
            0 Not rotated
            1-90 1 to 90 degrees counterclockwise
            91-180 1 to 90 degrees clockwise
            255 Letters are stacked top-to-bottom, but not rotated.
            int.MinValue - different rotation angle for different ranges.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is more than 0xFF.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.ShrinkToFit">
            <summary>
            True if text automatically shrinks to fit in the available 
            column width. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.VerticalAlignment">
            <summary>
            Returns or sets the vertical alignment of the specified object. 
            Read/write VerticalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.WrapText">
            <summary>
            True if Microsoft Excel wraps the text in the object. 
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.ReadingOrder">
            <summary>
            Text direction, the reading order for far east versions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.IsFirstSymbolApostrophe">
            <summary>
            If true then first symbol in cell is apostrophe.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.PatternKnownColor">
            <summary>
            Returns or sets the color of the interior pattern as an index into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.PatternColor">
            <summary>
            Returns or sets the color of the interior pattern as an System.Drawing.Color value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.KnownColor">
            <summary>
            Returns or sets the color of the interior. The color is specified as
            an index value into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Color">
            <summary>
            Returns or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.Interior">
            <summary>
            Returns Interior object that represents the interior of the specified 
            object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.JustifyLast">
            <summary>
            For far east languages. Supported only for format. Always 0 for US.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.NumberFormatLocal">
            <summary>
             Returns or sets the format code for the object as a string in the
             language of the user. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.ExtendedFormatIndex">
            <summary>
            Gets format index in m_book.InnerFormats.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.StyleArrayWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.UtilityMethods">
            <summary>
            This class contains utility methods, that cannot be logically placed in any other class.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.DEF_WRONG_DATE">
            <summary>
            Number of days that are incorrectly displayed by MS Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.DEF_EXCEL2007_MAX_ROW_COUNT">
            <summary>
            Excel 2007 maximum row count.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.DEF_EXCEL2007_MAX_COLUMN_COUNT">
            <summary>
            Excel 2007 maximum column count.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.DEF_EXCEL97TO03_MAX_ROW_COUNT">
            <summary>
            Excel 97-03 maximum row count.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.DEF_EXCEL97TO03_MAX_COLUMN_COUNT">
            <summary>
            Excel 97-03 maximum column count.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.#ctor">
            <summary>
            To prevent creation instances of this class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.Intersects(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Determines if rectangles intersect with each other.
            </summary>
            <param name="rect1">The first rectangle to test.</param>
            <param name="rect2">The second rectangle to test.</param>
            <returns>This method returns true if there is any intersection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.IndexOf(System.Int32[],System.Int32)">
            <summary>
            Searches for the specified object and returns the index of
            the first occurrence within the entire one-dimensional array.
            </summary>
            <param name="array">Array to search.</param>
            <param name="value">Value to locate in the array.</param>
            <returns>
            The index of the first occurrence of value within the entire array, if found;
             otherwise, -1.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.IndexOf(System.Int16[],System.Int16)">
            <summary>
            Searches for the specified object and returns the index of
            the first occurrence within the entire one-dimensional array.
            </summary>
            <param name="array">Array to search.</param>
            <param name="value">Value to locate in the array.</param>
            <returns>
            The index of the first occurrence of value within the entire array, if found;
             otherwise, -1.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.ConvertDateTimeToNumber(System.DateTime)">
            <summary>
            Converts DateTime into number.
            </summary>
            <param name="dateTime">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.ConvertNumberToDateTime(System.Double)">
            <summary>
            Converts number into DateTime.
            </summary>
            <param name="dNumber">Number to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.RemoveFirstCharUnsafe(System.String)">
            <summary>
            Removes first character from the string.
            Warning: this method doesn't performs any argument check for performance purposes.
            </summary>
            <param name="value">Value to remove first character from.</param>
            <returns>Updated string.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.GetMaxRowColumnCount(System.Int32@,System.Int32@,Spire.Xls.ExcelVersion)">
            <summary>
            Gets maximum row and column count for specific version.
            </summary>
            <param name="iRows"></param>
            <param name="iColumns"></param>
            <param name="version"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CopyStreamTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies one stream into another.
            </summary>
            <param name="source">Source stream to copy from.</param>
            <param name="destination">Destination stream to copy into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CloneStream(System.IO.MemoryStream)">
            <summary>
            Creates copy of the MemoryStream.
            </summary>
            <param name="source">Source stream to copy.</param>
            <returns>A copy of the original MemoryStream.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CreateReader(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an XmlReader from the given Stream, optionally skipping to the first element.
            </summary>
            <param name="data">The Stream containing the XML data.</param>
            <param name="skipToElement">Indicates whether to skip to the first XML element.</param>
            <returns>An XmlReader instance configured with the specified settings.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CreateReader(System.IO.Stream)">
            <summary>
            Creates xml reader to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <returns>Created xml reader.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CreateWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates xml writer to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <param name="encoding">The encoding.</param>
            <returns>Created xml writer.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates xml writer to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <returns>Created xml writer.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.CreateWriter(System.IO.TextWriter,System.Boolean)">
            <summary>
            Creates xml writer to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <param name="indent">A boolean indicating whether to indent the XML output.</param>
            <returns>Created xml writer.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.UtilityMethods.SpecialSymbolConvertForStyleName(System.String)">
            <summary>
            Converts special symbols in a string to their corresponding hexadecimal values.
            </summary>
            <param name="s">The input string containing special symbols.</param>
            <returns>A new string with special symbols replaced by their hexadecimal values.</returns>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.UtilityMethods.StandardResolution">
            <summary>
            This is the default resolution for images we create.
            We should specify it on all bitmaps we create because new bitmaps
            default to the current screen resolution.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsAddInFunction">
            <summary>
            Represents a single add-in, either installed or not installed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsAddInFunction.BookIndex">
            <summary>
            Gets or sets book index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsAddInFunction.NameIndex">
            <summary>
            Name index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsAddInFunction.Name">
            <summary>
            Name of add-in function.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsAddInFunction.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsBorder">
            <summary>
            Represents the border style and properties for a cell in an Excel worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorder.DEF_MAXBADCOLOR">
            <summary>
            Maximum color index that requires modification in order to let MS Excel edit styles.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorder.DEF_BADCOLOR_INCREMENT">
            <summary>
            Increment for color value in order to let MS Excel edit styles.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorder.m_border">
            <summary>
            Index of the border.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorder.m_format">
            <summary>
            Extended format that contains this border.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.#ctor(System.Object)">
            <summary>
            Creates a class instance and sets its ReservedHandle and Parent properties.
            </summary>
            <param name="parent">Parent object for the Border.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.#ctor(System.Object,Spire.Xls.BordersLineType)">
            <summary>
            Creates border with specified index.
            </summary>
            <param name="parent">Parent object for the border.</param>
            <param name="borderIndex">Index of border that should be created.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.#ctor(System.Object,Spire.Xls.Core.Interfaces.IInternalAddtionalFormat,Spire.Xls.BordersLineType)">
            <summary>
            Creates border from ExtendedFormat with specified border index.
            </summary>
            <param name="parent">Parent object for the border.</param>
            <param name="impl">
            ExtendedFormat that contains all information about required border.
            </param>
            <param name="borderIndex">Border index of the border.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Retrieves the theme color and its tint value from the border converter.
            </summary>
            <param name="type">Output parameter for the theme color type.</param>
            <param name="tint">Output parameter for the tint value of the theme color.</param>
            <returns>True if the theme color is successfully retrieved, otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Sets the theme color for the border based on the specified theme color type and tint.
            </summary>
            <param name="type">The type of theme color to apply.</param>
            <param name="tint">The tint value to adjust the theme color, typically ranging from -1.0 (darker) to 1.0 (lighter).</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.KnownColor">
            <summary>
            Returns or sets a ExcelColors value that represents the color of the border
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.OColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read/write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.Color">
            <summary>
            Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. 
            Read/write Color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read/write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.ShowDiagonalLine">
            <summary>
            Indicates whether shows diagonal line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorder.BorderIndex">
            <summary>
            Returns border index. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.ColorToExcelColor(Spire.Xls.ExcelColors)">
            <summary>
            Converts a given Spire.Xls.ExcelColors color to another Spire.Xls.ExcelColors color.
            Note: The adjustment logic is commented out and currently does nothing.
            </summary>
            <param name="color">The Spire.Xls.ExcelColors color to be converted.</param>
            <returns>The converted Spire.Xls.ExcelColors color.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.CopyFrom(Spire.Xls.Core.IBorder)">
            <summary>
            Copies the properties from the provided IBorder instance to the current instance.
            </summary>
            <param name="baseBorder">The IBorder instance from which to copy properties.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorder.setLineStyleAndColor(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets the line style and color for a specified border type in an Excel cell format.
            </summary>
            <param name="borderLine">The line style type to apply to the border.</param>
            <param name="borderColor">The color to apply to the border.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper">
            <summary>
            This class represents border for multicell range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.m_arrCells">
            <summary>
            Cells of the range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.m_arrCellsIsMergeArea">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.m_border">
            <summary>
            Border index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.m_book">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.#ctor(Spire.Xls.Core.IXLSRange,Spire.Xls.BordersLineType)">
            <summary>
            Creates wrapper for specified range and border index.
            </summary>
            <param name="range">Range for which this wrapper is created.</param>
            <param name="index">Border index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Attempts to retrieve the current theme color and its tint factor.
            </summary>
            <param name="type">The type of the theme color.</param>
            <param name="tint">The tint factor applied to the theme color.</param>
            <returns>True if the theme color and tint were successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Sets the theme color for the application based on the specified type and tint.
            </summary>
            <param name="type">The type of theme color to set.</param>
            <param name="tint">The tint value to apply to the theme color.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read/write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.OColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.Color">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read/write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read/write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsBorderArrayWrapper.ShowDiagonalLine">
            <summary>
            This property is used only by Diagonal borders. For any other border
            index property will have no influence.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationArray.InputTitle">
            <summary>
            Title of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationArray.IsInputPositionFixed">
            <summary>
            Indicates whether position of the prompt box is fixed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationArray.AlertStyle">
            <summary>
            Style of the error.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsGradient">
            <summary>
            Represents a gradient used in Excel for filling cells with a smooth transition between two or more colors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.BackColorObject">
            <summary>
            Gets the background color as an OColor object.
            </summary>
            <returns>An OColor object representing the background color.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.ForeColorObject">
            <summary>
            Gets the foreground color as an OColor object based on the internal background color.
            </summary>
            <returns>
            An OColor object representing the foreground color.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.BackColor">
            <summary>
            Gets or sets the background color of the book.
            </summary>
            <value>
            A Color object representing the background color.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.ForeColor">
            <summary>
            Gets or sets the foreground color of the book.
            </summary>
            <value>
            The foreground color represented as a Color object.
            </value>
            <returns>
            The current foreground color of the book.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.BackKnownColor">
            <summary>
            Gets or sets the known color of the background.
            </summary>
            <returns>The known color of the background.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.ForeKnownColor">
            <summary>
            Gets or sets the known color of the foreground.
            </summary>
            <value>
            The known color of the foreground.
            </value>
            <returns>
            The known color of the foreground.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.GradientStyle">
            <summary>
            Gets or sets the gradient style type for the fill.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when the fill type is not set to Gradient.</exception>
            <returns>The gradient style type.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsGradient.GradientVariant">
            <summary>
            Gets or sets the gradient variant type for the shape fill.
            </summary>
            <value>
            A <see cref="T:Spire.Xls.GradientVariantsType"/> value representing the gradient variant.
            </value>
            <exception cref="T:System.NotSupportedException">
            Thrown when the fill type is not Gradient or when the gradient style type is unknown.
            </exception>
            <returns>
            The current gradient variant type.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsGradient.CompareTo(Spire.Xls.Core.IGradient)">
            <summary>
            Compares the current instance with another IGradient object and returns an integer that indicates whether the current instance equals the another IGradient.
            </summary>
            <param name="twin">The IGradient object to compare with the current instance.</param>
            <returns>
            if twin == this return 0.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsGradient.TwoColorGradient">
            <summary>
            Applies a horizontal two-color gradient to the selected range using the default gradient style.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsGradient.TwoColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsGradient.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsHPageBreak">
            <summary>
            Represents a horizontal page break in an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.#ctor(System.Object)">
            <summary>
            Sets application and parent fields.
            </summary>
            <param name="parent">Parent object for the page setup.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.Location">
            <summary>
            Location of the page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.Row">
            <summary>
            Gets the row index. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.Type">
            <summary>
            Type of the page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.StartColumn">
            <summary>
            Gets the start column index of this horizontal page break
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.EndColumn">
            <summary>
            Gets the end column index of this horizontal page break. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.Extent">
            <summary>
            Returns page break extent.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsHPageBreak.Clone(System.Object)">
            <summary>
            Clones current instance.
            </summary>
            <param name="parent">Parent for new instance.</param>
            <returns>A clone of the current instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsValidation">
            <summary>
            Represents data validation for a worksheet range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.InputTitle">
            <summary>
            Title of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.InputMessage">
            <summary>
            Text of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ErrorTitle">
            <summary>
            Title of the error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ErrorMessage">
            <summary>
            Text of the error message.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.Formula1">
            <summary>
            Value of the first formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.DateTime1">
            <summary>
            First formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.Formula2">
            <summary>
            Value of the second formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.DateTime2">
            <summary>
            Second formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.AllowType">
            <summary>
            Type of the allowed data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.CompareOperator">
            <summary>
            Compare operator used.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.IsListInFormula">
            <summary>
            Indicates whether formula contains list of values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.IgnoreBlank">
            <summary>
            Indicates whether empty cell is allowed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.IsSuppressDropDownArrow">
            <summary>
            Indicates whether to suppress drop-down arrow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ShapesCount">
            <summary>
            Gets number of required shapes objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ShowInput">
            <summary>
            Indicates whether to show prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ShowError">
            <summary>
            Indicates whether to show error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.PromptBoxHPosition">
            <summary>
            Horizontal position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.PromptBoxVPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.IsInputVisible">
            <summary>
             Indicates whether prompt box is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.IsInputPositionFixed">
            <summary>
            Indicates whether position of the prompt box is fixed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.AlertStyle">
            <summary>
            Style of the error.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.Values">
            <summary>
            If this is data validation list, then gets / sets array of all possible values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.DataRange">
            <summary>
            Range of possible values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.AddRange(Spire.Xls.Core.Spreadsheet.XlsValidation)">
            <summary>
            Adds the validation ranges.
            </summary>
            <param name="dv">The XlsValidation object containing the validation ranges to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided XlsValidation object does not belong to the same Worksheet.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.AddRange(Spire.Xls.Core.Spreadsheet.XlsRange)">
            <summary>
            Adds range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.RemoveRange(System.Drawing.Rectangle[])">
            <summary>
            Removes ranges from collection.
            <param name="rectangles">Ranges to remove.</param>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.RemoveRange(Spire.Xls.Core.Spreadsheet.XlsRange)">
            <summary>
            Removes range from collection.
            </summary>
            <param name="range">Range to remove.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.Worksheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.ContainsCell(System.Int64)">
            <summary>
            Indicates whether this object contains data validation settings for cell with specified index.
            </summary>
            <param name="lCellIndex">Cell index to search.</param>
            <returns>True if this object contains data validation settings for cell with specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.Clone(System.Object)">
            <summary>
            Clones current instance.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns just cloned object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.Parent">
            <summary>
            Parent object for this object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidation.ParentCollection">
            <summary>
            Gets / sets parent data validation collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidation.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable">
            <summary>
            Table of all data validations in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.Worksheet">
            <summary>
            Gets parent wokrsheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.Workbook">
            <summary>
            Gets parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.ShapesCount">
            <summary>
            Gets number of required shapes objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.FindDataValidation(System.Int64)">
            <summary>
            Searches for corresponding data validation.
            </summary>
            <param name="iCellIndex">Cell index.</param>
            <returns>Found data validation or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes specified rectangles from the collection.
            </summary>
            <param name="rectangles">Rectangles to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataValidationTable.Clone(System.Object)">
            <summary>
            Creates a clone of the XlsDataValidationTable associated with the provided parent XlsWorksheet.
            </summary>
            <param name="parent">The parent object, which should be an instance of XlsWorksheet.</param>
            <returns>A new instance of XlsDataValidationTable that is a clone of the original.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parent object is null or not an instance of XlsWorksheet.</exception>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsFont">
            <summary>
            Represents a font style used in Excel documents, encapsulating properties such as font name, size, color, and style attributes like bold or italic.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.Spire#Xls#Core#ICloneParent#Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.Clone(System.Object)">
            <summary>
            Creates a clone of the current XlsFont object with the specified parent.
            </summary>
            <param name="parent">The parent object, which should be an instance of Spire.Xls.Core.Spreadsheet.XlsWorkbook.</param>
            <returns>A new XlsFont object that is a clone of the current instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parent is null or not an instance of Spire.Xls.Core.Spreadsheet.XlsWorkbook.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.CompareTo(System.Object)">
             <summary>
             Compares the current instance with another object of the same type.
             </summary>
             <param name="obj">Object to compare with this instance.</param>
             <returns>
             Less than zero    - This instance is less than obj. 
             Zero              - This instance is equal to obj. 
             Greater than zero - This instance is greater than obj. 
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsAutoColor">
            <summary>
            Gets a value indicating whether the color is automatically determined.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsBold">
            <summary>
            Gets or sets a value indicating whether the font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.OColor">
            <summary>
            Returns color object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.KnownColor">
            <summary>
            Gets or sets the known color of the font.
            </summary>
            <returns>
            The Spire.Xls.ExcelColors representing the known color.
            </returns>
            <param name="value">The Spire.Xls.ExcelColors value to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.Color">
            <summary>
            Gets or sets the color of the book.
            </summary>
            <value>
            The color represented as a Color object.
            </value>
            <returns>
            Returns the current color of the book.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsItalic">
            <summary>
            Gets or sets a value indicating whether the font is italic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.Size">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsStrikethrough">
            <summary>
            Gets or sets a value indicating whether the text is displayed with a strikethrough.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsSubscript">
            <summary>
            Gets or sets a value indicating whether the font is subscript.
            </summary>
            <value>
            <c>true</c> if the font is subscript; otherwise, <c>false</c>.
            </value>
            <returns>
            A boolean value representing whether the font is subscript.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.StrikethroughType">
            <summary>
            Gets or sets the type of strikethrough applied to the text.
            </summary>
            <value>
            A string representing the strikethrough type. Possible values are "None", "Single", and "Double".
            </value>
            <returns>
            The current strikethrough type as a string.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the value set is not one of the expected values ("None", "Single", "Double").
            </exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.IsSuperscript">
            <summary>
            Gets or sets a value indicating whether the font is superscript.
            </summary>
            <returns>
            True if the font is superscript; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.Underline">
            <summary>
            Gets or sets the underline style of the font.
            </summary>
            <value>
            A Spire.Xls.FontUnderlineType value that represents the underline style of the font.
            </value>
            <returns>
            The current underline style of the font.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the font.
            </summary>
            <returns>
            Returns the vertical alignment type of the font. It can be Superscript, Subscript, or Baseline.
            </returns>
            <param name="value">The vertical alignment type to set for the font.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.Scheme">
            <summary>
            Gets or sets the scheme used for font conversion.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.GenerateNativeFont">
            <summary>
            Generates a native font if it doesn't already exist, using the current font size.
            </summary>
            <returns>
            The native font object.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.GenerateNativeFont(System.Single)">
            <summary>
            Generates a Font object based on the specified size and the current font settings.
            </summary>
            <param name="size">The size of the font to generate.</param>
            <returns>A Font object with the specified size and the current font settings (bold, italic, strikethrough, underline, and charset).</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.MacOSOutlineFont">
            <summary>
            True if the font is an outline font. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.MacOSShadow">
            <summary>
            True if the font is a shadow font or if the object has
            a shadow. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsFont.Font">
            <summary>
            Returns current font. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFont.MeasureString(System.String)">
            <summary>
            Measures the size of a string when rendered with the specified font settings.
            </summary>
            <param name="strValue">The string to measure.</param>
            <returns>A SizeF structure that represents the size of the string.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsFontStyle">
            <summary>
            Represents the font style for Excel cells, allowing customization of font attributes such as font name, size, color, and style (bold, italic, underline, etc.).
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsFormat.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsHyperLink">
            <summary>
            Represents a hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.Address">
            <summary>
            Returns or sets the address of the target document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.Name">
            <summary>
            Returns or sets the name of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.Range">
            <summary>
            Returns a Range object that represents the range the specified hyperlink is attached to. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.ScreenTip">
            <summary>
            Returns or sets the ScreenTip text for the specified hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.SubAddress">
            <summary>
            Returns or sets the location within the document associated with the hyperlink.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsHyperLink.SetAddress(System.String,System.Boolean)">
            <summary>
            Returns or sets the text to be displayed for the specified hyperlink.
            The default value is the address of the hyperlink.
            </summary>
            <summary>
            Sets address property.
            </summary>
            <param name="strAddress">Address to set.</param>
            <param name="bSetText">Indicates whether we should set Text property of
            the TopLeft cell with this hyperlink.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsHyperLink.SetSubAddress(System.String)">
            <summary>
            Sets sub address property.
            </summary>
            <param name="strSubAddress">Sub address to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.TextToDisplay">
            <summary>
            Returns or sets the text to be displayed for the specified hyperlink.
            The default value is the address of the hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.Type">
            <summary>
            Returns or sets the object type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.FirstRow">
            <summary>
            Gets the index of the first row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.FirstColumn">
            <summary>
            Gets the index of the first column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.LastRow">
            <summary>
            Gets the index of the last row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.UnicodePath">
            <summary>
            Gets/sets an optional string of Unicode characters
            that specifies the complete file path.
            When the property Type is not HyperLinkType.File,
            this property is invalid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsHyperLink.LastColumn">
            <summary>
            Gets the index of the last column.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsHyperLink.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsName">
            <summary>
            Represents named range in the excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsName.WorkbookScope">
            <summary>
            String representation of the workbook scope value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Index">
            <summary>
            Index of the Name object in the workbook's Names collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Name">
            <summary>
            Name of the Name object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.NameLocal">
            <summary>
            Same as Name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RefersToRange">
            <summary>
            Gets / sets Range associated with the Name object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Value">
            <summary>
            For the Name object, a string containing the formula that
            the name is defined to refer to.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Visible">
            <summary>
            Determines whether the object is visible. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsLocal">
            <summary>
            Indicates whether current name is locally defined name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.ValueR1C1">
            <summary>
            Gets named range formula in R1C1 style. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Worksheet">
            <summary>
            Get worksheet of Name Object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Scope">
            <summary>
            Returns string representation of the name's scope. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Delete">
            <summary>
            Removes this Name object from the workbook's Names collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeAddress">
            <summary>
            Returns the range reference in the language of the macro.
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeAddressLocal">
            <summary>
            Returns the range reference for the specified range in the language
            of the user. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeGlobalAddress">
            <summary>
            Returns range Address in format "'Sheet1'!$A$1".
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeGlobalAddress2007">
            <summary>
            Gets the global address for the range in the worksheet, formatted for Excel 2007 and later.
            </summary>
            <returns>
            A string representing the global address of the range. If the worksheet is not null, it returns the address in the format "'SheetName'!RangeName". Otherwise, it returns "[0]!RangeName".
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeR1C1Address">
            <summary>
            Returns the range reference using R1C1 notation.
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RangeR1C1AddressLocal">
            <summary>
            Returns the range reference using R1C1 notation.
            Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.BooleanValue">
            <summary>
            Gets / sets boolean value that is contained by this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Borders">
            <summary>
            Returns a  Borders collection that represents the borders of a style
            or a range of cells (including a range defined as part of a
            conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.CellList">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Column">
            <summary>
            Returns the number of the first column in the first area in the specified
            range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.ColumnGroupLevel">
            <summary>
            Column group level. Read-only.
            -1 - Not all columns in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.ColumnWidth">
            <summary>
            Returns or sets the width of all columns in the specified range.
            Read/write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Count">
            <summary>
            Returns the number of objects in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.DateTimeValue">
            <summary>
            Gets / sets DateTime contained by this cell. Read-write DateTime.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.NumberText">
            <summary>
            Returns cell value after number format application. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or
            columns) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or
            rows) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.ErrorValue">
            <summary>
            Gets / sets error value that is contained by this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Formula">
            <summary>
            Returns or sets the object's formula in A1-style notation and in
            the language of the macro. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaArray">
            <summary>
            Represents array-entered formula.
            Visit http://www.cpearson.com/excel/array.htm for more information.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaArrayR1C1">
            <summary>
            Returns or sets the formula array for the range, using R1C1-style notation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsFormulaHidden">
            <summary>
            True if the formula will be hidden when the worksheet is protected.
            False if at least part of formula in the range is not hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaDateTime">
            <summary>
            Get / set formula DateTime value contained by this cell.
            DateTime.MinValue if not all cells of the range have same DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaR1C1">
            <summary>
            Returns or sets the formula for the range, using R1C1-style notation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaBoolValue">
            <summary>
            Returns the calculated value of the formula as a boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaErrorValue">
            <summary>
            Returns the calculated value of the formula as a string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasDataValidation">
            <summary>
            Indicates whether specified range object has data validation.
            If Range is not single cell, then returns true only if all cells have data validation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasBoolean">
            <summary>
            Indicates whether range contains boolean value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasDateTime">
            <summary>
            Indicates whether range contains DateTime value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormula">
            <summary>
            True if all cells in the range contain formulas; False if
            at least one of the cells in the range doesn't contain a formula.
            Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaArray">
            <summary>
            Indicates whether range contains array-entered formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaDateTime">
            <summary>
            Indicates if current range has formula value formatted as DateTime. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaNumberValue">
            <summary>
            Gets a value indicating whether the referenced range contains a formula that evaluates to a number.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaStringValue">
            <summary>
            Gets a value indicating whether the referenced range contains a formula that results in a string value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasNumber">
            <summary>
            Indicates whether the range contains number. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasRichText">
            <summary>
            Indicates whether cell contains formatted rich text string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasString">
            <summary>
            Indicates whether the range contains String. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasStyle">
            <summary>
            Indicates whether range has default style. False means default style.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HorizontalAlignment">
            <summary>
            Returns or sets the horizontal alignment for the specified object.
            Read/write HorizontalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IndentLevel">
            <summary>
            Returns or sets the indent level for the cell or range. Can be an
            integer from 0 to 15. Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsBlank">
            <summary>
            Indicates whether the range is blank. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsBuiltIn">
            <summary>
            Indicates whether name is buildin or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsExternName">
            <summary>
            Indicates whether the name is extern name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsFunction">
            <summary>
            Indicates whether this is function.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasError">
            <summary>
            Indicates whether range contains error value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsGroupedByColumn">
            <summary>
            Indicates whether this range is grouped by column. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsGroupedByRow">
            <summary>
            Indicates whether this range is grouped by row. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsInitialized">
            <summary>
            Indicates whether cell is initialized. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.LastColumn">
            <summary>
            Returns last column of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.LastRow">
            <summary>
            Returns last row of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.NumberValue">
            <summary>
            Gets / sets double value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.NumberFormat">
            <summary>
            Format of current cell. Analog of Style.NumberFormat property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Row">
            <summary>
            Returns the number of the first row of the first area in
            the range. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RowGroupLevel">
            <summary>
            Row group level. Read-only.
            -1 - Not all rows in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RowHeight">
            <summary>
            Returns the height of all the rows in the range specified,
            measured in points. Returns Double.MinValue if the rows in the specified range
            aren't all the same height. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Rows">
            <summary>
            For a Range object, returns an array of Range objects that represent the
            rows in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Columns">
            <summary>
            For a Range object, returns an array of Range objects that represent the
            columns in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Style">
            <summary>
            Returns a Style object that represents the style of the specified
            range. Read/write IStyle.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.CellStyleName">
            <summary>
            Returns name of the Style object that represents the style of the specified
            range. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Text">
            <summary>
            Gets / sets string value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.TimeSpanValue">
            <summary>
            Gets / sets time value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.EnvalutedValue">
            <summary>
            Returns the calculated value of a formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.VerticalAlignment">
            <summary>
            Returns or sets the vertical alignment of the specified object.
            Read/write VerticalAlignType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Value2">
            <summary>
            Returns or sets the cell value. Read/write Variant.
            The only difference between this property and the Value property is
            that the Value2 property doesn't use the Currency and Date data types.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets cell by row and column index. Row and column indexes are one-based.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range. Row and column indexes are one-based. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Item(System.String)">
            <summary>
            Get cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Item(System.String,System.Boolean)">
            <summary>
            Gets cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.ConditionalFormats">
            <summary>
            Collection of conditional formats.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.DataValidation">
            <summary>
            Data validation for the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaStringValue">
            <summary>
            Gets / sets string value evaluated by formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.FormulaNumberValue">
            <summary>
            Gets / sets number value evaluated by formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaBoolValue">
            <summary>
            Indicates if current range has formula bool value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasFormulaErrorValue">
            <summary>
            Indicates if current range has formula error value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Comment">
            <summary>
            Comment assigned to the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.CommentValue">
            <summary>
            Gets the comment value of the nameManager.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.RichText">
            <summary>
            String with rich text formatting. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasMerged">
            <summary>
            Indicates whether this range is part of merged range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.MergeArea">
            <summary>
            Returns a Range object that represents the merged range containing
            the specified cell. If the specified cell is not part of a merged range,
            this property returns NULL. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsWrapText">
            <summary>
            True if Microsoft Excel wraps the text in the object.
            Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.HasExternalFormula">
            <summary>
            Indicates is current range has external formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IgnoreErrorOptions">
            <summary>
            Represents ignore error options. If not single cell returs concatenateed flags.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.IsStringsPreserved">
            <summary>
            Indicates whether all values in the range are preserved as strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.BuiltInStyle">
            <summary>
            Gets/sets built in style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsName.Hyperlinks">
            <summary>
            Gets the collection of hyperlinks associated with the range referred to by this instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Activate(System.Boolean)">
            <summary>
            Activates a single cell, which must be inside the current selection.
            To select a range of cells, use the Select method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Merge">
            <summary>
            Creates a merged cell from the specified Range object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Merge(System.Boolean)">
            <summary>
            Creates a merged cell from the specified Range object.
            </summary>
            <param name="clearCells">Indicates whether to clear unnecessary cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.UnMerge">
            <summary>
            Separates a merged area into individual cells.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FreezePanes">
            <summary>
            Freezes pane at the current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.ClearContents">
            <summary>
            Clear the contents of the Range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Clear(Spire.Xls.ExcelClearOptions)">
            <summary>
            Clears the Content, formats, comments based on clear option.
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Clear(System.Boolean)">
            <summary>
            Clear the contents of the Range with formatting.
            </summary>
            <param name="isClearFormat">True if formatting should also be cleared.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Intersect(Spire.Xls.Core.IXLSRange)">
            <summary>
            Returns intersection of this range with the specified one.
            </summary>
            <param name="range">The Range with which to intersect.</param>
            <returns>Range intersection; if there is no intersection, NULL is returned.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Merge(Spire.Xls.Core.IXLSRange)">
            <summary>
            Returns merge of this range with the specified one.
            </summary>
            <param name="range">The Range to merge with.</param>
            <returns>Merged ranges or NULL if wasn't able to merge ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.AutoFitRows">
            <summary>
            Autofits all rows in the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.AutoFitColumns">
            <summary>
            Autofits all columns in the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.AddComment">
            <summary>
            Adds comment to the range.
            </summary>
            <returns>Range's comment.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderAround">
            <summary>
            Sets around border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderAround(Spire.Xls.LineStyleType)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderAround(Spire.Xls.LineStyleType,System.Drawing.Color)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderAround(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets around border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderInside">
            <summary>
            Sets inside border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderInside(Spire.Xls.LineStyleType)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderInside(Spire.Xls.LineStyleType,System.Drawing.Color)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderInside(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets inside border for current range.
            </summary>
            <param name="borderLine">Represents border line.</param>
            <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.BorderNone">
            <summary>
            Sets none border for current range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.CollapseGroup(Spire.Xls.GroupByType)">
            <summary>
            Collapses current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.ExpandGroup(Spire.Xls.GroupByType)">
            <summary>
            Expands current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.ExpandGroup(Spire.Xls.GroupByType,Spire.Xls.ExpandCollapseFlags)">
            <summary>
            Expands current group.
            </summary>
            <param name="groupBy">
            This parameter specifies whether the grouping should be performed by rows or by columns. 
            </param>
            <param name="flags">Additional option flags.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the RefersToRange collection.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Activate">
            <summary>
            Activates a single cell, which must be inside the current selection.
            To select a range of cells, use the Select method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Creates a clone of the current IXLSRange object.
            </summary>
            <param name="parent">The parent object to which the cloned range will belong.</param>
            <param name="hashNewNames">A dictionary containing new names for the cloned range.</param>
            <param name="book">The workbook in which the cloned range will reside.</param>
            <returns>A new IXLSRange object that is a clone of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.ConvertFullRowColumnName(Spire.Xls.ExcelVersion)">
            <summary>
            Converts full row or column tokens between versions.
            </summary>
            <param name="version">Version to convert into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.CopyTo(Spire.Xls.Core.IXLSRange)">
            <summary>
            Copies the range to the specified destination Range (without updating formulas).
            </summary>
            <param name="destination">Destination range.</param>
            <returns>Range were this range was copied.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindAll(System.TimeSpan)">
            <summary>
            This method seraches for the all cells with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindAll(System.DateTime)">
            <summary>
            This method seraches for the all cells with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindAll(System.Boolean)">
            <summary>
            This method seraches for the all cells with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Flag that represent type of search.</param>
            <returns>All found cells, or Null if value was not found.</returns>    
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindAll(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Flag that represent type of search.</param>
            <returns>All found cells, or Null if value was not found.</returns>    
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindFirst(System.TimeSpan)">
            <summary>
            This method seraches for the first cell with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindFirst(System.DateTime)">
            <summary>
            This method seraches for the first cell with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindFirst(System.Boolean)">
            <summary>
            This method seraches for the first cell with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindFirst(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Flag that represent type of search.</param>
            <returns>First found cell, or Null if value was not found. </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.FindFirst(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Flag that represent type of search.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.SetIndex(System.Int32)">
            <summary>
            Sets index of the named range and raise event.
            </summary>
            <param name="index">New index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.SetIndex(System.Int32,System.Boolean)">
            <summary>
            Sets index of the named range.
            </summary>
            <param name="index">New index.</param>
            <param name="bRaiseEvent">Indicates whether events should be raised.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsName.ExportDataTable(Spire.Xls.ExportTableOptions)">
            <summary>
            Exports data from a specified range to a DataTable based on the provided export options.
            </summary>
            <param name="options"> An instance of <see cref="T:Spire.Xls.ExportTableOptions"/> that specifies how the data should be exported.</param>
            <returns>A DataTable containing the exported data.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsObject">
            <summary>
            Represents an Excel application object that implements the IExcelApplication interface and provide some operation about parent
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsObject.m_parent">
            <summary>
            Reference to parent Object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsObject.m_iReferenceCount">
            <summary>
            Counter which can be used for calculating references.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsObject.m_bIsDisposed">
            <summary>
            Flag which indicates if the object was disposed or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsObject.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.#ctor">
            <summary>
            Default constructor. Object cannot be constructed without setting ReservedHandle
            and parent references.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.Finalize">
            <summary>
            Destructor. Call dispose method of current object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.AddReference">
            <summary>
            Increase the quantity of reference. User must use this method when
            new wrapper on object is created or reference on object stored.
            </summary>
            <returns>New state of Reference count value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.ReleaseReference">
            <summary>
            Decrease quantity of Reference. User must call this method 
            when freeing resources.
            </summary>
            <returns>New state of Reference count value.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsObject.ReferenceCount">
            <summary>
            Get quantity of instance references.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.OnDispose">
            <summary>
            Method which can be overriden by users to take any specific actions when
            object is disposed.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParent(System.Type)">
            <summary>
            This method is used to find parent with specific type.
            </summary>
            <param name="parentType">Parent type to locate.</param>
            <returns>The found parent or NULL if parent was not found.</returns>
            <exception cref="T:System.ArgumentException">
            When there is cycle in object tree.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParent(System.Type,System.Boolean)">
            <summary>
            This method is used to find parent with specific type.
            </summary>
            <param name="parentType">Parent type to locate.</param>
            <param name="bSubTypes">Indicates whether to search subtypes.</param>
            <returns>The found parent or NULL if parent was not found.</returns>
            <exception cref="T:System.ArgumentException">
            When there is cycle in object tree.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParent(System.Object,System.Type)">
            <summary>
            This method is used to find parent with specific type.
            </summary>
            <param name="parentStart">Start object for search operation.</param>
            <param name="parentType">Parent type to locate.</param>
            <returns>The found parent or NULL if parent was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParent(System.Object,System.Type,System.Boolean)">
            <summary>
            This method is used to find parent with specific type.
            </summary>
            <param name="parentStart">Start object for search operation.</param>
            <param name="parentType">Parent type to locate.</param>
            <param name="bSubTypes">Indicates whether to search subtypes.</param>
            <returns>The found parent or NULL if parent was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParents(System.Type[])">
            <summary>
            Finds parent objects.
            </summary>
            <param name="arrTypes">Array of parents type.</param>
            <returns>Returns array of found parent objects.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.FindParent(System.Type[])">
            <summary>
            Find parent of object.
            </summary>
            <param name="arrTypes">Array of parents type.</param>
            <returns>Returns finded parent object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.SetParent(System.Object)">
            <summary>
            Sets parent of the object.
            </summary>
            <param name="parent">New parent for this object.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsObject.CheckDisposed">
            <summary>
            Checks whether object was disposed and throws exception if it was.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsEventArgs">
            <summary>
            Class used as message sender on Property value change. Class provides old and
            new values which allow user to create advanced logic.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsEventArgs.m_old">
            <summary>
            Storage of Old value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsEventArgs.m_new">
            <summary>
            Storage of new value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsEventArgs.m_strName">
            <summary>
            Name of property or unique identifier of the object
            whose value changed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsEventArgs.m_next">
            <summary>
            Value changed event arguments.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsEventArgs.newValue">
            <summary>
            New property value.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsEventArgs.oldValue">
            <summary>
            Old property value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsEventArgs.Name">
            <summary>
            Name of the property. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsEventArgs.Next">
            <summary>
            If more than one property must be changed on one send message, 
            attach it to the ValueChangeEventArgs to create a one way directed list of property changes.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsEventArgs.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Main constructor.
            </summary>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
            <param name="objectName">Unique Identifier of object whose value changed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsEventArgs.#ctor(System.Object,System.Object,System.String,Spire.Xls.Core.Spreadsheet.XlsEventArgs)">
            <summary>
            Main constructor.
            </summary>
            <param name="old">Old property value.</param>
            <param name="newValue">New property value.</param>
            <param name="objectName">Unique Identifier of object whose value changed.</param>
            <param name="next">Next property which must be changed.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsEventArgs.Empty">
            <summary>
            Returns the class instance with empty values. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsEventHandler">
            <summary>
            Delegate which can be used for Property Changed events declarations.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsPageSetup">
            <summary>
            Represents the page setup settings for an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetup.#ctor(System.Object)">
            <summary>
            Sets application and parent fields.
            </summary>
            <param name="parent">Parent object for the page setup.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.HPageBreaks">
            <summary>
            Get horizontal page breaks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.VPageBreaks">
            <summary>
            Get vertical page breaks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.IsPrintGridlines">
            <summary>
            True if cell gridlines are printed on the page. Applies only to
            worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.IsPrintHeadings">
            <summary>
            True if row and column headings are printed with this page. Applies
            only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.PrintArea">
            <summary>
            Returns or sets the range to be printed, as a string using A1-style
            references in the language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.PrintTitleColumns">
            <summary>
            Returns or sets the columns that contain the cells to be repeated
            on the left side of each page, as a string in A1-style notation
            in the language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.PrintTitleRows">
            <summary>
            Returns or sets the rows that contain the cells to be repeated at
            the top of each page, as a string in A1-style notation in the
            language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.RelationId">
            <summary>
            Gets / sets relation id to the printer settings part.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.IsSummaryRowBelow">
            <summary>
            Indicates whether summary rows will appear below detail in outlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.IsSummaryColumnRight">
            <summary>
            Indicates whether summary columns will appear right of the detail in outlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.IsFitToPage">
            <summary>
            Indicates whether fit to page mode is selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.NeedDataArray">
            照搬A模型，该属性有问题？
            <summary>
            Indicates whether data array is required by this record.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.Worksheet">
            <summary>
            Returns parent worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.DefaultRowHeight">
            <summary>
            Gets or sets default row height.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Spire.Xls.Core.Spreadsheet.XlsPageSetup.DefaultRowHeightFlag" -->
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetup.Clone(System.Object)">
            <summary>
            Creates copy of the current instance.
            </summary>
            <param name="parent">Parent for the new instance.</param>
            <returns>A clone of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetup.GetStoreSize(Spire.Xls.ExcelVersion)">
            <summary>
            Size of the required storage space. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase">
            <summary>
            Summary description for PageSetupBaseImpl.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DEFAULT_TOP_MARGIN">
            <summary>
            Value of the top margin by default.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DEFAULT_BOTTOM_MARGIN">
            <summary>
            Value of the bottom margin by default.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DEFAULT_LEFT_MARGIN">
            <summary>
            Value of the left margin by default.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DEFAULT_RIGHT_MARGIN">
            <summary>
            Value of the right margin by default.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSizeEntry">
            <summary>
            This class contains size of the paper.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSizeEntry.Width">
            <summary>
            Paper width in points.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSizeEntry.Height">
            <summary>
            Paper height in points.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSizeEntry.#ctor">
            <summary>
            Default constructor. To prevent creation without arguments.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSizeEntry.#ctor(System.Double,System.Double,Spire.Xls.MeasureUnits)">
            <summary>
            Initializes new instance of paper size entry.
            </summary>
            <param name="width">Paper width.</param>
            <param name="height">Paper height.</param>
            <param name="units">Units in which width and height are set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.#cctor">
            <summary>
            Sets application and parent fields.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.IsSettingsNotValid">
            <summary>
            Indicates whether paper size, scaling factor, paper orientation (portrait / landscape),
            print resolution, and number of copies are not initialized.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.AutoFirstPageNumber">
            <summary>
            Indicates whether FirstPageNumber is set to Auto or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.BlackAndWhite">
            <summary>
            True if elements of the document will be printed in black and white.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.BottomMargin">
            <summary>
            Returns or sets the size of the bottom margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooter">
            <summary>
            Returns or sets the center part of the footer. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PrinterSettings">
            <summary>
            Returns or sets the settings of the printer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterImage">
            <summary>
            Gets / set image for center part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeader">
            <summary>
            Returns or sets the center part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderImage">
            <summary>
            Gets / set image for center part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHorizontally">
            <summary>
            True if the sheet is centered horizontally on the page when it is
            printed. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterVertically">
            <summary>
            True if the sheet is centered vertically on the page when it is
            printed. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Copies">
            <summary>
            Number of copies to print.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Draft">
            <summary>
            True if the sheet will be printed without graphics.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FirstPageNumber">
            <summary>
            Returns or sets the first page number that will be used when
            this sheet is printed. If xlAutomatic, Microsoft Excel chooses the
            first page number. The default is xlAutomatic. Read / write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FooterMarginInch">
            <summary>
            Returns or sets the distance from the bottom of the page to the footer,
            in inches. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FitToPagesTall">
            <summary>
            Returns or sets the number of pages tall the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write int.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FitToPagesWide">
            <summary>
            Returns or sets the number of pages wide the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write int.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.HeaderMarginInch">
            <summary>
            Returns or sets the distance from the top of the page to the header,
            in inches. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.HResolution">
            <summary>
            Gets or sets horizontal resolution in dpi.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FullHeaderString">
            <summary>
            Represents full header string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FullFooterString">
            <summary>
            Gets footer full string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FirstHeaderString">
            <summary>
            Represents first page header string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.FirstFooterString">
            <summary>
            Gets first page footer string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.OddHeaderString">
            <summary>
            Gets Odd page header string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.OddFooterString">
            <summary>
            Gets Odd page footer string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.EvenHeaderString">
            <summary>
            Gets Even page header string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.EvenFooterString">
            <summary>
            Gets OddEven page footer string. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.AlignWithMargins">
            <summary>
            Indicates whether align header footer margins with page margins.default is 1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DifferentOddEven">
            <summary>
            Indicates whether different odd and even page headers and footers.default is 0
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.ScaleWithDoc">
            <summary>
            Indicates whether scale header and footer with document scaling.default is 1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.DifferentFirst">
            <summary>
            Indicates whether different first page header and footer.default is 0
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.VResolution">
            <summary>
            Gets or sets vertical resolution in dpi.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooter">
            <summary>
            Returns or sets the left part of the footer. Read / write String.
            &amp;L Left aligns the characters that follow.
            &amp;C Centers the characters that follow.
            &amp;R Right aligns the characters that follow.
            &amp;E Turns double-underline printing on or off.
            &amp;X Turns superscript printing on or off.
            &amp;Y Turns subscript printing on or off.
            &amp;B Turns bold printing on or off.
            &amp;I Turns italic printing on or off.
            &amp;U Turns underline printing on or off.
            &amp;S Turns strikethrough printing on or off.
            &amp;D Prints the current date.
            &amp;T Prints the current time.
            &amp;F Prints the name of the document.
            &amp;A Prints the name of the workbook tab.
            &amp;P Prints the page number.
            &amp;P+number Prints the page number plus the specified number.
            &amp;P-number Prints the page number minus the specified number.
            &amp;&amp; Prints a single ampersand.
            &amp; "fontname" Prints the characters that follow in the specified font. Be sure to include the double quotation marks.
            &amp;nn Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points.
            &amp;N Prints the total number of pages in the document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterImage">
            <summary>
            Gets / set image for left part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeader">
            <summary>
            Returns or sets the left part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderImage">
            <summary>
            Gets / set image for left part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftMargin">
            <summary>
            Returns or sets the size of the left margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureCropTop">
            <summary>
            Gets or set crop top height of picture for left part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for left part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for left part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureCropRight">
            <summary>
            Gets or set crop right width of picture for left part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureCropTop">
            <summary>
            Gets or set crop top height of picture for left part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for left part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for left part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureCropRight">
            <summary>
            Gets or set crop right width of picture for left part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureCropTop">
            <summary>
            Gets or set crop top height of picture for center part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for center part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for center part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureCropRight">
            <summary>
            Gets or set crop right width of picture for center part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureCropTop">
            <summary>
            Gets or set crop top height of picture for center part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for center part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for center part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureCropRight">
            <summary>
            Gets or set crop right width of picture for center part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureCropTop">
            <summary>
            Gets or set crop top height of picture for right part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for right part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for right part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureCropRight">
            <summary>
            Gets or set crop right width of picture for right part of the header,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureCropTop">
            <summary>
            Gets or set crop top height of picture for right part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureCropBottom">
            <summary>
            Gets or set crop bottom height of picture for right part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureCropLeft">
            <summary>
            Gets or set crop left width of picture for right part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureCropRight">
            <summary>
            Gets or set crop right width of picture for right part of the footer,in unit of centimeters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Order">
            <summary>
            Returns or sets the order that Microsoft Excel uses to number
            pages when printing a large worksheet. Read / write ExcelOrder.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Orientation">
            <summary>
            Portrait or landscape printing mode. Read / write ExcelPageOrientation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PaperSize">
            <summary>
            Returns or sets the size of the paper. Read / write ExcelPaperSize.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.SetCustomPaperSize(System.Single,System.Single)">
            <summary>
            Sets the custom paper size. Unit mm.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CustomPaperSizeName">
            <summary>
            Returns or sets the name of custom paper that is from printer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.IsAutoPaperSize">
            <summary>
            Returns whether paper size is automatic. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PrintComments">
            <summary>
            Returns or sets the way comments are printed with the sheet.
            Read / write ExcelPrintLocation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PrintErrors">
            <summary>
            Sets or returns an ExcelPrintErrors constant specifying the type of
            print error displayed. This feature allows users to suppress the
            display of error values when printing a worksheet. Read / write.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PrintNotes">
            <summary>
            True if cell notes are printed as end notes with the sheet. Applies
            only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PrintQuality">
            <summary>
            Returns or sets the print quality. Read / write ushort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RecordCode">
            <summary>
            Returns code of the biff storage. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.StreamPos">
            <summary>
            Indicates record position in stream. This is a utility member of class and
            is used only in the serialization process. Does not influence the data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooter">
            <summary>
            Returns or sets the right part of the footer. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterImage">
            <summary>
            Gets / set image for right part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeader">
            <summary>
            Returns or sets the right part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderImage">
            <summary>
            Gets / set image for right part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightMargin">
            <summary>
            Returns or sets the size of the right margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.TopMargin">
            <summary>
            Returns or sets the size of the top margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Zoom">
            <summary>
            Returns or sets a percentage (between 10 and 400 percent) by which
            Microsoft Excel will scale the worksheet for printing. Applies only
            to worksheets. Read / write ushort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureWidth">
            <summary>
            Gets or set width of picture for center part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterFooterPictureHeight">
            <summary>
            Gets or set height of picture for center part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureWidth">
            <summary>
            Gets or set width of picture for center part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.CenterHeaderPictureHeight">
            <summary>
            Gets or set height of picture for center part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureWidth">
            <summary>
            Gets or set width of picture for left part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftFooterPictureHeight">
            <summary>
            Gets or set height of picture for left part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureWidth">
            <summary>
            Gets or set width of picture for left part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.LeftHeaderPictureHeight">
            <summary>
            Gets or set height of picture for left part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureWidth">
            <summary>
            Gets or set width of picture for right part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightFooterPictureHeight">
            <summary>
            Gets or set height of picture for right part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureWidth">
            <summary>
            Gets or set width of picture for right part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.RightHeaderPictureHeight">
            <summary>
            Gets or set height of picture for right part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.BackgoundImage">
            <summary>
            Gets / sets background image.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.ODSPageBackground">
            <summary>
            Returns ods page background. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.GetStoreSize(Spire.Xls.ExcelVersion)">
            <summary>
            Size of the required storage space. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PageWidth">
            <summary>
            Returns page width in points. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.PageHeight">
            <summary>
            Returns page width in points. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsPageSetupBase.Copy(Spire.Xls.PageSetup)">
            <summary>
            Copies the settings from the source PageSetup to the current PageSetup.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsRange">
            <summary>
            Represents a range of cells in an Excel worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.DEF_MAX_HEIGHT">
            <summary>
            Default maximum height value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_book">
            <summary>
            Represents the workbook object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_iLeftColumn">
            <summary>
            Index of the left column.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_iRightColumn">
            <summary>
            Index of the right column.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_iTopRow">
            <summary>
            Index of the top row.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_iBottomRow">
            <summary>
            Index of the bottom row.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsRange.m_style">
            <summary>
            The base style for the cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsSingleCell">
            <summary>
            Checks if the current selection is a single cell.
            </summary>
            <returns>
            true if the selection is a single cell, false otherwise.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.BooleanValue">
             <summary>
             Returns or sets the bool value of the specified range.
             <example>The following code illustrates how to access Boolean property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set and get BooleanValue</para>
                 <para>worksheet.Range[2, 4].BooleanValue = true;</para>
                 <para>bool boolean = worksheet.Range[2, 4].BooleanValue;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Borders">
            <summary>
            Returns a  Borders collection that represents the borders of a style 
            or a range of cells (including a range defined as part of a 
            conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.BuiltInStyle">
             <summary>
             Gets/sets built in style.
             <example>The following code illustrates how to access BuiltInStyle property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
            
                 <para>//Set built in style</para>
                 <para>worksheet["C2"].BuiltInStyle = BuiltInStyles.Accent3;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BuiltInStyle.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CellList">
            <summary>
            Returns a Range object that represents the cells in the specified range. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CellStyleName">
             <summary>
             Gets/sets name of the style for the current range.
             <example>The following code illustrates how to access CellStyleName of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add and set style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                 <para>worksheet["C2"].Style = style;</para>
                         
                 <para>//Check Style name</para>
                 <para>Console.Write(worksheet["C2"].CellStyleName);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Column">
            <summary>
            Returns the number of the first column in the first area in the specified range.
            <example>The following code illustrates how to access Column property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Get specified column</para>
                <para>int firstColumn = worksheet["E1:R3"].Column;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ColumnGroupLevel">
            <summary>
            Column group level.
            </summary>
            <remarks>
            -1 - column group is not same.
             0 - Not group
             1 - 7 - group level.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Columns">
            <summary>
            For a Range object, it returns an array of Range objects that represent the 
            columns in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ColumnWidth">
            <summary>
            Returns or sets the width of all columns in the specified range. 
            <example>The following code illustrates how to set the width of all columns in the specified range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Set the ColumnWidth</para>
                <para>worksheet["A1"].Text = "This cell contains sample text";</para>
                <para>worksheet["A1"].ColumnWidth = 25;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("ColumnWidth.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Comment">
            <summary>
            Returns a Comment object that represents the comment associated with the cell in the upper-left corner of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ConditionalFormats">
            <summary>
            Collection of conditional formats for the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Count">
            <summary>
            Returns the number of objects in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CurrentRegion">
            <summary>
            Get the range associated with a range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.DataValidation">
             <summary>
             Get dataValidation of the sheet. Read Only.
             <example>The following code illustrates how to access DataValidation property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Data validation for number</para>
                 <para>IDataValidation validation = worksheet.Range["A3"].DataValidation;</para>
                 <para>validation.AllowType = CellDataType.Integer;</para>
            
                 <para>//Value between 0 to 10</para>
                 <para>validation.CompareOperator = ValidationComparisonOperator.Between;</para>
                 <para>validation.Formula1 = "0";</para>
                 <para>validation.Formula2 = "10";</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DataValidation.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.DateTimeValue">
            <summary>
            Gets/sets DateTime value of the range.
            <example>The following code illustrates how to set and access DateTimeValue property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Set and get the DateTimeValue of specified range</para>
                <para>worksheet.Range[2, 4].DateTimeValue = DateTime.Now;</para>
                <para>DateTime dateTime = worksheet.Range[2, 4].DateTimeValue;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("DateTimeValue.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the 
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or 
            columns) that contains the specified range. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or 
            rows) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.EnvalutedValue">
             <summary>
             Returns the calculated value of a formula.
             <example>The following code illustrates how to access a calculated value:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Returns the calculated value of a formula using the most current inputs</para>
                 <para>string calculatedValue = worksheet["C1"].EnvalutedValue;</para>
                 <para>Console.WriteLine(calculatedValue);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ErrorValue">
            <summary>
            Gets or sets error value of this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Formula">
            <summary>
            Returns or sets the object's formula in A1-style notation and in 
            the language of the macro.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaArray">
             <summary>
             Returns or sets the array formula of a range.
             <example>The following code illustrates how to set and access FormulaArray property of the range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assign array formula</para>
                 <para>worksheet.Range["A1:D1"].FormulaArray = "{1,2,3,4}";</para>
                         
                 <para>//Adding a named range for the range A1 to D1</para>
                 <para>worksheet.Names.Add("ArrayRange", worksheet.Range["A1:D1"]);</para>
                 
                 <para>//Assign formula array with named range</para>
                 <para>worksheet.Range["A2:D2"].FormulaArray = "ArrayRange+100";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("FormulaArray.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaArrayR1C1">
            <summary>
            Returns or sets the formula for the object, using R1C1-style notation in the language of the macro
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaBoolValue">
            <summary>
            Gets or sets bool value of the formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaDateTime">
            <summary>
            Gets or sets bool value of the formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaErrorValue">
            <summary>
            Gets or sets error value of the formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaNumberValue">
            <summary>
            Gets or sets double value of the formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaR1C1">
            <summary>
            Returns or sets the formula for the object, using R1C1-style notation in the language of the macro
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaStringValue">
            <summary>
            Gets or sets string value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FormulaValue">
            <summary>
            Gets formula value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasBoolean">
             <summary>
             Indicates whether range contains bool value.
             <example>The following code illustrates how to set and access HasBoolean property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A3"].Value2 = false;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isboolean = worksheet["A3"].HasBoolean;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasBoolean.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasComment">
            <summary>
            Gets a value indicating whether the cell has a comment.
            </summary>
            <returns>True if the cell has a comment; otherwise, false.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ColumnCount">
            <summary>
            Gets number of columns.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RowCount">
            <summary>
            Gets number of rows.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasDataValidation">
            <summary>
            Indicates whether specified range object has data validation.
            If Range is not single cell, then returns true only if all cells have data validation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasDateTime">
             <summary>
             Determines if all cells in the range contain datetime.
             <example>The following code illustrates how to set and access HasDateTime property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A1"].Value2 = DateTime.Now;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isDateTime =  worksheet["A1"].HasDateTime;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasDateTime.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasError">
            <summary>
            Indicates whether range contains error value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasExternalFormula">
            <summary>
            Check if the formula in the range has external links. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormula">
            <summary>
            True if all cells in the range contain formulas; 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaArray">
            <summary>
            Determines if all cells in the range contain array-entered formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaBoolValue">
            <summary>
            Determines if all cells in the range contain formula bool value..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaDateTime">
            <summary>
            Indicates if current range has formula value formatted as DateTime. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaErrorValue">
            <summary>
            Determines if all cells in the range contain error value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaNumberValue">
            <summary>
            Indicates whether current range has formula number value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasFormulaStringValue">
            <summary>
            Indicates whether current range contains formula value which evaluated as string. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasMerged">
             <summary>
             Indicates whether this range is part of merged range.
             <example>The following code illustrates how to access HasMerged property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
            
                 <para>//Set merge</para>
                 <para>worksheet["A1:B1"].Merge();</para>
            
                 <para>//Check merge</para>
                 <para>Console.Write(worksheet["A1:B1"].HasMerged);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasNumber">
             <summary>
             Determines if any one cell in the range contain number.
             <example>The following code illustrates how to set and access Value2 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A2"].Value2 = 45;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isNumber =  worksheet["A2"].HasNumber;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasNumber.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasPictures">
            <summary>
            Indicates whether the range is blank.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasRichText">
             <summary>
             Determines if all cells in the range contain rich text string.
             <example>The following code illustrates how to access HasRichText property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>IStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set rich text</para>
                 <para>IRichTextString richText = worksheet["C2"].RichText;</para>
                 <para>richText.Text = "Sample";</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.Color = Color.Red;</para>
                 <para>richText.SetFont(0, 5, font);</para>
                 
                 <para>//Check HasRichText</para>
                 <para>Console.Write(worksheet["C2"].HasRichText);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasRichText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasString">
            <summary>
            Determines if all cells in the range contain string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasStyle">
             <summary>
             Determines if all cells in the range contain  differs from default style.
             <example>The following code illustrates how to access HasStyle property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set color and style</para>
                 <para>style.Color = Color.Red;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Check HasStyle</para>
                 <para>Console.Write(worksheet["C2"].HasStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasStyle.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HorizontalAlignment">
             <summary>
             Returns or sets the horizontal alignment for the specified object.
             <example>The following code illustrates how to set and access HasStyle property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
                         
                 <para>//Set alignment</para>
                 <para>worksheet["A1"].HorizontalAlignment = HorizontalAlignType.Right;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HorizontalAlignment.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Hyperlinks">
            <summary>
            Returns hyperlinks for this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IgnoreErrorOptions">
            <summary>
            Represents ignore error options. If not single cell returs concatenateed flags.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IndentLevel">
             <summary>
             Returns or sets the indent level for the cell or range. value should be 0 between 15.
             <example>The following code illustrates how to set indent level for a cell:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Set indent level</para>
                 <para>worksheet["C2"].IndentLevel = 2;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IndentLevel.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsAllNumber">
            <summary>
            Determines if all cells in the range contain number.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsBlank">
            <summary>
            Indicates whether the range is blank.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsFormulaHidden">
            <summary>
            Determines if the formula will be hidden when the worksheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsGroupedByColumn">
            <summary>
            Indicates whether this range is grouped by column.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsGroupedByRow">
            <summary>
            Indicates whether this range is grouped by row.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsInitialized">
            <summary>
            Indicates whether range has been initialized.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsStringsPreserved">
            <summary>
            Indicates whether all values in the range are preserved as strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.IsWrapText">
             <summary>
             Determines if Microsoft Excel wraps the text in the object.
             <example>The following code illustrates how to access WrapText property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "This cell contains sample text";</para>
            
                 <para>//Set wrap text</para>
                 <para>worksheet["A1"].IsWrapText = true;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsWrapText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FirstColumn">
            <summary>
            Gets or sets the index of the first column in the range.
            </summary>
            <value>The index of the first column.</value>
            <returns>The index of the first column.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.FirstRow">
            <summary>
            Gets or sets the first row of the range.
            </summary>
            <value>
            The first row.
            </value>
            <returns>
            The first row of the range.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.LastColumn">
            <summary>
            Gets or sets last column of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.LastRow">
            <summary>
            Gets or sets last row of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.MergeArea">
            <summary>
            Returns a Range object that represents the merged range containing the specified cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.DisplayedText">
            <summary>
            Gets cell displayed text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HasConditionFormats">
            <summary>
            Indicates whether each cell of the range has some conditional formatting. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.NumberFormat">
             <summary>
             Returns or sets the format code for the object.
             <example>The following code illustrates how to set NumberFormat property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set data</para>
                 <para>worksheet["C2"].Value = "3100.23";</para>
                         
                 <para>//Set number format</para>
                 <para>worksheet["C2"].NumberFormat = "#,##1.##";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("NumberFormat.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.NumberText">
            <summary>
            Returns cell text for number format.
            <example>The following code illustrates how to access NumberText property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Gets cell value with its number format</para>
                <para>CellRange range= worksheet.Range[3, 1];</para>
                <para>range.Value = "1/1/2015";</para>
                <para>range.NumberFormat = "dd-MMM-yyyy";</para>
                <para>string numberText = range.NumberText;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("NumberText.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.NumberValue">
            <summary>
            Gets or sets number value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Parent">
            <summary>
            Parent object for this object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeAddress">
             <summary>
             Returns the range reference in the language of the macro. 
             Read-only String.
             <example>The following code illustrates how to access Address property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddress</para>
                 <para>string address = worksheet.Range[3, 4].RangeAddress;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeAddressLocal">
             <summary>
             Returns the range reference for the specified range in the language of the user.
             <example>The following code illustrates how to access AddressLocal property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddressLocal</para>
                 <para>string address = worksheet.Range[3, 4].RangeAddressLocal;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeGlobalAddressWithoutSheetName">
            <summary>
            Return global address without worksheet name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeGlobalAddress">
             <summary>
             Returns the range reference in the language of the macro. 
             <example>The following code illustrates how to access AddressGlobal property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddress</para>
                 <para>string address = worksheet.Range[3, 4].RangeGlobalAddress;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeR1C1Address">
             <summary>
             Returns the range reference using R1C1 notation.
             <example>The following code illustrates how to access AddressR1C1 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeR1C1Address</para>
                 <para>string address = worksheet.Range[3, 4].RangeR1C1Address;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeR1C1AddressLocal">
             <summary>
             Returns the range reference using R1C1 notation.
             <example>The following code illustrates how to access AddressR1C1Local property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeR1C1AddressLocal</para>
                 <para>string address = worksheet.Range[3, 4].RangeR1C1Address;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RichText">
            <summary>
            Returns a RichTextString object that represents the rich text style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Row">
            <summary>
            Returns the number of the first row of the first area in the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RowGroupLevel">
            <summary>
            Row group level.
            </summary>
            <remarks>
            -1 - column group is not same.
             0 - Not group
             1 - 7 - group level.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RowHeight">
             <summary>
             Returns the height of all the rows in the range specified, measured in points.
             <example>The following code illustrates how to set row height:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
                         
                 <para>//Set row height</para>
                 <para>worksheet["A1"].RowHeight = 30;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("RowHeight.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Rows">
            <summary>
            For a Range object, it returns an array of Range objects that represent the 
            rows in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.ExtendedFormatIndex">
            <summary>
            Sets / gets index of extended format.
            </summary>
            <exception cref="T:System.ArgumentException">
            When method is applied for the range that contains 
            more than one cell.
            </exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetExtendedFormatIndex(System.Int32)">
            <summary>
            Sets index of extended format that defines style for this range..
            </summary>
            <param name="index">Index to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetRowHeight(System.Double,System.Boolean)">
            <summary>
            Sets row height.
            </summary>
            <param name="rowHeight">Row height</param>
            <param name="bIsBadFontHeight">Indicates whether font and row height are not compatible.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ApplyStyle(Spire.Xls.Core.IStyle,Spire.Xls.CellStyleFlag)">
            <summary>
            Applies the specified style to the cells within the range, based on the given flag.
            </summary>
            <param name="style">The style to apply.</param>
            <param name="flag">The flag indicating which style properties to apply.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Style">
            <summary>
            Returns a Style object that represents the style of the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Text">
            <summary>
            Gets / sets text of range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range. Row and column indexes are one-based. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets cell by row and column index. Row and column indexes are one-based.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Item(System.String,System.Boolean)">
            <summary>
            Gets cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Item(System.String)">
            <summary>
            Gets cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.TimeSpanValue">
            <summary>
            Gets or sets timespan value of cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Value">
             <summary>
             Returns or sets the value of the specified range.
             <example>The following code illustrates how to set Value of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set value of the range</para>
                 <para>CellRange range= worksheet.Range[3, 1];</para>
                 <para>range.Value = "1/1/2015";</para>
                         
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Value.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Value2">
             <summary>
             Returns or sets the cell value.
             It's not use for current and datetime types.
             <example>The following code illustrates how to access Value2 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A1"].Value2 = DateTime.Now;</para>
                 <para>worksheet["A3"].Value2 = false;</para>
            
                 <para>//Checking Range types</para>
                 <para>Console.WriteLine(worksheet["A1"].HasDateTime);</para>
                 <para>Console.WriteLine(worksheet["A3"].HasBoolean);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.VerticalAlignment">
             <summary>
             Returns or sets the vertical alignment of the specified object.
             <example>The following code illustrates how to set vertical alignment type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
            
                 <para>//Set alignment</para>
                 <para>worksheet["A1"].VerticalAlignment = VerticalAlignType.Top;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("VerticalAlignment.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Worksheet">
            <summary>
            Returns a worksheet object that represents the worksheet 
            containing the specified range. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.Workbook">
            <summary>
            Gets the workbook .
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetNewRangeLocation(System.Collections.Generic.Dictionary{System.String,System.String},System.String@)">
            <summary>
            Gets new range location.
            </summary>
            <param name="names">Worksheet names.</param>
            <param name="sheetName">New worksheet name.</param>
            <returns>New name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Clones current IXLSRange.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="rangeNames">Hash table with new names.</param>
            <param name="book">Parent workbook.</param>
            <returns>Returns clone of current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ClearConditionalFormats">
            <summary>
            Clears conditional formats.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetRectangles">
            <summary>
            Gets rectangle information of current range.
            </summary>
            <returns>Rectangles information</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetRectanglesCount">
            <summary>
            Returns number of rectangles..
            </summary>
            <returns>Number of rectangles.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.WorksheetName">
            <summary>
            Returns name of the parent worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CellsCount">
            <summary>
            Gets number of cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.RangeGlobalAddress2007">
            <summary>
            Gets address global in the format required by Excel 2007.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.CalculateAllValue">
            <summary>
            Caculate all formula for the specified range
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindWorksheet(System.String)">
            <summary>
            Finds the worksheet by the given sheet name.
            </summary>
            <param name="sheetName">The name of the worksheet to find.</param>
            <returns>The worksheet if found, otherwise throws an ArgumentOutOfRangeException.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.CheckRange(System.Int32,System.Int32)">
            <summary>
            Checks if the given row and column indices are within the valid range of the book.
            Throws an ArgumentOutOfRangeException if the indices are out of range.
            </summary>
            <param name="row">The row index to check.</param>
            <param name="column">The column index to check.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.InfillCells">
            <summary>
            Infills cells based on the current range and updates the internal state.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Activate(System.Boolean)">
             <summary>
             Activates a single cell, scroll to it and activates the corresponding sheet.
             To select a range of cells, use the Select method.
             <example>The following code illustrates how to activate a Range with scroll flag:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Activates 'F1' cell.</para>
                 <para>worksheet.Range["F1"].Activate(true);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Activate.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="scroll">True to scroll to the cell</param>
             <returns>Returns the active cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Activate">
            <summary>
            Active single cell in the worksheet
            </summary>
            <returns>Returns the active cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AddComment">
            <summary>
            Adds a comment to the range.
            </summary>
            <returns>Created comment or exists one.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AutoFitColumns">
             <summary>
             Changes the width of the columns in the range in the range to achieve the best fit.
             <example>The following code illustrates how to auto-size column width to its cell content:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Auto-fit columns</para>
                 <para>worksheet.Range["B4"].Text = "Fit the content to column";</para>
                 <para>worksheet.Range["B4"].AutoFitColumns();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AutoFitRows">
             <summary>
             Changes the width of the height of the rows in the range to achieve the best fit.
             <example>The following code illustrates how to auto-size row height to its cell content:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Auto-fit rows</para>
                 <para>worksheet.Range["A2"].Text = "Fit the content to row";</para>
                 <para>worksheet.Range["A2"].IsWrapText = true;</para>
                 <para>worksheet.Range["A2"].AutoFitRows();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderAround">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderAround(Spire.Xls.LineStyleType)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderAround(Spire.Xls.LineStyleType,System.Drawing.Color)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range  with color from System.Drawing.Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick , Color.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderAround(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range  with color from Spire.Xls.ExcelColors structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick , ExcelColors.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderInside">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderInside(Spire.Xls.LineStyleType)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderInside(Spire.Xls.LineStyleType,System.Drawing.Color)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range with color from System.Drawing.Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick , Color.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderInside(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range with color from Spire.Xls.ExcelColors structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick , ExcelColors.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.BorderNone">
             <summary>
             Sets none border for current range.
             <example>The following code illustrates how to remove borders in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Remove borders</para>
                 <para>worksheet["C2"].BorderNone();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderNone.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Clear(Spire.Xls.ExcelClearOptions)">
             <summary>
             Clears the cell based on clear options.
             <example>The following code illustrates how to clear the Range with clear options:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Clears the Range C2 with its clear options</para>
                 <para>worksheet.Range["C2"].Clear(ExcelClearOptions.ClearAll);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ClearContents.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="option">Represents the clear options.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ClearAll">
            <summary>
            Clears the entire object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ClearContents">
             <summary>
             Clear the contents of the Range.
             <example>The following code illustrates how to clear the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Clears the Range C2</para>
                 <para>worksheet.Range["C2"].ClearContents();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ClearContents.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GroupByColumns(System.Boolean)">
            <summary>
            Groups columns. 
            </summary>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GroupByRows(System.Boolean)">
            <summary>
            Groups row. 
            </summary>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.UngroupByColumns">
            <summary>
            Ungroups column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.UngroupByRows">
            <summary>
            Ungroups row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.CollapseGroup(Spire.Xls.GroupByType)">
             <summary>
             Collapses current group.
             <example>The following code illustrates how to remove borders in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Collapse group</para>
                 <para>worksheet.Range["A5:A15"].CollapseGroup(GroupByType.ByRows);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CollapseGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.CopyToClipboard">
            <summary>
            Copies range to the clipboard.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Dispose">
            <summary>
            This method is called when disposing the object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ExpandGroup(Spire.Xls.GroupByType)">
             <summary>
             Expands current group.
             <example>The following code illustrates how to expand the group in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Expand group with flag set to expand parent</para>
                 <para>worksheet.Range["A5:A15"].ExpandGroup(GroupByType.ByRows);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ExpandGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ExpandGroup(Spire.Xls.GroupByType,Spire.Xls.ExpandCollapseFlags)">
             <summary>
             Expands current group.
             <example>The following code illustrates how to perform ExpandGroup in the Range with collapse option:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Expand group with flag set to expand parent</para>
                 <para>worksheet.Range["A5:A15"].ExpandGroup(GroupByType.ByRows, ExpandCollapseFlags.ExpandParent);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ExpandGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
             <param name="flags">Additional option flags.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FreezePanes">
             <summary>
             Freezes panes at the current range in the worksheet. current range should be single cell range.
             <example>The following code illustrates how to freeze a pane in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Applying Freeze Pane to the sheet by specifying a cell</para>
                 <para>worksheet.Range["B2"].FreezePanes();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("FreezePanes.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Merge(Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates a merged cell from the specified Range object.
            </summary>
            <param name="range">The Range to merge with.</param>
            <returns>Merged ranges or null if wasn't able to merge ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Intersect(Spire.Xls.Core.IXLSRange)">
             <summary>
             Returns intersection of this range with the specified one.
             <example>The following code illustrates how to perform intersectwith in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get intersect range</para>
                 <para>IXLSRange range = worksheet.Range["A16:C16"];</para>
                 <para>IXLSRange commonRange = worksheet.Range["B16:D16"].Intersect(range);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Intersect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="range">The Range with which to intersect.</param>
             <returns>Range intersection. If there is no intersection, NULL is returned.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.IsIntersect(Spire.Xls.Core.IXLSRange)">
            <summary>
            Determines if the current range intersects with the specified range.
            </summary>
            <param name="range">The range to compare with.</param>
            <returns>True if the ranges intersect, otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.MeasureString(System.String)">
            <summary>
            Measures size of the string.
            </summary>
            <param name="measureString">String to measure.</param>
            <returns>Size of the string.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Merge">
             <summary>
             Creates a merged cell from the specified Range object.
             <example>The following code illustrates how to merge the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Merge.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.RemoveMergeComment">
            <summary>
            Removes merge comments from a cell range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Merge(System.Boolean)">
             <summary>
             Creates a merged cell from the specified Range object.
             <example>The following code illustrates how to merge the Range with clear option:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
                 <para>worksheet["B1"].Text = "sample";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge(true);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Merge.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="clearCells">Indicates whether to clear unnecessary cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.PartialClear">
            <summary>
            Partially clear range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.TextPartReplace(System.String,System.String)">
            <summary>
            Replaces cell's part text and reserve text's format.
            </summary>
            <param name="oldPartValue">Part value of cell's text to search for.</param>
            <param name="newPartValue">The replacement value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.RemoveCombinedRange(Spire.Xls.CellRange)">
            <summary>
            Removes a combined range from the list of combined ranges and refreshes the combined cells.
            </summary>
            <param name="cr">The cell range to remove.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CombinedCells">
            <summary>
            Gets the list of combined cells.
            </summary>
            <returns>A List of CellRange objects representing the combined cells.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsRange.CombinedAddress">
            <summary>
            Returns the combined range reference in the language.
            Read-only String.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.UnMerge">
             <summary>
             Separates a merged area into individual cells.
             <example>The following code illustrates how to UnMerge the merged cells:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge(true);</para>
            
                 <para>//Unmerge cells</para>
                 <para>worksheet["A1:B1"].UnMerge();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UnMerge.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.MoveTo(Spire.Xls.Core.IXLSRange,System.Boolean)">
            <summary>
            Moves the range to the specified destination.
            </summary>
            <param name="destination">The destination range.</param>
            <param name="bUpdateFormula">A boolean indicating whether to update formula in the destination range.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.MoveTo(Spire.Xls.Core.IXLSRange)">
            <summary>
            Moves the range to the specified destination with the default copy options.
            </summary>
            <param name="destination">The destination range to move to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ReparseFormulaString">
            <summary>
            Reparses formula.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of IXLSRange objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AddComment(System.Boolean)">
            <summary>
            Adds a comment to the range.
            </summary>
            <returns>Created comment or exists one.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AddComment(Spire.Xls.Core.ICommentShape)">
            <summary>
            Adds a comment to the shape.
            </summary>
            <param name="comment">The comment to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the comment is null.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.InsertOrUpdateCellImage(System.IO.Stream,System.Boolean)">
            <summary>
            Adds CellImage from the specified file.
            this method only support WPS
            </summary>
            <param name="stream">Represents image stream to set.</param>
            <param name="scale">scale if true scale for cell else clip the image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.InsertOrUpdateCellImage(System.String,System.Boolean)">
            <summary>
            Adds CellImage from the specified file.
            this method only support WPS
            </summary>
            <param name="fileName">Represents image path to set.</param>
            <param name="scale">scale if true scale for cell else clip the image.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.RemoveCellImage">
            <summary>
            Remove CellImage.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormat(Spire.Xls.AutoFormatType)">
            <summary>
            Sets auto format for current range.
            </summary>
            <param name="format">Represents format to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormat(Spire.Xls.AutoFormatType,Spire.Xls.AutoFormatOptions)">
            <summary>
            Sets auto format for current range.
            </summary>
            <param name="format">Represents auto format to set.</param>
            <param name="options">Represents auto format options.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormatPatterns(Spire.Xls.AutoFormatType)">
            <summary>
            Sets auto format patterns.
            </summary>
            <param name="type">Represents auto format type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormatAlignments(Spire.Xls.AutoFormatType)">
            <summary>
            Sets auot format aling.
            </summary>
            <param name="type">Represents auto format type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormatWidthHeight(Spire.Xls.AutoFormatType)">
            <summary>
            Sets auto format width height.
            </summary>
            <param name="type">Represents auto format type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormatNumbers(Spire.Xls.AutoFormatType)">
            <summary>
            Sets auto format number.
            </summary>
            <param name="type">Represents auto format type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetAutoFormatFontBorder(Spire.Xls.AutoFormatType,System.Boolean,System.Boolean)">
            <summary>
            Sets auto format font border.
            </summary>
            <param name="type">Represents auto format type.</param>
            <param name="bIsFont">Indicates if set font object.</param>
            <param name="bIsBorder">Indicates if set borders.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetDataValidation(Spire.Xls.Core.Spreadsheet.XlsValidation)">
            <summary>
            Sets data validation for the range.
            </summary>
            <param name="dv">Data validation to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.String[],System.Boolean)">
            <summary>
            Replaces cells' values with new data.
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValues">The replacement value.</param>
            <param name="isVertical">Indicates whether to insert values vertically or horizontally.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.String)">
            <summary>
            Replaces cells' values with new data. 
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValue">The replacement value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.Double[],System.Boolean)">
            <summary>
            Replaces cells' values with new data.
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValues">DataColumn to replace.</param>
            <param name="isVertical">Indicates whether to insert values vertically or horizontally.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.Int32[],System.Boolean)">
            <summary>
            Replaces cells' values with new data.
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValues">The replacement value.</param>
            <param name="isVertical">Indicates whether to insert values vertically or horizontally.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Replaces cells' values with new data.
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValues">The replacement value.</param>
            <param name="isFieldNamesShown">Indicates whether to insert values vertically or horizontally.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.DateTime)">
            <summary>
            Replaces cells' values with new data. 
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValue">The replacement value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.Double)">
            <summary>
            Replaces cells' values with new data. 
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValue">The replacement value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Union(Spire.Xls.CellRange)">
            <summary>
            Combines the current range with another cell range.
            </summary>
            <param name="range">The cell range to combine with the current range.</param>
            <returns>A new RangesCollection containing both the current range and the specified range.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Replace(System.String,System.Data.DataColumn,System.Boolean)">
            <summary>
            Replaces cells' values with new data.
            </summary>
            <param name="oldValue">Value to search for.</param>
            <param name="newValues">DataColumn to replace.</param>
            <param name="isFieldNamesShown">Indicates whether to insert values vertically or horizontally.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetBorderToSingleCell(Spire.Xls.BordersLineType,Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
            <summary>
            Sets the border for a single cell.
            </summary>
            <param name="borderIndex">The index of the border to set.</param>
            <param name="borderLine">The style of the border line.</param>
            <param name="borderColor">The color of the border.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the operation is not supported for non-single cells.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ExportDataTable(Spire.Xls.ExportTableOptions)">
            <summary>
            Exports the data from the worksheet to a DataTable based on the provided options.
            </summary>
            <param name="options">The options for exporting the data.</param>
            <returns>A DataTable containing the exported data.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Comments">
            <summary>
            clears the comments of the cell.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.Clear(System.Boolean)">
            <summary>
            Clears the cells in the specified range and optionally resets the cell style to "Normal".
            </summary>
            <param name="isClearFormat">If true, resets the cell style to "Normal" after clearing the cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.CellNameToRowColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Converts cell name to row and column index.
            </summary>
            <param name="name">Name of the cell.</param>
            <param name="iRow">Row index.</param>
            <param name="iColumn">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ParseR1C1Expression(System.String,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Parses R1C1 expression
            </summary>
            <param name="strName">String to parse.</param>
            <param name="rec">Represents rectanle of coordinates.</param>
            <param name="bIsFirst">Indicates is it first expression.</param>
            <returns>Returns rectangle with updated coordinates.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsRange.CellValueChangedEventHandler">
            <summary>
            Represents the method that will handle the CellValueChanged event of a control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CellValueChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.Boolean)">
            <summary>
            Finds all cell ranges that match the specified value within the CellRange.
            </summary>
            <param name="findValue">The value to search for.</param>
            <returns>An array of CellRange objects that match the specified value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.DateTime)">
            <summary>
            Finds all occurrences of the specified DateTime value within the CellRange.
            </summary>
            <param name="findValue">The DateTime value to search for.</param>
            <returns>An array of CellRange objects representing the cells where the DateTime value is found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
            Finds all occurrences of the specified value within the CellRange.
            </summary>
            <param name="findValue">The value to search for.</param>
            <param name="flags">The find options to use.</param>
            <returns>An array of CellRange objects representing the locations where the value was found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.String,Spire.Xls.FindType)">
            <summary>
            Finds all occurrences of the specified value within the CellRange.
            </summary>
            <param name="findValue">The value to search for.</param>
            <param name="flags">The type of search to perform.</param>
            <returns>An array of CellRange objects representing the locations of the found values.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.String,Spire.Xls.FindType,Spire.Xls.ExcelFindOptions)">
            <summary>
            Finds all occurrences of a specified value within the CellRange.
            </summary>
            <param name="findValue">The value to find.</param>
            <param name="flags">The type of search to perform.</param>
            <param name="findOptions">The options to use during the search.</param>
            <returns>An array of CellRange objects representing the locations of the found values.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindAll(System.TimeSpan)">
            <summary>
            Finds all occurrences of the specified TimeSpan value within the CellRange.
            </summary>
            <param name="findValue">The TimeSpan value to find.</param>
            <returns>An array of CellRange objects representing the locations of the found values.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindFirst(System.Boolean)">
            <summary>
            Finds the first cell range that matches the specified value within the CellRange.
            </summary>
            <param name="findValue">The value to search for.</param>
            <returns>The first cell range that matches the specified value, or null if no match is found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindFirst(System.DateTime)">
            <summary>
            Searches for the first occurrence of a DateTime value within the specified area of the CellRange.
            </summary>
            <param name="findValue">The DateTime value to search for.</param>
            <returns>The first matching cell range, or null if not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindFirst(System.Double,Spire.Xls.FindType)">
            <summary>
            Finds the first occurrence of a specified value in the worksheet within the current area.
            </summary>
            <param name="findValue">The value to find.</param>
            <param name="flags">The find options to use.</param>
            <returns>The range containing the first occurrence of the specified value, or null if the value is not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindFirst(System.TimeSpan)">
            <summary>
            Finds the first occurrence of a specified TimeSpan value in the worksheet within the current area.
            </summary>
            <param name="findValue">The TimeSpan value to find.</param>
            <returns>The range containing the first occurrence of the specified TimeSpan value, or null if the value is not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.FindFirst(System.String,Spire.Xls.FindType)">
            <summary>
            Finds the first occurrence of a specified string value in the worksheet within the current area.
            </summary>
            <param name="findValue">The string value to find.</param>
            <param name="flags">The find options to use.</param>
            <returns>The range containing the first occurrence of the specified string value, or null if the value is not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.AddCombinedRange(Spire.Xls.CellRange)">
            <summary>
            Adds a combined range to the collection if it is not already present.
            </summary>
            <param name="cr">The cell range to add.</param>
            <returns>The current cell range object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.UpdateRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update region of range
            </summary>
            <param name="startRow">first Row</param>
            <param name="startColumn">first Column</param>
            <param name="endRow">last Row</param>
            <param name="endColumn">last Column</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.ConvertToNumber">
            <summary>
            Convert number that stored as text to number
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.SetSharedFormula(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the shared formula for a cell or a range of cells.
            </summary>
            <param name="sharedFormula">The shared formula to set.</param>
            <param name="rowNumber">The number of rows in the range.</param>
            <param name="columnNumber">The number of columns in the range.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetConditionFormatsStyle">
            <summary>
            Get the calculated condition format style of current Range.
            If style of every cell is not same, return null.
            If current range without condition format, return null.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsRange.GetNamedRange">
            <summary>
            Get the named range object of current Range.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.CellValueChangedEventArgs">
            <summary>
            Provides data for the CellValueChanged event.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.CellValueChangedEventArgs.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.CellValueChangedEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.CellValueChangedEventArgs.Range">
            <summary>
            Gets or sets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsStyle">
            <summary>
            Represents a style for cells in an Excel worksheet, inheriting from AddtionalFormatWrapper and implementing interfaces for comparison, styling, and named object functionality.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsStyle.DEF_DEFAULT_STYLES">
            <summary>
            Represents a static array of strings that contains default style definitions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsStyle.Name">
            <summary>
            Gets the name of the entity, returning the name from the base class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsStyle.IsInitialized">
            <summary>
            Gets a value indicating whether the current style is initialized and different from the default style.
            </summary>
            <returns>
            True if the style is not the default style and is different from it; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsStyle.BuiltIn">
            <summary>
            Gets a value indicating whether the object is built-in.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsStyle.Index">
            <summary>
            Gets the xfIndex of the item.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsStyle.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">The parent object to which the cloned object will belong.</param>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsStyle.CompareTo(System.Object)">
            <summary>
            Compares the current XlsStyle instance with another object to determine their relative order.
            </summary>
            <param name="obj">The object to compare with the current XlsStyle instance.</param>
            <returns>
            Zero: This instance is equal to obj.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsStyle.BeginUpdate">
            <summary>
            Begins the update process for the control.This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsStyle.EndUpdate">
            <summary>
            Ends the update process, making the control available for interaction.This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper">
            <summary>
            Represents a wrapper class for Excel validation.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.#ctor(Spire.Xls.Core.Spreadsheet.XlsRange,Spire.Xls.Core.Spreadsheet.XlsValidation)">
            <summary>
            Initializes a new instance of the XlsValidationWrapper class with the specified range and validation,.
            </summary>
            <param name="range">The XlsRange object representing the range to which the validation is applied.</param>
            <param name="wrap">The XlsValidation object representing the validation to be applied.</param>
            <returns>
            An instance of the XlsValidationWrapper class.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.#ctor(Spire.Xls.Core.Spreadsheet.XlsRange,Spire.Xls.Core.Spreadsheet.XlsValidation,System.Boolean)">
            <summary>
            Initializes a new instance of the XlsValidationWrapper class.
            If the provided XlsValidation object is null, it creates a new validation for the specified range and sets it up based on the read-only flag.
            </summary>
            <param name="range">The XlsRange to which the validation will be applied.</param>
            <param name="wrap">The XlsValidation object to wrap. If null, a new validation will be created.</param>
            <param name="readOnly">A flag indicating whether the validation should be read-only.</param>
            <returns>An instance of XlsValidationWrapper.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.Parent">
            <summary>
            Gets the parent object of the current data validation instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.InputTitle">
            <summary>
            Title of the input box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.InputMessage">
            <summary>
            Message of the input box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.ErrorTitle">
            <summary>
            Title of the error box. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.ErrorMessage">
            <summary>
            Message of the error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.Formula1">
            <summary>
            Gets or sets the first formula associated with data validation.
            </summary>
            <returns>
            The first formula as a string.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.DateTime1">
            <summary>
            First formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.Formula2">
            <summary>
            Gets or sets the second formula associated with data validation.
            </summary>
            <returns>
            The second formula as a string.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.DateTime2">
            <summary>
            Second formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.AllowType">
            <summary>
            Gets or sets the type of data that is allowed in the cell range associated with the data validation.
            </summary>
            <returns>
            A <see cref="T:Spire.Xls.CellDataType"/> value that specifies the type of data allowed.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.CompareOperator">
            <summary>
            Gets or sets the comparison operator used in data validation.
            </summary>
            <returns>The comparison operator of type Spire.Xls.ValidationComparisonOperator.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.IsListInFormula">
            <summary>
            Indicates whether formula contains list of values.
            </summary>
            <returns>
            True if the list is included in the formula; otherwise, false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.IgnoreBlank">
            <summary>
            Indicates whether empty cell is allowed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.IsSuppressDropDownArrow">
            <summary>
            Indicates whether to suppress drop-down arrow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.ShowInput">
            <summary>
             Indicates whether to show prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.ShowError">
            <summary>
            Indicates whether to show error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.PromptBoxHPosition">
            <summary>
             Horizontal position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.PromptBoxVPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.IsInputVisible">
            <summary>
             Indicates whether prompt box is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.IsInputPositionFixed">
            <summary>
            Indicates whether position of the prompt box is fixed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.AlertStyle">
            <summary>
            Style of the error.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.Values">
            <summary>
            Array of possible values (when values in list are entered manually)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsValidationWrapper.DataRange">
            <summary>
            Range of possible values.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsVPageBreak">
            <summary>
            Represents a vertical page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.Location">
            <summary>
            Location of the page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.Type">
            <summary>
            Type of the page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.Column">
            <summary>
            Gets the column index of the vertical page break. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.StartRow">
            <summary>
            Gets the start row index of the vertical page break. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.EndRow">
            <summary>
            Gets the end row index of the vertical page break. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsVPageBreak.Clone(System.Object)">
            <summary>
            Clones current instance.
            </summary>
            <param name="parent">Parent for new instance.</param>
            <returns>A clone of the current instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsWorkbook">
            <summary>
            Represents a workbook.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_SUMMARY_INFO">
            <summary>
            Stream name that represent summary name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_DOCUMENT_SUMMARY_INFO">
            <summary>
            Stream name that represent document summary name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_STREAM_NAME1">
            <summary>
            Stream name used by new versions of Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_STREAM_NAME2">
            <summary>
            Old styled name of stream in Excel binary file.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_VBA_MACROS">
            <summary>
            Name of sub-storage in input file which contains macros of opened file.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_VBA_SUB_STORAGE">
            <summary>
            Sub-storage of Macros storage. Used for checks is file format correct 
            or not.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_SELF">
            <summary>
            Self-referential external reference.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_CODED">
            <summary>
            File name has been excoded.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_EMPTY">
            <summary>
            Reference to an empty workbook name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_VOLUME">
            <summary>
            Represents an MS-DOS drive letter. It is followed by the drive letter.
            For example, the formula ='D:\SALES.XLS'!A1 generates this character key
            when the dependent workbook is not on the D drive. UNC file names, such as
            \\server\share\myfile.xls, generate an @ character after this character key;
            this replaces the initial double backslash (\\).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_SAMEVOLUME">
            <summary>
            Indicates that the source workbook is on the same drive as the 
            dependent workbook (the drive letter is omitted). For example
            the formula ='\SALES.XLS'!A1 generates this key when
            the dependent workbook is not in the root directory.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_DOWNDIR">
            <summary>
            Indicates that the source workbook is in a subdirectory of the current directory.
            For example, the formula ='XL\SALES.XLS'!A1 generates the DEF_CHAR_DOWNDIR key.
            The subdirectory name precedes the DEF_CHAR_DOWNDIR key, and the file
            name follows it.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_UPDIR">
            <summary>
            Indicates that the source workbook is in the parent directory of the current directory.
            For example, the formula ='..\SALES.XLS'!A1 genereates the DEF_CHAR_UPDIR key.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_LONGVOLUME">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_STARTUPDIR">
            <summary>
            Indicates that the source workbook is in the startup directory
            (the Xlstart subdirectory of the directory that contains Excel.exe).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_ALTSTARTUPDIR">
            <summary>
            Indicates that the source workbook is in the alternate startup directory.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_LIBDIR">
            <summary>
            Indicates that the source workbook is in the Library directory.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CHAR_NETWORKPATH">
            <summary>
            Indicates that path is UNC file name (is replaced by \\).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_NETWORKPATH_START">
            <summary>
            Start of the UNC network path.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_NOT_PASSWORD_PROTECTION">
            <summary>
            Indicates that current workbook is not protected.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_REMOVED_SHEET_INDEX">
            <summary>
            Index of the removed sheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.HttpStart">
            <summary>
            Start of the http url string.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsNeedB">
            <summary>
            Default Palette colors. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_FIRST_USER_COLOR">
            <summary>
            First user-defined color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_BAD_SHEET_NAME">
            <summary>
            Ilegal sheet name
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_RESPONSE_OPEN">
            <summary>
            Represents the default response type for opening content inline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_RESPONSE_DIALOG">
            <summary>
            Represents the default response dialog type for attachments.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_REMOVED_INDEX">
            <summary>
            Index of the removed sheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_EXCEL97_CONTENT_TYPE">
            <summary>
            Content type for Excel 97.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_EXCEL2000_CONTENT_TYPE">
            <summary>
            Content type for Excel 2000.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_EXCEL2007_CONTENT_TYPE">
            <summary>
            Content type for Excel 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_CSV_CONTENT_TYPE">
            <summary>
            Content type for CSV.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.STD_PSD">
            <summary>
            Standard password.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.TextQualifier">
            <summary>
            TextQualifier.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_BOOK_GROUP">
            <summary>
            Name of the book's group in regular expressions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_SHEET_GROUP">
            <summary>
            Name of the sheet's group in regular expressions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_BOOK_SHEET_INDEX">
            <summary>
            Index of worksheet used for workbook references.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_FORMAT_STYLE_NAME_START">
            <summary>
            Name preffix for styles in ignore style mode.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_STREAM_SKIP_COPYING">
            <summary>
            Array with streams that shouldn't be copied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_RESERVED_BOOK_CHARS">
            <summary>
            Array with characters that are reserved.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DefaultThemeColors">
            <summary>
            Default theme colors.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FirstChartColor">
            <summary>
            First chart color index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.LastChartColor">
            <summary>
            Last chart color index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DEF_COMENT_PARSE_COLOR">
            <summary>
            Defines the default color for comment parsing, which is a light gray (RGB: 255, 255, 222).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SheetRangeSeparator">
            <summary>
            Separator between worksheets in the cross-worksheet formula (Sheet1:Sheet3!A1).
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_iMaxXFCount">
            <summary>
            Maximum possible number of extended formats.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_dataSorter">
            <summary>
            Represents the Data sorter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_addinFunctions">
            <summary>
            Collection of all add-in functions used in this workbook.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_iCurrentObjectId">
            <summary>
            Current object id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_iCurrentShapeId">
            <summary>
            First free shape id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_iCurrentHeaderId">
            <summary>
            First free shape id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_dMaxDigitWidth">
            <summary>
            Maximum digit width (used to evaluate different column width)
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_builtInDocumentProperties">
            <summary>
            Collection of built-in document properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorkbook.m_customDocumentProperties">
            <summary>
            Collection of custom document properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StandardRowHeight">
            <summary>
            Gets or sets the standard row height for all worksheets in the workbook.
            </summary>
            <value>The standard row height.</value>
            <returns>The standard row height as a double.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StandardRowHeightInPixels">
            <summary>
            Gets or sets the standard row height in pixels.
            </summary>
            <value>The standard row height in pixels.</value>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StringUtil">
            <summary>
            Provides a collection of utility methods for string manipulation.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StringUtil.GetInternalFontConst(Spire.Xls.Core.Converter.Spreadsheet.WorkbookConverter)">
            <summary>
            Retrieves internal font constants from the workbook.
            </summary>
            <param name="book">The workbook from which to retrieve the font constants.</param>
            <returns>An array of internal font constants.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.MaxXFCount">
            <summary>
            Returns maximum possible number of extended formats. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.MaxIndent">
            <summary>
            Gets the maximum indentation level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Version">
            <summary>
            Gets or sets the Excel version of the workbook.
            </summary>
            <value>The Excel version.</value>
            <returns>The Excel version.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Worksheets">
            <summary>
            Returns a Sheets collection that represents all the worksheets 
            in the specified workbook. Read-only Sheets object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerWorksheets">
            <summary>
            Gets the inner worksheets collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerAddInFunctions">
            <summary>
            Gets the collection of add-in functions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerFonts">
            <summary>
            Gets the collection of fonts used within the spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerGraphics">
            <summary>
            Gets the inner graphics object.
            </summary>
            <returns>The inner graphics object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerPalette">
            <summary>
            Gets the inner palette of colors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerFormats">
            <summary>
            Collection of all formats used in the workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InnerNamesColection">
            <summary>
            Return WorkbookNamesColection from parrent WorkBook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Names">
            <summary>
            For an ReservedHandle object, it returns a Names collection that represents
            all the names in the active workbook. For a Workbook object, it returns
            a Names collection that represents all the names in the specified
            workbook (including all worksheet-specific names).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DataConns">
            <summary>
            Gets the data connections associated with the workbook.
            </summary>
            <returns>A collection of data connections.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ExternalLinks">
            <summary>
            Gets the collection of external links in the workbook.
            </summary>
            <returns>The collection of external links.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ObjectCount">
            <summary>
            Gets the count of objects in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.OleSize">
            <summary>
            Gets or sets the OleSize property.
            </summary>
            <value>
            The OleSize property as an IXLSRange.
            </value>
            <returns>
            The OleSize property as an IXLSRange.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ActiveSheet">
            <summary>
            Gets the active worksheet.
            </summary>
            <returns>The active worksheet.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ActiveSheetIndex">
            <summary>
            Gets or sets the index of the active worksheet in the workbook.
            </summary>
            <value>The index of the active worksheet.</value>
            <returns>The index of the active worksheet.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is out of range.</exception>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CodeName">
            <summary>
            Gets or sets the code name of the worksheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Palette">
            <summary>
            Gets the color palette.
            </summary>
            <returns>
            An array of colors representing the palette.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Date1904">
            <summary>
            Gets or sets a value indicating whether the workbook should use the 1904 date system.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StandardFont">
            <summary>
            Gets or sets the standard font for the workbook.
            </summary>
            <param name="value">The name of the font to set as the standard font.</param>
            <returns>The name of the current standard font.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.StandardFontSize">
            <summary>
            Gets or sets the standard font size for the workbook.
            </summary>
            <value>The standard font size.</value>
            <returns>The standard font size as a double.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DisableMacrosStart">
            <summary>
            Gets or sets a value indicating whether macros are disabled at the start.
            </summary>
            <value>
            <c>true</c> if macros are disabled at the start; otherwise, <c>false</c>.
            </value>
            <remarks>
            Changing this value will mark the settings as not saved.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FirstCharSize">
            <summary>
            Gets or sets the size of the first character.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SecondCharSize">
            <summary>
            Gets or sets the size of the second character.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FullFileName">
            <summary>
            Gets or sets the full file name of the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.HasDuplicatedNames">
            <summary>
            Gets or sets a value indicating whether the names are duplicated.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.HasMacros">
            <summary>
            Gets or sets a value indicating whether the workbook has macros.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Saved">
            <summary>
            Gets or sets a value indicating whether the object has been saved.
            </summary>
            <value>
            <c>true</c> if the object has been saved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Saving">
            <summary>
            Gets or sets a value indicating whether the object is currently in a saving state.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.PivotCaches">
            <summary>
            Returns collection of workbook pivot caches. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Author">
            <summary>
            Returns or sets the author of the comment. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.AddInFunctions">
            <summary>
            Returns collection of add-in functions. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Allow3DRangesInDataValidation">
            <summary>
            Indicates whether to allow usage of 3D ranges in DataValidation
            list property (MS Excel doesn't allow).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ArgumentsSeparator">
            <summary>
            Formula arguments separator.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.BuiltInDocumentProperties">
            <summary>
            Returns collection that represents all the built-in document properties
            for the specified workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Charts">
            <summary>
            Collection of the chart objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Chartsheets">
            <summary>
            Gets the list of chart sheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CustomDocumentProperties">
            <summary>
            Returns collection that represents all the custom document properties
            for the specified workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CurrentObjectId">
            <summary>
            Current object id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CurrentShapeId">
            <summary>
            First free shape id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CurrentHeaderId">
            <summary>
            First free shape id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DefaultXFIndex">
            <summary>
            Returns index to the default extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DetectDateTimeInValue">
            <summary>
            Indicates whether library should try to detect string value passed to Value (and Value2)
            property as DateTime. Setting this property to false can increase performance greatly for
            such operations especially on Framework 1.0 and 1.1. Default value is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DisplayedTab">
            <summary>
            Index of the tab which will be displayed on document open.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DisplayWorkbookTabs">
            <summary>
            Indicates whether workbook tabs are visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsCellProtection">
            <summary>
            True if cells are protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsDisplayPrecision">
            <summary>
            Indicates whether the workbook uses precision.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsHScrollBarVisible">
            <summary>
            Gets/Sets value to display horizontal scrollbar
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsLoaded">
            <summary>
            Gets a value indicating whether the object is loaded.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsRightToLeft">
            <summary>
            Indicates whether worksheet is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsVScrollBarVisible">
            <summary>
            Gets/Sets value to display vertical scrollbar
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Loading">
            <summary>
            Gets or sets a value indicating whether the current instance is in a loading state.
            This property is internal and can only be accessed within the same assembly.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsWindowProtection">
            <summary>
            True if window is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.MaxColumnCount">
            <summary>
            Returns maximum column count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.MaxRowCount">
            <summary>
            Returns maximum row count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.MaxDigitWidth">
            <summary>
            Gets the maximum width of a digit in the current font and size.
            </summary>
            <returns>The maximum width of a digit in the current font and size.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.PasswordToOpen">
            <summary>
            Gets / sets password to encrypt document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ReadOnly">
            <summary>
            True if the workbook has been opened as Read-only. Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ReadOnlyRecommended">
            <summary>
            True to display a message when the file is opened, recommending that the file be opened as read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.RowSeparator">
            <summary>
            Gets / sets row separator for array parsing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Styles">
            <summary>
            Returns a Styles collection that represents all the styles 
            in the specified workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.TabSheets">
            <summary>
            Returns collection with all tabsheets in the workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ThrowOnUnknownNames">
            <summary>
            ThrowOnUnknownNames
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Objects">
            <summary>
            Gets or sets the collection of objects in the workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.InitializeCollections">
            <summary>
            Initializes the collections used by the class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ContainsFont(Spire.Xls.Core.Spreadsheet.XlsFont)">
            <summary>
            Determines whether the Workbook contains a specific font.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FileWidthToPixels(System.Double)">
            <summary>
            Converts file width to pixels.
            </summary>
            <param name="fileWidth">The file width.</param>
            <returns>The equivalent pixel width.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.WidthToFileWidth(System.Double)">
            <summary>
            Converts a width value to a file width value based on a maximum digit width.
            </summary>
            <param name="width">The width value to convert.</param>
            <returns>The converted file width value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateDataSorter">
            <summary>
            Creates the Data sorter to sort the data..
            </summary>
            <returns>Data Sorter.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CopyToClipboard">
            <summary>
            Copies the content to the clipboard using the default data format.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CopyToClipboard(Spire.Xls.Core.Spreadsheet.XlsWorksheet)">
            <summary>
            Copies the contents of the specified worksheet to the clipboard.
            </summary>
            <param name="sheet">The worksheet to copy to the clipboard.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetWriteProtectionPassword(System.String)">
            <summary>
            Sets the write protection password for the workbook.
            </summary>
            <param name="password">The password to set for write protection.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Clone">
            <summary>
            Creates a deep copy of the current workbook.
            </summary>
            <returns>
            A new IWorkbook object that is a deep copy of the current workbook.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Unprotect">
            <summary>
            Unprotects the object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Unprotect(System.String)">
            <summary>
            Unprotects the workbook with the specified password.
            </summary>
            <param name="password">The password used to protect the workbook.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Protect(System.Boolean,System.Boolean)">
            <summary>
            Protects the window and/or content based on the provided parameters.
            </summary>
            <param name="bIsProtectWindow">Indicates whether to protect the window.</param>
            <param name="bIsProtectContent">Indicates whether to protect the content.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Protect(System.Boolean,System.Boolean,System.String)">
            <summary>
            Protects the workbook based on the provided parameters.
            </summary>
            <param name="bIsProtectWindow">Indicates whether to protect the window.</param>
            <param name="bIsProtectContent">Indicates whether to protect the content.</param>
            <param name="password">The password to use for protection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when both <paramref name="bIsProtectWindow"/> and <paramref name="bIsProtectContent"/> are false.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the workbook is already protected.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetSeparators(System.Char,System.Char)">
            <summary>
            Sets the separators used for parsing arguments and array rows.
            </summary>
            <param name="argumentsSeparator">The character used to separate different arguments.</param>
            <param name="arrayRowsSeparator">The character used to separate rows within an array.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.IO.Stream,System.String)">
            <summary>
            Saves the active sheet to the specified stream using the given separator.
            </summary>
            <param name="stream">The stream to save the sheet to.</param>
            <param name="separator">The separator to use when saving the sheet.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the ActiveSheet is null or if the ActiveSheet is an "Evaluation Warning" sheet at the last index of the Worksheets collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.String,System.String)">
            <summary>
            Saves the current data to a file with the specified file name and separator.
            </summary>
            <param name="fileName">The name of the file to save the data to.</param>
            <param name="separator">The separator to use when writing the data to the file.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.String,System.String,System.Boolean)">
            <summary>
            Saves the active worksheet to a file with the specified file name, separator, and encoding.
            </summary>
            <param name="fileName">The name of the file to save the worksheet to.</param>
            <param name="separator">The separator to use when writing the data to the file.</param>
            <param name="addQuotationsForStringValue">A boolean indicating whether to add quotations around string values.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsImages(System.Single,System.Single)">
            <summary>
            Saves the current figure as an array of images with the specified DPI values.
            </summary>
            <param name="dpiX">The horizontal DPI value for the images.</param>
            <param name="dpiY">The vertical DPI value for the images.</param>
            <returns>An array of Image objects representing the saved images.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsImages(System.Int32,System.Single,System.Single)">
            <summary>
            Saves the specified sheet as images.
            </summary>
            <param name="sheetIndex">The index of the sheet to save.</param>
            <param name="dpiX">The horizontal dots per inch (DPI) of the image.</param>
            <param name="dpiY">The vertical dots per inch (DPI) of the image.</param>
            <returns>The saved image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsImages(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Saves the specified range of cells in the specified sheet as an image.
            </summary>
            <param name="sheetIndex">The index of the sheet to save.</param>
            <param name="firstRow">The index of the first row to save.</param>
            <param name="firstColumn">The index of the first column to save.</param>
            <param name="lastRow">The index of the last row to save.</param>
            <param name="lastColumn">The index of the last column to save.</param>
            <param name="dpiX">The horizontal dots per inch (DPI) value for the image.</param>
            <param name="dpiY">The vertical dots per inch (DPI) value for the image.</param>
            <returns>The saved image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsEmfStream(System.Int32,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves the specified sheet as an EMF stream.
            </summary>
            <param name="sheetIndex">The zero-based index of the sheet to save.</param>
            <param name="EmfStream">The stream to save the EMF data to.</param>
            <param name="firstRow">The zero-based index of the first row to include in the save.</param>
            <param name="firstColumn">The zero-based index of the first column to include in the save.</param>
            <param name="lastRow">The zero-based index of the last row to include in the save.</param>
            <param name="lastColumn">The zero-based index of the last column to include in the save.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveChartAsEmfImage(Spire.Xls.Worksheet,System.Int32,Spire.Xls.ConverterSetting,System.IO.Stream)">
            <summary>
            Saves the specified chart as an EMF image.
            </summary>
            <param name="worksheet">The worksheet containing the chart.</param>
            <param name="chartIndex">The index of the chart to save.</param>
            <param name="imageOrPrintOptions">The options for saving the image.</param>
            <param name="emfStream">The stream to save the EMF image to.</param>
            <returns>The saved EMF image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveChartAsImage(Spire.Xls.Worksheet,Spire.Xls.ConverterSetting)">
            <summary>
            Saves the chart in the specified worksheet as an image using the provided image or print options.
            </summary>
            <param name="worksheet">The worksheet containing the chart to save.</param>
            <param name="imageOrPrintOptions">The image or print options to use when saving the chart as an image.</param>
            <returns>An array of Image objects representing the saved chart images.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveChartAsImage(Spire.Xls.ChartSheet,Spire.Xls.ConverterSetting)">
            <summary>
            Saves the chart from the specified chart sheet as an image using the provided image or print options.
            </summary>
            <param name="chartSheet">The chart sheet containing the chart to save.</param>
            <param name="imageOrPrintOptions">The image or print options to use when saving the chart.</param>
            <returns>The saved image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveChartAsImage(Spire.Xls.Worksheet,System.Int32,Spire.Xls.ConverterSetting)">
            <summary>
            Saves the chart at the specified index in the worksheet as an image using the provided image or print options.
            </summary>
            <param name="worksheet">The worksheet containing the chart to be saved.</param>
            <param name="chartIndex">The index of the chart to be saved.</param>
            <param name="imageOrPrintOptions">The options for converting the chart to an image.</param>
            <returns>The saved image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindOne(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindOne(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the first cell with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindOne(System.Boolean)">
            <summary>
            This method seraches for the first cell with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindOne(System.DateTime)">
            <summary>
            This method seraches for the first cell with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindOne(System.TimeSpan)">
            <summary>
            This method seraches for the first cell with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindAll(System.String,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
            This method seraches for the all cells with specified double value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindAll(System.Boolean)">
            <summary>
            This method seraches for the all cells with specified bool value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindAll(System.DateTime)">
            <summary>
            This method seraches for the all cells with specified DateTime value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.FindAll(System.TimeSpan)">
            <summary>
            This method seraches for the all cells with specified TimeSpan value.
            </summary>
            <param name="findValue">Value to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.String)">
            <summary>
            Replaces specified string by specified value.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.DateTime)">
            <summary>
            Replaces specified string by specified value.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.Double)">
            <summary>
            Replaces specified string by specified value.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.String[],System.Boolean)">
            <summary>
            Replaces specified string by data from array.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValues">Array of new values.</param>
            <param name="isVertical">
            Indicates whether array should be inserted vertically.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.Int32[],System.Boolean)">
            <summary>
            Replaces specified string by data from array.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValues">Array of new values.</param>
            <param name="isVertical">
            Indicates whether array should be inserted vertically.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.Double[],System.Boolean)">
            <summary>
            Replaces specified string by data from array.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValues">Array of new values.</param>
            <param name="isVertical">
            Indicates whether array should be inserted vertically.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Replaces specified string by data table values.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValues">Data table with new data.</param>
            <param name="isFieldNamesShown">Indicates whether field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Replace(System.String,System.Data.DataColumn,System.Boolean)">
            <summary>
            Replaces specified string by data column values.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="newValues">Data table with new data.</param>
            <param name="isFieldNamesShown">Indicates whether field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateFont">
            <summary>
            Method to create a font object and register it in the workbook.
            </summary>]
            <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateFont(System.Drawing.Font)">
            <summary>
            Method creates a font object based on native font and register it in the workbook.
            </summary>]
            <param name="nativeFont">Native font to get settings from.</param>
            <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateFont(Spire.Xls.Core.IFont)">
            <summary>
            Method that creates font object based on another font object
            and registers it in the workbook.
            </summary>
            <param name="baseFont">Base font for the new one.</param>
            <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateFont(Spire.Xls.Core.IFont,System.Boolean)">
            <summary>
            Creates a new font based on the specified base font.
            </summary>
            <param name="baseFont">The base font to create a new font from.</param>
            <param name="bAddToCollection">Indicates whether the new font should be added to the collection.</param>
            <returns>The newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetColorOrGetNearest(System.Drawing.Color)">
            <summary>
            Sets the specified color or retrieves the nearest available color if the exact color is not available.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetActiveWorksheet(Spire.Xls.Core.Spreadsheet.XlsWorksheetBase)">
            <summary>
            Sets the active worksheet in the workbook.
            </summary>
            <param name="sheet">The worksheet to set as active.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetChanged">
            <summary>
            Sets the saved flag to false, indicating that the data has been changed.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetColorOrGetNearest(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the specified color using RGB values or retrieves the nearest available color if the exact color is not supported.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ColorDistance(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Calculates distance between two colors.
            </summary>
            <param name="color1">First color.</param>
            <param name="color2">Second color.</param>
            <returns>Distance between two colors.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetMaxDigitWidth(System.Int32)">
            <summary>
            Sets the maximum digit width.
            </summary>
            <param name="w">The maximum width of the digit.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetNearestColor(System.Drawing.Color)">
            <summary>
            Gets the nearest color to the specified Color structure
            from Workbook palette.
            </summary>
            <param name="color">Color to look for.</param>
            <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetNearestColor(System.Drawing.Color,System.Int32)">
            <summary>
            Gets the nearest color to the specified Color structure
            from Workbook palette.
            </summary>
            <param name="color">Color to look for.</param>
            <param name="iStartIndex">Start index.</param>
            <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetNearestColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the nearest color to the specified by red, green, and blue 
            values color from Workbook palette.
            </summary>
            <param name="r">Red component of the color.</param>
            <param name="g">Green component of the color.</param>
            <param name="b">Blue component of the color.</param>
            <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetPaletteColor(Spire.Xls.ExcelColors)">
            <summary>
            Method return Color object from workbook palette by its index.
            </summary>
            <param name="color">Index from palette array.</param>
            <returns>RGB Color.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ResetPalette">
            <summary>
            Recover palette to default values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SetPaletteColor(System.Int32,System.Drawing.Color)">
            <summary>
            Set user color for specified element in Color table.
            </summary>
            <param name="index">Index of Color in array.</param>
            <param name="color">New color which must be set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.IO.Stream,Spire.Xls.ExcelSaveType)">
            <summary>
            Saves changes to the specified stream.
            </summary>
            <param name="stream">Stream that will receive workbook data.</param>
            <param name="saveType">Save type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.IO.Stream,Spire.Xls.ExcelSaveType,Spire.Xls.ExcelVersion)">
            <summary>
            Saves the workbook to the specified stream with the given save type and version.
            </summary>
            <param name="stream">The stream to save the workbook to.</param>
            <param name="saveType">The type of save operation to perform.</param>
            <param name="version">The version of the Excel file to save as.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.IO.Stream)">
            <summary>
            Saves changes to the specified stream.
            </summary>
            <param name="stream">Stream that will receive workbook data.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.String,Spire.Xls.ExcelSaveType)">
            <summary>
            Saves the workbook as a template or a regular file based on the provided save type.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="saveType">The type of save operation to perform.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.String,Spire.Xls.ExcelSaveType,Spire.Xls.ExcelVersion)">
            <summary>
            Saves the workbook to a file with the specified file name, save type, and Excel version.
            </summary>
            <param name="fileName">The name of the file to save the workbook to.</param>
            <param name="saveType">The type of save operation to perform.</param>
            <param name="version">The version of Excel to save the workbook as.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveToXlsm(System.String)">
            <summary>
            Saves the workbook to an XLSM file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveToXlsm(System.IO.Stream)">
            <summary>
            Saves the workbook to an XLSM file format using the specified stream.
            </summary>
            <param name="stream">The stream to save the workbook to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveToPdf(System.IO.Stream)">
            <summary>
            Saves the workbook to a PDF file using the specified stream.
            </summary>
            <param name="stream">The stream to save the PDF file to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveToPdf(System.String)">
            <summary>
            Saves the workbook to a PDF file.
            </summary>
            <param name="fileName">The name of the file to save the PDF to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsImageOrXps(System.IO.Stream,Spire.Xls.FileFormat)">
            <summary>
            Saves the workbook as an image or XPS file format to the specified stream.
            </summary>
            <param name="stream">The stream to save the workbook to.</param>
            <param name="fileFormat">The file format to save the workbook as (Bitmap or XPS).</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsImageOrXps(System.String,Spire.Xls.FileFormat)">
            <summary>
            Saves the workbook as an image or XPS file.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="fileFormat">The format of the file to save as.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsHtml(System.String,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves the html files.
            </summary>
            <param name="fileName">The filename</param>
            <param name="saveOption">The saveoption</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAs(System.String)">
            <summary>
            Saves the workbook to a file with the specified file name and save type.
            </summary>
            <param name="FileName">The name of the file to save the workbook to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Save">
            <summary>
            Saves changes to the specified workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetContentTypeString(Spire.Xls.HttpContentType)">
            <summary>
            Returns string that corresponds to contentType.
            </summary>
            <param name="contentType">Content type for browser.</param>
            <returns>String that corresponds to contentType.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CreateTemplateMarkersProcessor">
            <summary>
            Creates object that can be used for template markers processing.
            </summary>
            <returns>Object that can be used for template markers processing.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Close(System.String)">
            <summary>
            Closes the object and saves changes into specified file.
            </summary>
            <param name="Filename">
            File name in which workbook will be saved if SaveChanges is true.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Close(System.Boolean,System.String)">
            <summary>
            Closes the object.
            </summary>
            <param name="SaveChanges">If True, all changes will be saved.</param>
            <param name="Filename">
            File name in which workbook will be saved if SaveChanges is true.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Close(System.Boolean)">
            <summary>
            Closes the object.
            </summary>
            <param name="saveChanges">If TRUE all changes will be saved</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Close">
            <summary>
            Closes the object without saving.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.AddFont(Spire.Xls.Core.IFont)">
            <summary>
            Adds font into collection.
            </summary>
            <param name="fontToAdd">Font to add.</param>
            <returns>
            Current font with correct font index, or same font from the collection if was added before.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Activate">
            <summary>
            Activates the first window associated with the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorkbook.CustomTableStyles">
            <summary>
            Represents a collection of Table style definitions for PivotTable styles.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SplitPageInfo(Spire.Xls.ConverterSetting)">
            <summary>
            Splits the page information based on the provided converter settings.
            </summary>
            <param name="converterSetting">The converter settings to use for splitting the page information.</param>
            <returns>A list of dictionaries containing the page information.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.PixelsToWidth(System.Double)">
            <summary>
            Converts pixels to a width value based on the maximum digit width.
            </summary>
            <param name="pixels">The pixel value to convert.</param>
            <returns>The converted width value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.ConvertUnits(System.Double,Spire.Xls.MeasureUnits,Spire.Xls.MeasureUnits)">
            <summary>
            Converts units.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="from">Form option.</param>
            <param name="to">To option.</param>
            <returns>Returns converted result.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Paste">
            <summary>
            Pastes the content from the clipboard to the current context or control.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.DecodeName(System.String)">
            <summary>
            Decodes name encoded in supbook.
            </summary>
            <param name="name">Name to decode.</param>
            <returns>Decoded name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsXml(System.Xml.XmlWriter)">
            <summary>
            Saves workbook in xml format.
            </summary>
            <param name="writer">XmlWriter to save into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsXml(System.String)">
            <summary>
            Saves workbook in xml format.
            </summary>
            <param name="fileName">File name to save into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.SaveAsXml(System.IO.Stream)">
            <summary>
            Saves workbook in xml format.
            </summary>
            <param name="stream">Stream to save into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsValidDocument(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Validates if the given stream contains a valid document based on the specified encoding and separator.
            </summary>
            <param name="stream">The stream to validate.</param>
            <param name="encoding">The encoding of the stream.</param>
            <param name="separator">The separator to check for in the stream.</param>
            <returns>True if the stream contains a valid document, false otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.RemoveCache(System.Int32)">
            <summary>
            Removes the pivot cache at the specified index from the collection.
            </summary>
            <param name="index">The index of the pivot cache to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.EncodeName(System.String)">
            <summary>
            Encodes a given name by replacing reserved characters and formatting it according to specific rules.
            </summary>
            <param name="strName">The name to encode.</param>
            <returns>The encoded name as a string.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetBookIndex(System.Int32)">
            <summary>
            Retrieves the index of the book at the specified reference index.
            </summary>
            <param name="referenceIndex">The index of the reference.</param>
            <returns>The index of the book.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the referenceIndex is less than 0 or greater than the count of ExternSheets.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsExternalReference(System.Int32)">
            <summary>
            Determines if the given reference is an external reference.
            </summary>
            <param name="reference">The reference to check.</param>
            <returns>True if the reference is external, false otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.IsFormatted(System.Int32)">
            <summary>
            Determines if the given XF index is formatted.
            </summary>
            <param name="xfIndex">The XF index to check.</param>
            <returns>True if the XF index is not equal to the default XF index, indicating it is formatted; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.GetMaxDigitWidth">
            <summary>
            Returns the maximum digit width of the default font.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorkbook.Dispose">
            <summary>
            Releases the unmanaged resources used by the current instance and optionally releases the managed resources.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsWorksheet">
            <summary>
            Represents a worksheet. The Worksheet object is a member of the
            Worksheets collection. The Worksheets collection contains all the
            Worksheet objects in a workbook.
            </summary>
        </member>
        <member name="E:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CellValueChanged">
            <summary>
            Represents the event handler for the CellValueChanged event of the XlsRange class.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.allowEditRanges">
            <summary>
            Represents the Collection of protected ranges.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Copying">
            <summary>
            Gets or sets a value indicating whether a copy operation is currently in progress.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType">
            <summary>
            Represents range value type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.Blank">
            <summary>
            Represetns Blank type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.Error">
            <summary>
            Represetns Error type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.Boolean">
            <summary>
            Represetns Boolean type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.Number">
            <summary>
            Represetns Number type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.Formula">
            <summary>
            Represetns Formula type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TRangeValueType.String">
            <summary>
            Represetns String type.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InitializeCollections">
            <summary>
            Initializes various collections and objects used by the spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AllowEditRanges">
            <summary>
            Represents the Collection of protected ranges.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.OleObjects">
             <summary>
             Gets the OLE objects.
             <example>The following code illustrates how to access the IListObjects collection in the worksheet to add a new IOleObject:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create image stream</para>
                 <para>System.Drawing.Image image = System.Drawing.Image.FromFile("image.png");</para>
                         
                 <para>//Add ole object</para>
                 <para>IOleObject oleObject = worksheet.OleObjects.Add("Shapes.xlsx", image, OleLinkType.Embed);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("OLEObjects.xlsx");</para>
             </code>
             </example>
             </summary>
             <value>The OLE objects.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFilters">
            <summary>
            Returns collection of worksheet's autofilters. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Cells">
            <summary>
            Returns all used cells in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CellList">
            <summary>
            Returns all used cells in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DisplayPageBreaks">
            <summary>
            True if page breaks (both automatic and manual) on the specified
            worksheet are displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.MergedCells">
            <summary>
            Returns all merged ranges. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Names">
            <summary>
            Name range used by macros to access to workbook items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.PageSetup">
            <summary>
            Returns a PageSetup object that contains all the page setup settings
            for the specified object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.MaxDisplayRange">
            <summary>
            Read-only. Returns a Range object that represents Maximum Display Range
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AllocatedRange">
            <summary>
            Read-only. Returns a Range object that represents a cell or a range of cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AllocatedRangeIncludesFormatting">
            <summary>
            There are two different algorithms to create UsedRange object:
            1) Default. This property = true. The cell is included into UsedRange when
            it has some record created for it even if data is empty (maybe some formatting
            changed, maybe not - cell was accessed and record was created).
            2) This property = false. In this case XlsIO tries to remove empty rows and
            columns from all sides to make UsedRange smaller.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Rows">
            <summary>
            Represents all the rows on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Columns">
            <summary>
            For a Worksheet object, returns an array of Range objects that represents
            all used columns on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ConditionalFormats">
            <summary>
            Returns collection with all conditional formats in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CustomProperties">
            <summary>
            Returns collection with all custom properties in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.OutlineLevelColumn">
            <summary>
            Highest number of outline levels for columns in this sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DefaultRowHeight">
             <summary>
             Gets or sets default height of all the rows in the worksheet,
             in points.Read/write Double.
             <example>The following code illustrates how to get the default row height:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get row height</para>
                 <para>Console.Write(worksheet.DefaultRowHeight);</para>
                         
                 <para>//Set default height</para>
                 <para>worksheet.DefaultRowHeight = 40;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DefaultRowHeight.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DefaultPrintRowHeight">
            <summary>
            Return default row height.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.OutlineLevelRow">
            <summary>
            Highest number of outline level for rows in this sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ViewMode">
            <summary>
            Gets or sets the view mode of the sheet.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DefaultColumnWidth">
             <summary>
             Returns or sets the default  width of all the columns in the worksheet. Read/write Double.
             <example>The following code illustrates how to get the default column width:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get column width</para>
                 <para>Console.Write(worksheet.DefaultColumnWidth);</para>
                         
                 <para>//Set default width</para>
                 <para>worksheet.DefaultColumnWidth = 40;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DefaultColumnWidth.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsThickBottom">
            <summary>
            'True' if rows have a thick bottom border by default.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsThickTop">
            <summary>
            'True' if rows have a thick top border by default.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Zoom">
             <summary>
             Zoom factor of document.
             <example>The following code illustrates how to set zoom level of the sheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set zoom</para>
                 <para>worksheet.Zoom = 200;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Zoom.xlsx");</para>
             </code>
             </example>
             </summary>
             <remarks> Value of zoom should be between 10 and 400.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ZoomScaleNormal">
            <summary>
            Gets or sets the zoom scale of normal view of the sheet.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ZoomScalePageBreakView">
            <summary>
            Gets or sets the zoom scale of page break preview of the sheet.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ZoomScalePageLayoutView">
            <summary>
            Gets or sets the zoom scale of page layout view of the sheet.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsZeroHeight">
            <summary>
            Indicates whether ZeroHeight property has enabled or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsVisible">
            <summary>
            Indicates whether IsHidden property is set.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Selections">
            <summary>
            Gets array with selection cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ActiveSelectionRange">
            <summary>
            Get active selection range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SelectionCount">
            <summary>
            Gets array with selection count. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Version">
            <summary>
            Gets or sets excel file version.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SparklineGroups">
            <summary>
            Gets the sparkline groups.
            </summary>
            <value>The sparkline groups.</value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.StandardHeightFlag">
            <summary>
            Gets or sets the standard (default) height option flag, which defines that
            standard (default) row height and book default font height do not match. Bool.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Type">
            <summary>
            Returns or sets the worksheet type. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Range">
            <summary>
            Returns a Range object that represents the used range on the
            specified worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Item(System.Int32,System.Int32)">
            <summary>
            Get cell by row and index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Item(System.String)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Item(System.String,System.Boolean)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ErrorIndicators">
            <summary>
            Represents error indicators.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TopLeftCellOfSheet">
            <summary>
            TopLeftCell of this worksheet,different of TopLeftCell property
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.TopLeftCell">
            <summary>
            Gets top left cell of the worksheet.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.UseRangesCache">
            <summary>
            Indicates whether all created range objects should be cached. Default value is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.VerticalSplit">
            <summary>
            Gets or sets the number of columns to freeze for vertical splitting in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.VPageBreaks">
            <summary>
            Returns a VPageBreaks collection that represents the vertical page
            breaks on the sheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ActivePane">
            <summary>
            Gets or sets index of the active pane.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFirstColumn(System.Int32)">
            <summary>
            Updates first column indexe.
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetLastColumn(System.Int32)">
            <summary>
            Updates last column index.
            </summary>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFirstRow(System.Int32)">
            <summary>
            Updates first row index.
            </summary>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetLastRow(System.Int32)">
            <summary>
            Updates last row index.
            </summary>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AccessColumn(System.Int32)">
            <summary>
            Updates FirstColumn and LastColumn indexes.
            </summary>
            <param name="iColumnIndex">Column that was accessed.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AccessRow(System.Int32)">
            <summary>
            Updates FirstRow and LastRow indexes.
            </summary>
            <param name="iRowIndex">Row to access.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ShowColumn(System.Int32)">
            <summary>
            Shows a column.
            </summary>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ShowRow(System.Int32)">
            <summary>
            Shows a row.
            </summary>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ToEMFStream(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts a range of cells in the worksheet to an EMF (Enhanced Metafile) stream.
            </summary>
            <param name="stream">The stream to write the EMF data to.</param>
            <param name="firstRow">The zero-based index of the first row to include in the conversion.</param>
            <param name="firstColumn">The zero-based index of the first column to include in the conversion.</param>
            <param name="lastRow">The zero-based index of the last row to include in the conversion.</param>
            <param name="lastColumn">The zero-based index of the last column to include in the conversion.</param>
            <param name="emfType">The type of EMF to generate.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ToEMFStream(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a range of cells in the worksheet to an EMF (Enhanced Metafile) stream.
            </summary>
            <param name="stream">stream.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetActiveCell(Spire.Xls.Core.IXLSRange)">
            <summary>
            Sets active cell
            </summary>
            <param name="range">Cell to activate.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetActiveCell(Spire.Xls.Core.IXLSRange,System.Boolean)">
            <summary>
            Sets active cell
            </summary>
            <param name="range">Cell to activate.</param>
            <param name="updateApplication"></param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.FirstVisibleColumn">
            <summary>
            Gets or sets the index of the first visible column in a worksheet.The value is 1-based.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.FirstVisibleRow">
            <summary>
            Gets or sets the index of the first visible row in the worksheet. The value is 1-based.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GridLinesVisible">
             <summary>
             True if gridlines are visible;
             False otherwise.
             <example>The following code illustrates how to set visibility for grid lines:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set grid line visibility</para>
                 <para>worksheet.GridLinesVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GridLinesVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HasMergedCells">
            <summary>
            Indicates whether worksheet has merged cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HasOleObjects">
             <summary>
             Indicats whether there is OLE object.
             <example>The following code illustrates how to access the IListObjects collection in the worksheet to add a new IOleObject and check Ole Object:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create image stream</para>
                 <para>System.Drawing.Image image = System.Drawing.Image.FromFile("image.png");</para>
                         
                 <para>//Add ole object</para>
                 <para>IOleObject oleObject = worksheet.OleObjects.Add("Shapes.xlsx", image, OleLinkType.Embed);</para>
                 
                 <para>//Check HasOleObject.Output will be true.</para>
                 Console.Write(worksheet.HasOleObjects);
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasOleObjects.xlsx");</para>
             </code>
             </example>
             </summary>
             <value>
             	<c>true</c> if this instance is OLE object; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HorizontalSplit">
            <summary>
            Gets or sets the number of rows from the top of the worksheet that are frozen in a horizontal split.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HPageBreaks">
            <summary>
            Returns an HPageBreaks collection that represents the horizontal
            page breaks on the sheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HyperLinks">
            <summary>
            Collection of all worksheet's hyperlinks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InnerHyperLinks">
            <summary>
            Collection of all hyperlinks in the current worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsDisplayZeros">
            <summary>
            Indicates whether zero values to be displayed
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsEmpty">
            <summary>
            Indicates whether worksheet is empty. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsFreezePanes">
            <summary>
            Indicates whether freezed panes are applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsStringsPreserved">
            <summary>
            Indicates if all values in the workbook are preserved as strings.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AddAllowEditRange(System.String,Spire.Xls.CellRange,System.String)">
            <summary>
            AddAllowEditRange : add a range of cells that allow editing
            </summary>
            <param name="title">title</param>
            <param name="range">range</param>
            <param name="password">password</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AddAllowEditRange(System.String,Spire.Xls.CellRange)">
            <summary>
            AddAllowEditRange : add a range of cells that allow editing
            </summary>
            <param name="title">title</param>
            <param name="range">range</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ListObjects">
            <summary>
            Returns all list objects in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.FormulasVisible">
            <summary>
            Gets or sets a value indicating whether the formulas are visible in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.RowColumnHeadersVisible">
            <summary>
            True if row and column headers are visible.
            False otherwise.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ProtectContents">
            <summary>
            Indicates whether current sheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.PivotTables">
            <summary>
            Returns charts collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.QuotedName">
            <summary>
            Returns quoted name of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DVTable">
            <summary>
            Gets the data validation table associated with the current instance.
            </summary>
            <returns>The data validation table.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CalculateAllValue">
            <summary>
            Caculate all formula for the specified worksheet
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetCaculateValue(System.Int32,System.Int32)">
            <summary>
            Returns the formula string if the cell contains a formula, or the value if
            the cell cantains anything other than a formula.
            </summary>
            <param name="row">The row of the cell.</param>
            <param name="col">The column of the cell.</param>
            <returns>The formula string or value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetCalculateValue(System.Int32,System.Int32)">
            <summary>
            Returns the formula string if the cell contains a formula, or the value if
            the cell cantains anything other than a formula.
            </summary>
            <param name="row">The row of the cell.</param>
            <param name="col">The column of the cell.</param>
            <returns>The formula string or value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetCaculateValue(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the value of a cell.
            </summary>
            <param name="value">The value to be set.</param>
            <param name="row">The row of the cell.</param>
            <param name="col">The column of the cell.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetCalculateValue(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the value of a cell.
            </summary>
            <param name="value">The value to be set.</param>
            <param name="row">The row of the cell.</param>
            <param name="col">The column of the cell.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.DateTime[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of datetimes into worksheet.
             <example>The following code illustrates how to Imports an array of DateTime values into a worksheet with the specified row and colum:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the DateTime Array</para>
                 <para>DateTime[] arrayDate = new DateTime[4] { DateTime.Parse("06:45"), DateTime.Parse("08:30"), DateTime.Parse("09:40"), DateTime.Parse("10:30") };</para>
                         
                 <para>//Insert the DateTime Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayDate, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dateTimeArray">Datetime array.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="isVertical">Specifies to import data vertically or horizontally.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.Double[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of doubles into a worksheet. 
             <example>The following code illustrates how to Imports an array of Double values into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the double Array</para>
                 <para>double[] arrayDouble = new double[4] { 344.0045, 345.0045, 346.0045, 347.0045 };</para>
                         
                 <para>//Insert the double Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayDouble, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="doubleArray">Double array</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="isVertical">Specifies to import data vertically or horizontally.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray``1(``0[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Inserts an array of objects into a worksheet.
            </summary>
            <typeparam name="T">The type of objects to insert.</typeparam>
            <param name="objects">The array of objects to insert.</param>
            <param name="firstRow">The row index to start inserting from (1-based).</param>
            <param name="firstColumn">The column index to start inserting from (1-based).</param>
            <param name="isVertical">Indicates whether to insert the objects vertically (true) or horizontally (false).</param>
            <param name="isText">Indicates whether to insert the objects as text (true) or as numeric values (false).</param>
            <returns>The number of objects successfully inserted.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.Int32[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of integer into a worksheet. 
             <example>The following code illustrates how to Imports an array of integer values into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the integer Array</para>
                 <para>int[] arrayInt = new int[4] {1000, 2000, 3000, 4000};</para>
                         
                 <para>//Insert the integer Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayInt, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="intArray">Integer array.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="isVertical">Specifies to import data vertically or horizontally.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.Object[0:,0:],System.Int32,System.Int32)">
             <summary>
             Imports an array of objects into a worksheet.
             <example>The following code illustrates how to Imports a two-dimensional array of Object into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the Object Array</para>
                 <para>object[,] arrayTwoDimen = new object[3, 2] { { "AND", "OR" }, { "NAND", "XOR" },{ "NOR", "NOT" } };</para>
                         
                 <para>//Insert the Object Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayTwoDimen, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="objectArray">Object array.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.Object[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Imports an array of objects into a worksheet.
            </summary>
            <param name="objectArray">Object array.</param>
            <param name="firstRow">The row number of the first cell to import in.</param>
            <param name="firstColumn">The column number of the first cell to import in.</param>
            <param name="needConvert">Whether others type inputted as string type need to be converted, such as number, datetime.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.String[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of strings into a worksheet. 
             <example>The following code illustrates how to Imports an array of String into a worksheet with specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the string Array</para>
                 <para>string[] arrayString = new string[4] { "Total Income", "Actual Expense", "Expected Expenses", "Profit" };</para>
                         
                 <para>//Insert the string Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayString, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="stringArray">String array.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="isVertical">Specifies to import data vertically or horizontally.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of objects into a worksheet.
             <example>The following code illustrates how to Imports an array of Object into a worksheet with specified alignment:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the Object Array</para>
                 <para>object[] array = new object[4] { "Total Income", "Actual Expense", "Expected Expenses", "Profit" };</para>
                         
                 <para>//Insert the Object Array to Sheet</para>
                 <para>worksheet.InsertArray(array, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrObject">Array to import.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="isVertical">TRUE if array should be imported vertically; FALSE - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArrayList(System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Imports an arraylist of data into a worksheet. 
            </summary>
            <param name="arrayList">Data arraylist.</param>
            <param name="firstRow">The row number of the first cell to import in.</param>
            <param name="firstColumn">The column number of the first cell to import in.</param>
            <param name="isVertical">Specifies to import data vertically or horizontally.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertArrayList(System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Imports an arraylist of data into a worksheet.
            </summary>
            <param name="arrayList">Data arraylist.</param>
            <param name="firstRow">The row number of the first cell to import in.</param>
            <param name="firstColumn">The column number of the first cell to import in.</param>
            <param name="isVertical">Specifies to import data vertically or horizontally.</param>
            <param name="isText">Specifies to import data as text or not.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataColumn(System.Data.DataColumn,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data column.
             <example>The following code illustrates how to Imports data from a DataColumn into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataColumn to worksheet</para>
                 <para>System.Data.DataColumn column = table.Columns[2];</para>
                 <para>worksheet.InsertDataColumn(column, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataColumn.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataColumn">Data column to import.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">Index of the first row.</param>
             <param name="firstColumn">Index of the first column</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataColumns(System.Data.DataColumn[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports array of data columns.
            </summary>
            <param name="dataColumns">Data columns to import.</param>
            <param name="columnHeaders">Indicates whether to import field names.</param>
            <param name="firstRow">Index to the first row.</param>
            <param name="firstColumn">Index to the first column.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified row and column along with the preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1, 1 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="transTypes">Indicates if preserve types when insert data into worksheet </param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1 , 1 , 2 , 2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="maxRows">Maximum number of rows to import</param>
             <param name="maxColumns">Maximum number of columns to import</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with specified range along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1 , 1 , 2 , 2 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">Datatable</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="maxRows">Maximum number of rows to import</param>
             <param name="maxColumns">Maximum number of columns to import</param>
             <param name="transTypes">Indicates if preserve types when insert data into worksheet </param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.DataColumn[],System.Boolean)">
            <summary>
            Imports data from a DataTable into worksheet
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="columnHeaders">Indicates whether to import field names.</param>
            <param name="firstRow">The row number of the first cell to import in.</param>
            <param name="firstColumn">The column number of the first cell to import in.</param>
            <param name="maxRows">Maximum number of rows to import</param>
            <param name="maxColumns">Maximum number of columns to import</param>
            <param name="columnsArray">Array of columns to import.</param>
            <param name="transTypes">Indicates if preserve types when insert data into worksheet.true is default</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">Data view object</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified row and column along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">Dataview object.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="transTypes">Indicates if preserve types when insert data into worksheet.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , 2 , 2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">Dataview object.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified range along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , 2 , 2 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">Dataview object.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <param name="firstRow">The row number of the first cell to import in.</param>
             <param name="firstColumn">The column number of the first cell to import in.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <param name="transTypes">Indicates if preserve types when insert data into worksheet.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ImportCustomObjects(System.Collections.ICollection,System.Int32,System.Int32,Spire.Xls.ImportObjectOptions)">
            <summary>
            Imports custom objects into the worksheet.
            </summary>
            <param name="list">The collection of custom objects to import.</param>
            <param name="firstRow">The row number where the import should start.</param>
            <param name="firstColumn">The column number where the import should start.</param>
            <param name="options">The import options.</param>
            <returns>The number of rows inserted into the worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ImportCustomObjects(System.Collections.ICollection,System.String[],System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Imports custom objects into a worksheet.
            </summary>
            <param name="list">The collection of objects to import.</param>
            <param name="propertyNames">An array of property names to import.</param>
            <param name="isPropertyNameShown">Indicates whether the property names should be shown in the worksheet.</param>
            <param name="firstRow">The first row to import the objects into.</param>
            <param name="firstColumn">The first column to import the objects into.</param>
            <param name="rowNumber">The number of rows to import the objects into.</param>
            <param name="insertRows">Indicates whether to insert rows before importing the objects.</param>
            <param name="dateFormatString">The date format string to use for date properties.</param>
            <param name="convertStringToNumber">Indicates whether to convert string properties to numbers.</param>
            <returns>The number of objects imported.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsColumnVisible(System.Int32)">
            <summary>
            Indicates whether column is visible.
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns>true - visible, otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsExternalFormula(System.Int32,System.Int32)">
            <summary>
            Indicates is formula in cell is formula to external workbook.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>If contain extern formula returns true; otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsRowVisible(System.Int32)">
            <summary>
            Indicates whether row is visible.
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns>true - visible, otherwise false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitColumn(System.Int32)">
             <summary>
             Autofit the column width.
             <example>The following code illustrates how to Auto-fit the column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
                 
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitColumn(1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitColumn.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitColumn(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="options">auto fit options</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="firstRow">One-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">One-based index of the last row to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitColumn(System.Int32,System.Int32,System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="firstRow">One-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">One-based index of the last row to be used for autofit operation.</param>
            <param name="options">auto fit options</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitRow(System.Int32)">
             <summary>
             Autofit the row height.
             <example>The following code illustrates how to Auto-fit the row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Value = "Sample text";</para>
                         
                 <para>//Set Style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.Size = 18;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitRow(2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRow.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitRow(System.Int32,System.Int32,System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions)">
            <summary>
            Autofit the row height.
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="firstColumn">One-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">One-based index of the last column to be used for autofit operation.</param>
            <param name="options">auto fit options</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitRow(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Autofit the row height.
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="firstColumn">One-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">One-based index of the last column to be used for autofit operation.</param>
            <param name="bRaiseEvents">If true then raise events.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.AutoFitRow(System.Int32,System.Int32,System.Int32,System.Boolean,Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions)">
            <summary>
            Autofit the row height.
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="firstColumn">One-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">One-based index of the last column to be used for autofit operation.</param>
            <param name="bRaiseEvents">If true then raise events.</param>
            <param name="options">auto fit options</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CheckExistence(System.Int32,System.Int32)">
             <summary>
             Indicates whether cell has been initialized.
             <example>The following code illustrates if the cells was initialized or accessed by the user:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet.Range["A1"].Text = "Hello";</para>
                 
                 <para>//Check the cell.Output will be true.</para>
                 <para>Console.Write(worksheet.CheckExistence(1, 1));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CheckExistence.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="row">Row index.</param>
             <param name="column">Column index.</param>
             <returns>Value indicating whether the cell was initialized or accessed by the user.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Clear">
            <summary>
            Clears data the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ClearData">
            <summary>
            Clears contents of a range. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ColumnWidthToPixels(System.Double)">
            <summary>
            Converts column width into pixels.
            </summary>
            <param name="widthInChars">Column width to convert.</param>
            <returns>Column width in pixels.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CopyFrom(Spire.Xls.Core.Spreadsheet.XlsWorksheet,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.Int32,System.Int32},Spire.Xls.WorksheetCopyType,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Copies all data from another worksheet.
            </summary>
            <param name="worksheet">Parent worksheet.</param>
            <param name="hashStyleNames">HashTable with style names.</param>
            <param name="hashWorksheetNames">Hashtable with new worksheet names.</param>
            <param name="dicFontIndexes">Dictionary with new font indexes.</param>
            <param name="flags">Copy flags.</param>
            <param name="hashExtFormatIndexes">
            Hashtable with new extended format indexes.
            </param>
            <param name="hashNameIndexes">Hashtable with new name indexes.</param>
            <param name="hashExternSheets">Represents collection with extern sheets indexes.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetCellType(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets cell type from current column.
            </summary>
            <param name="row">Indicates row.</param>
            <param name="column">Indicates column.</param>
            <param name="bNeedFormulaSubType">Indicates is need to indified formula sub type.</param>
            <returns>Returns cell type.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetClonedObject(System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Gets object that is clone of current worksheet in the specified workbook.
            </summary>
            <param name="hashNewNames">Dictionary with update worksheet names.</param>
            <param name="book">New workbook object.</param>
            <returns>Object that is clone of the current worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetStringValue(System.Int64)">
            <summary>
            Returns string value corresponding to the cell.
            </summary>
            <param name="cellIndex">Cell index to get value from.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetStringValue(System.Int32,System.Int32)">
            <summary>
            Returns string value corresponding to the cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetTextObject(System.Int64)">
            <summary>
            Returns TextWithFormat object corresponding to the specified cell.
            </summary>
            <param name="cellIndex">Cell index.</param>
            <returns>Object corresponding to the specified cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetTextObject(System.Int32,System.Int32)">
            <summary>
            Returns TextWithFormat object corresponding to the specified cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Object corresponding to the specified cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HasArrayFormula(System.Int64)">
            <summary>
            Indicates whether cell contains array-entered formula.
            </summary>
            <param name="cellIndex">cell index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HasArrayFormulaRecord(System.Int32,System.Int32)">
            <summary>
            Indicates is has array formula.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Indicates is contain array formula record.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertRange(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.InsertMoveOption,Spire.Xls.InsertOptionsType)">
            <summary>
            Insert a cell range into worksheet
            </summary>
            <param name="rowIndex">the cell range first row index</param>
            <param name="columnIndex">the cell range first column index</param>
            <param name="rowCount">the number of rows</param>
            <param name="columnCount">the number of columns</param>
            <param name="moveOptions">Insert options.</param>
            <param name="insertOptions">Move the cell on the right to right or Move the cell below down</param>
            <returns>return the range that insert into worksheet</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertCutRange(Spire.Xls.Core.IXLSRange,System.Int32,System.Int32,Spire.Xls.InsertMoveOption)">
            <summary>
            Insert cut range into worksheet at specified position.
            </summary>
            <param name="cutRange">the cut range</param>
            <param name="rowIndex">the dest range first row index</param>
            <param name="colIndex">the dest range first column index</param>
            <param name="moveOptions">insert options.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsArrayFormula(System.Int64)">
            <summary>
            Indicates whether cell contains array-entered formula.
            </summary>
            <param name="cellIndex">Cell index to check.</param>
            <returns>True if cell contains array-entered formula.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IsArrayFormula(System.Int32,System.Int32)">
            <summary>
            Indicates whether cell contains array-entered formula.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>True if cell contains array-entered formula.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReparseFormula">
            <summary>
            Reparses all formulas on this sheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CopyToClipboard">
            <summary>
            Copies worksheet into the clipboard.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CreateRanges(Spire.Xls.CellRange[])">
            <summary>
            Creates a collection of ranges from the specified array of CellRange objects.
            </summary>
            <param name="ranges">An array of CellRange objects to be added to the collection.</param>
            <returns>A new XlsRangesCollection containing the specified CellRange objects.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.CreateNamedRanges(System.String,System.String,System.Boolean)">
            <summary>
            Create Named Ranges
            </summary>
            <param name="namedRange">Names to create</param>
            <param name="referRange">Refers to range</param>
            <param name="vertical">True if data are vertically placed in the sheet.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Deletes a column.
            </summary>
            <param name="index">Column index to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteColumn(System.Int32,System.Int32)">
            <summary>
            Removes specified column.
            </summary>
            <param name="index">One-based column index to remove.</param>
            <param name="count">Number of columns to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteRow(System.Int32)">
            <summary>
            Delete a row.
            </summary>
            <param name="index">Row index to remove</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteRow(System.Int32,System.Int32)">
            <summary>
            Removes specified row.
            </summary>
            <param name="index">One-based row index to remove</param>
            <param name="count">Number of rows to delete.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteRows(System.Int32[])">
            <summary>
            Removes specified rows.
            </summary>
            <param name="rows">Index of all row that need to remove</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column into the worksheet. 
            </summary>
            <param name="columnIndex">Column index</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertColumn(System.Int32,System.Int32,Spire.Xls.InsertOptionsType)">
            <summary>
            Inserts an empty column with default formatting.
            </summary>
            <param name="columnIndex">Index at which new column should be inserted</param>
            <param name="columnCount">Number of columns to insert.</param>
            <param name="insertOptions">Insert options.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertColumn(System.Int32,System.Int32)">
            <summary>
             Inserts specified number column into the worksheet. 
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="columnCount">Number of columns to insert.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertRow(System.Int32)">
            <summary>
            Inserts a new row into the worksheet. 
            </summary>
            <param name="rowIndex">Index at which new row should be inserted</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ExportDataTable">
            <summary>
            Exports worksheet data into a DataTable
            </summary>
            <returns>Exported datatable.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertRow(System.Int32,System.Int32,Spire.Xls.InsertOptionsType)">
            <summary>
            Inserts an empty row with default formatting.
            </summary>
            <param name="rowIndex">Index at which new row should be inserted.</param>
            <param name="rowCount">Number of rows to insert.</param>
            <param name="insertOptions">Insert options.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.InsertRow(System.Int32,System.Int32)">
            <summary>
            Inserts multiple rows into the worksheet. 
            </summary>
            <param name="rowIndex">Index at which new row should be inserted</param>
            <param name="rowCount">Number of rows to be inserted. </param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetBoolean(System.Int32,System.Int32)">
            <summary>
            Gets bool value from cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Returns found bool value. If cannot found returns false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetColumnWidth(System.Int32)">
            <summary>
            Gets the width of the specified column 
            </summary>
            <param name="columnIndex">Column index</param>
            <returns>Width of column</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetColumnWidthPixels(System.Int32)">
             <summary>
             Gets the width of the specified column, in units of pixel. 
             <example>The following code illustrates how to get the column width for a particular column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
                         
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitColumn(1);</para>
                 
                 <para>//Get column width</para>
                 <para>Console.WriteLine(worksheet.GetColumnWidthPixels(1));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">Column index.</param>
             <returns>Width of column</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetDefaultColumnStyle(System.Int32)">
            <summary>
            Returns default column style.
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns>Default column style or null if style wasn't set.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetDefaultRowStyle(System.Int32)">
            <summary>
            Returns default row style.
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns>Default row style or null if style wasn't set.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetError(System.Int32,System.Int32)">
            <summary>
            Gets error value from cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Returns error value or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormulaErrorValue(System.Int32,System.Int32)">
            <summary>
            Gets formula error value from cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Returns error value or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormulaNumberValue(System.Int32,System.Int32)">
            <summary>
            Returns formula number value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>Number contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormulaStringValue(System.Int32,System.Int32)">
            <summary>
            Returns formula string value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormula(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns formula corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <param name="bR1C1">Indicates whether R1C1 notation should be used.</param>
            <returns>Formula contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormula(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns formula corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <param name="bR1C1">Indicates whether R1C1 notation should be used.</param>
            <param name="isForSerialization"></param>
            <returns>Formula contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetFormulaBoolValue(System.Int32,System.Int32)">
            <summary>
            Gets formula bool value from cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Returns found bool value. If cannot found returns false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetNumber(System.Int32,System.Int32)">
            <summary>
            Returns number value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>Number contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetRowHeight(System.Int32)">
            <summary>
            Gets the height of a specified row. 
            </summary>
            <param name="row">Row index.</param>
            <returns>Height of row</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetColumnIsHide(System.Int32)">
            <summary>
            Indicates whether the column is hidden.
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetRowIsHide(System.Int32)">
            <summary>
            Indicates whether the row is hidden.
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HideColumn(System.Int32)">
            <summary>
            Hides a column.
            </summary>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HideColumns(System.Int32,System.Int32)">
            <summary>
            Hides columns.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="columnCount">Column count.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HideRow(System.Int32)">
            <summary>
            Hides a row.
            </summary>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.HideRows(System.Int32,System.Int32)">
            <summary>
            Hides a row.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="rowCount">Row count.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetRowHeightPixels(System.Int32)">
             <summary>
             Gets the height of a specified row in unit of pixel. 
             <example>The following code illustrates how to get the row height for a particular row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample text";</para>
                 <para>worksheet["C2"].Style.Font.Size = 18;</para>
                         
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitRow(2);</para>
                 
                 <para>//Get row height</para>
                 <para>Console.WriteLine(worksheet.GetRowHeightPixels(2));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <returns>Height of row</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetText(System.Int32,System.Int32)">
            <summary>
            Returns string value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.DeleteRange(Spire.Xls.CellRange,Spire.Xls.DeleteOption)">
            <summary>
            delete a range in worksheet
            </summary>
            <param name="range">the range to be deleted</param>
            <param name="deleteOption">Choose to move the right range to left or move the below range to above</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.MoveWorksheet(System.Int32)">
            <summary>
            Moves worksheet into new position.
            </summary>
            <param name="destIndex">Destination index.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.PixelsToColumnWidth(System.Double)">
            <summary>
            Converts pixels count into column width value.
            </summary>
            <param name="pixels">Column width in pixels.</param>
            <returns>Column width.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Remove">
            <summary>
            Removes worksheet from parernt worksheets collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.RemoveMergedCells(Spire.Xls.Core.IXLSRange)">
            <summary>
            Removes all merged cells within the specified range.
            </summary>
            <param name="range">The range from which to remove merged cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.RemovePanes">
            <summary>
            Removes panes from a worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.Data.DataColumn,System.Boolean)">
             <summary>
              Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string value with data column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by data column</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>System.Data.DataColumn dataColumn = table.Columns[0];</para>
                 <para>worksheet.Replace(oldValue, dataColumn, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="column">Data table with new data.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string value with data table:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by data table</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>worksheet.Replace(oldValue, table, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Data table with new data.</param>
             <param name="columnHeaders">Indicates whether to import field names.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.DateTime)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code illustrates how to replace the string value with datetime:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by dateTime</para>
                 <para>string oldValue = "Find";</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>worksheet.Replace(oldValue, dateTime);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.Double)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string with double:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by double</para>
                 <para>string oldValue = "Ten";</para>
                 <para>worksheet.Replace(oldValue, 10.0);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.Double[],System.Boolean)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string with array of double values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of double values</para>
                 <para>string oldValue = "Find";</para>
                 <para>double[] newValues = { 1.0, 2.0 };</para>
                 <para>worksheet.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.Int32[],System.Boolean)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string with array of int values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of int values</para>
                 <para>string oldValue = "Find";</para>
                 <para>int[] newValues = { 1, 2 };</para>
                 <para>worksheet.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.String)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string with another string:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by newValue</para>
                 <para>string oldValue = "Find";</para>
                 <para>string newValue = "NewValue";</para>
                 <para>worksheet.Replace(oldValue, newValue);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReplaceAll(System.String,System.String,System.Boolean)">
            <summary>
            Replaces all occurrences of a specified value with a new value in the worksheet.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value to replace with.</param>
            <param name="matchCase">Whether the replacement should be case-sensitive.</param>
            <returns>The number of occurrences replaced.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReplaceAll(System.String,Spire.Xls.CellStyle,System.String,Spire.Xls.CellStyle)">
            <summary>
            Replaces cells' values with new data and style.
            </summary>
            <param name="oldValue">String value to replace.</param>
            <param name="oldStyle">Cell style to replace.</param>
            <param name="newValue">New value for the range with specified string.</param>
            <param name="newStyle">New cell style for the range.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Replace(System.String,System.String[],System.Boolean)">
             <summary>
             Replaces cells' values with new data.
             <example>The following code snippet illustrates how to replace the string with array of string values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of string values</para>
                 <para>string oldValue = "Find";</para>
                 <para>string[] newValues = { "X values", "Y values" };</para>
                 <para>worksheet.Replace(oldValue, newValues , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
             <remarks>
             This can be long operation (needs iteration through all cells
             in the worksheet). Better use named ranges instead and call
             Import function instead of placeholders.
             </remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Save worksheet to image.
            </summary>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Save worksheet to image.
            </summary>
            <param name="fileName">file Name</param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.String)">
            <summary>
            Save worksheet to image.
            </summary>
            <param name="fileName">file Name</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save worksheet to image.
            </summary>
            <param name="fileName">file name</param>
            <param name="format">file format</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ToImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert worksheet to Image.
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.ImageType)">
             <summary>
             Save worksheet into image.
             <example>The following code illustrates how to convert the specified range into image with the specified type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Creat stream</para>
                 <para>Stream stream = new MemoryStream();</para>
                 
                 <para>//Save to image</para>
                 <para>System.Drawing.Image image = worksheet.SaveToImage(stream,1, 1, 10, 20, Spire.Xls.ImageType.Bitmap);</para>
                 <para>image.Save("Sample.png", System.Drawing.Imaging.ImageFormat.Png);</para>
             </code>
             </example>
             </summary>
             <param name="stream">Output stream. It is ignored if null.</param>
             <param name="firstRow">One-based index of the first row to convert.</param>
             <param name="firstColumn">One-based index of the first column to convert.</param>
             <param name="lastRow">One-based index of the last row to convert.</param>
             <param name="lastColumn">One-based index of the last column to convert.</param>
             <param name="imageType">Type of the image to create.</param>
             <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts range into image.
            </summary>
            <param name="stream">Output stream. It is ignored if null.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.ImageType,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts range into image.
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="stream">Output stream. It is ignored if null.</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToEMFImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts range into EMF format image.
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="FilePath">Output File Path</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToHtml(System.IO.Stream)">
            <summary>
            Save to HTML stream.
            <example>The following code snippets illustrates how to save as html as stream:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Creat stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to HTML stream</para>
                <para>worksheet.SaveToHtml(stream);</para>
            </code>
            </example>
            </summary>
            <param name="stream">Stream object</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToHtml(System.IO.Stream,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves work sheet to HTML.
            <example>The following code snippets illustrates how to save as html as stream with Save option:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Creat stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to HTML stream</para>
                <para>worksheet.SaveToHtml(stream, Spire.Xls.Core.Spreadsheet.HTMLOptions.Default);</para>
            </code>
            </example>
            </summary>
            <param name="stream">The stream</param>
            <param name="saveOption">The option</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToHtml(System.String)">
            <summary>
            Save to HTML file.
            <example>The following code snippets illustrates how to save as html to the specified file name:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to HTML file</para>
                <para>worksheet.SaveToHtml("Output.html");</para>
            </code>
            </example>
            </summary>
            <param name="filename">File name</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToHtml(System.String,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves as HTML.
            <example>The following code snippets illustrates how to save as html to the specified file name and save option:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to HTML file</para>
                <para>worksheet.SaveToHtml("Sample.html" , Spire.Xls.Core.Spreadsheet.HTMLOptions.Default);</para>
            </code>
            </example>
            </summary>
            <param name="fileName">The filename</param>
            <param name="saveOption">The option</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToFile(System.String,System.String)">
            <summary>
            Save worksheet to file.
            <example>The following code illustrates how to saves the worksheet in a different file with separator:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to file</para>
                <para>worksheet.SaveToFile("SaveToFile.csv" , ",");</para>
            </code>
            </example>
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Seperator.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToFile(System.String,System.String,System.Boolean)">
            <summary>
            Save worksheet to file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Seperator.</param>
            <param name="retainHiddenData">retain hidden data</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Save worksheet to file..
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Seperator.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Save worksheet to file..
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Seperator.</param>
            <param name="encoding">Encoding to use.</param>
            <param name="addQuotationsForStringValue">Add double Quotation marks for string value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToStream(System.IO.Stream,System.String)">
            <summary>
            Save worksheet to stream.
            <example>The following code illustrates how to saves the worksheet as stream with separator:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Create stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to stream</para>
                <para>worksheet.SaveToStream(stream , ",");</para>
            </code>
            </example>
            </summary>
            <param name="stream">Stream object.</param>
            <param name="separator">Seperator.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Save worksheet to stream.
            </summary>
            <param name="stream">Stream object.</param>
            <param name="separator">Seperator.</param>
            <param name="retainHiddenData">retain hidden data</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToStream(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Save worksheet to stream.
            </summary>
            <param name="stream">Stream to save.</param>
            <param name="separator">Current seperator.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToStream(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Save worksheet to stream.
            </summary>
            <param name="stream">Stream to save.</param>
            <param name="separator">Current seperator.</param>
            <param name="encoding">Encoding to use.</param>
            <param name="addQuotationsForStringValue">Add double Quotation marks for string value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToXps(System.String)">
            <summary>
             Saves specific worksheet to xps.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToPdf(System.String,Spire.Xls.FileFormat)">
            <summary>
            Save worksheet to pdf.
            </summary>
            <param name="fileName">File name.</param>
            <param name="fileFormat">File Format.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToPdf(System.String)">
            <summary>
            Save worksheet to pdf.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToPdfStream(System.IO.Stream,Spire.Xls.FileFormat)">
            <summary>
            Saves the document to a PDF stream with the specified file format.
            </summary>
            <param name="stream">The stream to save the PDF to.</param>
            <param name="fileFormat"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveToPdfStream(System.IO.Stream)">
            <summary>
            Save worksheet to pdf Stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ToSVGStream(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert CellRange to Svg stream
            </summary>
            <param name="stream">stream.</param>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetBlank(System.Int32,System.Int32)">
            <summary>
            Sets blank in specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetBoolean(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetColumnWidthInPixels(System.Int32,System.Int32)">
             <summary>
             Sets column width in pixels.
             <example>The following code illustrates how to set width for a column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set column width</para>
                 <para>worksheet.SetColumnWidthInPixels(2, 160);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetColumnWidthInPixels.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iColumn">One-based column index.</param>
             <param name="value">Width in pixels to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Set solumn width
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="width">Width to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetColumnWidthInPixels(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the width of the specified columns. 
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="count">count</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetDefaultColumnStyle(System.Int32,Spire.Xls.Core.IStyle)">
            <summary>
            Sets default style for column.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetDefaultColumnStyle(System.Int32,System.Int32,Spire.Xls.Core.IStyle)">
            <summary>
            Sets by column index default style for column.
            </summary>
            <param name="firstColumnIndex">Start column index.</param>
            <param name="lastColumnIndex">End column index.</param>
            <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetDefaultRowStyle(System.Int32,Spire.Xls.Core.IStyle)">
            <summary>
            Sets bdefault style for row.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetDefaultRowStyle(System.Int32,System.Int32,Spire.Xls.Core.IStyle)">
            <summary>
            Sets by column index default style for row.
            </summary>
            <param name="firstRowIndex">Start row index.</param>
            <param name="lastRowIndex">End row index.</param>
            <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetError(System.Int32,System.Int32,System.String)">
            <summary>
            Sets error in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Error to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetError(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Sets error in the specified cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
            <param name="isSetText"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormula(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Formula to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormula(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Sets formula in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Formula to set.</param>
            <param name="bIsR1C1">Indicates is formula in R1C1 notation.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormulaBoolValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets formula bool value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula bool value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormulaErrorValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula error value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula error value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormulaNumberValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets formula number value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula number value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetFormulaStringValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula string value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula string value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetNumber(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetRowHeightInPixels(System.Int32,System.Int32,System.Double)">
            <summary>
            Set Row height from Start Row index
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="count">count</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetRowHeight(System.Int32,System.Double)">
            <summary>
            Sets the height of the specified row. 
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetRowHeightPixels(System.Int32,System.Double)">
             <summary>
             Sets the height of the specified row. 
             <example>The following code illustrates how to set height for a row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set row height</para>
                 <para>worksheet.SetRowHeightPixels(3, 150);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetRowHeightPixels.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <param name="height">Height.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetText(System.Int32,System.Int32,System.String)">
            <summary>
            Sets text in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Text to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets the value of a cell in the grid.
            </summary>
            <param name="rowIndex">The zero-based index of the row.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
            <param name="stringValue">The string value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetCellValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="columnIndex">Column index.</param>
            <param name="boolValue">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SetCellValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="rowIndex">Row index</param>
            <param name="columnIndex">Column index.</param>
            <param name="stringValue">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.MergeRanges(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange)">
            <summary>
            Merges two ranges if they have the same dimensions and are adjacent.
            </summary>
            <param name="range1">The first range to merge.</param>
            <param name="range2">The second range to merge.</param>
            <returns>The merged range if successful, null otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.IntersectRanges(Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange)">
            <summary>
            Intersects two ranges and returns the resulting range.
            </summary>
            <param name="range1">The first range to intersect.</param>
            <param name="range2">The second range to intersect.</param>
            <returns>The resulting range if there is an intersection, otherwise null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.FreeRange(Spire.Xls.CellRange)">
            <summary>
            Clears the specified range of cells in the worksheet.
            </summary>
            <param name="range">The range of cells to clear.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GroupByColumns(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups columns. 
            </summary>
            <param name="firstColumn">The first column index to be grouped.</param>
            <param name="lastColumn">The last column index to be grouped.</param>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GroupByRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups rows. 
            </summary>
            <param name="firstRow">The first row index to be grouped.</param>
            <param name="lastRow">The last row index to be grouped.</param>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.UngroupByColumns(System.Int32,System.Int32)">
            <summary>
            Ungroups columns. 
            </summary>
            <param name="firstColumn">The first column index to be grouped.</param>
            <param name="lastColumn">The last column index to be grouped.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.UngroupByRows(System.Int32,System.Int32)">
            <summary>
            Ungroups rows. 
            </summary>
            <param name="firstRow">The first row index to be grouped.</param>
            <param name="lastRow">The last row index to be grouped.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveShapesToImage(Spire.Xls.SaveShapeTypeOption)">
            <summary>
            Save option specify shapes to image. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.SaveAndGetShapesToImage(Spire.Xls.SaveShapeTypeOption)">
            <summary>
            Save option specify shapes to image, and get option specify shapes together. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Parse(System.IO.TextReader,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method opens excel file using separator.
            </summary>
            <param name="streamToRead">Stream to reading.</param>    
            <param name="separator">Current separator.</param>
            <param name="row">First row to write.</param>
            <param name="column">First column to write.</param>
            <param name="isValid"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReadCellValue(System.IO.TextReader,System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Read single cell value plus ending separator or new line character if present.
            </summary>
            <param name="reader">Read to get data from.</param>
            <param name="separator">Separator between cell values.</param>
            <param name="builder">Builder to store temporary results.</param>
            <param name="isValid">BoolenValue for the ValidDocument.</param>
            <returns>Extracted cell value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReadToChar(System.IO.TextReader,System.Char,System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Read data from reader until it find specified character.
            </summary>
            <param name="reader">Reader to read data from.</param>
            <param name="endChar">Character to locate.</param>
            <param name="builder">Builder to put extracted data into.</param>
            <param name="separator">Separator between cell values.</param>
            <param name="isValid">BoolenValue for the ValidDocument.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ReadToChar(System.IO.TextReader,System.Char,System.Text.StringBuilder)">
            <summary>
            Read data from reader until it find specified character.
            </summary>
            <param name="reader">Reader to read data from.</param>
            <param name="endChar">Character to locate.</param>
            <param name="builder">Builder to put extracted data into.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.EndsWith(System.Text.StringBuilder,System.String)">
            <summary>
            Checks whether data inside specified string builder ends with specified string.
            </summary>
            <param name="builder">Builder to check.</param>
            <param name="separator">Separator to locate.</param>
            <returns>True if it ends with specified value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ParseRange(Spire.Xls.Core.IXLSRange,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Parses Range.
            </summary>
            <param name="range">Current Range.</param>
            <param name="strRowString">String where parsing is.</param>
            <param name="separator">Current separator.</param>
            <param name="i">Current index of parsing string.</param>
            <param name="isValid">BoolenValue for the ValidDocument.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ApplyStyle(Spire.Xls.CellStyle)">
            <summary>
            Apply style to whole sheet.
            </summary>
            <param name="style">style to apply</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.ApplyStyle(Spire.Xls.CellStyle,System.Boolean,System.Boolean)">
            <summary>
            Apply style to whole sheet.
            </summary>
            <param name="style">style to apply</param>
            <param name="applyRowStyle">true means apply style to all rows</param>
            <param name="applyColumnStyle">true means apply style to all columns</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Subtotal(Spire.Xls.Core.IXLSRange,System.Int32,System.Int32[],Spire.Xls.SubtotalTypes)">
            <summary>
            Creates subtotals for the range.
            </summary>
            <param name="range">The range</param>
            <param name="groupByIndex">The field index to group by, offset from zero</param>
            <param name="totalFields">An array of zero-based field index offsets, indicating the fields to which the subtotals are added.</param>
            <param name="subtotalType">The subtotal type.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.Subtotal(Spire.Xls.Core.IXLSRange,System.Int32,System.Int32[],Spire.Xls.SubtotalTypes,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates subtotals for the range.
            </summary>
            <param name="range">The range</param>
            <param name="groupByIndex">The field index to group by, offset from zero</param>
            <param name="totalFields">An array of zero-based field index offsets, indicating the fields to which the subtotals are added.</param>
            <param name="subtotalType">The subtotal type.</param>
            <param name="replace">Indicates whether replace the current subtotals</param>
            <param name="addPageBreak">Indicates whether add page break between groups</param>
            <param name="addsummaryBelowData">Indicates whether add summarry below data.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetRowIsAutoFit(System.Int32)">
            <summary>
            Get GetRowIsAutoFit By rowIndex
            </summary>
            <param name="rowIndex"></param>
            <returns>If the row is null Return false,else if the row height is Autofit Return true, the row height is CustomHeight Return false</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheet.GetColumnIsAutoFit(System.Int32)">
            <summary>
            Get ColumnIsAutofit By columnIndex
            </summary>
            <param name="columnIndex"></param>
            <returns>If the column is null Return false,else if the column width is Autofit Return true, the column width is CustomWidth Return false</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ProtectedRange">
            <summary>
            Represents allow edit range
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ProtectedRange.name">
            <summary>
            Represents protected range name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ProtectedRange.range">
            <summary>
            Represents protected range range.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ProtectedRange.password">
            <summary>
            Represents protected range password.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ProtectedRange.Name">
            <summary>
            Represents protected range name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ProtectedRange.Range">
            <summary>
            Represents protected range range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ProtectedRange.Password">
            <summary>
            Represents protected range password.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RangeTrueFalse.m_trueValues">
            <summary>
            Object that contains ranges with value equal to true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.RangeTrueFalse.m_falseValues">
            <summary>
            Object that contains ranges with value equal to false.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RangeTrueFalse.GetRangeValue(Spire.Xls.Core.ICombinedRange)">
            <summary>
            Returns value for the range object.
            </summary>
            <param name="range">Range to get information about.</param>
            <returns>Value for the range.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RangeTrueFalse.SetRange(Spire.Xls.Core.ICombinedRange,System.Nullable{System.Boolean})">
            <summary>
            Sets property value for the range.
            </summary>
            <param name="range">Range to set value for.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.RangeTrueFalse.Clear">
            <summary>
            Clears all ranges.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase">
            <summary>
            Represents the base class for Excel worksheet operations.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.DEF_MIN_COLUMN_INDEX">
            <summary>
            Defines the default minimum column index as the maximum value of an integer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_book">
            <summary>
            Represents the workbook object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_bParsed">
            <summary>
            Indicates whether worksheet was parsed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_bParsing">
            <summary>
            Indicates whether object is currently being parsed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_bSkipParsing">
            <summary>
            Indicates whether to skip parsing.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_bIsSupported">
            <summary>
            True - indicates that record extracted from stream can be used, by this
            implementation, otherwise False.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.DEF_PASSWORD_CONST">
            <summary>
            Default password hash value.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_iFirstColumn">
            <summary>
            The first column index, initialized to the default minimum column index.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_iLastColumn">
            <summary>
            One field from Worksheet dimension records.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_iFirstRow">
            <summary>
            One field from Worksheet dimension records.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.m_iLastRow">
            <summary>
            One field from Worksheet dimension records
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.SetChanged">
            <summary>
            This method should be called after any changes in the worksheet.
            Sets Saved property of the parent workbook to false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Name">
            <summary>
            Returns or sets the name of the object. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.CodeName">
            <summary>
            Name used by macros to access workbook items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Zoom">
            <summary>
            Zoom factor of document.
            </summary>
            <remarks> Value of zoom should be between 10 and 400.</remarks>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Visibility">
            <summary>
            Controls end user visibility of worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Workbook">
            <summary>
            Get parent workbook of current worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Charts">
            <summary>
            Returns charts collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.QueryTables">
            <summary>
            Gets the collection of query tables in the worksheet.
            </summary>
            <returns>A QueryTableCollection object representing the query tables.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.CheckBoxes">
            <summary>
            Returns inner checkboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ButtonShapes">
            <summary>
            Gets the collection of button shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LabelShapes">
            <summary>
            Gets the collection of label shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Lines">
            <summary>
            Gets the lines of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ListBoxes">
            <summary>
            Gets the list of list boxes in the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ComboBoxes">
            <summary>
            Returns collection with all comboboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GroupBoxes">
            <summary>
            Gets the group boxes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.OvalShapes">
            <summary>
            Gets the oval shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.RectangleShapes">
            <summary>
            Gets the rectangle shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ScrollBarShapes">
            <summary>
            Gets the scroll bar shapes associated with the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.SpinnerShapes">
            <summary>
            Gets the spinner shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ArcShapes">
            <summary>
            Gets the collection of arc shapes in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Comments">
            <summary>
            Returns comments collection for this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GridLineColor">
             <summary>
             Grid line color.
             <example>The following code illustrates how to set the grid line color:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set grid lines color</para>
                 <para>worksheet.GridLineColor = ExcelColors.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GridLineColor.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.HasPictures">
            <summary>
            Indicates whether tabsheet contains any picture. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.HasVmlShapes">
            <summary>
            Indicates whether worksheet has vml shapes. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.HeaderFooterShapes">
            <summary>
            Header / footer shapes collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.DefaultGridlineColor">
            <summary>
            Indicates whether gridline color has default value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.FirstRow">
            <summary>
            Gets / sets index of the first row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.FirstColumn">
            <summary>
            Gets or sets index of the first column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.FirstDataRow">
            <summary>
            Gets index of the first data row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.FirstDataColumn">
            <summary>
            Gets index of the first data column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LastRow">
            <summary>
            Gets or sets one-based index of the last row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LastColumn">
            <summary>
            Gets or sets index of the last column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LastDataRow">
            <summary>
            Gets index of the last data row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LastDataColumn">
            <summary>
            Gets index of the last data column of the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.MoveSheet(System.Int32)">
            <summary>
            Moves sheet into new position, including chartsheet and worksheet.
            </summary>
            <param name="destIndex">Destination index.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.IsPasswordProtected">
            <summary>
            True if the worksheet has been protected with password.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Index">
            <summary>
            Returns the index number of the object within the collection of objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.IsTransitionEvaluation">
            <summary>
            Gets or sets a value indicating whether transition evaluation is enabled.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.LeftVisibleColumn">
             <summary>
             Gets/sets left visible column of the worksheet.
             <example>The following code illustrates how to set the left visible column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set left visible column</para>
                 <para>worksheet.LeftVisibleColumn = 3;</para>
                         
                 <para>//Get left visible column</para>
                 <para>Console.Write(worksheet.LeftVisibleColumn);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("LeftVisibleColumn.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.RealIndex">
            <summary>
            Index of the worksheet in the workbook
            (not necessary in Worksheets collection)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.SheetId">
            <summary>
            Gets or sets sheetId for this sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.IsRowColHeadersVisible">
            <summary>
            Gets or sets whether the worksheet will display row and column headers. Default is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.IsRightToLeft">
            <summary>
            Indicates whether worksheet is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ParentWorkbook">
            <summary>
            Returns parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Pictures">
            <summary>
            Pictures collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ClearCellImageCache">
            <summary>
            Clear Cell image array cache,not delete CellImage in cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.CellImages">
            <summary>
            Cell image array. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GroupShapeCollection">
            <summary>
            Get group shapes in worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.RadioButtons">
            <summary>
            Returns inner radiobutton collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TextBoxes">
            <summary>
            Returns inner textboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.IsSelected">
            <summary>
            Indicates whether tab of this sheet is selected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ProtectContents">
            <summary>
            Indicates is current sheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ProtectDrawingObjects">
            <summary>
            True if objects are protected. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Protection">
            <summary>
            Gets protected options. Read-only. For sets protection options use "Protect" method.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.ProtectScenarios">
            <summary>
            True if the scenarios of the current sheet are protected. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TabColor">
            <summary>
            Tab color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TabColorObject">
            <summary>
            Tab color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TabKnownColor">
            <summary>
            Tab excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TopVisibleRow">
             <summary>
             Gets/sets top visible row of the worksheet.
             <example>The following code illustrates how to set the top visible row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set top visible row</para>
                 <para>worksheet.TopVisibleRow = 5;</para>
                         
                 <para>//Get top visible row</para>
                 <para>Console.Write(worksheet.TopVisibleRow);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("TopVisibleRow.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedCheckBoxes">
            <summary>
            Returns inner checkboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedComboBoxes">
            <summary>
            Returns inner comboboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedLines">
            <summary>
            Returns inner lines collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedRects">
            <summary>
            Returns inner rects collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedArcs">
            <summary>
            Returns inner Arcs collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedOvals">
            <summary>
            Returns inner ovals collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedButtons">
            <summary>
            Returns inner buttons collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedGroupBoxes">
            <summary>
            Returns inner gourpboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedLabels">
            <summary>
            Returns inner labels collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedListBoxes">
            <summary>
            Returns inner listboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedScollBars">
            <summary>
            Returns inner scollbars collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedSpinners">
            <summary>
            Returns inner spinners collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedRadioButtons">
            <summary>
            Returns inner radiobutton collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedTextBoxes">
            <summary>
            Returns inner textboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.PrstGeomShapes">
            <summary>
            Gets the collection of preset geometric shapes.
            </summary>
            <returns>A <see cref="T:Spire.Xls.Core.Spreadsheet.Collections.PrstGeomShapeCollection"/> representing the preset geometric shapes.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.TypedPictures">
            <summary>
            Returns inner pictures collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.UnknownVmlShapes">
            <summary>
            Indicates whether worksheet contains some unknown vml shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.VmlShapesCount">
            <summary>
            Returns number of known vml shapes. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Activate">
            <summary>
            Makes the current sheet the active sheet. Equivalent to clicking the
            sheet's tab in MS Excel.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Select">
            <summary>
            Selects current tab sheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.SelectTab">
            <summary>
            Adds sheet tab to the selected tab.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Unselect">
            <summary>
            Unselects current tab sheet if possible.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Unselect(System.Boolean)">
            <summary>
            Unselects current tab sheet if possible.
            </summary>
            <param name="Check">Indicates whether to allow unselect last sheet.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Protect(System.String,Spire.Xls.SheetProtectionType)">
            <summary>
            Protects worksheet with password.
            </summary>
            <param name="password">Protection password.</param>
            <param name="options">The options that specify which actions are allowed while the worksheet is protected.</param>
            <remarks>Password should be less than 15 symbols.</remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Protect(System.String)">
             <summary>
             Protects worksheet with password.protect the sheet except select lock/unlock cells.
             <example>The following code illustrates how to protect the sheet except select lock/unlock cells:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Protects the first worksheet's content with password</para>
                 <para>worksheet.Protect("123456");</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Protect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="password">Protection password.</param>
             <remarks>Password should be less than 15 symbols.</remarks>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Clone(System.Object)">
            <summary>
            Creates copy of the current object.
            </summary>
            <param name="parent">Parent object for the new object.</param>
            <returns>Copy of the current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Unprotect">
            <summary>
            Unprotects this wokrsheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Unprotect(System.String)">
            <summary>
            Unprotects this worksheet using specified password.
            </summary>
            <param name="password">Password to unprotect.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.InitializeCollections">
            <summary>
            Initializes all required collections.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.InnerShapes">
            <summary>
            Returns shapes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.Shapes">
            <summary>
            Shapes collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GetPasswordHash(System.String)">
            <summary>
            Returns hash value for the password string.
            </summary>
            <param name="password">Password to hash.</param>
            <returns>Hash value for the password string.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GetCharBits15(System.Char)">
            <summary>
            Converts character to 15 bits sequence
            </summary>
            <param name="charToConvert">Character to convert.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.GetUInt16FromBits(System.Boolean[])">
            <summary>
            Converts bits array to UInt16 value.
            </summary>
            <param name="bits">Array to convert.</param>
            <returns>Converted UInt16 value.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.RotateBits(System.Boolean[],System.Int32)">
            <summary>
            Rotates (cyclic shift) bits in the array specified number of times
            </summary>
            <param name="bits">Array to rotate</param>
            <param name="count">Number of times to rotate</param>
            <returns>Rotated array.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsWorksheetBase.AddTextEffectShape(Spire.Xls.PresetTextEffect,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a text effect shape to the worksheet.
            </summary>
            <param name="effect">The preset text effect to apply.</param>
            <param name="text">The text to display in the shape.</param>
            <param name="upperLeftRow">The row index of the upper left corner of the shape.</param>
            <param name="top">The top position of the shape.</param>
            <param name="upperLeftColumn">The column index of the upper left corner of the shape.</param>
            <param name="left">The left position of the shape.</param>
            <param name="height">The height of the shape.</param>
            <param name="width">The width of the shape.</param>
            <returns>The added text effect shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.ColorFilter">
            <summary>
            Represents a filter that can be used to manipulate or apply effects to colors.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.ColorFilter.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorFilter class with the specified filter column and color.
            </summary>
            <param name="filter">The column to apply the filter to.</param>
            <param name="color">The color to use for the filter.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.ColorFilter.FilterByFillColor">
            <summary>
            Flag indicating whether or not to filter by the cell's fill color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.ColorFilter.Value">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter">
            <summary>
            Represents a custom filter that can be used to apply specific filtering logic to data.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Initializes a new instance of the CustomFilter class with the specified parent column.
            </summary>
            <param name="parentcolumn">The parent column associated with this filter.</param>
            <returns>
            An instance of the CustomFilter class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.FilterOperatorType">
            <summary>
            Gets and sets the filter operator type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.Criteria">
            <summary>
            Gets and sets the criteria.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.DataType">
            <summary>
            Data type. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.ConditionOperator">
            <summary>
            Comparison operator. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.String">
            <summary>
            String value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.Boolean">
            <summary>
            Boolean value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.ErrorCode">
            <summary>
            Error code. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter.Double">
            <summary>
            Floating-point value. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection">
            <summary>
            Represents a strongly typed collection of CustomFilter objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Initializes a new instance of the CustomFilterCollection class with the specified parent column.
            </summary>
            <param name="parentcolumn">The parent column to which this custom filter collection belongs.</param>
            <returns>
            An instance of CustomFilterCollection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.Capacity">
            <summary>
            Gets or sets the capacity of the buffer or container represented by m_BCfc.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.Count">
            <summary>
            Gets the number of elements in the m_BCfc collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.And">
            <summary>
            Indicates whether the two criterias have an "and" relationship. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.RelationShip">
            <summary>
            Gets or sets the relationship type for the filter. It determines whether the conditions are combined using AND or OR logic.
            </summary>
            <returns>The current relationship type as a RelationShip enum value.</returns>
            <param name="value">The RelationShip enum value to set the relationship type to.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.Add(Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilter)">
            <summary>
            Adds a custom filter to the collection.
            </summary>
            <param name="customFilter">The custom filter to be added.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.Item(System.Int32)">
            <summary>
            Gets the custom filter in the specific index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.CustomFilterCollection.GetByIndex(System.Int32)">
            <summary>
            Retrieves a CustomFilter object from the collection based on the specified index.
            </summary>
            <param name="index">The zero-based index of the CustomFilter to retrieve.</param>
            <returns>A CustomFilter object at the specified index.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem">
            <summary>
            Represents an item in a group of dates, typically used for organizing or aggregating data by date.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.#ctor">
            <summary>
            Initializes a new instance of the DateTimeGroupItem class.
            </summary>
            <returns>
            A new instance of the DateTimeGroupItem class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.MinValue">
            <summary>
            Gets the minimum DateTime value based on the current DateTimeGroupingType.
            </summary>
            <returns>
            A DateTime representing the minimum value for the specified grouping type (Year, Month, Day, Hour, Minute, Second).
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeGroupItem class with the specified parameters.
            </summary>
            <param name="type">The type of date-time grouping.</param>
            <param name="year">The year component of the date-time group.</param>
            <param name="month">The month component of the date-time group.</param>
            <param name="day">The day component of the date-time group.</param>
            <param name="hour">The hour component of the date-time group.</param>
            <param name="minute">The minute component of the date-time group.</param>
            <param name="second">The second component of the date-time group.</param>
            <returns>A new instance of the DateTimeGroupItem class.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.DateTimeGroupingType">
            <summary>
            Gets or sets the type of grouping for date and time.
            </summary>
            <value>The DateTimeGroupingType value representing the type of grouping.</value>
            <returns>The DateTimeGroupingType value.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Year">
            <summary>
            Gets or sets the year of the date.
            </summary>
            <value>The year as an integer.</value>
            <returns>The year of the date.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Month">
            <summary>
            Gets or sets the month component of the date.
            </summary>
            <value>
            The month as an integer, where 1 represents January and 12 represents December.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Day">
            <summary>
            Gets or sets the day component of the date.
            </summary>
            <returns>
            The day of the month, ranging from 1 to 31.
            </returns>
            <param name="value">The day of the month to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Hour">
            <summary>
            Gets or sets the hour component of the time.
            </summary>
            <returns>The hour of the day, from 0 to 23.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Minute">
            <summary>
            Gets or sets the minute component of the time.
            </summary>
            <returns>
            The minute component of the time, as an integer.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem.Second">
            <summary>
            Gets or sets the second component of the time.
            </summary>
            <value>The second component, in the range 0 to 59.</value>
            <returns>The second component of the time.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilter">
            <summary>
            Represents a dynamic filter that can be used to apply various filtering criteria to data sources.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilter.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Initializes a new instance of the DynamicFilter class with the specified column.
            </summary>
            <param name="parentcloumn">The filter column.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilter.DynamicFilterType">
            <summary>
            Gets and sets the dynamic filter type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilter.Value">
            <summary>
            Gets and sets the dynamic filter value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilter.MaxValue">
            <summary>
            Gets and sets the dynamic filter max value.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType">
            <summary>
            The filter type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.ColorFilter">
            <summary>
            Represents a Color filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.CustomFilters">
            <summary>
            Represents a Custom filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.DynamicFilter">
            <summary>
            Represents a DynamicFilter filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.MultipleFilters">
            <summary>
            When multiple values are chosen to filter by, or when a group of date values are chosen to filter by, 
            this element groups those criteria together. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.IconFilter">
            <summary>
            Represents a Icon filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.Top10">
            <summary>
            Represents a Top10 filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterType.None">
            <summary>
            Represents None filter
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType">
            <summary>
            Specifies how to group dateTime values. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Day">
            <summary>
            Group by day. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Hour">
            <summary>
            Group by hour. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Minute">
            <summary>
            Group by Minute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Month">
            <summary>
            Group by Month.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Second">
            <summary>
            Group by Second.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType.Year">
            <summary>
            Group by Year.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType">
            <summary>
            Dynamic filter type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.AboveAverage">
            <summary>
            Shows values that are above average. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.BelowAverage">
            <summary>
            Shows values that are below average. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.LastMonth">
            <summary>
            Shows last month's dates.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.LastQuarter">
            <summary>
            Shows last quarter's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.LastWeek">
            <summary>
            Shows last week's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.LastYear">
            <summary>
            Shows last year's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.January">
            <summary>
            Shows the dates that are in January, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.October">
            <summary>
            Shows the dates that are in October, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.November">
            <summary>
            Shows the dates that are in November, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.December">
            <summary>
            Shows the dates that are in December, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Februray">
            <summary>
            Shows the dates that are in Februray, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.March">
            <summary>
            Shows the dates that are in March, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.April">
            <summary>
            Shows the dates that are in April, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.May">
            <summary>
            Shows the dates that are in May, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.June">
            <summary>
            Shows the dates that are in June, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.July">
            <summary>
            Shows the dates that are in July, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.August">
            <summary>
            Shows the dates that are in August, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.September">
            <summary>
            Shows the dates that are in September, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.NextMonth">
            <summary>
            Shows next month's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.NextQuarter">
            <summary>
            Shows next quarter's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.NextWeek">
            <summary>
            Shows next week's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.NextYear">
            <summary>
            Shows next year's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.None">
            <summary>
            Shows None.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Quarter1">
            <summary>
            Shows the dates that are in the 1st quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Quarter2">
            <summary>
            Shows the dates that are in the 2nd quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Quarter3">
            <summary>
            Shows the dates that are in the 3rd quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Quarter4">
            <summary>
            Shows the dates that are in the 4th quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.ThisMonth">
            <summary>
            Shows this month's dates.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.ThisQuarter">
            <summary>
            Shows this quarter's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.ThisWeek">
            <summary>
            Shows this week's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.ThisYear">
            <summary>
            Shows this year's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Today">
            <summary>
            Shows today's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Tomorrow">
            <summary>
            Shows tomorrow's dates. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.YearToDate">
            <summary>
            Shows the dates between the beginning of the year and today, inclusive. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType.Yesterday">
            <summary>
            Shows yesterday's dates. 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType">
            <summary>
            Custom Filter operator type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.LessOrEqual">
            <summary>
            Represents LessOrEqual operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.LessThan">
            <summary>
            Represents LessThan operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.Equal">
            <summary>
            Represents Equal operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.GreaterThan">
            <summary>
            Represents GreaterThan operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.NotEqual">
            <summary>
            Represents NotEqual operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.GreaterOrEqual">
            <summary>
            Represents GreaterOrEqual operator.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType.None">
            <summary>
            Represents no comparision.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.RelationShip">
            <summary>
            the criterias relationship.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.RelationShip.And">
            <summary>
            criterias have an "and" relationship.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.AutoFilter.RelationShip.Or">
            <summary>
            criterias have an "or" relationship.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn">
            <summary>
            Represents a column used in automatic filtering.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.Visibledropdown">
            <summary>
             Indicates whether the AutoFilter button for this column is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.Filter">
            <summary>
            Gets or sets the filter applied to data.
            </summary>
            <returns>
            Returns an object representing the filter. The type of the object can be ColorFilter, CustomFilterCollection, DynamicFilter, MultipleFilterCollection, IconFilter, or Top10Filter depending on the type of filter applied. If no filter is applied, returns null.
            </returns>
            <param name="value">The filter to be applied. It can be an instance of ColorFilter, CustomFilterCollection, DynamicFilter, MultipleFilterCollection, IconFilter, or Top10Filter.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.FilterType">
            <summary>
            Gets or sets the type of filter.
            </summary>
            <value>
            The filter type.
            </value>
            <returns>
            The filter type as a <see cref="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.FilterType"/> enumeration.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.FieldIndex">
            <summary>
            Gets or sets the index of the field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.Top10Items">
            <summary>
            number of items display in Top10Items mode.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsTop10Items">
            <summary>
            Highest-valued 10 items displayed 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.ShowTopItem">
            <summary>
            Gets or sets a value indicating whether the top item should be shown based on the filter.
            </summary>
            <value>
            <c>true</c> if the top item should be shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsSimple2">
            <summary>
            True if the second condition is a simple equality.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsSimple1">
            <summary>
            True if the first condition is a simple equality.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsTop10Percent">
            <summary>
            Highest-valued 10 items displayed (percentage specified in condition)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsAnd">
            <summary>
            Logical AND of FirstCondtion and SecondCondition.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.IsFiltered">
            <summary>
            False indicates that this autofilter was not used; otherwise True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.SecondCondition">
            <summary>
            Second condition of autofilter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.FirstCondition">
            <summary>
            First condition of autofilter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.HasFirstCondition">
            <summary>
            First condition used.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn.HasSecondCondition">
            <summary>
            Second condition used
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions">
            <summary>
            Represents the options for configuring the auto-fitting behavior of a component.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions.AutoFitMergedCells">
            <summary>
            Indicates whether auto fit row height when the cells is merged in a row.
            The default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions.OnlyAuto">
            <summary>
            Indicates whether only fit the rows which height are not customed.
            The default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.AutoFitterOptions.IgnoreHidden">
            <summary>
            Ingored the hidden rows/columns.
            The default value is false.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection">
            <summary>
            Represents the multiple filte collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.#ctor(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Initializes a new instance of the MultipleFilterCollection class with the specified parent column.
            </summary>
            <param name="parentcol">The parent column to which this MultipleFilterCollection belongs.</param>
            <returns>
            An instance of the MultipleFilterCollection class.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Clear">
            <summary>
            Clears the contents of the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Count">
            <summary>
            Gets the number of elements contained.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.RemoveDateFilter(Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove a date in the filter.
            </summary>
            <param name="type"></param>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="!:ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the size of the collection.</exception>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.RemoveFilter(System.String)">
            <summary>
            Removes the specified filter from the collection.
            </summary>
            <param name="filter">The filter to be removed.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.MatchBlank">
            <summary>
            Indicates whether to filter by blank. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.GetByIndex(System.Int32)">
            <summary>
            Retrieves an object from the collection at the specified index.
            </summary>
            <param name="index">The zero-based index of the object to retrieve.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Add(System.String)">
            <summary>
            Adds a filter to the BMfc collection.
            </summary>
            <param name="filter">The filter to be added.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Add(Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupItem)">
            <summary>
            Adds a DateTimeGroupItem filter to the collection.
            </summary>
            <param name="filter">The DateTimeGroupItem filter to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.MultipleFilterCollection.Add(Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new entry to the collection based on the specified DateTimeGroupingType, year, month, and day.
            </summary>
            <param name="type">The type of grouping to apply (e.g., Yearly, Monthly, Daily).</param>
            <param name="year">The year of the entry.</param>
            <param name="month">The month of the entry.</param>
            <param name="day">The day of the entry.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter">
            <summary>
            Represents the top 10 filter.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter.#ctor(System.Boolean,System.Boolean,System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Initializes a new instance of the Top10Filter class with specified parameters.
            </summary>
            <param name="isTop">Indicates whether it's top filter.</param>
            <param name="isPercent">Indicates whether the items is percent.</param>
            <param name="items">The items of filter.</param>
            <param name="parentcol">The parent column to which this filter applies.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter.IsTop">
            <summary>
            Indicates whether it's top filter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter.IsPercent">
            <summary>
            Indicates whether the items is percent.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter.Items">
            <summary>
            Gets and sets the items of the filter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.AutoFilter.Top10Filter.Criteria">
            <summary>
            Gets or sets the criteria used for filtering or matching.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.Average">
            <summary>
            Describe the Average conditional formatting rule. 
            This conditional formatting rule highlights cells that
            are above or below the average for all values in the range. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.Average.IsAboveAverage">
            <summary>
            Get or set the flag indicating whether the rule is an "above average" rule. 
            'true' indicates 'above average'.
            Default value is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.Average.IsEqualAverage">
            <summary>
            Get or set the flag indicating whether the 'aboveAverage' and 'belowAverage' criteria 
            is inclusive of the average itself, or exclusive of that value. 
            'true' indicates to include the average value in the criteria.
            Default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.Average.StdDev">
            <summary>
            Get or set the number of standard deviations to include above or below the average in the
            conditional formatting rule. 
            The input value must between 0 and 3 (include 0 and 3). 
            Setting this value to 0 means stdDev is not set.
            The default value is 0.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.Average.Type">
            <summary>
            Gets or sets the type of average based on the standard deviation and whether the value is above, below, or equal to the average.
            </summary>
            <param name="value">The type of average to set.</param>
            <returns>The type of average based on the current state of StdDev, IsAboveAverage, and IsEqualAverage.</returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorder">
            <summary>
            Represents the border of the data bars specified by a conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorder.Color">
            <summary>
            Gets or sets the border's color of data bars specified by a conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorder.Type">
            <summary>
            Gets or sets the border's type of data bars specified by a conditional formatting rule.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType">
            <summary>
            Used in a FormatConditionType.TimePeriod conditional formatting rule. 
            These are dynamic time periods, which change based on
            the date the conditional formatting is refreshed / applied.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.Today">
            <summary>
            Today's date.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.Yesterday">
            <summary>
            Yesterday's date.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.Tomorrow">
            <summary>
            Tomorrow's date.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.Last7Days">
            <summary>
            A date in the last seven days.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.ThisMonth">
            <summary>
            A date occuring in this calendar month.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.LastMonth">
            <summary>
            A date occuring in the last calendar month.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.NextMonth">
            <summary>
            A date occuring in the next calendar month.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.ThisWeek">
            <summary>
            A date occuring this week.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.LastWeek">
            <summary>
            A date occuring last week.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType.NextWeek">
            <summary>
            A date occuring next week.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TextDirectionType">
            <summary>
            Represents text reading order.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TextDirectionType.Context">
            <summary>
            Represents the direction of the text based on the context.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TextDirectionType.LeftToRight">
            <summary>
            Represents direction from left to right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TextDirectionType.RightToLeft">
            <summary>
            Represents direction from right to left.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarFillType">
            <summary>
            Specifies how a data bar is filled with color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarFillType.DataBarFillSolid">
            <summary>
            The data bar is filled with solid color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarFillType.DataBarFillGradient">
            <summary>
            The data bar is filled with a color gradient.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarAxisPosition">
            <summary>
            Specifies the axis position for a range of cells with conditional formatting as data bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.DataBarAxisAutomatic">
            <summary>
            Display the axis at a variable position based on the ratio of the minimum negative value to the maximum positive value in the range. 
            Positive values are displayed in a left-to-right direction. 
            Negative values are displayed in a right-to-left direction. 
            When all values are positive or all values are negative, no axis is displayed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.DataBarAxisMidpoint">
            <summary>
            Display the axis at the midpoint of the cell regardless of the set of values in the range. 
            Positive values are displayed in a left-to-right direction. 
            Negative values are displayed in a right-to-left direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.DataBarAxisNone">
            <summary>
            No axis is displayed, and both positive and negative values are displayed in the left-to-right direction.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorderType">
            <summary>
            Specifies the border of a data bar.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorderType.DataBarBorderNone">
            <summary>
            The data bar has no border.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarBorderType.DataBarBorderSolid">
            <summary>
            The data bar has a solid border.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarNegativeColorType">
            <summary>
            Specifies whether to use the same border and fill color as postive data bars.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarNegativeColorType.DataBarColor">
            <summary>
            Use the color specified in the Negative Value and Axis Setting dialog box or by using the ColorType and BorderColorType properties of the NegativeBarFormat object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.DataBarNegativeColorType.DataBarSameAsPositive">
            <summary>
            Use the same color as positive data bars.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.NegativeBarFormat">
            <summary>
            Represents the color settings of the data bars for negative values that are defined by a data bar conditional formating rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.NegativeBarFormat.BorderColor">
            <summary>
            Gets or sets a FormatColor object that you can use to specify the border color for negative data bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.NegativeBarFormat.BorderColorType">
            <summary>
            Gets whether to use the same border color as positive data bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.NegativeBarFormat.Color">
            <summary>
            Gets or sets a FormatColor object that you can use to specify the fill color for negative data bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.NegativeBarFormat.ColorType">
            <summary>
            Gets or sets whether to use the same fill color as positive data bars.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TopBottom">
            <summary>
            Describe the TopBottom conditional formatting rule. 
            This conditional formatting rule highlights cells whose
            values fall in the top N or bottom N bracket, as specified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TopBottom.IsPercent">
            <summary>
            Get or set the flag indicating whether a "top/bottom n" rule is a "top/bottom n percent" rule.
            Default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TopBottom.IsBottom">
            <summary>
            Get or set the flag indicating whether a "top/bottom n" rule is a "bottom n" rule. '1' indicates 'bottom'.
            Default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TopBottom.Rank">
            <summary>
            Get or set the value of "n" in a "top/bottom n" conditional formatting rule.
            If TopPercent or BottomPercent, the value must between 0 and 100.
            Otherwise it must between 0 and 1000.
            Default value is 10.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TopBottom.Type">
            <summary>
            Gets or sets the type of top or bottom, either as a percentage or a fixed value.
            </summary>
            <value>
            A TopBottomType value indicating whether the type is Top, Bottom, TopPercent, or BottomPercent.
            </value>
            <returns>
            The current TopBottomType value.
            </returns>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.ColorConditionValue">
            <summary>
            Represents condition value for colorset condition.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ColorConditionValue.FormatColor">
            <summary>
            The color assigned to the threshold of a color scale conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ColorConditionValue.IsGTE">
            <summary>
            Returns or sets whether this threshold value uses the greater than or equal to operator.
            false indicate 'greater than' is used instead of 'greater than or equal to'.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ColorConditionValue.Position">
            <summary>
            Gets the position of the condition value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ColorConditionValue.Type">
            <summary>
            Gets or sets the type of the condition value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.ColorConditionValue.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ColorConditionValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.ColorConditionValue.#ctor(Spire.Xls.ConditionValueType,System.Object,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorConditionValue class with the specified type, value, and color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsColorScale.DefaultColors2">
            <summary>
            Default color sequence for two color gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsColorScale.DefaultColors3">
            <summary>
            Default color sequence for three color gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsColorScale.Criteria">
            <summary>
            Returns a collection of individual IColorConditionValue objects.
            The IColorConditionValue object specifies the type, value, and the color
            of threshold criteria used in the color scale conditional format. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsColorScale.SetConditionCount(System.Int32)">
            <summary>
            Sets number of IColorConditionValue objects in the collection. Supported values are 2 and 3.
            </summary>
            <param name="count">Number of conditions.</param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat">
            <summary>
            Contains a condition and the formatting for cells. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.DEF_NOT_CONTAIN_FONT_COLOR">
            <summary>
            Represents constant that not contain font color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.m_book">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Priority">
            <summary>
            The priority of this conditional formatting rule. This value is used to determine which
            format should be evaluated and rendered. Lower numeric values are higher priority than
            higher numeric values, where '1' is the highest priority.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.StopIfTrue">
            <summary>
            True, no rules with lower priority may be applied over this rule, when this rule evaluates to true.
            Only applies for Excel 2007;
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.DxfId">
            <summary>
            Gets or sets the DXF ID, which is a unique identifier for an entity in a DXF (Drawing Interchange Format) file.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Average">
            <summary>
            Get the conditional formatting's "Average" instance.
            The default instance's rule highlights cells that are 
            above the average for all values in the range.
            Valid only for type = Average.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.TopBottom">
            <summary>
            Get the conditional formatting's "TopBottom" instance.
            The default instance's rule highlights cells whose
            values fall in the top 10 bracket.
            Valid only for type = TopBottom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.#ctor(System.Object)">
            <summary>
            Creates ConditionalFormat and set its ReservedHandle and Parent
            properties to speicified values.
            </summary>
            <param name="parent">Parent object for the ConditionalFormat.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.LeftBorderKnownColor">
            <summary>
            Excel color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.LeftBorderColor">
            <summary>
            Color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.LeftBorderStyle">
            <summary>
            Left border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.RightBorderKnownColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.RightBorderColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.RightBorderStyle">
            <summary>
            Right border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.TopBorderKnownColor">
            <summary>
            Excel color of the top line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.TopBorderColor">
            <summary>
            Color of the top line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.TopBorderStyle">
            <summary>
            Top border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BottomBorderKnownColor">
            <summary>
            Excel color of the bottom line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BottomBorderColor">
            <summary>
            Color of the bottom line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BottomBorderStyle">
            <summary>
            Bottom border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FirstFormula">
            <summary>
            First formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FirstFormulaR1C1">
            <summary>
            First formula in R1C1 notation. Read only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.SetTimePeriod(Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType)">
            <summary>
            Sets the time period for the specified type.
            </summary>
            <param name="timePeriod">The type of time period to set.</param>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.SecondFormula">
            <summary>
            Second formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.SecondFormulaR1C1">
            <summary>
            Second formula in R1C1 notation. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Text">
            <summary>
            The text value in a "text contains" conditional formatting rule. 
            Valid only for FormatType = containsText, notContainsText, beginsWith and endsWith.
            The default value is null.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FormatType">
            <summary>
            conditional format type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Operator">
            <summary>
            Type of the comparison operator.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsBold">
            <summary>
            Indicates whether font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsItalic">
            <summary>
            Indicates whether font is italic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FontKnownColor">
            <summary>
            Font excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Underline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsStrikeThrough">
            <summary>
            Indicates whether font is striked through.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsSuperScript">
            <summary>
            Indicates whether font is superscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsSubScript">
            <summary>
            Indicates whether font is subscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.KnownColor">
            <summary>
            Pattern foreground excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Color">
            <summary>
            Pattern foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BackKnownColor">
            <summary>
            Pattern background excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BackColor">
            <summary>
            Pattern background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FillPattern">
            <summary>
            XlsFill pattern type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsFontFormatPresent">
            <summary>
            Indicates whether contains font formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsBorderFormatPresent">
            <summary>
            Indicates whether contains border formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsPatternFormatPresent">
            <summary>
            Indicates whether contains pattern formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsFontColorPresent">
            <summary>
            Indicates whether format color present.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsPatternColorPresent">
            <summary>
            Indicates whether presents pattern color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsPatternStyleModified">
            <summary>
            Indicates whether pattern style was modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsBackgroundColorPresent">
            <summary>
            Indicates whether background color present.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsLeftBorderModified">
            <summary>
            Indicates whether left border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsRightBorderModified">
            <summary>
            Indicates right border style and color modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsTopBorderModified">
            <summary>
            Indicates whether top border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsBottomBorderModified">
            <summary>
            Indicates whether bottom border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.DataBar">
            <summary>
            Gets the DataBar object associated with the current instance.
            </summary>
            <returns>
            A new instance of the DataBar class.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IconSet">
            <summary>
            Returns iconset settings. Valid only if FormatType is set to IconSet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.ColorScale">
            <summary>
            Get the conditional formatting's "ColorScale" instance.
            The default instance is a "green-red" 2ColorScale .
            Valid only for type = ColorScale.
            </summary>
            <returns>ColorScale instance</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.NumberFormat">
            <summary>
            Gets or sets the number format of the cell.
            </summary>
            <returns>
            The format string representing the number format.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.IsNumberFormatPresent">
            <summary>
            Determines whether the specified input contains a number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Workbook">
            <summary>
            Returns parent workbook. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Equals(System.Object)">
            <summary>
            A hash code for the current Object without taking cell list into account.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.OColor">
            <summary>
            Conditional format color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BackColorObject">
            <summary>
            Conditional format background color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.TopBorderColorObject">
            <summary>
            Conditional format top border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.BottomBorderColorObject">
            <summary>
            Conditional format bottom border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.LeftBorderColorObject">
            <summary>
            Conditional format left border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.RightBorderColorObject">
            <summary>
            Conditional format right border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.FontColorObject">
            <summary>
            Conditional format font color. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.MakeFormula">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.MakeFormula(System.String)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.MakeFormula(System.Double)">
            <summary>
            Generates a formula based on the conditional format type and a given parameter.
            </summary>
            <param name="para">The parameter used in the formula generation, typically a value or text.</param>
            <returns>A string representing the generated formula, or null if the format type is not recognized.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsConditionalFormat.UpdateFormula(System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Updates conditional format formulas.
            </summary>
            <param name="iCurIndex">Current worksheet index.</param>
            <param name="iSourceIndex">Source worksheet index.</param>
            <param name="sourceRect">Source rectangle.</param>
            <param name="iDestIndex">Destination worksheet index.</param>
            <param name="destRect">Destination rectangle.</param>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="T:Spire.Xls.Core.Spreadsheet.XlsDataBar">
            <summary>
            Represents a data bar conditional formating rule. Applying a data bar to a
            range helps you see the value of a cell relative to other cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.Core.Spreadsheet.XlsDataBar.DefaultColor">
            <summary>
            Default data bar color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.MinPoint">
            <summary>
            Returns a ConditionValue object which specifies how the shortest bar is evaluated
            for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.MaxPoint">
            <summary>
            Returns a ConditionValue object which specifies how the longest bar is evaluated
            for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.BarColor">
            <summary>
            Gets/sets the color of the bars in a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.PercentMax">
            <summary>
            Returns or sets a value that specifies the length of the longest
            data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.PercentMin">
            <summary>
            Returns or sets a value that specifies the length of the shortest
            data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.ShowValue">
            <summary>
            Returns or sets a Boolean value that specifies if the value in the cell
            is displayed if the data bar conditional format is applied to the range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.Equals(System.Object)">
            <summary>
            A hash code for the current Object without taking cell list into account.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.op_Equality(Spire.Xls.Core.Spreadsheet.XlsDataBar,Spire.Xls.Core.Spreadsheet.XlsDataBar)">
            <summary>
            Compares two instances of the DataBarImpl.
            </summary>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XlsDataBar.op_Inequality(Spire.Xls.Core.Spreadsheet.XlsDataBar,Spire.Xls.Core.Spreadsheet.XlsDataBar)">
            <summary>
            Checks whether objects are different.
            </summary>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <returns>True if objects are not equal.</returns>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.AxisColor">
            <summary>
            Gets the color of the axis for cells with conditional formatting as data bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.AxisPosition">
            <summary>
            Gets or sets the position of the axis of the data bars specified by a conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.BarBorder">
            <summary>
            Gets an object that specifies the border of a data bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.Direction">
            <summary>
            Gets or sets the direction the databar is displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsDataBar.NegativeBarFormat">
            <summary>
            Gets the NegativeBarFormat object associated with a data bar conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsIconSet.IconCriteria">
            <summary>
            Returns an IconCriteria collection which represents the set of criteria for
            an icon set conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsIconSet.IconSet">
            <summary>
            Returns or sets an IconSets collection which specifies the icon set used
            in the conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsIconSet.PercentileValues">
            <summary>
            Returns or sets a Boolean value indicating if the thresholds for an icon
            set conditional format are determined using percentiles. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsIconSet.IsReverseOrder">
            <summary>
            Returns or sets a Boolean value indicating if the order of icons is
            reversed for an icon set.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Spreadsheet.XlsIconSet.ShowIconOnly">
            <summary>
            Returns or sets a Boolean value indicating if only the icon is displayed
            for an icon set conditional format.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Spreadsheet.XmlReaders.MSXmlReader.ReadWorksheetPageBreaks(System.Xml.XmlReader,Spire.Xls.Core.Converter.Spreadsheet.Worksheet)">
            <summary>
            Read all page breaks
            </summary>
            <param name="reader"></param>
            <param name="sheet"></param>
        </member>
        <member name="T:Spire.Xls.Core.MergeSpreadsheet.Collections.GroupShapeCollection">
            <summary>
            Represents a collection of GroupShape objects, providing methods to manage and manipulate multiple GroupShape instances.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.MergeSpreadsheet.Collections.GroupShapeCollection.Group(Spire.Xls.Core.IShape[])">
            <summary>
            Group shapes.
            </summary>
            <param name="shapes"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.MergeSpreadsheet.Collections.GroupShapeCollection.UnGroupAll">
            <summary>
            UnGroup all group shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.MergeSpreadsheet.GroupShape">
            <summary>
            Group shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.MergeSpreadsheet.GroupShape.UnGroup">
            <summary>
            UnGroup current group shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignature">
            <summary>
            Represents a DigitalSignature in Excel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignature.Certificate">
            <summary>
            Certificate object that was used to sign.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignature.Comments">
            <summary>
            Signature Comments.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignature.SignTime">
            <summary>
            Sign Time.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignature.IsValid">
            <summary>
            Indicates whether this digital signature is valid.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignatures">
            <summary>
            Represents a Collection of DigitalSignature in Excel.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignatures.Add(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.DateTime)">
            <summary>
            create a signature and add to DigitalSignatureCollection.
            </summary>
            <param name="certificate">Certificate object that was used to sign</param>
            <param name="comments">Signature Comments</param>
            <param name="signTime">Sign Time</param>
        </member>
        <member name="T:Spire.Xls.Core.ICustomPropertiesCollection">
            <summary>
            Represents a collection of custom properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomPropertiesCollection.Capacity">
            <summary>
            Gets or sets the capacity of the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomPropertiesCollection.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomPropertiesCollection.Item(System.Int32)">
            <summary>
            Gets <see cref="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty"/> object at the special field.
            </summary>
            <param name="fieldIndex">The integer offset of the field on which you want to base the filter 
            (from the left of the list; the leftmost field is field 0).
            </param>
            <returns>
            Returens <see cref="T:Spire.Xls.Core.Spreadsheet.Collections.XlsCustomProperty"/> object.
            </returns>
        </member>
        <member name="P:Spire.Xls.Core.ICustomPropertiesCollection.Item(System.String)">
            <summary>
            Gets the XlsCustomProperty associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICustomPropertiesCollection.Add(System.String,System.String)">
            <summary>
            Adds a custom property to the document with the specified name and value.
            </summary>
            <param name="name">The name of the custom property.</param>
            <param name="value">The value of the custom property.</param>
            <returns>The XlsCustomProperty object that was added.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICustomPropertiesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICustomPropertiesCollection.Clear">
            <summary>
            Clears the contents of the object, resetting it to its default state.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICustomPropertiesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes object from the collection of custom properties.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Spire.Xls.Core.IConditionalFormatsCollection">
            <summary>
            Represents a collection of conditional formats that can be applied to a worksheet range in a spreadsheet application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormatsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of elements the collection can hold.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormatsCollection.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormatsCollection.Item(System.Int32)">
            <summary>
            Gets the conditional formats for the specified field index.
            </summary>
            <param name="fieldIndex">The zero-based index of the field.</param>
            <returns>The XlsConditionalFormats for the specified field.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.Add">
            <summary>
            Adds new item to the collection.
            </summary>
            <returns>Object that contains required cells.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.Add(Spire.Xls.Core.Spreadsheet.Collections.XlsConditionalFormats)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="formats">Item to add.</param>
            <returns>Object that contains required cells.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.CopyFrom(Spire.Xls.Core.Spreadsheet.Collections.XlsWorksheetConditionalFormats)">
            <summary>
            Copies conditional formats from another formats collection.
            </summary>
            <param name="srcFormats">Source collection of conditional formats to copy.</param>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.Find(System.Drawing.Rectangle[])">
            <summary>
            Search for collection that contains all specified ranges.
            </summary>
            <param name="arrRanges"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.FindAll(System.Drawing.Rectangle[])">
            <summary>
            Search for collection that contains all specified ranges.
            </summary>
            <param name="arrRanges"></param>
            <returns>XlsConditionalFormats array</returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.GetByIndex(System.Int32)">
            <summary>
            Returns a single Filter object from a collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes range from the collection of conditional formats.
            </summary>
            <param name="arrRanges">Array of ranges to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormatsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.IDataValidationCollection">
            <summary>
            Represents a collection of data validation rules or objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.IsPromptBoxPositionFixed">
            <summary>
            Indicates whehter prompt box has fixed position..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.IsPromptBoxVisible">
            <summary>
            Indicates whehter prompt box is visible..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.ParentTable">
            <summary>
            Gets parent table. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.PromptBoxHPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.PromptBoxVPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.ShapesCount">
            <summary>
            Gets number of required shapes objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.Workbook">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationCollection.Worksheet">
            <summary>
            Parent worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IDataValidationCollection.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes ranges from collection.
            <param name="rectangles">Ranges to remove.</param>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IDataValidationTable">
            <summary>
            Defines a contract for data validation tables, which are responsible for validating data entries according to specific rules or criteria.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationTable.Workbook">
            <summary>
            Gets parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationTable.Worksheet">
            <summary>
            Gets parent wokrsheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationTable.ShapesCount">
            <summary>
            Gets number of required shapes objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidationTable.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IDataValidationTable.FindDataValidation(System.Int64)">
            <summary>
            Searches for corresponding data validation.
            </summary>
            <param name="iCellIndex">Cell index.</param>
            <returns>Found data validation or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IDataValidationTable.Remove(System.Drawing.Rectangle[])">
            <summary>
            Removes specified rectangles from the collection.
            </summary>
            <param name="rectangles">Rectangles to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IReflectionEffect">
            <summary>
            Defines a contract for implementing reflection effects in an application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.Blur">
            <summary>
            Gets or sets the blur intensity value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.Direction">
            <summary>
            Gets or sets the direction, typically represented in degrees or radians.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.Distance">
            <summary>
            Gets or sets the distance value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.FadeDirection">
            <summary>
            Gets or sets the direction of the fade effect. This value typically represents an angle or a factor that determines how the fade transition should occur.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.RotWithShape">
            <summary>
            Gets or sets a value indicating whether the rotation should consider the shape of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.Size">
            <summary>
            Gets or sets the size of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IReflectionEffect.Transparency">
            <summary>
            Gets or sets the transparency level. The value should be between 0 (completely transparent) and 1 (completely opaque).
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IFormat3D">
            <summary>
            Defines a contract for formatting 3D objects or data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelTopType">
            <summary>
            Gets or sets the bevel top.
            </summary>
            <value>The bevel top.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelBottomType">
            <summary>
            Gets or sets the bevel bottom.
            </summary>
            <value>The bevel bottom.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.MaterialType">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.LightingType">
            <summary>
            Gets or sets the lighting.
            </summary>
            <value>The lighting.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelTopWidth">
            <summary>
            Gets or sets the bevelTop's width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelTopHeight">
            <summary>
            Gets or sets the bevelTop's height.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelBottomWidth">
            <summary>
            Gets or sets the bevelBottom's width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.BevelBottomHeight">
            <summary>
            Gets or sets the bevelBottom's height.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.ContourWidth">
            <summary>
            Gets or sets the contour's width.
            </summary>
            <value>The lighting.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.ExtrusionHeight">
            <summary>
            Gets or sets the shapeDepth's height.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.ContourColor">
            <summary>
            Gets or sets the contour's color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.ExtrusionColor">
            <summary>
            Gets or sets the shapeDepth's color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IFormat3D.LightingAngle">
            <summary>
            Gets or sets the contour's color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalFill.BackColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalFill.ForeColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalFill.Tile">
            <summary>
            Represents whether picture is tiled or stretched.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IShadow">
            <summary>
            Defines the contract for implementing shadow effects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.ShadowOuterType">
            <summary>
            Gets or sets the shadow outer presets.
            </summary>
            <value>The shadow outer presets.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.ShadowInnerType">
            <summary>
            Gets or sets the shadow inner presets.
            </summary>
            <value>The shadow inner presets.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.ShadowPrespectiveType">
            <summary>
            Gets or sets the shadow prespective presets.
            </summary>
            <value>The shadow prespective presets.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.HasCustomStyle">
            <summary>
            Gets or sets a value indicating whether this instance has custom shadow style.
            </summary>
            <value>
            	<c>true</c> if this instance has custom shadow style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Transparency">
            <summary>
            Gets or sets the transparency of Shadow.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Size">
            <summary>
            Gets or sets the size of Shadow.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Blur">
            <summary>
            Gets or sets the blur of Shadow.
            </summary>
            <value>The blur.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Angle">
            <summary>
            Gets or sets the angle of Shadow.
            </summary>
            <value>The angle.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Distance">
            <summary>
            Gets or sets the distance of Shadow.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IShadow.SoftEdge">
            <summary>
            Gets or sets the radio of soft edge.
            </summary>
            <value>The radio.</value>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IShadow.CustomShadowStyles(Spire.Xls.XLSXChartShadowOuterType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the outer shadow styles.
            </summary>
            <param name="iOuter">The Excel2007ChartPresetsOuter enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iSize">Size of the Shadow accepts the values between(0-200).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [custom shadow style].</param>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IShadow.CustomShadowStyles(Spire.Xls.XLSXChartShadowInnerType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the inner shadow styles.
            </summary>
            <param name="iInner">The Excel2007ChartPresetsInner enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [custom shadow style].</param>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IShadow.CustomShadowStyles(Spire.Xls.XLSXChartPrespectiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the perspective shadow styles.
            </summary>
            <param name="iPerspective">The Excel2007ChartPresetsPerspective enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iSize">Size of the Shadow accepts the values between(0-200).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [i custom shadow style].</param>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IExtendIndex">
            <summary>
            Defines a contract for classes that can Gets format index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IExtendIndex.ExtendedFormatIndex">
            <summary>
            Gets format index in m_book.InnerFormats.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat">
            <summary>
            Defines methods and properties for handling internal additional formatting requirements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.BottomBorderColor">
            <summary>
            Get/set BottomBorder color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.TopBorderColor">
            <summary>
            Get/set TopBorder color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.LeftBorderColor">
            <summary>
            Get/set LeftBorder color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.RightBorderColor">
            <summary>
            Get/set RightBorder color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.DiagonalBorderColor">
            <summary>
            Get/set DiagonalUpBorder color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.LeftBorderLineStyle">
            <summary>
            Gets / sets line style of the left border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.RightBorderLineStyle">
            <summary>
            Gets / sets line style of the right border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.TopBorderLineStyle">
            <summary>
            Gets / sets line style of the top border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.BottomBorderLineStyle">
            <summary>
            Gets / sets line style of the bottom border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.DiagonalUpBorderLineStyle">
            <summary>
            Gets / sets line style of the diagonal border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.DiagonalDownBorderLineStyle">
            <summary>
            Gets / sets line style of the diagonal border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.DiagonalUpVisible">
            <summary>
            Indicates whether DiagonalUp line is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.DiagonalDownVisible">
            <summary>
            Indicates whether DiagonalDown line is visible.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.BeginUpdate">
            <summary>
            Starts updating process.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.EndUpdate">
            <summary>
            Ends updating process.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalAddtionalFormat.Workbook">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IInternalFont">
            <summary>
            Summary description for IInternalFont.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalFont.Index">
            <summary>
            Returns font index. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalFont.Font">
            <summary>
            Returns XlsFont for current font. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.INamedObject">
            <summary>
            Implement objects that containt Name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.INamedObject.Name">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.ISerializableNamedObject">
            <summary>
            INamedObject interface declaration - object with name,
            index, and ability to serialize.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.ISerializableNamedObject.Name">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.ISerializableNamedObject.RealIndex">
            <summary>
            Index of the object in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IOptimizedUpdate">
            <summary>
            This interface describes methods for optimized object update.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IOptimizedUpdate.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.Interfaces.IOptimizedUpdate.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IPageSetupBase">
            <summary>
            Defines the base interface for page setup settings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.AutoFirstPageNumber">
            <summary>
            Indicates whether FirstPageNumber is set to Auto or not.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.BlackAndWhite">
            <summary>
            True if elements of the document will be printed in black and white.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.BottomMargin">
            <summary>
            Returns or sets the size of the bottom margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterFooter">
            <summary>
            Returns or sets the center part of the footer. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterFooterImage">
            <summary>
            Gets / set image for center part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterHeader">
            <summary>
            Returns or sets the center part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterHeaderImage">
            <summary>
            Gets / set image for center part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterHorizontally">
            <summary>
            True if the sheet is centered horizontally on the page when it is
            printed. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.CenterVertically">
            <summary>
            True if the sheet is centered vertically on the page when it is
            printed. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.Copies">
            <summary>
            Number of copies to print.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.Draft">
            <summary>
            True if the sheet will be printed without graphics.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.FirstPageNumber">
            <summary>
            Returns or sets the first page number that will be used when
            this sheet is printed. If xlAutomatic, Microsoft Excel chooses the
            first page number. The default is xlAutomatic. Read / write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.FooterMarginInch">
            <summary>
            Returns or sets the distance from the bottom of the page to the footer,
            in inches. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.HeaderMarginInch">
            <summary>
            Returns or sets the distance from the top of the page to the header,
            in inches. Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.LeftFooter">
            <summary>
            Returns or sets the left part of the footer. Read / write String.
            &amp;L Left aligns the characters that follow.
            &amp;C Centers the characters that follow.
            &amp;R Right aligns the characters that follow.
            &amp;E Turns double-underline printing on or off.
            &amp;X Turns superscript printing on or off.
            &amp;Y Turns subscript printing on or off.
            &amp;B Turns bold printing on or off.
            &amp;I Turns italic printing on or off.
            &amp;U Turns underline printing on or off.
            &amp;S Turns strikethrough printing on or off.
            &amp;D Prints the current date.
            &amp;T Prints the current time.
            &amp;F Prints the name of the document.
            &amp;A Prints the name of the workbook tab.
            &amp;P Prints the page number.
            &amp;P+number Prints the page number plus the specified number.
            &amp;P-number Prints the page number minus the specified number.
            &amp;&amp; Prints a single ampersand.
            &amp; "fontname" Prints the characters that follow in the specified font. Be sure to include the double quotation marks.
            &amp;nn Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points.
            &amp;N Prints the total number of pages in the document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.LeftFooterImage">
            <summary>
            Gets / set image for left part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.LeftHeader">
            <summary>
            Returns or sets the left part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.LeftHeaderImage">
            <summary>
            Gets / set image for left part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.LeftMargin">
            <summary>
            Returns or sets the size of the left margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.Order">
            <summary>
            Returns or sets the order that Microsoft Excel uses to number
            pages when printing a large worksheet. Read / write ExcelOrder.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.Orientation">
            <summary>
            Portrait or landscape printing mode. Read / write ExcelPageOrientation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.PaperSize">
            <summary>
            Returns or sets the size of the paper. Read / write ExcelPaperSize.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.PrintComments">
            <summary>
            Returns or sets the way comments are printed with the sheet.
            Read / write ExcelPrintLocation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.PrintErrors">
            <summary>
            Sets or returns an ExcelPrintErrors constant specifying the type of
            print error displayed. This feature allows users to suppress the
            display of error values when printing a worksheet. Read / write.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.PrintNotes">
            <summary>
            True if cell notes are printed as end notes with the sheet. Applies
            only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.PrintQuality">
            <summary>
            Returns or sets the print quality. Read / write ushort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.RightFooter">
            <summary>
            Returns or sets the right part of the footer. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.RightFooterImage">
            <summary>
            Gets / set image for right part of the footer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.RightHeader">
            <summary>
            Returns or sets the right part of the header. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.RightHeaderImage">
            <summary>
            Gets / set image for right part of the header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.RightMargin">
            <summary>
            Returns or sets the size of the right margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.TopMargin">
            <summary>
            Returns or sets the size of the top margin, in inches.
            Read / write Double.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.Zoom">
            <summary>
            Returns or sets a percentage (between 10 and 400 percent) by which
            Microsoft Excel will scale the worksheet for printing. Applies only
            to worksheets. Read / write ushort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IPageSetupBase.BackgoundImage">
            <summary>
            Gets / sets background image.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.OColor">
            <summary>
            Conditional format color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.BackColorObject">
            <summary>
            Conditional format background color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.TopBorderColorObject">
            <summary>
            Conditional format top border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.BottomBorderColorObject">
            <summary>
            Conditional format bottom border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.LeftBorderColorObject">
            <summary>
            Conditional format left border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.RightBorderColorObject">
            <summary>
            Conditional format right border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.FontColorObject">
            <summary>
            Conditional format font color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IInternalConditionalFormat.DxfId">
            <summary>
            Indicates whether pattern style was modified.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.Interfaces.IGlow">
            <summary>
            Defines the contract for objects that can emit or have a glow effect.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IGlow.Color">
            <summary>
            Gets or sets the color of the glow.
            </summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IGlow.SoftEdge">
            <summary>
            Gets or sets the radio of soft edge.
            </summary>
            <value>The radio.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IGlow.Transparency">
            <summary>
            Gets or sets the transparency of glow.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.Core.Interfaces.IGlow.Radius">
            <summary>
            Gets or sets the radius of GlowEffect.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="T:Spire.Xls.Core.IBuiltInDocumentProperties">
            <summary>
            Represents user interface for built-in document properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Item(Spire.Xls.BuiltInPropertyType)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Count">
            <summary>
            Returns number of elements in the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IBuiltInDocumentProperties.Clear">
            <summary>
            Removes all properties from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IBuiltInDocumentProperties.Contains(Spire.Xls.BuiltInPropertyType)">
            <summary>
            Indicates whether collection contains specified property.
            </summary>
            <param name="index">Property id.</param>
            <returns>True if collection contains required property.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Title">
            <summary>
            Title document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Subject">
            <summary>
            Subject document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Author">
            <summary>
            Author document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Keywords">
            <summary>
            Keywords document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Comments">
            <summary>
            Comments document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Template">
            <summary>
            Template document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.LastAuthor">
            <summary>
            LastAuthor document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.RevisionNumber">
            <summary>
            Revnumber document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.EditTime">
            <summary>
            EditTime document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.LastPrinted">
            <summary>
            LastPrinted document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.CreatedTime">
            <summary>
            CreationDate document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.LastSaveTime">
            <summary>
            LastSaveDate document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.PageCount">
            <summary>
            PageCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.WordCount">
            <summary>
            WordCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Characters">
            <summary>
            CharCount document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.ApplicationName">
            <summary>
            ApplicationName document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Category">
               // <summary>
               // Security document property.
               // </summary>
               int Security { get; set; }
            <summary>
            Category.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.PresentationTarget">
            <summary>
            Target format for presentation (35mm, printer, video, and so on).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Bytes">
            <summary>
            ByteCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.LineCount">
            <summary>
            LineCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.ParagraphCount">
            <summary>
            ParCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.SlideCount">
            <summary>
            SlideCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.NoteCount">
            <summary>
            NoteCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.HiddenCount">
            <summary>
            HiddenCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.MultimediaClipCount">
            <summary>
            MmclipCount.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBuiltInDocumentProperties.LinksDirty">
            <summary>
            Boolean value to indicate whether the custom links are
            hampered by excessive noise, for all applications.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ICustomDocumentProperties">
            <summary>
            Summary description for ICustomDocumentProperties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomDocumentProperties.Item(System.String)">
            <summary>
            Returns single entry from the collection. Creates new entry
            if property with specified name is not found. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomDocumentProperties.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICustomDocumentProperties.Count">
            <summary>
            Returns number of elements in the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Remove(System.String)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="strName">Property name.</param>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Contains(System.String)">
            <summary>
            Checks whether collection contains property with specified name.
            </summary>
            <param name="strName">Name to check.</param>
            <returns>True if property is contained by collection; false otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Add(System.String,System.String)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <param name="value">Property Value.</param>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Add(System.String,System.Boolean)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <param name="value">Property Value.</param>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Add(System.String,System.DateTime)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <param name="value">Property Value.</param>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Add(System.String,System.Int32)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <param name="value">Property Value.</param>
        </member>
        <member name="M:Spire.Xls.Core.ICustomDocumentProperties.Add(System.String,System.Double)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <param name="value">Property Value.</param>
        </member>
        <member name="T:Spire.Xls.Core.Interface.IDocumentProperty">
            <summary>
            Represents single document property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.IsBuiltIn">
            <summary>
            Indicates whether property is built-in. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.PropertyId">
            <summary>
            Returns property id for built-in properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Name">
            <summary>
            Returns property name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Value">
            <summary>
            Gets / sets property value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Boolean">
            <summary>
            Gets / sets boolean value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Integer">
            <summary>
            Gets / sets integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Int32">
            <summary>
            Gets / sets 4-bytes signed integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Double">
            <summary>
            Gets / sets double value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.Text">
            <summary>
            Gets / sets string value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.DateTime">
            <summary>
            Gets / sets DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.TimeSpan">
            <summary>
            Gets / sets TimeSpan value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.LinkSource">
            <summary>
            Returns or sets the source of a linked custom document property. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.Interface.IDocumentProperty.LinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content
            of the container document. False if the value is static. Read/write Boolean.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IInternalWorksheet">
            <summary>
            Represents internal worksheet object. It can be internal or external.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.DefaultPrintRowHeight">
            <summary>
            Return default row height in pixel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.FirstRow">
            <summary>
            Gets or sets one-based index of the first row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.FirstColumn">
            <summary>
            Gets or sets one-based index of the first column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.LastRow">
            <summary>
            Gets or sets one-based index of the last row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.LastColumn">
            <summary>
            Gets or sets one-based index of the last column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.ParentWorkbook">
            <summary>
            Returns parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalWorksheet.Version">
            <summary>
            Gets the version of Excel.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IInternalWorksheet.IsArrayFormula(System.Int64)">
            <summary>
            Determines whether the specified index corresponds to a cell that contains an array formula.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IInternalWorksheet.GetClonedObject(System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Gets object that is clone of current worksheet in the specified workbook.
            </summary>
            <param name="hashNewNames">Dictionary with update worksheet names.</param>
            <param name="book">New workbook object.</param>
            <returns>Object that is clone of the current worksheet.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IMarkersDesigner">
            <summary>
            Summary description for ITemplateMarkers.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IMarkersDesigner.ApplyMarkers">
            <summary>
            Applies markers to the parent object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IMarkersDesigner.ApplyMarkers(Spire.Xls.UnknownVariableAction)">
            <summary>
            Adds new variable to the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IMarkersDesigner.AddVariable(System.String,System.Object,System.Int32)">
            <summary>
            Adds new variable to the collection.
            </summary>
            <param name="strName">Name of the new variable.</param>
            <param name="variable">Variable value.</param>
            <param name="rowCount">Number of data rows used per apply.</param>
        </member>
        <member name="M:Spire.Xls.Core.IMarkersDesigner.RemoveVariable(System.String)">
            <summary>
            Removes variable from the collection.
            </summary>
            <param name="strName">Variable name.</param>
        </member>
        <member name="M:Spire.Xls.Core.IMarkersDesigner.ContainsVariable(System.String)">
            <summary>
            Checks whether template markers object contains variable with specified name.
            </summary>
            <param name="strName">Name to locate.</param>
        </member>
        <member name="P:Spire.Xls.Core.IMarkersDesigner.MarkerPrefix">
            <summary>
            Gets / sets marker prefix. String that indicates that cell contains marker.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IMarkersDesigner.ArgumentSeparator">
            <summary>
            Gets / sets arguments separator.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IMarkersDesigner.IsDetectDataTypes">
            <summary>
            Gets or sets a value indicating whether data types should be detected automatically.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IMigrantRange">
            <summary>
            Represents range object for the single cell. Coordinates of such object can be changed.
            There should be only one such object for single worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IMigrantRange.ResetRowColumn(System.Int32,System.Int32)">
            <summary>
            Resets row and column values.
            </summary>
            <param name="iRow">One-based row index of the new cell address.</param>
            <param name="iColumn">One-based column index of the new cell address.</param>
        </member>
        <member name="T:Spire.Xls.Core.IXLSRanges">
            <summary>
            Represents a collection of ranges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRanges.Remove(Spire.Xls.Core.IXLSRange)">
            <summary>
            Removes range from the collection.
            </summary>
            <param name="range">Range to remove.</param>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRanges.Item(System.Int32)">
            <summary>
            Returns item by index from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPivotCache">
            <summary>
            Represents pivot cache.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCache.Index">
            <summary>
            Gets zero-based cache index.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCache.SourceType">
            <summary>
            Specifies the pivot table cache source type.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCache.SourceRange">
            <summary>
            Returns the data source for the PivotTable report. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPivotCaches">
            <summary>
            Represents collection of workbook pivot caches.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCaches.Count">
            <summary>
            Returns number of items in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCaches.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
            <param name="index">Zero-based index of the item to return.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPivotCaches.Add(Spire.Xls.CellRange)">
            <summary>
            Creates new chache object inside this collection.
            </summary>
            <param name="range">Range that contains data to cache.</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IPivotCalculatedFields">
            <summary>
            Defines a contract for pivot calculated fields, which are used to perform calculations on pivot table data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCalculatedFields.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCalculatedFields.Item(System.Int32)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="index">Zero-based index of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPivotCalculatedFields.Item(System.String)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="name">Calculated Field Name</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPivotCalculatedFields.Add(System.String,System.String)">
            <summary>
            Adds the calculated field to the specified pivot table.
            </summary>
            <param name="name">name of the calculated pivot field.</param>
            <param name="formula">formula of the calculated pivot field.</param>
            <returns>Calculated pivot field</returns>
        </member>
        <member name="T:Spire.Xls.Core.IPivotDataField">
            <summary>
            Represents pivot table data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataField.Name">
            <summary>
            Gets / sets name of the data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataField.CustomName">
            <summary>
            Gets/sets pivot field custom name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataField.Subtotal">
            <summary>
            Gets/ sets subtotal function used for data field.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataField.BaseItem">
            <summary>
            Gets or sets the base item.
            </summary>
            <value>The base item.</value>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataField.BaseField">
            <summary>
            Gets or sets the base field.
            </summary>
            <value>The base field.</value>
        </member>
        <member name="T:Spire.Xls.Core.IPivotDataFields">
            <summary>
            Represents pivot cache data field collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataFields.Item(System.Int32)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="index">Zero-based index of the entry to get.</param>
            <returns>Requested data field object.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataFields.Item(System.String)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPivotDataFields.Add(Spire.Xls.Core.IPivotField,System.String,Spire.Xls.SubtotalTypes)">
            <summary>
            Adds new data field to the collection.
            </summary>
            <param name="field">Parent field to use.</param>
            <param name="name">Name for the new data field.</param>
            <param name="subtotal">Subtotal function for the new data field.</param>
            <returns>Newly added data field.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPivotDataFields.Count">
            <summary>
            Gets the number of fields in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPivotField">
            <summary>
            Represents pivot field object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.Name">
            <summary>
            Returns pivot field name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.CustomName">
            <summary>
            Gets/sets pivot field custom name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.Axis">
            <summary>
            Gets/sets field axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.NumberFormat">
            <summary>
            Gets/sets number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.Subtotals">
            <summary>
            Gets or sets type of field subtotals.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.CanDragToRow">
            <summary>
            User can drag field to row area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.CanDragToColumn">
            <summary>
            User can drag field to column area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.CanDragToPage">
            <summary>
            User can drag field to page area.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Spire.Xls.Core.IPivotField.CanDragOff" -->
        <member name="P:Spire.Xls.Core.IPivotField.ShowBlankRow">
            <summary>
            True if a blank row is inserted after the specified row field in a PivotTable report.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.CanDragToData">
            <summary>
            True if the specified field can be dragged to the data position. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.IsFormulaField">
            <summary>
            Indicates whether this field is formula field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.Formula">
            <summary>
            Specifies the formula for the calculated field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotField.RepeatItemLabels">
            <summary>
            True if the field repeat item labels.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IPivotField.CreateGroup(System.DateTime,System.DateTime,Spire.Xls.PivotGroupByTypes[],System.Int32)">
            <summary>
            Create group for current field.
            </summary>
            <param name="start">The start date time</param>
            <param name="end">The end date time</param>
            <param name="groupByArray">The array of group by types</param>
            <param name="days">The days</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotField.CreateGroup(System.DateTime,System.DateTime,Spire.Xls.PivotGroupByTypes[])">
            <summary>
            Create group for current field.
            </summary>
            <param name="start">The start date time</param>
            <param name="end">The end date time</param>
            <param name="groupByArray">The array of group by types</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotField.CreateGroup(System.Double,System.Double,System.Double)">
            <summary>
            Create group for current field.
            </summary>
            <param name="startValue">The start number value</param>
            <param name="endValue">The end number value</param>
            <param name="intervalValue">The interval number value</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotField.AddLabelFilter(Spire.Xls.PivotLabelFilterType,System.Object,System.Object)">
            <summary>
            Add label filter for pivot field, only for row and column field.
            </summary>
            <param name="type">Filter type.</param>
            <param name="value1">First filter value.</param>
            <param name="value2">Second filter value, only for Between and NotBetween type.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotField.AddValueFilter(Spire.Xls.PivotValueFilterType,Spire.Xls.Core.IPivotDataField,System.Object,System.Object)">
            <summary>
            Add value filter for pivot field, only for row and column field.
            </summary>
            <param name="type">Filter type.</param>
            <param name="dataField">Filter data field.</param>
            <param name="value1">First filter value.</param>
            <param name="value2">Second filter value, only for Between and NotBetween type.</param>
        </member>
        <member name="T:Spire.Xls.Core.IPivotFields">
            <summary>
            Represents field collection inside pivot table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotFields.Count">
            <summary>
            Returns number of elements in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotFields.Item(System.Int32)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="index">Item index to return.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPivotFields.Item(System.String)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IPivotTable">
            <summary>
            Represents pivot table object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.Name">
            <summary>
            Gets pivot table name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.PivotFields">
            <summary>
            Gets collection of pivot fields. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.DataFields">
            <summary>
            Gets collection of pivot table data fields. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.IsRowGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains row with grand totals for columns (same as RowGrand in VBA).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.IsColumnGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains column with grand totals for rows (same as ColumnGrand in VBA).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ShowDrillIndicators">
            <summary>
            The ShowDrillIndicators property is used for toggling the display of
            drill indicators in the PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.DisplayFieldCaptions">
            <summary>
            Gets/sets value controlling whether or not filter buttons and PivotField
            captions for rows and columns are displayed in the grid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.RepeatItemsOnEachPrintedPage">
            <summary>
            True if row, column, and item labels appear on the first row of each page when
            the specified PivotTable report is printed. False if labels are printed only on
            the first page. The default value is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.BuiltInStyle">
            <summary>
            Gets/sets built-in pivot style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ShowRowGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains grand totals for rows.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ShowColumnGrand">
            <summary>
            Gets/sets value indicating whether the PivotTable contains grand totals for columns.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.CacheIndex">
            <summary>
            Gets Index of the pivot Cache.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.Location">
            <summary>
            Returns pivot table location.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.Options">
            <summary>
            Represents the pivot table options.Read-only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.RowsPerPage">
            <summary>
            Specifies the number of rows per page for this PivotTable that the filter area will occupy.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ColumnsPerPage">
            <summary>
            Specifies the number of columns per page for this PivotTable that the filter area will occupy.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.CalculatedFields">
            <summary>
            Returns the collection of calculated fields of the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.PageFields">
            <summary>
            Returns the collection of page field for the specified pivot table,Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.RowFields">
            <summary>
            Returns the collection of Row field for the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ColumnFields">
            <summary>
            Returns the collection of Column field for the specified pivot table.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.ShowDataFieldInRow">
            <summary>
            Gets/sets value indicating whether the PivotTable data fields are shown in rows.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.AutoFormatType">
            <summary>
            Gets/sets the auto format type of PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTable.IsCompatibleWithExcel2003">
            <summary>
            Gets/sets whether compatible with excel2003. The default value is true.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.Clear">
            <summary>
            This method clears all the fields, deletes all filtering and sorting applied to the PivotTable.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.ClearRowFieldFilter(System.String)">
            <summary>
            clear the row field filter.
            </summary>
            <param name="fieldName">the row field name.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.ClearColumnFieldFilter(System.String)">
            <summary>
            clear the column field filter.
            </summary>
            <param name="fieldName">the column field name.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.ClearFilter(System.String)">
            <summary>
            clear the row and column field filter depends on field name.
            </summary>
            <param name="fieldName">the row and column field name.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.ChangeDataSource(Spire.Xls.Core.IXLSRange)">
            <summary>
            Change the data source of pivotTable.
            </summary>
            <param name="dataSource">New data source range.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTable.ApplyStyleToRange(Spire.Xls.Core.IXLSRange,Spire.Xls.CellStyle)">
            <summary>
            Apply style to range in pivot table.
            </summary>
            <param name="cellRange">Range in pivot table.</param>
            <param name="style">Style that apply to range.</param>
        </member>
        <member name="T:Spire.Xls.Core.IPivotTableOptions">
            <summary>
            Describes the settings of the pivot table
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowAsteriskTotals">
            <summary>
            True if an asterisk (*) is displayed next to each subtotal and grand total 
            value in the specified PivotTable report
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ColumnHeaderCaption">
            <summary>
            Specifies the string to be displayed in column header of pivot Table when in compact layout mode.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.RowHeaderCaption">
            <summary>
            Specifies the string to be displayed in Row header of pivot table when in compact layout mode
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowCustomSortList">
            <summary>
            Specifies a boolean value that indicates whether the "custom lists" option is offered when sorting this PivotTable
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowFieldList">
            <summary>
            False to disable the ability to display the field list for the PivotTable. 
            If the field list was already being displayed it disappears.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowGridDropZone">
            <summary>
            Specifies a boolean value that indicates whether the in-grid drop zones should be displayed at runtime, and whether classic layout is applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.IsDataEditable">
            <summary>
            True to disable the alert for when the user overwrites values in the data area of the PivotTable. 
            True also allows the user to change data values that previously could not be changed
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.EnableFieldProperties">
            <summary>
            True if the PivotTable Field dialog box is available when the user double-clicks the PivotTable field
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.Indent">
            <summary>
            Specifies the indentation increment for compact axis and can be used to set the Report
            Layout to Compact Form.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ErrorString">
            <summary>
            Returns or sets the string displayed in cells that contain errors
            when the DisplayErrorString property is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.DisplayErrorString">
            <summary>
            True if the PivotTable report displays a custom error string in cells
            that contain errors. The default value is False.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.MergeLabels">
            <summary>
            True if the specified PivotTable report’s outer-row item,
            column item, subtotal, and grand total labels use merged cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.PageFieldWrapCount">
            <summary>
            Returns or sets the number of page fields in each column
            or row in the PivotTable report.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.PageFieldsOrder">
            <summary>
            Returns or sets the order in which page fields 
            are added to the PivotTable report’s layout
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.DisplayNullString">
            <summary>
            True if the PivotTable report displays a custom string in cells
            that contain null values. The default value is True. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.NullString">
            <summary>
            Returns or sets the string displayed in cells that contain null
            values when the DisplayNullString property is True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.PreserveFormatting">
            <summary>
            True if formatting is preserved when the report is refreshed or recalculated by 
            operations such as pivoting, sorting, or changing page field items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.IsAutoFormat">
            <summary>
            Indicates whether the PivotTable has an autoformat applied.
             Checkbox "autofit column width on update"which in pivot table Options :Layout Format for Excel 2007
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowTooltips">
            <summary>
            True, if tooltips displayed for the pivot table cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.DisplayFieldCaptions">
            <summary>
            Gets/sets value controlling whether or not filter buttons and PivotField
            captions for rows and columns are displayed in the grid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.PrintTitles">
            <summary>
            True if the print titles for the worksheet are set based on the PivotTable report. 
            False if the print titles for the worksheet are used.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.IsSaveData">
            <summary>
            True if data for the PivotTable report is saved with the workbook. 
            False if only the report definition is saved
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ReportLayout">
            <summary>
            This property specifies layout settings of the pivot table  
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.RowLayout">
            <summary>
            This property specifies the pivot table row 
            layout settings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.RepeatAllItemLabels">
            <summary>
            Repeat All Item Labels or Do Not Repeat All Item Labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.ShowDrillIndicators">
            <summary>
            The ShowDrillIndicators property is used for toggling the display of
            drill indicators in the PivotTable.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTableOptions.DataPosition">
            <summary>
            Specifies the position for the field representing multiple data field in the PivotTable,
            whether that field is located in the row area or column area.
            value start with 0 , -1 means the last position
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPivotTables">
            <summary>
            Represents collection of all pivot tables inside worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTables.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTables.Item(System.Int32)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="index">Zero-based index of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPivotTables.Item(System.String)">
            <summary>
            Gets single entry from the collection.
            </summary>
            <param name="name">Pivot table name.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTables.Add(System.String,Spire.Xls.CellRange,Spire.Xls.PivotCache)">
            <summary>
            Adds new pivot table to the collection.
            </summary>
            <param name="name">Name of the new pivot table.</param>
            <param name="location">Pivot table location.</param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTables.Remove(System.String)">
            <summary>
            Removes pivot table from the collection.
            </summary>
            <param name="name">name of the pivot table to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IPivotTables.RemoveAt(System.Int32)">
            <summary>
            Removes piovt table from the collection base on the index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Spire.Xls.Core.IArcShapes">
            <summary>
            Defines a contract for shapes that can be represented as arcs.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShapes.Item(System.Int32)">
            <summary>
            Gets the IArcShape at the specified index.
            </summary>
            <param name="index">The zero-based index of the IArcShape to get.</param>
            <returns>The IArcShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IArcShapes.Item(System.String)">
            <summary>
            Gets the IArcShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IArcShapes.AddArc(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an arc shape to the specified location with the given dimensions.
            </summary>
            <param name="row">The row index where the top-left corner of the arc will be placed.</param>
            <param name="column">The column index where the top-left corner of the arc will be placed.</param>
            <param name="height">The height of the arc.</param>
            <param name="width">The width of the arc.</param>
            <returns>An IArcShape object representing the added arc.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IButtonShapes">
            <summary>
            Defines the contract for button shapes, providing methods or properties that any button shape implementation must support.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IButtonShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IButtonShapes.Item(System.Int32)">
            <summary>
            Gets the IButtonShape at the specified index.
            </summary>
            <param name="index">The zero-based index of the IButtonShape to get.</param>
            <returns>The IButtonShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IButtonShapes.Item(System.String)">
            <summary>
            Gets the IButtonShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IButtonShapes.AddButton(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a button to the specified grid position with the given dimensions.
            </summary>
            <param name="row">The row index where the button will be placed.</param>
            <param name="column">The column index where the button will be placed.</param>
            <param name="height">The height of the button.</param>
            <param name="width">The width of the button.</param>
            <returns>An IButtonShape representing the added button.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IChartDataPoints">
            <summary>
            Defines a contract for chart data points, which can be implemented by classes representing data points in a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoints.DefaultDataPoint">
            <summary>
            Returns default data point. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoints.Item(System.Int32)">
            <summary>
            Returns single data point by its index. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ICharts">
            <summary>
            Defines the contract for chart-related operations and functionalities.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICharts.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICharts.Item(System.Int32)">
            <summary>
            Returns a single Chart object from a Charts collection
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICharts.Item(System.String)">
            <summary>
            Returns a single Chart object from a Charts collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICharts.Add">
            <summary>
            Creates a new chart.
            </summary>
            <returns>Newly created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICharts.Add(System.String)">
               // <summary>
               // Adds specified chart to the collection.
               // </summary>
               // <param name="chart"></param>
               // <returns></returns>
               IChart Add( IChart chart );
            <summary>
            Defines a new name.
            </summary>
            <param name="name">Name of the new chart's sheet.</param>
            <returns>Newly created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICharts.Remove(System.String)">
            <summary>
            Removes Chart object from the collection.
            </summary>
            <param name="name">Name of the object to remove from the collection.</param>
        </member>
        <member name="T:Spire.Xls.Core.IChartSeries">
            <summary>
            Defines the contract for a chart series, which represents a set of data points that can be rendered on a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSeries.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartSeries.RemoveAt(System.Int32)">
            <summary>
            Removes Series object from the collection.
            </summary>
            <param name="index">Index of the series to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IChartSeries.Remove(System.String)">
            <summary>
            Removes serie by name.
            </summary>
            <param name="serieName">Serie name to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.IChartShapes">
            <summary>
            Defines a contract for chart shapes, which can be implemented by various chart shape classes to provide a common interface for charting operations.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShapes.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShapes.Item(System.Int32)">
            <summary>
            Returns a single Chart object from a Charts collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartShapes.RemoveAt(System.Int32)">
            <summary>
            Removes Chart object from the collection.
            </summary>
            <param name="index">Index of the chart to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.IChartTrendLines">
            <summary>
            Defines the contract for a chart trend lines component, allowing for the implementation of various trend line functionalities in a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLines.Item(System.Int32)">
            <summary>
            Gets single trend line by index. Read only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartTrendLines.Add">
            <summary>
            Adds new intstance of trendline to collection.
            </summary>
            <returns>Returns added trend line object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartTrendLines.Add(Spire.Xls.TrendLineType)">
            <summary>
            Adds new intstance of trendline to collection.
            </summary>
            <param name="type">Reprsents type of trend line.</param>
            <returns>Returns added trend line object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartTrendLines.RemoveAt(System.Int32)">
            <summary>
            Removes trend line object from collection.
            </summary>
            <param name="index">Represents </param>
        </member>
        <member name="M:Spire.Xls.Core.IChartTrendLines.Clear">
            <summary>
            Clears current collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLines.Count">
            <summary>
            Represents count of trend lines.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ICheckBoxes">
            <summary>
            Defines the contract for a component that manages a collection of checkboxes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBoxes.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBoxes.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Item's index to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBoxes.Item(System.String)">
            <summary>
            Gets the ICheckBox associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICheckBoxes.AddCheckBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IComboBoxes">
            <summary>
            Defines a contract for a class that manages multiple ComboBox controls, allowing for operations such as adding, removing, and updating ComboBox items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxes.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxes.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Item's index to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxes.Item(System.String)">
            <summary>
            Gets the IComboBoxShape with the specified name.
            </summary>
            <param name="name">The name of the IComboBoxShape to retrieve.</param>
            <returns>The IComboBoxShape with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IComboBoxes.AddComboBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IComments">
            <summary>
            Defines a contract for handling comments, which can include methods for adding, retrieving, updating, and deleting comments.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComments.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComments.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComments.Item(System.Int32)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComments.Item(System.Int32,System.Int32)">
            <summary>
            Returns single entry from the collection by row and column one-based indexes. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IGroupBoxes">
            <summary>
            Defines a contract for managing group boxes within a user interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBoxes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBoxes.Item(System.Int32)">
            <summary>
            Gets the IGroupBox at the specified index.
            </summary>
            <param name="index">The zero-based index of the IGroupBox to get.</param>
            <returns>The IGroupBox at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBoxes.Item(System.String)">
            <summary>
            Gets the IGroupBox associated with the specified name.
            </summary>
            <param name="name">The name of the IGroupBox to retrieve.</param>
            <returns>The IGroupBox with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IGroupBoxes.AddGroupBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a group box to a layout at the specified row and column with the given height and width.
            </summary>
            <param name="row">The row index where the group box will be placed.</param>
            <param name="column">The column index where the group box will be placed.</param>
            <param name="height">The height of the group box.</param>
            <param name="width">The width of the group box.</param>
            <returns>The added group box as an IGroupBox object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ILabelShapes">
            <summary>
            Defines the contract for label shapes, which can be used to label or annotate graphical shapes in an application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILabelShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILabelShapes.Item(System.Int32)">
            <summary>
            Gets the ILabelShape at the specified index.
            </summary>
            <param name="index">The zero-based index of the ILabelShape to get.</param>
            <returns>The ILabelShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.ILabelShapes.Item(System.String)">
            <summary>
            Gets the ILabelShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ILabelShapes.AddLabel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a label to the specified row and column with the given height and width.
            </summary>
            <param name="row">The row index where the label should be added.</param>
            <param name="column">The column index where the label should be added.</param>
            <param name="height">The height of the label.</param>
            <param name="width">The width of the label.</param>
            <returns>An ILabelShape representing the added label.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ILines">
            <summary>
            Defines a contract for types that represent a collection of lines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILines.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILines.Item(System.Int32)">
            <summary>
            Gets the ILineShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILines.Item(System.String)">
            <summary>
            Gets the ILineShape object associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ILines.AddLine(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.LineShapeType)">
            <summary>
            Adds a line shape to the specified row and column with the given width, height, and line shape type.
            </summary>
            <param name="row">The row index where the line shape will be added.</param>
            <param name="column">The column index where the line shape will be added.</param>
            <param name="width">The width of the line shape.</param>
            <param name="height">The height of the line shape.</param>
            <param name="lineShapeType">The type of the line shape to be added.</param>
            <returns>The ILineShape object representing the newly added line shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IListBoxes">
            <summary>
            Defines a contract for classes that manage multiple list boxes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBoxes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBoxes.Item(System.Int32)">
            <summary>
            Gets the IListBox at the specified index.
            </summary>
            <param name="index">The zero-based index of the IListBox to get.</param>
            <returns>The IListBox at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IListBoxes.Item(System.String)">
            <summary>
            Gets the IListBox associated with the specified name.
            </summary>
            <param name="name">The name of the IListBox to retrieve.</param>
            <returns>The IListBox associated with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IListBoxes.AddListBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new ListBox to the specified position and size within a grid layout.
            </summary>
            <param name="row">The zero-based index of the row where the ListBox will be placed.</param>
            <param name="column">The zero-based index of the column where the ListBox will be placed.</param>
            <param name="height">The number of rows the ListBox will span.</param>
            <param name="width">The number of columns the ListBox will span.</param>
            <returns>The newly created and configured ListBox instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IOleObjects">
            <summary>
            Defines a contract for interacting with OLE (Object Linking and Embedding) objects within a document or application.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IOleObjects.Add(System.String,System.Drawing.Image,Spire.Xls.OleLinkType)">
            <summary>
            Adds new ole object to the collection.
            </summary>
            <param name="fileName">File name.</param>
            <param name="image">File image.</param>
            <param name="linkType">Link type.</param>
        </member>
        <member name="T:Spire.Xls.Core.IOvalShapes">
            <summary>
            Defines a contract for oval-shaped objects, providing methods and properties common to all oval shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShapes.Item(System.Int32)">
            <summary>
            Gets the IOvalShape at the specified index.
            </summary>
            <param name="index">The zero-based index of the IOvalShape to get.</param>
            <returns>The IOvalShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShapes.Item(System.String)">
            <summary>
            Gets the IOvalShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IOvalShapes.AddOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an oval shape to the specified row and column with the given height and width.
            </summary>
            <param name="row">The row index where the top-left corner of the oval will be placed.</param>
            <param name="column">The column index where the top-left corner of the oval will be placed.</param>
            <param name="height">The height of the oval.</param>
            <param name="width">The width of the oval.</param>
            <returns>The IOvalShape object representing the added oval.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IPictures">
            <summary>
            Defines a contract for working with pictures, including methods for loading, saving, and manipulating images.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictures.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictures.Item(System.Int32)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Drawing.Image,System.String)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Drawing.Image,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.String)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="strFileName">Picture file name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="strFileName">Picture file name.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream with the picture.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">Name of the shape.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPictures.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IPrstGeomShapes">
            <summary>
            Defines a contract for geometric shapes, allowing for the implementation of various geometric forms and their associated properties or behaviors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShapes.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Item's index to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShapes.Item(System.String)">
            <summary>
            Gets the IPrstGeomShape associated with the specified name.
            </summary>
            <param name="name">The name of the IPrstGeomShape to retrieve.</param>
            <returns>The IPrstGeomShape with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPrstGeomShapes.AddPrstGeomShape(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.PrstGeomShapeType)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <param name="shapeType">The PrstGeomShapeType.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IPrstGeomShapes.AddNotPrimitiveShape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a non-primitive shape to the specified position and size within a grid.
            </summary>
            <param name="row">The row index where the top-left corner of the shape will be placed.</param>
            <param name="column">The column index where the top-left corner of the shape will be placed.</param>
            <param name="width">The width of the shape.</param>
            <param name="height">The height of the shape.</param>
            <returns>An IGeomPathShape representing the added non-primitive shape.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShapes.Item(Spire.Xls.PrstGeomShapeType)">
            <summary>
            Gets an array of IPrstGeomShape objects that match the specified PrstGeomShapeType.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IRadioButtons">
            <summary>
            Defines a contract for a group of radio buttons, allowing for the selection of a single option from a set of mutually exclusive options.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButtons.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButtons.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Item's index to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButtons.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IRadioButtons.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IRadioButtons.Add">
            <summary>
            Adds a option button width default dimension
            </summary>
            <returns>OptionButton Shape</returns>
        </member>
        <member name="M:Spire.Xls.Core.IRadioButtons.Add(System.Int32,System.Int32)">
            <summary>
            Adds a option button with default size.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Core.IRectangleShapes">
            <summary>
            Defines the contract for rectangle shapes, including methods and properties that all rectangle shapes should implement.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShapes.Item(System.Int32)">
            <summary>
            Gets the IRectangleShape at the specified index.
            </summary>
            <param name="index">The zero-based index of the IRectangleShape to get.</param>
            <returns>The IRectangleShape at the specified index.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShapes.Item(System.String)">
            <summary>
            Gets the IRectangleShape associated with the specified name.
            </summary>
            <param name="name">The name of the rectangle shape to retrieve.</param>
            <returns>The IRectangleShape object with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IRectangleShapes.AddRectangle(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.RectangleShapeType)">
            <summary>
            Adds a rectangle shape to the specified position with given dimensions and type.
            </summary>
            <param name="row">The row position of the rectangle.</param>
            <param name="column">The column position of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="rectShapeType">The type of the rectangle shape.</param>
            <returns>The added rectangle shape.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IScrollBarShapes">
            <summary>
            Defines the contract for shapes that can be used in a scrollbar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShapes.Item(System.Int32)">
            <summary>
            Gets the IScrollBarShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShapes.Item(System.String)">
            <summary>
            Gets the IScrollBarShape associated with the specified name.
            </summary>
            <param name="name">The name of the IScrollBarShape to retrieve.</param>
            <returns>The IScrollBarShape associated with the specified name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IScrollBarShapes.AddScrollBar(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a scrollbar to the specified position on a grid with given dimensions.
            </summary>
            <param name="row">The row index where the scrollbar will be placed.</param>
            <param name="column">The column index where the scrollbar will be placed.</param>
            <param name="height">The height of the scrollbar.</param>
            <param name="width">The width of the scrollbar.</param>
            <returns>An IScrollBarShape object representing the added scrollbar.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IShapes">
            <summary>
            Defines a contract for shapes, which can be implemented by any class representing a geometric shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.Add">
            <summary>
            Adds new chart shape to the collection.
            </summary>
            <returns>Newly added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddLine(System.Drawing.Point,System.Drawing.Point,Spire.Xls.LineShapeType)">
            <summary>
            Adds new text line to the collection.
            </summary>
            <param name="startPoint">startPoint</param>
            <param name="endPoint">endPoint</param>
            <param name="lineShapeType">lineShapeType</param>
            <returns>Newly created line.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddPicture(System.Drawing.Image,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds new image to the collection.
            </summary>
            <param name="image">Image to add.</param>
            <param name="pictureName">File name with the image.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Newly created picture shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddPicture(System.String)">
            <summary>
            Adds new image to the collection.
            </summary>
            <param name="fileName">File name with the image.</param>
            <returns>Newly created picture shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddComment(System.String,System.Boolean)">
            <summary>
            Adds new Comment shape to the collection.
            </summary>
            <param name="commentText">Text of the comment.</param>
            <param name="bIsParseOptions">Indicates is parse comment XlsFill line options.</param>
            <returns>Newly added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddComment(System.String)">
            <summary>
            Adds new Comment shape to the collection.
            </summary>
            <param name="commentText">Text of the comment.</param>
            <returns>Newly added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddComment">
            <summary>
            Adds new Comment shape with empty comment text to the collection.
            </summary>
            <returns>Newly added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddCopy(Spire.Xls.Core.IShape)">
            <summary>
            Adds shape copy to the collection.
            </summary>
            <param name="sourceShape">Shape to copy.</param>
            <returns>Added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddCopy(Spire.Xls.Core.IShape,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds shape copy to shapes collection.
            </summary>
            <param name="sourceShape">Shape to copy.</param>
            <param name="hashNewNames">Hashtable with new names of worksheets.</param>
            <param name="arrFontIndexes">Array list with new font indexes.</param>
            <returns>Added shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddTextBox">
            <summary>
            Adds new text box to the collection.
            </summary>
            <returns>Newly created textbox.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an oval shape to the specified row and column with the given height and width.
            </summary>
            <param name="row">The row index where the top of the oval will be placed.</param>
            <param name="column">The column index where the left side of the oval will be placed.</param>
            <param name="height">The height of the oval.</param>
            <param name="width">The width of the oval.</param>
            <returns>An IOvalShape object representing the added oval.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddPrstGeomShape(Spire.Xls.PrstGeomShapeType)">
            <summary>
            Adds a predefined geometric shape to the document.
            </summary>
            <param name="shapeType">The type of the predefined geometric shape to add.</param>
            <returns>The added geometric shape.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddCheckBox">
            <summary>
            Adds new check box to the collection.
            </summary>
            <returns>Newly created checkbox.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddComboBox">
            <summary>
            Adds new check box to the collection.
            </summary>
            <returns>Newly created checkbox.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IShapes.AddRadioButton">
            <summary>
            Adds new ootion button to the collection.
            </summary>
            <returns>Newly created checkbox.</returns>
        </member>
        <member name="P:Spire.Xls.Core.IShapes.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapes.Item(System.Int32)">
            <summary>
            Returns single shape from the collection by its index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapes.Item(System.String)">
            <summary>
            Returns single shape from the collection by its name. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ISpinnerShapes">
            <summary>
            Defines a contract for spinner shapes, which can be used to specify the visual representation of a spinner in a user interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShapes.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShapes.Item(System.Int32)">
            <summary>
            Gets the ISpinnerShape at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShapes.Item(System.String)">
            <summary>
            Gets the ISpinnerShape associated with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ISpinnerShapes.AddSpinner(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a spinner shape to the specified position and dimensions on the layout.
            </summary>
            <param name="row">The row index where the spinner will be placed.</param>
            <param name="column">The column index where the spinner will be placed.</param>
            <param name="height">The height of the spinner.</param>
            <param name="width">The width of the spinner.</param>
            <returns>The ISpinnerShape object representing the added spinner.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ITextBoxes">
            <summary>
            Defines a contract for classes that provide functionality related to text boxes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxes.Count">
            <summary>
            Gets the total count of items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxes.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Item's index to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxes.Item(System.String)">
            <summary>
            Gets the ITextBoxLinkShape with the specified name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITextBoxes.AddTextBox(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="row">One-based row index of the top-left corner of the new item.</param>
            <param name="column">One-based column index of the top-left corner of the new item.</param>
            <param name="height">Height in pixels of the new item.</param>
            <param name="width">Width in pixels of the new item.</param>
            <returns>Newly added item.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IArcShape">
            <summary>
            Defines the contract for an arc shape, which can be used to represent parts of a circle or ellipse.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.Line">
            <summary>
            Gets the line format properties for the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.Rotation">
            <summary>
            Gets or sets the rotation angle of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.Color">
            <summary>
            line color
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.BeginArrowHeadStyle">
            <summary>
            Begin Arrow Head Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.BeginArrowheadLength">
            <summary>
            Begin Arrow head Length
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.BeginArrowheadWidth">
            <summary>
            Begin Arrow head Width
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.EndArrowHeadStyle">
            <summary>
            End Arrow Head Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.EndArrowheadLength">
            <summary>
            End Arrow head Length
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.EndArrowheadWidth">
            <summary>
            End Arrow head Width
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.DashStyle">
            <summary>
            DashStyle
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.Weight">
            <summary>
            Weight
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IArcShape.HyLink">
            <summary>
            Gets the hyperlink associated with this instance.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IButtonShape">
            <summary>
            Defines the contract for a button shape, specifying methods and properties that any button shape implementation must provide.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChart">
            <summary>
            Represents a chart sheet in the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.ChartType">
             <summary>
             Type of the chart.
             <example>The following code illustrates how to set  ExcelChartType.PyramidBarStacked to ChartType property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set chart type</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 <para>chart.ChartType = ExcelChartType.PyramidBarStacked;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DataRange">
             <summary>
             DataRange for the chart series.
             <example>The following code illustrates how to set the data range for the chart:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.SeriesDataFromRange">
             <summary>
             True if series are in rows in DataRange;False otherwise.
             <example>The following code illustrates how to set SeriesDataFromRange property for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set SeriesDataFromRange</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 <para>chart.SeriesDataFromRange = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PageSetup">
             <summary>
             Page setup for the chart. Read-only.
             <example>The following code illustrates how to set paper size:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart page setup and paper size</para>
                 <para>IChartPageSetup pageSetup = chart.PageSetup;</para>
                 <para>pageSetup.PaperSize = PaperSizeType.A3TransversePaper;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.XPos">
            <summary>
            X coordinate of the upper-left corner of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.YPos">
            <summary>
            Y coordinate of the upper-left corner of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Width">
            <summary>
            Width of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Height">
            <summary>
            Height of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Name">
            <summary>
            Name of the chart's worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PrimaryCategoryAxis">
             <summary>
             Primary category axis. Read-only.
             <example>The following code illustrates how to set the visibility of PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Chart category axis</para>
                 <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 <para>//Set visibility</para>
                 <para>categoryAxis.Visible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PrimaryValueAxis">
             <summary>
             Primary value axis. Read-only.
             <example>The following code illustrates how to set the visibility of PrimaryValueAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Chart value axis</para>
                 <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                 <para>//Set visibility</para>
                 <para>valueAxis.Visible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PrimarySerieAxis">
             <summary>
             Primary serie axis. Read-only.
             <example>The following code illustrates how to set the visibility of PrimarySerieAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>IChart chart = workbook.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart type</para>
                 <para>chart.ChartType = ExcelChartType.Surface3D;</para>
                 <para>//Chart series axis</para>
                 <para>IChartSeriesAxis seriesAxis = chart.PrimarySerieAxis;</para>
                 <para>//Set visibility</para>
                 <para>seriesAxis.Visible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.SecondaryCategoryAxis">
             <summary>
             Secondary category axis. Read-only.
             <example>The following code illustrates how to disable PrimaryCategoryAxis and set 
             SecondaryCategoryAxis for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";
                       worksheet.Range["A3"].Value = "100";
                       worksheet.Range["B3"].Value = "200";
                       worksheet.Range["C3"].Value = "300";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                 
                 <para>//Set secondary axis</para>
                 <para>IChartSerie serie = chart.Series[1];</para>
                 <para>serie.UsePrimaryAxis = false;</para>
                 <para>chart.SecondaryCategoryAxis.Visible = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.SecondaryValueAxis">
             <summary>
             Secondary value axis. Read-only.
             <example>The following code illustrates how to disable PrimaryValueAxis and set 
             SecondaryValueAxis for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";
                       worksheet.Range["A3"].Value = "100";
                       worksheet.Range["B3"].Value = "200";
                       worksheet.Range["C3"].Value = "300";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                 
                 <para>//Set secondary axis</para>
                 <para>IChartSerie serie = chart.Series[1];</para>
                 <para>serie.UsePrimaryAxis = false;</para>
                 <para>chart.SecondaryValueAxis.Visible = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.ChartArea">
             <summary>
             Returns an object that represents the complete chart area for the chart. Read-only.
             <example>The following code illustrates how to access IChartFrameFormat using ChartArea 
             property and set foreground color for the ChartArea:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart frame format</para>
                 <para>IChartFrameFormat frameFormat = chart.ChartArea;</para>
                 <para>//Set color</para>
                 <para>frameFormat.Fill.ForeColor = System.Drawing.Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PlotArea">
             <summary>
             Returns plot area frame format. Read-only.
             <example>The following code illustrates how to access IChartFrameFormat using PlotArea 
             property and set foreground color for the chart's PlotArea:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart frame format</para>
                 <para>IChartFrameFormat frameFormat = chart.PlotArea;</para>
                 <para>//Set color</para>
                 <para>frameFormat.Fill.ForeColor = System.Drawing.Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Walls">
            <summary>
            Represents chart walls. Read-only.
            <example>The following code illustrates how to access IChartWallOrFloor using Walls 
            property and set foreground color for the chart's Walls:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Get chart</para>
                <para>Chart chart = worksheet.Charts[0];</para>
                
                <para>//Set chart wall</para>
                <para>IChartWallOrFloor wall = chart.Walls;</para>
                <para>//Set color</para>
                <para>wall.Fill.FillType = ShapeFillType.SolidColor;</para>
                <para>wall.Fill.ForeColor = System.Drawing.Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Floor">
            <summary>
            Represents chart floor. Read-only.
            <example>The following code illustrates how to access IChartWallOrFloor using Floor 
            property and set foreground color for the chart's Floor:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Get chart</para>
                <para>Chart chart = worksheet.Charts[0];</para>
                
                <para>//Set chart wall</para>
                <para>IChartWallOrFloor floor = chart.Floor;</para>
                <para>//Set color</para>
                <para>floor.Fill.FillType = ShapeFillType.SolidColor;</para>
                <para>floor.Fill.ForeColor = System.Drawing.Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DataTable">
             <summary>
             Represents charts dataTable object.
             <example>The following code illustrates how to set HasDataTable to "true" to enable data table
             and set IChartDataTable.HasBorders to "false" to hide the borders of data table:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart data table</para>
                 <para>chart.HasDataTable = true;</para>
                 <para>IChartDataTable dataTable = chart.DataTable;</para>
                 <para>//Set border</para>
                 <para>dataTable.HasBorders = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.HasDataTable">
             <summary>
             True if the chart has a data table.
             <example>The following code illustrates how data table can be set for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart data table</para>
                 <para>chart.HasDataTable = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Legend">
             <summary>
             Represents chart legend.
             <example>The following code illustrates how to access IChartLegend using IChart.Legend 
             property and set IChartLegend.Position to LegendPositionType.Left:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart legend and legend position</para>
                 <para>IChartLegend legend = chart.Legend;</para>
                 <para>legend.Position = LegendPositionType.Left;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.HasLegend">
             <summary>
             True if the chart has a legend object.
             <example>The following code illustrates how to set HasLegend property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set hasLegend</para>
                 <para>chart.HasLegend = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Rotation">
             <summary>
             Returns or sets the rotation of the 3-D chart view
             (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
             <example>The following code illustrates how to set Rotation for 3-D charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart rotation</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Rotation = 50;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Elevation">
             <summary>
             Returns or sets the elevation of the 3-D chart view, in degrees (?0 to +90 degrees).
             <example>The following code illustrates how to set Rotation for 3-D charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart elevation</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Elevation = 50;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.Perspective">
             <summary>
             Returns or sets the perspective for the 3-D chart view (0 to 100).
             <example>The following code illustrates how to set Perspective for the charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart perspective</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Perspective = 70;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.HeightPercent">
             <summary>
            Returns or sets the height of a 3-D chart as a percentage of the chart width
             (between 5 and 500 percent).
             <example>The following code illustrates how to set HeightPercent to a Column 3D chart:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart height percent</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.AutoScaling = false;</para>
                 <para>chart.HeightPercent = 50;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DepthPercent">
             <summary>
             Returns or sets the depth of a 3-D chart as a percentage of the chart width
             (between 20 and 2000 percent).
             <example>The following code illustrates how to set DepthPercent to a Column 3D chart:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart depth percent</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.DepthPercent = 500;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.GapDepth">
             <summary>
             Returns or sets the distance between the data series in a 3-D chart, as a percentage of 
             the marker width.( 0 - 500 )
             <example>The following code illustrates how to set GapDepth to a Column 3D chart:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set gap depth</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.GapDepth = 450;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.RightAngleAxes">
             <summary>
             True if the chart axes are at right angles, independent of chart rotation or elevation.
             <example>The following code illustrates how RightAngleAxes can be set for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart rotation and RightAngleAxes</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.Rotation = 50;</para>
                 <para>chart.RightAngleAxes = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.AutoScaling">
             <summary>
             True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
             <example>The following code illustrates how to set auto scaling for charts:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set auto scaling</para>
                 <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                 <para>chart.HeightPercent = 50;</para>
                 <para>chart.AutoScaling = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.WallsAndGridlines2D">
            <summary>
            True if gridlines are drawn two-dimensionally on a 3-D chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.HasPlotArea">
            <summary>
            Indicates whether chart has plot area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DisplayBlanksAs">
            <summary>
            Represents the way that blank cells are plotted on a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PlotVisibleOnly">
             <summary>
             True if only visible cells are plotted. False if both visible and hidden cells are plotted.
             <example>The following code illustrates how to set PlotVisibleOnly to "true" so that 
             chart plots all the cells within the chart's DataRange:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Hide column and create chart</para>
                 <para>worksheet.Columns[2].ColumnWidth = 0;</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Plot visible only</para>
                 <para>chart.PlotVisibleOnly = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.SizeWithWindow">
            <summary>
            True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
            False if the chart size isn't attached to the window size. Applies only to chart sheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PivotTable">
            <summary>
            Gets or sets the pivot source.
            </summary>
            <value>The pivot source.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.PivotChartType">
            <summary>
            Gets or sets the type of the pivot chart.
            </summary>
            <value>The type of the pivot chart.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DisplayEntireFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show all field buttons].
            </summary>
            <value>
            	<c>true</c> if [show all field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DisplayValueFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show value field buttons].
            </summary>
            <value>
            	<c>true</c> if [show value field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DisplayAxisFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show axis field buttons].
            </summary>
            <value>
            	<c>true</c> if [show axis field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.DisplayLegendFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show legend field buttons].
            </summary>
            <value>
            	<c>true</c> if [show legend field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.IChart.ShowReportFilterFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show report filter field buttons].
            </summary>
            <value>
            	<c>true</c> if [show report filter field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spire.Xls.Core.IChartAxis">
            <summary>
            Represents an axis on the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.NumberFormat">
             <summary>
             Gets or sets number format string.
             <example>The following code illustrates how to set currency format "$#,##0_);($#,##0)" to 
             NumberFormat to display value in the PrimaryValueAxis as currency:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10000";
                       worksheet.Range["B2"].Text = "20000";
                       worksheet.Range["C2"].Text = "30000";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart value axis</para>
                 <para>IChartAxis chartAxis = chart.PrimaryValueAxis;</para>
                 
                 <para>//Set number format</para>
                 <para>chartAxis.NumberFormat = @"$#,##0_);($#,##0)";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.AxisType">
             <summary>
             Returns type of the axis. Read-only.
             <example>The following code illustrates how to access the AxisType property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10000";
                       worksheet.Range["B2"].Text = "20000";
                       worksheet.Range["C2"].Text = "30000";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart value axis</para>
                 <para>IChartAxis chartAxis = chart.PrimaryValueAxis;</para>
                 
                 <para>//Get axis type</para>
                 <para>Console.WriteLine(chartAxis.AxisType);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Title">
             <summary>
             Axis title.
             <example>The following code illustrates how to set Title for the IChart.PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set category title</para>
                 <para>categoryAxis.Title = "Categories";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.TextRotationAngle">
             <summary>
             Text rotation angle. Should be integer value between -90 and 90.
             <example>The following code illustrates how to set TextRotationAngle for 
             IChart.PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set text rotation angle</para>
                 <para>chartAxis.TextRotationAngle = 90;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.TitleArea">
             <summary>
             Returns text area for the axis title. Read-only.
             <example>The following code illustrates how to set foreground color to 
             IChart.PrimaryCategoryAxis's title area using TitleArea property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set category title</para>
                 <para>categoryAxis.Title = "Categories";</para>
                 
                 <para>//Set title area</para>
                 <para>IChartTextArea titleArea = categoryAxis.TitleArea;</para>
                 
                 <para>//Set color</para>
                 <para>titleArea.FrameFormat.Fill.ForeKnownColor = ExcelColors.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Font">
             <summary>
             Returns font used for axis text displaying. Read-only.
             <example>The following code illustrates how to set font color to the 
             IChart.PrimaryCategoryAxis's category labels using Font property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set font color</para>
                 <para>chartAxis.Font.Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.MajorGridLines">
             <summary>
             Represents major gridLines. Read-only.
             <example>The following code illustrates how to access MajorGridLines of 
             IChart.PrimaryCategoryAxis and set colors to it:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set visibility</para>
                 <para>chartAxis.HasMajorGridLines = true;</para>
                 
                 <para>//Set grid lines</para>
                 <para>IChartGridLine gridLine = chartAxis.MajorGridLines;</para>
                 <para>gridLine.LineProperties.Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.MinorGridLines">
             <summary>
             Represents minor gridLines. Read-only.
             <example>The following code illustrates how to access MinorGridLines of 
             IChart.PrimaryCategoryAxis and set colors to it:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set visibility</para>
                 <para>chartAxis.HasMinorGridLines = true;</para>
                 
                 <para>//Set grid lines</para>
                 <para>IChartGridLine gridLine = chartAxis.MinorGridLines;</para>
                 <para>gridLine.LineProperties.Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.HasMinorGridLines">
             <summary>
             Gets or sets if axis has minor gridlines.
             <example>The following code illustrates how to set visibility of MinorGridLines of 
             IChart.PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set visibility</para>
                 <para>chartAxis.HasMinorGridLines = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.HasMajorGridLines">
             <summary>
             Gets or sets if axis has major gridlines.
             <example>The following code illustrates how to set visibility of MajorGridLines of 
             IChart.PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set visibility</para>
                 <para>chartAxis.HasMajorGridLines = true;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.MinorTickMark">
             <summary>
             Represents minor tick marks.
             <example>The following code illustrates how to set TickMarkType.TickMarkCross to MinorTickMark:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set category minor tick type</para>
                 <para>categoryAxis.MinorTickMark = TickMarkType.TickMarkCross;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.MajorTickMark">
             <summary>
             Represents major tick marks.
             <example>The following code illustrates how to set TickMarkType.TickMarkCross to MajorTickMark:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set category minor tick type</para>
                 <para>categoryAxis.MajorTickMark = TickMarkType.TickMarkCross;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Border">
             <summary>
             Represents chart border. Read only.
             <example>The following code illustrates how to set color to IChart.PrimaryCategoryAxis's 
             border using Border property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set border and color</para>
                 <para>IChartBorder border = categoryAxis.Border;</para>
                 <para>border.Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.TickLabelPosition">
             <summary>
             Represents tick label position.
             <example>The following code illustrates how to set TickLabelPositionType.TickLabelPositionHigh 
             to TickLabelPosition property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart category axis</para>
                 <para>IChartAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set category tick labels position</para>
                 <para>categoryAxis.TickLabelPosition = TickLabelPositionType.TickLabelPositionHigh;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Visible">
             <summary>
             Indicates is axis is visible.
             <example>The following code illustrates how to set visibility of IChart.PrimaryCategoryAxis:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and set range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart axis</para>
                 <para>IChartAxis chartAxis =  chart.PrimaryCategoryAxis;</para>
                 
                 <para>//Set visibility</para>
                 <para>chartAxis.Visible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Alignment">
            <summary>
            Represents alignment for the tick label.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Shadow">
            <summary>
            Returns the Shadow properties.Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.Chart3DOptions">
            <summary>
            Gets the three_ D.
            </summary>
            <value>The three_ D.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.IsSourceLinked">
            <summary>
            Gets or sets a value indicating whether the source is linked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartAxis.TextDirection">
            <summary>
            axis's text direction
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartBorder">
            <summary>
            Represents chart border. Provides Border options for Chart Area and Plot Area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.Color">
            <summary>
            Color of line.
            <example>The following code illustrates the use of Color property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set line color for chart area border</para>
                <para>chart.ChartArea.Border.Color = Color.DarkOrange;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.Pattern">
            <summary>
            Line pattern.
            <example>The following code illustrates the use of LinePattern property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set line pattern for plot area border</para>
                <para>chart.ChartArea.Border.Pattern = ChartLinePatternType.DashDotDot;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.Weight">
            <summary>
            Weight of line.
            <example>The following code illustrates the use of Weight property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set line weight for plot area border</para>
                <para>chart.ChartArea.Border.Weight = ChartLineWeightType.Wide;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.UseDefaultFormat">
            <summary>
            If true - default format; otherwise custom.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.UseDefaultLineColor">
            <summary>
            Custom format for line color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.KnownColor">
            <summary>
            Line color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartBorder.Transparency">
            bool DrawTickLabels { get; set; }
            <summary>
            Returns the transparency level of the specified Solid color shaded XlsFill as a floating-point
            value from 0.0 (Clear) through 1.0(Opaque).
            <example>The following code illustrates the use of Weight property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set the transparency level of the solid color</para>
                <para>chart.ChartArea.Border.Transparency =0.85;</para>
                <para>chart.ChartArea.Border.Color = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartCategoryAxis">
            <summary>
            Represents category axis of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.CrossingPoint">
            <summary>
            Value axis / category crossing point (2D charts only).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.LabelFrequency">
            <summary>
            Frequency of labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.TickMarksFrequency">
            <summary>
            Frequency of tick marks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            <example>The following code illustrates how to set TickLabelSpacing for chart axis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Set tick label spacing</para>
                <para>categoryAxis.TickLabelSpacing = 2;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.TickMarkSpacing">
            <summary>
            Represents the number of categories or series between tick marks.
            <example>The following code illustrates how to set TickMarkSpacing for chart axis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Set tick mark spacing</para>
                <para>categoryAxis.TickMarkSpacing = 2;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.AxisBetweenCategories">
            <summary>
            If true - cuts unused plot area. Default for area, surface charts.
            <example>The following code illustrates how to set AxisBetweenCategories to "false" so 
            that chart serie would be plotted on the tick marks:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Set category axis IsBetween</para>
                <para>categoryAxis.AxisBetweenCategories = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.CategoryLabels">
            <summary>
            Category labels for the chart.
            <example>The following code illustrates how to access the category labels range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Get category label range . Output will be A1:C1</para>
                <para>Console.WriteLine(categoryAxis.CategoryLabels.RangeAddressLocal);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.EnteredDirectlyCategoryLabels">
            <summary>
            Entered directly category labels for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.CategoryType">
            <summary>
            Represents axis category type.
            <example>The following code illustrates how to set CategoryType.Time to CategoryType:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Set category type</para>
                <para>categoryAxis.CategoryType = CategoryType.Time;</para>
                
                <para>//Set base unit</para>
                <para>categoryAxis.BaseUnit = ChartBaseUnitType.Year;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.Offset">
            <summary>
            Represents distance between the labels and axis line.
            The value can be from 0 through 1000.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.BaseUnit">
            <summary>
            Represents base unit for the specified category axis.
            <example>The following code illustrates how to set BaseUnit for IChartCategoryAxis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart category axis</para>
                <para>IChartCategoryAxis categoryAxis = chart.PrimaryCategoryAxis;</para>
                
                <para>//Set category type</para>
                <para>categoryAxis.CategoryType = CategoryType.Time;</para>
                
                <para>//Set base unit</para>
                <para>categoryAxis.BaseUnit = ChartBaseUnitType.Year;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.BaseUnitIsAuto">
            <summary>
            True if use automatic base units for the specified category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.MajorUnitScale">
            <summary>
            Represens the major unit scale value for the category axis
             when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartCategoryAxis.MinorUnitScale">
            <summary>
            Represens the minor unit scale value for the category axis
             when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartDataLabels">
            <summary>
            Represents a collection of chart data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasSeriesName">
            <summary>
            Indicates whether series name is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the serie name:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the serie name</para>
                <para>dataLabels.HasSeriesName = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasCategoryName">
            <summary>
            Indicates whether category name is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the categories:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the category names</para>
                <para>dataLabels.HasCategoryName = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasValue">
            <summary>
            Indicates whether value is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the values:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the values</para>
                <para>dataLabels.HasValue = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasPercentage">
            <summary>
            Indicates whether percentage is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the percentage values:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the percentage values</para>
                <para>dataLabels.HasPercentage = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasBubbleSize">
            <summary>
            Indicates whether bubble size is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the bubble sizes:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Bubble;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the bubble sizes</para>
                <para>dataLabels.HasBubbleSize = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.Delimiter">
            <summary>
            Delimeter.
            <example>The following code illustrates how to access the IChartDataLabels and set 
            delimiter for data labels:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set ' ' symbol as separator for data labels</para>
                <para>dataLabels.HasValue = true;</para>
                <para>dataLabels.HasSeriesName = true;</para>
                <para>dataLabels.Delimiter =" ";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.HasLegendKey">
            <summary>
            Indicates whether legend key is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            shows the legend keys:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the legend key</para>
                <para>dataLabels.HasValue = true;</para>
                <para>dataLabels.HasLegendKey = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.Position">
            <summary>
            Represents data labels position.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            the position for labels:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the leader lines</para>
                <para>dataLabels.HasValue = true;</para>
                <para>dataLabels.Position = DataLabelPositionType.Outside;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.ShowLeaderLines">
            <summary>
            Indicates whether Leader Lines is in data labels.
            <example>The following code illustrates how to access the IChartDataLabels and set to 
            leader lines to show:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get serie data labels</para>
                <para>IChartDataLabels dataLabels = serie.DataPoints.DefaultDataPoint.DataLabels;</para>
                
                <para>//Set the data label to show the leader lines</para>
                <para>dataLabels.HasValue = true;</para>
                <para>dataLabels.Position = DataLabelPositionType.Outside;</para>
                <para>dataLabels.ShowLeaderLines = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.NumberFormat">
            <summary>
            Represents trend line label number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.IsTextWrapped">
            <summary>
            Gets or sets a value indicating whether the text within the control is wrapped to fit within the control's bounds.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataLabels.IsResizeShapeToFitText">
            <summary>
            Gets or sets a value indicating whether the shape should automatically resize to fit the text within it.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartDataPoint">
            <summary>
            Represents data point in the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoint.DataLabels">
            <summary>
            Returns data labels object for the data point. Read-only.
            <example>The following code illustrates how to access the IChartDataLabels for a 
            particular IChartDataPoint:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Get the chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Set data labels value visibility</para>
                <para>serie.DataPoints.DefaultDataPoint.DataLabels.HasValue = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoint.Index">
            <summary>
            Gets index of the point in the points collection.
            <example>The following code illustrates how to access the Index of a IChartDataPoint in 
            the IChartDataPoints collection:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get index</para>
                <para>Console.WriteLine(serie.DataPoints[0].Index);</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoint.DataFormat">
            <summary>
            Gets / sets data format.
            <example>The following code illustrates how to access DataFormat and set ChartMarkerType.star 
            to IChartSerieDataFormat.MarkerStyle:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].DataFormat;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Star;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataPoint.IsDefault">
            <summary>
            Indicates whether this data point is default data point. Read-only.
            <example>The following code illustrates how to access the IChartDataLabels for a 
            particular IChartDataPoint:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set serie format</para>
                <para>IChartDataPoints dataPoints = chart.Series[0].DataPoints;</para>
                
                <para>//Check default Datapoint</para>
                <para>Console.WriteLine(dataPoints.DefaultDataPoint.IsDefault);</para>
                <para>Console.WriteLine(dataPoints[0].IsDefault);</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartDataTable">
            <summary>
            Represents the chart data table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataTable.HasHorzBorder">
            <summary>
            True if data table has horizontal border.
            <example>The following code illustrates how to remove horizontal border for IChartDataTable object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Enabling the data table</para>
                <para>chart.HasDataTable = true;</para>
                
                <para>//Get data table of the chart</para>
                <para>IChartDataTable dataTable = chart.DataTable;</para>
                
                <para>//Set false to remove the horizontal border in data table</para>
                <para>dataTable.HasHorzBorder = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataTable.HasVertBorder">
            <summary>
            True if data table has vertical border.
            <example>The following code illustrates how to remove vertical border for IChartDataTable object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Enabling the data table</para>
                <para>chart.HasDataTable = true;</para>
                
                <para>//Get data table of the chart</para>
                <para>IChartDataTable dataTable = chart.DataTable;</para>
                
                <para>//Set false to remove the vertical border in data table</para>
                <para>dataTable.HasVertBorder = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataTable.HasBorders">
            <summary>
            True if data table has borders.
            <example>The following code illustrates how to outline borders of IChartDataTable object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Enabling the data table</para>
                <para>chart.HasDataTable = true;</para>
                
                <para>//Get data table of the chart</para>
                <para>IChartDataTable dataTable = chart.DataTable;</para>
                
                <para>//Set false to remove the borders in data table</para>
                <para>dataTable.HasBorders = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataTable.ShowSeriesKeys">
            <summary>
            True if there is series keys in the data table.
            <example>The following code illustrates how to show series keys in the IChartDataTable object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Enabling the data table</para>
                <para>chart.HasDataTable = true;</para>
                
                <para>//Get data table of the chart</para>
                <para>IChartDataTable dataTable = chart.DataTable;</para>
                
                <para>//Set true to show series keys in the data table</para>
                <para>dataTable.ShowSeriesKeys = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartDataTable.BackgroundMode">
            <summary>
            Gets or sets the background mode of the chart, which determines how the background is rendered.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartDropBar">
            <summary>
            Defines the contract for a chart drop bar component, which is responsible for rendering a drop bar in a charting application.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartErrorBars">
            <summary>
            Represent error bars on the chart series.
            Error bars indicate the degree of uncertainty for chart data. Only series in area, bar, column, line, 
            and scatter groups on a 2-D chart can have error bars. 
            Only series in scatter groups can have x and y error bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.Border">
            <summary>
            Represents border object. Read only.
            <example>The following code illustrates how to access and format the IChartBorder for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set Error bars border color</para>
                <para>errorBars.Border.Color = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.Include">
            <summary>
            Reprsents error bar include type.
            <example>The following code illustrates how to set include type for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set negative error only to include</para>
                <para>errorBars.Include = ErrorBarIncludeType.Minus;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.HasCap">
            <summary>
            Indicates if error bar has cap.
            <example>The following code illustrates how to remove end style for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set false to remove the end style</para>
                <para>errorBars.HasCap = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.Type">
            <summary>
            Represents excel error bar type.
            <example>The following code illustrates how to set the error bar type for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set error amount to standard deviation</para>
                <para>errorBars.Type = ErrorBarType.StandardDeviation;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.NumberValue">
            <summary>
            Represents number value.
            <example>The following code illustrates how to set the error value for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set error value</para>
                <para>errorBars.NumberValue = 3.0;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.PlusRange">
            <summary>
            Represents custom plus value.
            <example>The following code illustrates how to set the plus range for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set plus range</para>
                <para>errorBars.PlusRange = worksheet["D2"];</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.MinusRange">
            <summary>
            Represents custom minus value.
            <example>The following code illustrates how to set the minus range for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set minus range</para>
                <para>errorBars.MinusRange = worksheet["D2"];</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.Shadow">
            <summary>
            Gets the shadow.
            <example>The following code illustrates how to access and format the IShadow for IChartErrorBars:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnClustered;</para>
                
                <para>//Get chart serie</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Enabling the Y Error bars</para>
                <para>serie.ErrorBar(true,ErrorBarIncludeType.Both,ErrorBarType.Percentage,10);</para>
                <para>IChartErrorBars errorBars = serie.ErrorBarsY;</para>
                
                <para>//Set Error bars shadow color</para>
                <para>errorBars.Shadow.Color = Color.Red;</para>
                
                <para>//Set Error bars shadow outer presets</para>
                <para>errorBars.Shadow.ShadowOuterType = XLSXChartShadowOuterType.OffsetDiagonalTopRight;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>The shadow.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartErrorBars.Chart3DOptions">
            <summary>
            Gets the chart3 D options.
            </summary>
            <value>The chart3 D options.</value>
        </member>
        <member name="M:Spire.Xls.Core.IChartErrorBars.ClearFormats">
            <summary>
            Clears current error bar.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartErrorBars.Delete">
            <summary>
            Delete current error bar.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartFillBorder">
            <summary>
            Provides formatting options for area elements in the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.HasInterior">
            <summary>
            This property indicates whether interior object was created. Read-only.
            <example>The following code illustrates the use of HasInterior property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Create a fill border and set interior value</para>
                <para>IChartFillBorder fillBorder = chart.ChartArea;</para>
                <para>chart.ChartArea.Interior.ForegroundColor = Color.Yellow;</para>
                
                <para>//True if the chart element has interior formatting</para>
                <para>if (fillBorder.HasInterior){//Your Code Here}</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.HasLineProperties">
            <summary>
            This property indicates whether line formatting object was created. Read-only.
            <example>The following code illustrates the use of HasLineProperties property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Create a fill border and set line border value</para>
                <para>IChartFillBorder fillBorder = chart.ChartArea;</para>
                <para>chart.ChartArea.Border.Color = Color.Yellow;</para>
                
                <para>//True if the chart element has line formatting</para>
                <para>if (fillBorder.HasLineProperties){//Your Code Here}</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.HasFormat3D">
            <summary>
            Gets a value indicating whether [has3d properties].
            <example>The following code illustrates the use of HasFormat3D property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Create a fill border and set 3D formatting value</para>
                <para>IChartFillBorder fillBorder = chart.ChartArea;</para>
                <para>chart.ChartArea.Format3D.BevelTopType = XLSXChartBevelType.Slope;</para>
                
                <para>//True if the chart element has 3D formatting</para>
                <para>if (fillBorder.HasFormat3D){//Your Code Here}</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value><c>true</c> if [has3d properties]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.HasShadow">
            <summary>
            Gets a value indicating whether this instance has shadow properties.
            <example>The following code illustrates the use of HasShadowProperties property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Create a fill border and set line border value</para>
                <para>IChartFillBorder fillBorder = chart.ChartArea;</para>
                <para>chart.ChartArea.Shadow.ShadowOuterType = XLSXChartShadowOuterType.OffsetBottom;</para>
                
                <para>//True if the chart element has 3D formatting</para>
                <para>if (fillBorder.HasShadow){//Your Code Here}</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>
            	<c>true</c> if this instance has shadow properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.LineProperties">
            <summary>
            Returns object, that represents line properties. Read-only.
            <example>The following code illustrates the use of LineProperties:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets line formatting properties for the chart element</para>
                <para>IChartBorder border = chart.PlotArea.Border;</para>
                <para>border.Pattern = ChartLinePatternType.DashDotDot;</para>
                <para>border.Color = Color.Orange;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            <example>The following code illustrates the use of Interior property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets interior formatting properties for the chart element</para>
                <para>IChartInterior chartInterior = chart.ChartArea.Interior;</para>
                <para>chartInterior.BackgroundColor = Color.Beige;</para>
                <para>chartInterior.Pattern = ExcelPatternType.DarkDownwardDiagonal;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.Fill">
            <summary>
            Represents XlsFill options. Read-only.
            <example>The following code illustrates the use of Fill property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets fill options for the chart element</para>
                <para>IShapeFill fillChart = chart.ChartArea.Fill;</para>
                <para>fillChart.FillType = ShapeFillType.Gradient;</para>
                <para>fillChart.BackColor = Color.FromArgb(205, 217, 234);</para>
                <para>fillChart.ForeColor = Color.White;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.Format3D">
            <summary>
            Gets the chart3 D properties.
            <example>The following code illustrates the use of Format3D property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets 3D-effect properties for the chart element</para>
                <para>Format3D threeDFromat = chart.ChartArea.Format3D;</para>
                <para>threeDFromat.BevelTopType = XLSXChartBevelType.Slope;</para>
                <para>threeDFromat.BevelTopHeight = 16;</para>
                <para>threeDFromat.BevelTopWidth = 7;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartFillBorder.Shadow">
            <summary>
            Gets the shadow properties.
            <example>The following code illustrates the use of Shadow property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets shadow formatting properties for the chart element</para>
                <para>ChartShadow shadowChart = chart.ChartArea.Shadow;</para>
                <para>shadowChart.ShadowPrespectiveType = XLSXChartPrespectiveType.Below;</para>
                <para>shadowChart.Color = Color.Aqua;</para>
                <para>shadowChart.Blur = 22;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="T:Spire.Xls.Core.IChartFormat">
            <summary>
            Provides access to the formatting options for chart elements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.IsVaryColor">
            <summary>
            Vary color for each data point.
            <example>The following code illustrates how to set IsVaryColor for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set vary color</para>
                <para>format.IsVaryColor = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.Overlap">
            <summary>
            Space between bars ( -100 : 100 ).
            <example>The following code illustrates how to set Overlap for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ColumnStacked;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set overlap</para>
                <para>format.Overlap = 20;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.GapWidth">
            <summary>
            Space between categories (percent of bar width), default = 50.
            <example>The following code illustrates how to set GapWidth for ExcelChartType.Column3DStacked chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DStacked;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set Gap width</para>
                <para>format.GapWidth = 400;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.FirstSliceAngle">
            <summary>
            Angle of the first pie slice expressed in degrees. ( 0 - 360 ).
            <example>The following code illustrates how to set FirstSliceAngle for ExcelChartType.Pie chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set Gap width</para>
                <para>format.FirstSliceAngle = 60;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.DoughnutHoleSize">
            <summary>
            Size of center hole in a doughnut chart (as a percentage).( 10 - 90 ).
            <example>The following code illustrates how to set DoughnutHoleSize for ExcelChartType.Doughnut chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Doughnut;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set Doughnut hole size</para>
                <para>format.DoughnutHoleSize = 60;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.BubbleScale">
            <summary>
            Percent of largest bubble compared to chart in general. ( 0 - 300 ).
            <example>The following code illustrates how to set BubbleScale for ExcelChartType.Bubble3D chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add(ExcelChartType.Bubble3D);</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                <para>chart.Series[0].Bubbles = worksheet.Range["A2:C3"];</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set bubble scale</para>
                <para>format.BubbleScale = 50;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.SizeRepresents">
            <summary>
            Returns or sets what the bubble size represents on a bubble chart.
            <example>The following code illustrates how to set BubbleSizeType.Width to SizeRepresents property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add(ExcelChartType.Bubble3D);</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                <para>chart.Series[0].Bubbles = worksheet.Range["A2:C3"];</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set bubble scale and size represents</para>
                <para>format.BubbleScale = 50;</para>
                <para>format.SizeRepresents = BubbleSizeType.Width;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.ShowNegativeBubbles">
            <summary>
            True to show negative bubbles.
            <example>The following code illustrates how to load negative values to 
            ExcelChartType.Bubble3D chart value axis and set ShowNegativeBubbles to "true":
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add(ExcelChartType.Bubble3D);</para>
                <para>chart.DataRange = worksheet.Range["A1:D2"];</para>
                <para>chart.Series[0].Bubbles = worksheet.Range["A2:C3"];</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set negative bubble visibility</para>
                <para>format.ShowNegativeBubbles = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.HasRadarAxisLabels">
            <summary>
            True if a radar chart has axis labels. Applies only to radar charts.
            <example>The following code illustrates how to hide the axis labels of radar charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Radar;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set radar label visibility</para>
                <para>format.HasRadarAxisLabels = false;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.SplitType">
            <summary>
            Returns or sets the way the two sections of either a pie of pie chart or a bar
            of pie chart are split.
            <example>The following code illustrates how to set SplitType.Value to SplitType:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.PieOfPie;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set split type</para>
                <para>format.SplitType = SplitType.Value;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.SplitValue">
            <summary>
            Returns or sets the threshold value separating the two sections of either a pie of pie chart or a bar of pie chart.
            <example>The following code illustrates how to set SplitValue for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.PieOfPie;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set split value</para>
                <para>format.SplitValue = 20;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.PieSecondSize">
            <summary>
            Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart,
            as a percentage of the size of the primary pie. ( 5 - 200 ).
            <example>The following code illustrates how to set PieSecondSize for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.PieOfPie;</para>
                
                <para>//Set chart format</para>
                <para>IChartFormat format = chart.Series[0].Format.Options;</para>
                
                <para>//Set second pie size</para>
                <para>format.PieSecondSize = 40;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.FirstDropBar">
            <summary>
            Returns object that represents first drop bar.
            <example>The following code illustrates how to access FirstDropBar:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set chart drop bar</para>
                <para>IChartDropBar dropBar = chart.Series[0].Format.Options.FirstDropBar;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.SecondDropBar">
            <summary>
            Returns object that represents second drop bar.
            <example>The following code illustrates how to access SecondDropBar:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set chart first drop bar</para>
                <para>IChartDropBar dropBar = chart.Series[0].Format.Options.FirstDropBar;</para>
                
                <para>//Set chart second drop bar</para>
                <para>dropBar = chart.Series[0].Format.Options.SecondDropBar;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFormat.PieSeriesLine">
            <summary>
            Represents series line properties. ( For pie of pie or pie of bar chart types only. ) Read only.
            <example>The following code illusrates how to set color to IChartBorder.Color property for 
            ExcelChartType.PieOfPie chart using PieSeriesLine property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.PieOfPie;</para>
                
                <para>//Set pie series line border</para>
                <para>IChartBorder border =  chart.Series[0].Format.Options.PieSeriesLine;</para>
                
                <para>//Set color</para>
                <para>border.Color = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartFrameFormat">
            <summary>
            Represent the borders and layout options of the chart elements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFrameFormat.IsBorderCornersRound">
            <summary>
            Gets or sets flag if border corners is round.
            <example>The following code illustrates use of IsBorderCornersRound property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//True if the chart area has rounded corners</para>
                <para>IChartFrameFormat chartArea = chart.ChartArea;</para>
                <para>chartArea.IsBorderCornersRound = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartFrameFormat.Border">
            <summary>
            Represents chart border. Read only.
            <example>The following code illustrates use of Border property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//border of the chart element</para>
                <para>chart.ChartTitleArea.Text = "Sample Chart";</para>
                <para>chart.ChartTitleArea.FrameFormat.Border.Color = Color.Red;</para>
                <para>chart.ChartTitleArea.FrameFormat.Border.Pattern = ChartLinePatternType.DashDotDot;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartFrameFormat.Clear">
            <summary>
            Clear curent plot area.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartGridLine">
            <summary>
            Represent grid lines of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.Border">
            <summary>
            Gets line border. Read only.
            <example>The following code illustrates use of Border property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set value axis minor gridLines to visible</para>
                <para>chart.PrimaryValueAxis.HasMinorGridLines = true;</para>
                
                <para>//Get value axis minor gridlines</para>
                <para>IChartGridLine gridLine = chart.PrimaryValueAxis.MinorGridLines;</para>
                
                <para>Set minor gridlines broder properties</para>
                <para>gridLine.Border.Color = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.Format3D">
            <summary>
            Gets the chart3 D properties.
            </summary>
            <value>The chart3 D properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.Shadow">
            <summary>
            Gets the shadow properties.
            </summary>
            <value>The shadow properties.</value>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.LineProperties">
            <summary>
            Returns object, that represents line properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.Interior">
            <summary>
            Returns object, that represents area properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartGridLine.Fill">
            <summary>
            Represents XlsFill options. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartInterior">
            <summary>
            Represents the chart interior. Interior of chart is supported in Chart area and Plot area only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.ForegroundColor">
            <summary>
            Foreground color (RGB).
            <example>The following code illustrates the use of ForegroundColor property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the foreground color of the chart</para>
                <para>chart.ChartArea.Interior.ForegroundColor = Color.Blue;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.BackgroundColor">
            <summary>
            Background color (RGB).
            <example>The following code illustrates the use of BackgroundColor property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the backgroundColor color of the chart</para>
                <para>chart.ChartArea.Interior.BackgroundColor = Color.Pink;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.Pattern">
            <summary>
            Area pattern.
            <example>The following code illustrates the use of Pattern property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the pattern of the chart</para>
                <para>chart.ChartArea.Interior.Pattern = ExcelPatternType.Angle;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.ForegroundKnownColor">
            <summary>
            Index of foreground color.
            <example>The following code illustrates the use of ForegroundKnownColor property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the index of foreground color</para>
                <para>chart.ChartArea.Interior.ForegroundKnownColor = ExcelColors.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.BackgroundKnownColor">
            <summary>
            Background color index.
            <example>The following code illustrates the use of BackgroundKnownColor property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the index of background color</para>
                <para>chart.ChartArea.Interior.BackgroundKnownColor = ExcelColors.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.UseDefaultFormat">
            <summary>
            If true - use automatic format; otherwise custom.
            <example>The following code illustrates the use of UseDefaultFormat property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//True to use default format for interior</para>
                <para>chart.ChartArea.Interior.UseDefaultFormat = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartInterior.SwapColorsOnNegative">
            <summary>
            Foreground and background are swapped when the data value is negative.
            <example>The following code illustrates the use of SwapColorsOnNegative property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//True if foreground and background colors are swapped when the data value is negative</para>
                <para>chart.Series[0].Format.Interior.SwapColorsOnNegative = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartLegend">
            <summary>
            Represents the legend of the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.TextArea">
            <summary>
            Return text area of legend.
            <example>The following code illustrates use of TextArea property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set text area for the legend</para>
                <para>chart.Legend.TextArea.Color = Color.Gray;</para>
                <para>chart.Legend.TextArea.Size = 10;</para>
                <para>chart.Legend.TextArea.FontName = "Bernard MT Condensed";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.X">
            <summary>
            X-position of upper-left corner. 1/4000 of chart plot.
            <example>The following code illustrates use of X co-ordinate of upper-left corner of the legend:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//X co-ordinate of upper-left corner of the legend</para>
                <para>chart.Legend.X = -80;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.Y">
            <summary>
            Y-position of upper-left corner. 1/4000 of chart plot.
            <example>The following code illustrates use of Y co-ordinate of upper-left corner of the legend:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Y co-ordinate of upper-left corner of the legend</para>
                <para>chart.Legend.Y = 30;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.Position">
            <summary>
            Type:
            0 = bottom
            1 = corner
            2 = top
            3 = right
            4 = left
            7 = not docked or inside the plot area.
            <example>The following code illustrates use of Position property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the position of legend on the chart</para>
                <para>chart.Legend.Position = LegendPositionType.Top;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IsVerticalLegend">
            <summary>
            True if vertical legend (a single column of entries);
            False if horizontal legend (multiple columns of entries).
            Manual-sized legends always have this bit set to False.
            <example>The following code illustrates use of IsVerticalLegend property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//True if the legend is vertical</para>
                <para>if(chart.Legend.IsVerticalLegend){ //Your code here }</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.LegendEntries">
            <summary>
            Represents legend entries collection. Read only.
            <example>The following code illustrates use of LegendEntries property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Get the count of legend entries</para>
                <para>int legendEntriesCount = chart.Legend.LegendEntries.Count;</para>
                <para>if(legendEntriesCount != 0){ //Your code here }</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IncludeInLayout">
            <summary>
            Show legend without overlapping. Default is True.
            <example>The following code illustrates use of IncludeInLayout property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//True to show legend without overlapping the chart</para>
                <para>IChartLegend chartLegend = chart.Legend;</para>
                <para>chartLegend.IncludeInLayout = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.InnerLayoutTarget">
            <summary>
            Gets or sets a value indicating whether the layout target is intended to be used internally.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IsWMode">
            <summary>
            false value Specifies that the Width shall be interpreted
            as the Right of the chart element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IsHMode">
            <summary>
            false value Specifies that the Height shall be interpreted
            as the Bottom of the chart element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IsXMode">
            <summary>
            true value Specifies that the X shall be interpreted
            as the Left of the chart element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.IsYMode">
            <summary>
            true value Specifies that the Y shall be interpreted
            as the Top of the chart element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.Width">
            <summary>
            X-size. 1/4000 of chart plot. IsWMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.Height">
            <summary>
            Y-size. 1/4000 of chart plot. IsHMode Shall set to True
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.AutoPositionX">
            <summary>
            X positioning is automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegend.AutoPositionY">
            <summary>
            Y positioning is automatic.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartLegend.Clear">
            <summary>
            Clears chart legend.
            <example>The following code illustrates how to use the Clear method for legend of chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Clears the legend of chart</para>
                <para>worksheet.Charts[0].Legend.Clear();</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartLegend.Delete">
            <summary>
            Deletes chart legend.
            <example>The following code illustrates how to use the Delete method for legend of chart:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Clears the legend of chart</para>
                <para>worksheet.Charts[0].Legend.Delete();</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartLegendEntries">
            <summary>
            Defines the contract for managing chart legend entries, allowing for the addition, removal, and retrieval of legend items in a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntries.Count">
            <summary>
            Represents count of legend entries in collection. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntries.Item(System.Int32)">
            <summary>
            Gets legend entry object by index. Read only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartLegendEntry">
            <summary>
            Represents a legend entry in a chart legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntry.IsDeleted">
            <summary>
            If true then this entry deleted. otherwise false.
            <example>The following code illustrates use of IsDeleted property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Create a chartLegend</para>
                <para>IChartLegend chartLegend = chart.Legend;</para>
                <para>chartLegend.LegendEntries[0].Delete();</para>
                
                <para>//True if the entry is deleted</para>
                <para>bool isDeletedEntry = chartLegend.LegendEntries[0].IsDeleted;</para>
                <para>if(isDeletedEntry){ //Your code here }</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntry.IsFormatted">
            <summary>
            True if the legend entry has been formatted.
            <example>The following code illustrates use of IsFormatted property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Create a chartLegend</para>
                <para>IChartLegend chartLegend = chart.Legend;</para>
                <para>chartLegend.LegendEntries[1].TextArea.Color = Color.Blue;</para>
                
                <para>//True if the legend entry is formatted</para>
                <para>bool isEntryFromatted = chartLegend.LegendEntries[1].IsFormatted;</para>
                <para>if(isEntryFromatted){ //Your code here }</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntry.TextArea">
            <summary>
            Represents text area.
            <example>The following code illustrates use of TextArea property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Create a chartLegend</para>
                <para>IChartLegend chartLegend = chart.Legend;</para>
                <para>chartLegend.LegendEntries[1].TextArea.Color = Color.Blue;</para>
                <para>chartLegend.LegendEntries[1].TextArea.Size = 10;</para>
                <para>chartLegend.LegendEntries[1].TextArea.FontName = "Bernard MT Condensed";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartLegendEntry.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartLegendEntry.Delete">
            <summary>
            Deletes current legend entry.
            <example>The following code illustrates how to use Delete method for legend:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Create a chartLegend</para>
                <para>IChartLegend chartLegend = chart.Legend;</para>
                
                <para>//Delete the first legend entry out of five entires</para>
                <para>chartLegend.LegendEntries[0].Delete();</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartPageSetup">
            <summary>
            Represent page setup options for the chart sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartPageSetup.FitToPagesTall">
            <summary>
            Returns or sets the number of pages tall the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartPageSetup.FitToPagesWide">
            <summary>
            Returns or sets the number of pages wide the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartSerie">
            <summary>
            Represents a series in the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.Values">
            <summary>
            Values range for the series.
            <example>The following code illustrates how to set values for IChartSerie in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                
                <para>//Set category labels and values</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.CategoryLabels">
            <summary>
            Category labels for the series.
            <example>The following code illustrates how to set category labels for IChartSerie in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                
                <para>//Set category labels and values</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.Bubbles">
            <summary>
            Bubble sizes for the series.
            <example>The following code illustrates how to set Bubbles for IChartSerie in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add(ExcelChartType.Bubble);</para>
                
                <para>//Set values and bubble chart range</para>
                <para>serie.Values = worksheet.Range["A1:C1"];;</para>
                <para>serie.Bubbles = worksheet.Range["A2:C2"];</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.Name">
            <summary>
            Name of the series.
            <example>The following code illustrates how to access the name of the IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add("BarSerie");</para>
                
                <para>//Set category labels and values</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                
                <para>//Get Serie name</para>
                <para>Console.Write(serie.Name);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.NamedRange">
            <summary>
            Series Name range for the series.
            </summary>    
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.UsePrimaryAxis">
            <summary>
            Indicates whether to use primary axis for series drawing.
            <example>The following code illustrates how the secondary axis can be used by disabling primary axis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet["A1:C3"];</para>
                
                <para>//Set secondary axis</para>
                <para>IChartSerie serie = chart.Series[1];</para>
                <para>serie.UsePrimaryAxis = false;</para>
                <para>chart.SecondaryCategoryAxis.Visible = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.DataPoints">
            <summary>
            Returns collection of data points. Read-only.
            <example>The following code illustrates how to access the IChartDataPoints collection from IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet["A1:C3"];</para>
                
                <para>//Set data points</para>
                <para>IChartDataPoints dataPoints = chart.Series[0].DataPoints;</para>
                
                <para>//Set data labels value visibility</para>
                <para>dataPoints.DefaultDataPoint.DataLabels.HasValue = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.Format">
            <summary>
            Returns format of current serie.
            <example>The following code illustrates how to access the IChartSerieDataFormat from IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Star;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.SerieType">
            <summary>
            Represents serie type.
            <example>The following code illustrates how to set SerieType for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.Series[0].SerieType = ExcelChartType.Line;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.EnteredDirectlyValues">
            <summary>
            Represents value as entered directly.
            <example>The following code illustrates how series data can be directly given for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add(ExcelChartType.Pie);</para>
                
                <para>//Set direct values</para>
                <para>serie.EnteredDirectlyValues = new object[] { 2000, 1000, 1000 };</para>
                
                <para>//Set direct category label</para>
                <para>serie.EnteredDirectlyCategoryLabels = new object[] { "Total Income", "Expenses", "Profit" };</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.EnteredDirectlyCategoryLabels">
            <summary>
            Represents category values as entered directly.
            <example>The following code illustrates how series category labels can be directly given for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add(ExcelChartType.Pie);</para>
                
                <para>//Set direct values</para>
                <para>serie.EnteredDirectlyValues = new object[] { 2000, 1000, 1000 };</para>
                
                <para>//Set direct category label</para>
                <para>serie.EnteredDirectlyCategoryLabels = new object[] { "Total Income", "Expenses", "Profit" };</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.EnteredDirectlyBubbles">
            <summary>
            Represents bubble values as entered directly.
            <example>The following code illustrates how series data for second value axis of 
            ExcelChartType.Bubble charts can be directly given for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set serie</para>
                <para>IChartSerie serie = chart.Series.Add(ExcelChartType.Bubble);</para>
                
                <para>//Set direct values</para>
                <para>serie.EnteredDirectlyValues = new object[] { 10, 20, 30 };</para>
                
                <para>//Set bubble chart direct values</para>
                <para>serie.EnteredDirectlyBubbles = new object[] { 1, 4, 2 };</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.ErrorBarsY">
            <summary>
            Represents Y error bars. Read only.
            <example>The following code illustrates how IChartErrorBars on Y-axis can be accessed:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ScatterLine;</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].HasErrorBarsY = true;</para>
                <para>IChartErrorBars errorBar = chart.Series[0].ErrorBarsY;</para>
                
                <para>//Set error bar type</para>
                <para>errorBar.Type = ErrorBarType.Percentage;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.HasErrorBarsY">
            <summary>
            Indicates if serie contains Y error bars.
            <example>The following code illustrates how HasErrorBarsY property can be used:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ScatterLine;</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].HasErrorBarsY = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.ErrorBarsX">
            <summary>
            Represents X error bars. Read only.
            <example>The following code illustrates how IChartErrorBars in X-axis can be accessed:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ScatterLine;</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].HasErrorBarsX = true;</para>
                <para>IChartErrorBars errorBar = chart.Series[0].ErrorBarsX;</para>
                
                <para>//Set error bar type</para>
                <para>errorBar.Type = ErrorBarType.Percentage;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.HasErrorBarsX">
            <summary>
            Indicates if serie contains X error bars.
            <example>The following code illustrates how HasErrorBarsX property can be used:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ScatterLine;</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].HasErrorBarsX = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.TrendLines">
            <summary>
            Represents serie trend lines collection. Read only.
            <example>The following code illustrates how IChartTrendLines collection can be accessed 
            from a particular IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set trend line</para>
                <para>IChartTrendLines trendLines = chart.Series[0].TrendLines;</para>
                <para>IChartTrendLine trendLine = trendLines.Add(TrendLineType.Linear);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerie.DataLabels">
            <summary>
            Gets the data labels associated with the chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartSerie.ErrorBar(System.Boolean)">
            <summary>
            Creates error bar object.
            <example>The following code illustrates how to set IChartErrorBars on Y-axis of a 
            particular IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].ErrorBar(true);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType)">
            <summary>
            Creates error bar object.
            <example>The following code illustrates how to set IChartErrorBars with 
            ErrorBarIncludeType.Plus on Y-axis of a particular IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].ErrorBar(true, ErrorBarIncludeType.Plus);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType,Spire.Xls.ErrorBarType)">
            <summary>
            Creates error bar object.
            <example>The following code illustrates how to set IChartErrorBars with ErrorBarIncludeType.Plus 
            and ErrorBarType.Percentage on Y-axis of a particular IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].ErrorBar(true, ErrorBarIncludeType.Plus, ErrorBarType.Percentage);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <param name="type">Represents error bar type.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartSerie.ErrorBar(System.Boolean,Spire.Xls.ErrorBarIncludeType,Spire.Xls.ErrorBarType,System.Double)">
            <summary>
            Creates error bar object.
            <example>The following code illustrates how to set IChartErrorBars with ErrorBarIncludeType.Plus , 
            ErrorBarType.Percentage and number value of "50" on Y-axis of a particular IChartSerie:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].ErrorBar(true, ErrorBarIncludeType.Plus, ErrorBarType.Percentage, 50);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="include">Represents include type.</param>
            <param name="type">Represents error bar type.</param>
            <param name="numberValue">Represents number value.</param>
            <returns>Return error bar objcet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IChartSerie.ErrorBar(System.Boolean,Spire.Xls.Core.IXLSRange,Spire.Xls.Core.IXLSRange)">
            <summary>
            Sets custom error bar type.
            <example>The following code illustrates how an IChartErrorBars can be created on X-axis 
            with IChartErrorBars.PlusRange and IChartErrorBars.MinusRange:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.ScatterLine;</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set error bar</para>
                <para>chart.Series[0].ErrorBar(false, worksheet.Range["A3"], worksheet.Range["B3"]);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
            <param name="bIsY">If true - on Y axis; otherwise on X axis.</param>
            <param name="plusRange">Represents plus range.</param>
            <param name="minusRange">Represents minus range.</param>
            <returns>Returns error bar object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IChartSerieDataFormat">
            <summary>
            Represents formatting options for the series data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.AreaProperties">
            <summary>
            Returns object, that represents aera properties. Read only.
            <example>The following code illustrates how to access AreaProperties properties and set 
            color to IChartInterior.ForegroundColorIndex property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set interior</para>
                <para>IChartInterior interior = chart.Series[0].Format.AreaProperties;</para>
                
                <para>//Set color</para>
                <para>interior.ForegroundColor = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.BarType">
            <summary>
            Represents the base data format.
            <example>The following code illustrates how to set BaseFormatType.Circle to BarShapeBase:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Bar3DStacked;</para>
                
                <para>//Set Bar shape base</para>
                <para>chart.Series[0].Format.BarType = BaseFormatType.Circle;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.BarTopType">
            <summary>
            Represents the top data format.
            <example>The following code illustrates how to set ExcelTopFormat.Sharp to BarShapeTop property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Bar3DStacked;</para>
                
                <para>//Set Bar shape base</para>
                <para>chart.Series[0].Format.BarTopType = TopFormatType.Sharp;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerBackgroundColor">
            <summary>
            Foreground color: RGB value (high byte = 0).
            <example>The following code illustrates how to set color to markers in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Circle;</para>
                
                <para>//Set color</para>
                <para>format.MarkerBackgroundColor = Color.Red;</para>
                <para>format.MarkerForegroundColor = Color.Black;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerForegroundColor">
            <summary>
            Background color: RGB value (high byte = 0).
            <example>The following code illustrates how to set color for markers in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Circle;</para>
                
                <para>//Set color</para>
                <para>format.MarkerBackgroundColor = Color.Red;</para>
                <para>format.MarkerForegroundColor = Color.Black;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerStyle">
            <summary>
            Type of marker.
            <example>The following code illustrates how marker style can be applied to charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Star;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerForegroundKnownColor">
            <summary>
            Index to color of marker border.
            <example>The following code illustrates how to set a color from ExcelColors 
            enumeration to marker applied:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Circle;</para>
                
                <para>//Set color</para>
                <para>format.MarkerBackgroundKnownColor = ExcelColors.Red;</para>
                <para>format.MarkerForegroundKnownColor = ExcelColors.Black;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerBackgroundKnownColor">
            <summary>
            Index to color of marker XlsFill.
            <example>The following code illustrates how to set a color from ExcelColors 
            enumeration to marker applied:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Circle;</para>
                
                <para>//Set color</para>
                <para>format.MarkerBackgroundKnownColor = ExcelColors.Red;</para>
                <para>format.MarkerForegroundKnownColor = ExcelColors.Black;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.MarkerSize">
            <summary>
            Size of line markers.
            <example>The following code illustrates how to set MarkerSize for applied markers in charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Line;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Set marker style</para>
                <para>format.MarkerStyle = ChartMarkerType.Circle;</para>
                
                <para>//Set marker size</para>
                <para>format.MarkerSize = 10;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.IsAutoMarker">
            <summary>
            Automatic color.
            <example>The following code illustrates how IsAutoMarker property can be used:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:F2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.LineMarkers;</para>
                
                <para>//Set serie data format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].DataPoints.DefaultDataPoint.DataFormat;</para>
                
                <para>//Check auto marker</para>
                <para>Console.Write(format.IsAutoMarker);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.Percent">
            <summary>
            Distance of pie slice from center of pie.
            <example>The following code illustrates how to set Percent property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Set percent</para>
                <para>chart.Series[0].Format.Percent = 30;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.Is3DBubbles">
            <summary>
            True to draw bubbles with 3D effects.
            <example>The following code illustrates how Is3DBubbles property can be used:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Bubble3D;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Check type</para>
                <para>Console.WriteLine(format.Is3DBubbles);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.Options">
            <summary>
            Gets common serie options. Read-only.
            <example>The following code illustrates how IChartFormat.GapWidth can be set by accessing 
            CommonSerieOptions property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DStacked;</para>
                
                <para>//Set options</para>
                <para>IChartFormat options = chart.Series[0].Format.Options;</para>
                
                <para>//Set Gap width</para>
                <para>options.GapWidth = 400;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSerieDataFormat.IsMarkerSupported">
            <summary>
            Indicates whether marker is supported by this chart/series.
            <example>The following code illustrates how set ExcelTreeMapLabelOption.Banner to TreeMapLabelOption:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Pie;</para>
                
                <para>//Set serie format</para>
                <para>IChartSerieDataFormat format = chart.Series[0].Format;</para>
                
                <para>//Check marker support</para>
                <para>Console.WriteLine(format.IsMarkerSupported);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartSeriesAxis">
            <summary>
            Represents the chart series Axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSeriesAxis.LabelsFrequency">
            <summary>
            Frequency of labels.
            <example>The following code illustrates how to set LabelsFrequency for IChartSeriesAxis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3D;</para>
                
                <para>//Set LabelsFrequency</para>
                <para>chart.PrimarySerieAxis.LabelsFrequency = 2;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSeriesAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            <example>The following code illustrates how to set TickLabelSpacing for IChartSeriesAxis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3D;</para>
                
                <para>//Set tick label spacing</para>
                <para>chart.PrimarySerieAxis.TickLabelSpacing = 2;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartSeriesAxis.TickMarksFrequency">
            <summary>
            Represents the number of categories or series between tick marks.
            </summary>
            <summary>
            Frequency of tick marks.
            <example>The following code illustrates how to set TickMarksFrequency for IChartSeriesAxis:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3D;</para>
                
                <para>//Set tick mark frequency</para>
                <para>chart.PrimarySerieAxis.TickMarksFrequency = 2;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartShape">
            <summary>
            Defines the contract for chart shapes, which can be used to represent various graphical elements in a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShape.TopRow">
            <summary>
            Top row of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShape.BottomRow">
            <summary>
            Bottom row of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShape.LeftColumn">
            <summary>
            Left column of the chart in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartShape.RightColumn">
            <summary>
            Right column of the chart in the worksheet.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartTextArea">
            <summary>
            Represents the Text Area in a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTextArea.Text">
            <summary>
            Area's text.Some items(such as legend,axis...) maybe invalid.
            <example>The following code illustrates the use of Text property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the Area's text in the chart</para>
                <para>chart.ChartTitleArea.Text = "Student Chart";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTextArea.TextRotationAngle">
            <summary>
            Text rotation angle.
            <example>The following code illustrates the use of TextRotationAngle property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the Area's text in the chart</para>
                <para>chart.ChartTitleArea.Text = "Student Chart";</para>
                
                <para>//Set the Text rotation angle</para>
                <para>chart.ChartTitleArea.TextRotationAngle = 30;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTextArea.FrameFormat">
            <summary>
            Return format of the text area.
            <example>The following code illustrates the use of FrameFormat property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Get the formatting options of the chart for text area</para>
                <para>chart.ChartTitleArea.Text = "Student Chart";</para>
                <para>chart.ChartTitleArea.FrameFormat.Border.Color = Color.Brown;</para>
                <para>chart.ChartTitleArea.FrameFormat.Interior.Pattern = ExcelPatternType.Percent25;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTextArea.BackgroundMode">
            <summary>
            Display mode of the background.
            <example>The following code illustrates the use of BackgroundMode property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the Area's text in the chart</para>
                <para>chart.ChartTitleArea.Text = "Student Chart";</para>
                
                <para>//Set the Display mode of the background</para>
                <para>chart.ChartTitleArea.BackgroundMode = ChartBackgroundMode.Opaque;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTextArea.IsAutoMode">
            <summary>
            True if background is set to automatic.
            <example>The following code illustrates the use of IsAutoMode property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Set range</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Cone3DClustered;</para>
                
                <para>//Set the Area's text in the chart</para>
                <para>chart.ChartTitleArea.Text = "Student Chart";</para>
                
                <para>//True if background is set to automatic</para>
                <para>Console.WriteLine(chart.ChartTitleArea.IsAutoMode);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartTrendLine">
            <summary>
            Represents ChartTrendLine interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Chart3DOptions">
            <summary>
            Gets the IThreeDFormat object. Read-only.[Deprecated]
            </summary>  
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Shadow">
            <summary>
            Gets the shadow.Read-only.
            <example>The following code illustrates how to access and format the IShadow for IChartTrendLine:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ScatterMarkers);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set trendline shadow color</para>
                <para>trendline.Shadow.Color = Color.Red;</para>
                
                <para>//Set trendline shadow outer presets</para>
                <para>trendline.Shadow.ShadowOuterType = XLSXChartShadowOuterType.OffsetDiagonalTopRight;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Border">
            <summary>
            Represents border object. Read only.
            <example>The following code illustrates how to access and format the IChartBorder for IChartTrendLine:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Get chart trendlines collection</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                
                <para>//Add trendline</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set trendline broder properties</para>
                <para>trendline.Border.Color = Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Backward">
            <summary>
            Represents number of periods that the trendline extends backward.
            <example>The following code illustrates how to set backward forecast value for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ScatterMarkers);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Set X axis minimum and maximum values</para>
                <para>chart.PrimaryCategoryAxis.MinValue = -2;</para>
                <para>chart.PrimaryCategoryAxis.MaxValue = 2;</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set backward forecast value</para>
                <para>trendline.Backward = 3;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Forward">
            <summary>
            Represents number of periods that the trendline extends forward.
            <example>The following code illustrates how to set Forward forecast value for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ScatterMarkers);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Set X axis minimum and maximum values</para>
                <para>chart.PrimaryCategoryAxis.MinValue = -2;</para>
                <para>chart.PrimaryCategoryAxis.MaxValue = 2;</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set backward forecast value</para>
                <para>trendline.Forward = 3;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.DisplayEquation">
            <summary>
            True if the equation for the trendline is displayed on the chart.
            <example>The following code illustrates how to display equation for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set equation in trendline</para>
                <para>trendline.DisplayEquation = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.DisplayRSquared">
            <summary>
            True if the R-squared value of the trendline is displayed on the chart.
            <example>The following code illustrates how to display RSquared for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set RSquared value for trendline</para>
                <para>trendline.DisplayRSquared = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Intercept">
            <summary>
            Represents point where the trendline crosses the value axis.
            <example>The following code illustrates how to set intercept value for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ScatterMarkers);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set intercept value</para>
                <para>trendline.Intercept = 10;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.InterceptIsAuto">
            <summary>
            True if the point where the trendline crosses the value
             axis is automatically determined by the regression.
            <example>The following code illustrates how to check whether the IChartTrendLine object 
            intercept value is automatic or not:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ScatterMarkers);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set intercept value</para>
                <para>trendline.Intercept = 10;</para>
                
                <para>//Check trendline intercept is automatic</para>
                <para>Console.WriteLine("Is Trendline Intercept value is automatic:" + trendline.InterceptIsAuto.ToString());</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Type">
            <summary>
            Represents trend line type.
            <example>The following code illustrates how to set TrendLineType for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set trendline type</para>
                <para>trendline.Type = TrendLineType.Polynomial;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Order">
            <summary>
            Represents for Moving Averange and Polynomial trend line type order value.
            <example>The following code illustrates how to set order value for IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                
                <para>//Add serie and set serie Y and X Values</para>
                <para>IChartSerie serie = chart.Series.Add();</para>
                <para>serie.Values = worksheet.Range["A2:C2"];</para>
                <para>serie.CategoryLabels = worksheet.Range["A1:C1"];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Set trendline type</para>
                <para>trendline.Type = TrendLineType.Polynomial;</para>
                
                <para>//Set trendline order</para>
                <para>trendline.Order = 6;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.NameIsAuto">
            <summary>
            Indicates if name is default.
            <example>The following code illustrates how to check whether the IChartTrendLine object name is default or not:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add(TrendLineType.Logarithmic);</para>
                
                <para>//Set trendline name</para>
                <para>trendline.Name = "Trendline 1";</para>
                
                <para>//Check trendline name is automatic</para>
                <para>Console.WriteLine(trendline.NameIsAuto);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Name">
            <summary>
            Represents trendline name.
            <example>The following code illustrates how to access name from IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add(TrendLineType.Logarithmic);</para>
                
                <para>//Get trendline Name</para>
                <para>Console.WriteLine(trendline.Name);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.DataLabel">
            <summary>
            Returns data label. Read only.
            <example>The following code illustrates how to enable and set IChartTextArea text for 
            IChartTrendLine object:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and Get chart serie</para>
                <para>Chart chart = worksheet.Charts.Add(ExcelChartType.ColumnClustered);</para>
                <para>chart.DataRange = worksheet.Range["A1:C3"];</para>
                <para>IChartSerie serie = chart.Series[0];</para>
                
                <para>//Get chart trendlines collection and Add trendline</para>
                <para>IChartTrendLines trendLines = serie.TrendLines;</para>
                <para>IChartTrendLine trendline = trendLines.Add();</para>
                
                <para>//Enable trendline data label by DisplayRSquared</para>
                <para>trendline.DisplayRSquared = true;</para>
                
                <para>//Set data label text</para>
                <para>trendline.DataLabel.Text = "y=10*x";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartTrendLine.Formula">
            <summary>
            Return trendline formula. Read only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartTrendLine.ClearFormats">
            <summary>
            Clears current trend line.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartValueAxis">
            <summary>
            Represents the chart value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.MinValue">
            <summary>
            Maximum value on axis.
            <example>The following code illustrates how to set MinValue and MaxValue for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set min and max value</para>
                <para>valueAxis.MinValue = -20;</para>
                <para>valueAxis.MaxValue = 60;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.MaxValue">
            <summary>
            Maximum value on axis.
            <example>The following code illustrates how to set MinValue and MaxValue for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set min and max value</para>
                <para>valueAxis.MinValue = -20;</para>
                <para>valueAxis.MaxValue = 60;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.MajorUnit">
            <summary>
            Value of major increment.
            <example>The following code illustrates how to set major axis increment unit for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set major unit</para>
                <para>valueAxis.MajorUnit = 20;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.MinorUnit">
            <summary>
            Value of minor increment.
            <example>The following code illustrates how to set minor axis increment unit for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set major unit</para>
                <para>valueAxis.MinorUnit = 8;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.CrossValue">
            <summary>
            Value where category axis crosses.
            <example>The following code illustrates how to set CrossValue for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set CrossValue</para>
                <para>valueAxis.CrossValue = 15;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.CrossesAt">
            <summary>
            Represents the point on the axis another axis crosses it.
            <example>The following code illustrates how to set CrossesAt for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set CrossAt</para>
                <para>valueAxis.CrossesAt = 15;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsAutoMin">
            <summary>
            Automatic minimum selected.
            <example>The following code illustrates how to access IsAutoMin:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Check IsAutoMin</para>
                <para>Console.WriteLine(valueAxis.IsAutoMin);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsAutoMax">
            <summary>
            Automatic maximum selected.
            <example>The following code illustrates how to access IsAutoMax:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Check IsAutoMax</para>
                <para>Console.WriteLine(valueAxis.IsAutoMax);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsAutoMajor">
            <summary>
            Automatic major selected.
            <example>The following code illustrates how to access IsAutoMajor:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Check IsAutoMajor</para>
                <para>Console.WriteLine(valueAxis.IsAutoMajor);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsAutoMinor">
            <summary>
            Automatic minor selected.
            <example>The following code illustrates how to access IsAutoMinor:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Check IsAutoMinor</para>
                <para>Console.WriteLine(valueAxis.IsAutoMinor);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsAutoCross">
            <summary>
            Automatic category crossing point selected.
            <example>The following code illustrates how to access IsAutoCross:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set CrossAt</para>
                <para>valueAxis.CrossesAt = 15;</para>
                
                <para>//Check IsAutoCross</para>
                <para>Console.WriteLine(valueAxis.IsAutoCross);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsLogScale">
            <summary>
            Logarithmic scale.
            <example>The following code illustrates how to set IsLogScale for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set IsLogScale</para>
                <para>valueAxis.IsLogScale = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsReverseOrder">
            <summary>
            Values in reverse order.
            <example>The following code illustrates how to set IsReverseOrder for charts:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Set IsReverseOrder</para>
                <para>valueAxis.IsReverseOrder = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartValueAxis.IsMaxCross">
            <summary>
            Category axis to cross at maximum value.
            <example>The following code illustrates how to access IsMaxCross:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart</para>
                <para>Chart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                
                <para>//Set chart value axis</para>
                <para>IChartValueAxis valueAxis = chart.PrimaryValueAxis;</para>
                
                <para>//Get IsMaxCross</para>
                <para>Console.WriteLine(valueAxis.IsMaxCross);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IChartWallOrFloor">
            <summary>
            Interface that represents chart wall or floor.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IChartWallOrFloor.Border">
            <summary>
            Gets the border of the chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IChartWallOrFloor.Delete">
            <summary>
            Deletes the specified item or resource.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ICheckBox">
            <summary>
            Defines the contract for a checkbox component, allowing for checking and unchecking states.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBox.CheckState">
            <summary>
            Indicates whether check box is checked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBox.Line">
            <summary>
            Gets the line format of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBox.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBox.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked and cannot be modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICheckBox.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the display.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IComboBoxShape">
            <summary>
            Defines the contract for a ComboBox shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxShape.ListFillRange">
            <summary>
            Gets or sets the worksheet range used to XlsFill the specified list box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxShape.SelectedIndex">
            <summary>
            Gets or sets selected item index of the combo box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxShape.DropDownLines">
            <summary>
            Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxShape.Display3DShading">
            <summary>
            Gets or sets value indicating whether 3D shadow is present.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComboBoxShape.SelectedValue">
            <summary>
            Gets value selected in combobox.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IComment">
            <summary>
            Defines a contract for a comment entity.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComment.Author">
            <summary>
            Returns or sets the author of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComment.IsVisible">
            <summary>
            Determines whether the object is visible. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComment.Row">
            <summary>
            Row of the commented cell. Read-only. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComment.Column">
            <summary>
            Column of the commented cell. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IComment.AutoSize">
            <summary>
            True if the size of the specified object is changed automatically
            to fit text within its boundaries. Read/write Boolean.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ICommentShape">
            <summary>
            Defines the contract for comment shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.ForeGroundColorObject">
            <summary>
            Represents foreground color object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.ForeGroundColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.ForeGroundKnownColor">
            <summary>
            Represents foreground excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.BackGroundColor">
            <summary>
            Represent background color
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.BackGroundKnownColor">
            <summary>
            Represent background excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.BackGroundColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.Pattern">
            <summary>
            Represents pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.IsAutomaticFormat">
            <summary>
            Represents is automatic format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.Fill">
            <summary>
            Represents XlsFill properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFillColor.Visible">
            <summary>
            Represents visible.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IGeomPathInfo">
            <summary>
            Defines an interface for providing geometric path information.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.ShowStroke">
            <summary>
            Gets or sets a value indicating whether the stroke should be displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.ExtrusionOk">
            <summary>
            Gets or sets a value indicating whether the extrusion process is successful.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.Height">
            <summary>
            Gets the height of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.Width">
            <summary>
            Gets the width of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.FillMode">
            <summary>
            Gets or sets the fill mode used by the path when filling shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.MsoLstCount">
            <summary>
            Gets the count of items in the MsoLst.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathInfo.Item(System.Int32)">
            <summary>
            Gets the MsoPathInfo at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IGeomPathInfo.AddMso(Spire.Xls.MsoPathType)">
            <summary>
            Adds a new MsoPathInfo object to the collection with the specified path type.
            </summary>
            <param name="type">The type of the path to be added.</param>
            <returns>The newly created MsoPathInfo object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IGeomPathShape">
            <summary>
            Represents a geometric path shape, inheriting properties and methods from the IPrstGeomShape interface.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IGeomPathShape.AddPath">
            <summary>
            Adds a new path to the geometry and returns an interface to manipulate its properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPathShape.Item(System.Int32)">
            <summary>
            Gets the IGeomPathInfo element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The IGeomPathInfo element at the specified index.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IGroupBox">
            <summary>
            Represents a graphical user interface element that groups related controls or elements together, inheriting properties and methods from the IShape interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBox.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBox.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGroupBox.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked and cannot be edited.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalChartTextArea.OColor">
            <summary>
            Returns textarea's color object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalChartTextArea.HasTextRotation">
            <summary>
            Gets value indicating whether TextRotation was changed. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInternalChartTextArea.ParagraphType">
            <summary>
            Represents the Legend Paragraph 
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ILabelShape">
            <summary>
            Defines an interface for a label shape that inherits from the IShape interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILabelShape.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILabelShape.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked and cannot be edited.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ILineShape">
            <summary>
            Defines the contract for a line shape, including properties and methods that are common to all line shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.Color">
            <summary>
            line color
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.BeginArrowHeadStyle">
            <summary>
            Begin Arrow Head Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.BeginArrowheadLength">
            <summary>
            Begin Arrow head Length
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.BeginArrowheadWidth">
            <summary>
            Begin Arrow head Width
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.EndArrowHeadStyle">
            <summary>
            End Arrow Head Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.EndArrowheadLength">
            <summary>
            End Arrow head Length
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.EndArrowheadWidth">
            <summary>
            End Arrow head Width
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.DashStyle">
            <summary>
            DashStyle
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.Transparency">
            <summary>
            Transparency 
            value 0---1
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.Weight">
            <summary>
            Weight
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.MiddleOffsetPercent">
            <summary>
            MiddleOffsetPercent 
            Set middle point value , 
            when middle point localed at back of start point  value is less than 0
            when middle point  localed at start point  value is 0
            when middle point  localed at end point  value is 1
            when middle point localed at back of end point  value is greater than 0
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.LineShapeType">
            <summary>
            Gets the type of the line shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.Rotation">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ILineShape.HyLink">
            <summary>
            Gets the hyperlink associated with this object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IListBox">
            <summary>
            Defines an interface for a list box, which is a type of shape that can display a list of items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBox.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBox.ListFillRange">
            <summary>
            Gets or sets the range used for filling a list in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBox.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListBox.SelectionType">
            <summary>
            Gets or sets the type of selection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IOleObject">
            <summary>
            Represents an interface for objects that can be embedded in OLE containers.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.Picture">
            <summary>
            Gets or sets the picture.
            </summary>
            <value>The picture.</value>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.Shape">
            <summary>
            Gets or sets picture shape object that defines look and position of the OleObject inside parent worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.DisplayAsIcon">
            <summary>
            Gets or sets a value indicating whether [display as icon].
            </summary>
            <value><c>true</c> if [display as icon]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.OleData">
            <summary>
            Gets or sets the  native data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.OleObjectGuid">
            <summary>
            Gets the GUID associated with the OLE object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.OleOriginName">
            <summary>
            Get the  OriginName.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOleObject.FileFullPathName">
            <summary>
            Get the  FullPathName.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IOvalShape">
            <summary>
            Defines the contract for an oval-shaped object, including properties and methods that describe and manipulate the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.Line">
            <summary>
            Gets the line format of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.Rotation">
            <summary>
            Gets or sets the rotation angle of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.HyLink">
            <summary>
            Gets the hyperlink associated with this instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.HAlignment">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.VAlignment">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.TextRotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.IsTextLocked">
            <summary>
            Indicates whether comment text is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.RichText">
            <summary>
            Text of the comment. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IOvalShape.Text">
            <summary>
            Text of the comment.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPictureShape">
            <summary>
            Defines a contract for a picture shape, which includes methods and properties related to the manipulation and representation of picture shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.FileName">
            <summary>
            Get the file name
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.Picture">
            <summary>
            Get the Picture
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.ColorFrom">
            <summary>
            Gets or sets the starting color for a gradient or transition.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.ColorTo">
            <summary>
            Converts a given color to another color based on specified criteria or transformations.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.Fill">
            <summary>
            Gets the fill style of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPictureShape.Line">
            <summary>
            Gets the line format of the shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IPictureShape.Remove(System.Boolean)">
            <summary>
            Removes shape from the collection.
            </summary>
            <param name="removeImage">Removes image that is referenced by this shape from collection too,
            if we didn't detect image usage. XLS doesn't detect this situation correctly in all cases
            if there are shapes in charts in Excel 2007 or if some image shapes are grouped in any excel version.
            If you are not sure whether image is referenced in charts or grouped shapes and you are working with
            Excel 2007 version, set this argument to true (this could cause file size increase, but will keep
            document in the correct state).</param>
        </member>
        <member name="T:Spire.Xls.Core.IPrstGeomShape">
            <summary>
            Defines the contract for a geometric shape in a presentation geometry context.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShape.PrstShapeType">
            <summary>
            Gets the type of the preset geometric shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShape.Text">
            <summary>
            Text of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShape.GeomPaths">
            <summary>
            Gets a collection of geometric paths represented by objects implementing the IGeomPath interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShape.TextVerticalAlignment">
            <summary>
            Get or set Text Vertical Alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPrstGeomShape.HyLink">
            <summary>
            Gets the hyperlink associated with this object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IGeomPath">
            <summary>
            Defines a contract for a geometric path, which can be used to represent a series of connected line segments or curves in a 2D or 3D space.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGeomPath.SegmentPaths">
            <summary>
            Gets a collection of shape segment paths associated with the shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IRadioButton">
            <summary>
            Defines the contract for a radio button control, which allows the user to select one option from a set of mutually exclusive options.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.CheckState">
            <summary>
            Indicates whether option button is checked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.IsFirstButton">
            <summary>
            Indicates whether option button is first button. Read Only
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.Display3DShading">
            <summary>
            Gets or sets value indicating whether 3D shadow is present.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.Line">
            <summary>
            Gets the line format properties of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.Text">
            <summary>
            Gets or sets the text content.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRadioButton.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked and cannot be edited.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IRectangleShape">
            <summary>
            Defines an interface for a rectangle shape that inherits properties and methods from IShape, ITextBox, and IPrstGeomShape interfaces.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShape.RectShapeType">
            <summary>
            Gets the type of the rectangle shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShape.Rotation">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRectangleShape.Line">
            <summary>
            Gets the line format of the shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IScrollBarShape">
            <summary>
            Defines the contract for a scrollbar shape, providing methods and properties necessary for rendering and interacting with a scrollbar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.IncrementalChange">
            <summary>
            Gets or sets the incremental change value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.PageChange">
            <summary>
            Gets or sets the value indicating the change in the page number, typically used in pagination scenarios.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IScrollBarShape.IsHorizontal">
            <summary>
            Warning : It's not recommend use set method,because this property decision by width and height
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IShape">
            <summary>
            Defines the contract for a shape, which can be implemented by various geometric shapes.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Height">
            <summary>
            The height of the object. Read/write Integer
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.ID">
            <summary>
            Returns the type for the specified object. Read-only Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Left">
            <summary>
            The distance from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart). Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Name">
            <summary>
            Returns or sets the name of the object. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Top">
            <summary>
            The distance from the top edge of the topmost shape in the shape range to the top edge of the worksheet. Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Width">
            <summary>
            The width of the object. Read/write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.ShapeType">
            <summary>
            The shape type of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Visible">
            <summary>
            Determines whether the object is visible. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.AlternativeText">
            <summary>
            Returns or sets the descriptive (alternative) text string for a Shape object. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Fill">
            <summary>
            Gets the fill style of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Line">
            <summary>
            Returns the border line object of a shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.OnAction">
            <summary>
            Gets or sets the action to be performed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Shadow">
            <summary>
            Gets the shadow settings for the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.ThreeD">
            <summary>
            Gets the 3D formatting options for the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Glow">
            <summary>
            Gets the glow effect applied to the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Reflection">
            <summary>
            Gets the reflection effect applied to the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.Rotation">
            <summary>
            Returns or sets the rotation of the shape, in degrees.
            </summary>   
        </member>
        <member name="P:Spire.Xls.Core.IShape.ResizeBehave">
            <summary>
            Specifies all possible settings for how drawing object shall be resized when the rows and columns between its start and ending anchor are resized or inserted(ComboBoxShape and CheckBoxShape and RadioButtonShape set MoveAndResize type value is invalid)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.IsLocked">
            <summary>
            True if the object is locked, False if the object can be modified when the sheet is protected. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.IsPrintable">
            <summary>
            True if the object is printable
            </summary>   
        </member>
        <member name="P:Spire.Xls.Core.IShape.IsLockAspectRatio">
            <summary>
            True means that don't allow changes in aspect ratio.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.IsSmartArt">
            <summary>
            Gets a value indicating whether the object is a SmartArt graphic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.TextFrame">
            <summary>
            Gets the text frame associated with the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShape.LinkedCell">
            <summary>
            Gets or sets the range linked to the shape's value.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShape.Remove">
            <summary>
            Removes this shape from shapes collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShape.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the shape.
            </summary>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
        </member>
        <member name="T:Spire.Xls.Core.IShapeFill">
            <summary>
            Defines methods and properties for filling a shape with color or pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.FillType">
            <summary>
            Represents shape XlsFill type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.GradientVariant">
            <summary>
            Represents current shading variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.TransparencyTo">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.TransparencyFrom">
            <summary>
            Returns or sets the degree of transparency of the specified XlsFill as
             a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.GradientColorType">
            <summary>
            Represents gradient style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Pattern">
            <summary>
            Represents gradient pattern
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Texture">
            <summary>
            Represents gradient texture
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.PresetGradientType">
            <summary>
            Represents presed gradient type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Picture">
            <summary>
            Represents user defined picture or textture. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.PictureName">
            <summary>
            Returns user defined picture of texture name. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Visible">
            <summary>
            Represents if XlsFill style visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.GradientDegree">
            <summary>
            Returns the gradient degree of the specified one-color shaded XlsFill as a floating-point
             value from 0.0 (dark) through 1.0 (light)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Transparency">
            <summary>
            Returns the transparency level of the specified Solid color shaded XlsFill as a floating-point
            value from 0.0 (Clear) through 1.0(Opaque)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.PicStretch">
            <summary>
            Gets or sets pictrue format option.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeFill.Tile">
            <summary>
            Represents whether picture is tiled or stretched.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.CustomPicture(System.String)">
            <summary>
            Sets user defined picture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.CustomPicture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined picture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.CustomTexture(System.String)">
            <summary>
            Sets user defined texture.
            </summary>
            <param name="path">Path to image.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.CustomTexture(System.Drawing.Image,System.String)">
            <summary>
            Sets user defined texture.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.Patterned(Spire.Xls.GradientPatternType)">
            <summary>
            Sets the specified XlsFill to a pattern.
            </summary>
            <param name="pattern">Pattern to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.PresetGradient(Spire.Xls.GradientPresetType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.PresetGradient(Spire.Xls.GradientPresetType,Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a preset gradient.
            </summary>
            <param name="grad">Represents preset gradient type.</param>
            <param name="shadStyle">Represents gradient style, for preset gradient.</param>
            <param name="shadVar">Represents gradient variant for preset gradient.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.PresetTextured(Spire.Xls.GradientTextureType)">
            <summary>
            Sets the specified XlsFill format to a preset texture.
            </summary>
            <param name="texture">Represents texture to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.TwoColorGradient">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.TwoColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.OneColorGradient">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.OneColorGradient(Spire.Xls.GradientStyleType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.OneColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a one-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="M:Spire.Xls.Core.IShapeFill.Solid">
            <summary>
            Sets the specified XlsFill to a uniform color.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IShapeLineFormat">
            <summary>
            Defines the interface for setting and getting line format properties of a shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.Weight">
            <summary>
            Represents weight of the line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.BeginArrowHeadStyle">
            <summary>
            Represents begin arrow head style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.EndArrowHeadStyle">
            <summary>
            Represents end arrow head style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.BeginArrowheadLength">
            <summary>
            Represents begin arrow head length.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.EndArrowheadLength">
            <summary>
            Represents end arrow head length.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.BeginArrowheadWidth">
            <summary>
            Represents begin arrow head width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.EndArrowheadWidth">
            <summary>
            Represents end arrow head width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.DashStyle">
            <summary>
            Represents the dash style for the specified line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.Style">
            <summary>
            Represents line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.Transparency">
            <summary>
            Represents line transparency.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.Visible">
            <summary>
            Represents if line format is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.Pattern">
            <summary>
            Represents line pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IShapeLineFormat.HasPattern">
            <summary>
            Indicates if current line format contain pattern.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ISpinnerShape">
            <summary>
            Represents a spinner shape, inheriting from the IShape interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShape.Display3DShading">
            <summary>
            Gets or sets a value indicating whether 3D shading is enabled for the display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShape.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShape.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShape.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISpinnerShape.IncrementalChange">
            <summary>
            Gets or sets the incremental change value.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ITextBox">
            <summary>
            Defines the contract for a text box control.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.HAlignment">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.VAlignment">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.TextRotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.IsTextLocked">
            <summary>
            Indicates whether comment text is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.RichText">
            <summary>
            Text of the comment. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBox.Text">
            <summary>
            Text of the comment.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ITextBoxShape">
            <summary>
            Defines the contract for a text box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxShape.Line">
            <summary>
            Gets the line format of the shape.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ITextBoxLinkShape">
            <summary>
            Defines the contract for a text box link shape, which is responsible for representing a link or connection within a text box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxLinkShape.Rotation">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextBoxLinkShape.HyLink">
            <summary>
            Gets the hyperlink associated with this object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.TextBoxShapeBase">
            <summary>
            Defines the base interface for a TextBox shape, providing a contract for common text box functionalities.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.IsWrapText">
            <summary>
            Gets or sets a value indicating whether the text should be wrapped within the bounds of the control.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.InnerLeftMargin">
            <summary>
            Gets or sets the inner left margin of the element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.InnerRightMargin">
            <summary>
            Gets or sets the inner right margin of the element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.InnerTopMargin">
            <summary>
            Gets or sets the inner top margin of the element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.InnerBottomMargin">
            <summary>
            Gets or sets the inner bottom margin of the element.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.InsetMode">
            <summary>
            Gets or sets the mode for inserting data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.TextBoxShapeBase.FillColor">
            <summary>
            Gets or sets the fill color for the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ITextFrame">
            <summary>
            Defines the contract for a text frame, which is a container for displaying and managing text content.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control should automatically adjust its size to fit its contents.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.IsAutoMargin">
            <summary>
            Gets or sets a value indicating whether the element should have automatic margin settings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.LeftMarginPt">
            <summary>
            Gets or sets the left margin size in points.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.RightMarginPt">
            <summary>
            Gets or sets the right margin in points.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.TopMarginPt">
            <summary>
            Gets or sets the top margin of the document in points.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITextFrame.BottomMarginPt">
            <summary>
            Gets or sets the bottom margin of the document in points.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IDataSort">
            <summary>
            Represents the sort of range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataSort.IsCaseSensitive">
            <summary>
            Indicates whether to perform case sensitive sort.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataSort.IsIncludeTitle">
            <summary>
            Indicates whether the range has header.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataSort.Orientation">
            <summary>
            Represents the sort orientation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataSort.SortColumns">
            <summary>
            Represents the SortFields Collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IDataSort.Sort(Spire.Xls.CellRange)">
            <summary>
            Sorts the range based on the sort fields.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ISortColumn">
            <summary>
            Defines a contract for a column that can be used in sorting operations.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumn.Key">
            <summary>
            Represents the column to be sorted on.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumn.ComparsionType">
            <summary>
            Represents the sort by in the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumn.Order">
            <summary>
            Represents the sort order.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumn.Color">
            <summary>
            Represents the color to sort. Throws exception when SortOn type is Values.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ISortColumn.SetLevel(System.Int32)">
            <summary>
            Sets sorting priority.
            </summary>
            <param name="priority">integer priority value. 0 represents high priority.</param>
        </member>
        <member name="T:Spire.Xls.Core.ISortColumns">
            <summary>
            Defines a contract for sorting columns in a data structure, such as a table or a grid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumns.Count">
            <summary>
            Represents the field count.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ISortColumns.Add(System.Int32,Spire.Xls.SortComparsionType,Spire.Xls.OrderBy)">
            <summary>
            Adds the SortField in the collection.
            </summary>
            <param name="key">Column Index to sort the data.</param>
            <param name="sortComparsionType">To sort the data based on.</param>
            <param name="orderBy">To order the sorted data.</param>
            <returns>Returns the Added Sort Field.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ISortColumns.Add(System.Int32,Spire.Xls.OrderBy)">
            <summary>
            Adds a new column to be sorted with the specified key and order.
            </summary>
            <param name="key">The key of the column to be sorted.</param>
            <param name="orderBy">The order in which to sort the column.</param>
            <returns>The SortColumn object with the added column.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ISortColumns.Remove(System.Int32)">
            <summary>
            Removes the sortField in the collection with the Key.
            </summary>
            <param name="key">Sort field Key to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortColumns.Remove(Spire.Xls.Core.Spreadsheet.Sorting.SortColumn)">
            <summary>
            Removes the sortField in the collection.
            </summary>
            <param name="sortField">Sort Field to remove from the collection.</param>
        </member>
        <member name="P:Spire.Xls.Core.ISortColumns.Item(System.Int32)">
            <summary>
            Returns single item from the collection.
            </summary>
            <param name="index">Gets the item based on the Key.</param>
            <returns>SortFiled with the given key.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ISortedRule">
            <summary>
            Defines a contract for a rule that can be sorted.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ISortedRule.Range">
            <summary>
            Range object to sort.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the integer type data with the specified column index.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortFloat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the Float values with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the Date type values with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the string type values with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortOnTypes(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the based on the types with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortIntDesc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the Integer type values in Descending order with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortFloatDesc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the Float type values in Descending order with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortDateDesc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the Datea type values in Descending order with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="M:Spire.Xls.Core.ISortedRule.SortStringDesc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sorts the string type values in Descending order with the specified column.
            </summary>
            <param name="left">Represents the start index of the data.</param>
            <param name="right">Represents the end index of the data.</param>
            <param name="columnIndex">Reprsents the columnindex of the data.</param>
        </member>
        <member name="T:Spire.Xls.Core.MsoPathInfo">
            <summary>
            Represents the path info of the freeform shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.MsoPathInfo.#ctor">
            <summary>
            Initializes a new instance of the MsoPathInfo class.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MsoPathInfo.Type">
            <summary>
            Represents path segment in NotPrimitive autoshape
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.MsoPathInfo.PointList">
            <summary>
            Gets the list of points.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IAddInFunctions">
            <summary>
            Represents a collection of custom Add In functions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAddInFunctions.Item(System.Int32)">
            <summary>
            Get the element of the index
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAddInFunctions.Count">
            <summary>
            Returns number of elements in the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IAddInFunctions.Add(System.String,System.String)">
            <summary>
            Adds new function to the collection.
            </summary>
            <param name="strFileName">Name of the file that contains add-in function.</param>
            <param name="strFunctionName">Function to add.</param>
            <returns>Index of the added function.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IAddInFunctions.Add(System.String)">
            <summary>
            Adds new local function to the collection.
            </summary>
            <param name="strFunctionName">Function to add.</param>
            <returns>Index of the added function.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IBorders">
            <summary>
            Defines a contract for classes that represent borders, providing methods or properties related to border manipulation or retrieval.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write ExcelColors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.Color">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write Color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.Count">
            <summary>
            Returns the number of objects in the collection. Read-only, Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.Item(Spire.Xls.BordersLineType)">
            <summary>
            Returns a Border object that represents one of the borders of either a
            range of cells or a style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read / write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorders.Value">
            <summary>
            Synonym for Borders.LineStyle. Read / write.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IHPageBreaks">
            <summary>
            The collection of horizontal page breaks within the print area.
            Each horizontal page break is represented by an HPageBreak object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHPageBreaks.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHPageBreaks.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IHyperLinks">
            <summary>
            Defines a contract for handling hyperlinks, including operations to manage and interact with hyperlinks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLinks.Count">
            <summary>
            Returns the number of objects in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLinks.Item(System.Int32)">
            <summary>
            Returns a single hyperlink object from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IHyperLinks.Add(Spire.Xls.Core.IXLSRange)">
            <summary>
            Defines a new hyperlink.
            </summary>
            <param name="range">
            Range object that represents the range new hyperlink is attached to.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.IHyperLinks.RemoveAt(System.Int32)">
            <summary>
            Removes HyperLink object from the collection.
            </summary>
            <param name="index">HyperLink index to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.IListObjects">
            <summary>
            Defines a contract for classes that can list objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IListObjects.Create(System.String,Spire.Xls.Core.IXLSRange)">
            <summary>
            Creates new list object and adds it to the collection.
            </summary>
            <param name="name">Name of the new list object.</param>
            <param name="range">Destination range.</param>
            <returns>Newly created object.</returns>
        </member>
        <member name="T:Spire.Xls.Core.INameRanges">
            <summary>
            A collection of all the Name objects in the application or
            workbook. Each Name object represents a defined name for a
            range of cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INameRanges.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INameRanges.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INameRanges.Item(System.Int32)">
            <summary>
            Returns a single Name object from a Names collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INameRanges.Item(System.String)">
            <summary>
            Returns a single Name object from a Names collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.GetByName(System.String)">
            <summary>
            Returns a single Name object from a Names collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INameRanges.ParentWorksheet">
            <summary>
            Returns parent worksheet of the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.Add(System.String)">
            <summary>
            Defines a new name. 
            </summary>
            <param name="name">Name for the new Name object.</param>
            <returns>Returns a Name object.</returns>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.Add(System.String,Spire.Xls.Core.IXLSRange)">
            <summary>
            Defines a new name. 
            </summary>
            <param name="name">Name for the new Name object.</param>
            <param name="namedObject">Range that will be associated with the name.</param>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.Add(Spire.Xls.Core.INamedRange)">
            <summary>
            Defines a new name.
            </summary>
            <param name="name">Name object to add.</param>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.Remove(System.String)">
            <summary>
            Removes Name object from the collection.
            </summary>
            <param name="name">Name of the object to remove from the collection.</param>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.INameRanges.Contains(System.String)">
            <summary>
            Determines whether the Nameranges contains an element with the specified name.
            </summary>
            <param name="name">The name to locate in the collection.</param>
            <returns>true if the collection contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IStyles">
            <summary>
            Defines a contract for styles that can be applied to various elements within an application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyles.Count">
            <summary>
            Returns the number of objects in the collection. Read-only, Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyles.Item(System.Int32)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyles.Item(System.String)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyles.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IStyles.Contains(System.String)">
            <summary>
            Method return true if collection contains style 
            with speicfied by user name.
            </summary>
            <param name="name">Name to check.</param>
            <returns>True - if style exists, otherwise False.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IStyles.Remove(System.String)">
            <summary>
            Removes style from the collection.
            </summary>
            <param name="styleName">Style name to remove.</param>
        </member>
        <member name="T:Spire.Xls.Core.ITabSheets">
            <summary>
            Summary description for ITabSheets.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheets.Count">
            <summary>
            Returns number of elements in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheets.Item(System.Int32)">
            <summary>
            Returns single entry from the collection by its index. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheets.Move(System.Int32,System.Int32)">
                // <summary>
                // Returns single entry from the collection by its name. Read-only.
                // </summary>
                ITabSheet this[ string strTabSheetName ] { get; }
            
             <summary>
             Moves tab sheet into new location.
             </summary>
             <param name="iOldIndex">Index of the tab sheet to move.</param>
             <param name="iNewIndex">Desired new index.</param>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheets.MoveBefore(Spire.Xls.Core.ITabSheet,Spire.Xls.Core.ITabSheet)">
            <summary>
            Moves specified tab sheet before another tab sheet.
            </summary>
            <param name="sheetToMove">The tab sheet to move.</param>
            <param name="sheetForPlacement">The tab sheet to locate new position.</param>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheets.MoveAfter(Spire.Xls.Core.ITabSheet,Spire.Xls.Core.ITabSheet)">
            <summary>
            Moves specified tab sheet after another tab sheet.
            </summary>
            <param name="sheetToCopy">The tab sheet to move.</param>
            <param name="sheetForPlacement">The tab sheet to locate new position.</param>
        </member>
        <member name="T:Spire.Xls.Core.IVPageBreaks">
            <summary>
            A collection of vertical page breaks within the print area.
            Each vertical page break is represented by a VPageBreak object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IVPageBreaks.Count">
            <summary>
            Returns the number of objects in the collection. Read-only, Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IVPageBreaks.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IWorksheetGroup">
            <summary>
            Represents a worksheet group.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheetGroup.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheetGroup.IsEmpty">
            <summary>
            Indicates whether collection is empty. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheetGroup.Count">
            <summary>
            Number of selected worksheets.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheetGroup.Add(Spire.Xls.Core.ITabSheet)">
            <summary>
            Adds new worksheet to the collection.
            </summary>
            <param name="sheet">Worksheet to add.</param>
            <returns>Index of the added worksheet.</returns>
            <exception cref="T:System.ArgumentNullException">When sheet is Null.</exception>
        </member>
        <member name="T:Spire.Xls.Core.IWorksheets">
            <summary>
            A collection of all the Worksheet objects in the specified or
            active workbook. Each Worksheet object represents a worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheets.Count">
            <summary>
            Returns the number of objects in the collection. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheets.Item(System.Int32)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheets.Item(System.String)">
            <summary>
            Returns a single object from a collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheets.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheets.UseRangesCache">
            <summary>
            Indicates whether all created range objects should be cached.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.Create(System.String)">
            <summary>
            Create worksheet with specified name.
            </summary>
            <param name="name">New name of worksheet. Must be unique for collection.</param>
            <returns>Reference on created worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.Create">
            <summary>
            Create a new worksheet.
            </summary>
            <returns>Reference on created worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.Remove(Spire.Xls.Core.IWorksheet)">
            <summary>
            Remove worksheet from collection.
            </summary>
            <param name="sheet">Reference on worksheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.Remove(System.String)">
            <summary>
            Removes specified worksheet from the collection.
            </summary>
            <param name="sheetName">Name of the sheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.Remove(System.Int32)">
            <summary>
            Removes specified worksheet from the collection.
            </summary>
            <param name="index">Index of the sheet to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.AddCopyBefore(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.AddCopyBefore(Spire.Xls.Core.IWorksheet,Spire.Xls.Core.IWorksheet)">
            <returns>Returns copied sheet.</returns>
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <param name="sheetAfter">Represents sheet that, in collection must be after copied sheet.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.AddCopyAfter(Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection after choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheets.AddCopyAfter(Spire.Xls.Core.IWorksheet,Spire.Xls.Core.IWorksheet)">
            <summary>
            Adds copy of sheet to collection before choosed sheet.
            </summary>
            <param name="toCopy">Represents worksheet to copy.</param>
            <param name="sheetBefore">Represents sheet that, in collection must be before copied sheet.</param>
            <returns>Returns copied sheet.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IAddInFunction">
            <summary>
            Represents an Custom Addin Function in Excel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAddInFunction.Name">
            <summary>
            Returns name of the add-in function. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IBorder">
            <summary>
            Defines the contract for an object that represents a border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorder.KnownColor">
            <summary>
            Returns or sets the primary color of the object. Use the RGB function to create a color value.
            Read/write Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorder.OColor">
            <summary>
            Returns or sets the primary color of the object.
            Read/write ExcelColors.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorder.Color">
            <summary>
            Returns color of the border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorder.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read/write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IBorder.ShowDiagonalLine">
            <summary>
            This property is used only by Diagonal borders. For any other border
            index property will have no influence.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IBorder.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Sets the theme color for the specified type with the given tint.
            </summary>
            <param name="type">The type of theme color to set.</param>
            <param name="tint">The tint value to apply to the theme color.</param>
        </member>
        <member name="M:Spire.Xls.Core.IBorder.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Retrieves the theme color and its tint value.
            </summary>
            <param name="type">The type of the theme color.</param>
            <param name="tint">The tint value applied to the theme color.</param>
            <returns>True if the theme color and tint were successfully retrieved, otherwise false.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ICloneParent">
            <summary>
            Supports cloning, which creates a new instance of a class
            with the same value as an existing instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICloneParent.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="parent">Parent object for a copy of this instance.</param>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Spire.Xls.Core.ICombinedRange">
            <summary>
            Represents a combined Range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICombinedRange.GetNewRangeLocation(System.Collections.Generic.Dictionary{System.String,System.String},System.String@)">
            <summary>
            Gets new address of range.
            </summary>
            <param name="names">HashTable with Worksheet names.</param>
            <param name="strSheetName">String that sets as a worksheet name.</param>
            <returns>Returns string with new name.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICombinedRange.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Core.Spreadsheet.XlsWorkbook)">
            <summary>
            Clones current IXLSRange.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="hashNewNames">Hash table with new names.</param>
            <param name="book">Parent workbook.</param>
            <returns>Returns clone of current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICombinedRange.ClearConditionalFormats">
            <summary>
            Clears conditional formats.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ICombinedRange.GetRectangles">
            <summary>
            Returns array that contains information about range.
            </summary>
            <returns>Rectangles that describes range</returns>
        </member>
        <member name="M:Spire.Xls.Core.ICombinedRange.GetRectanglesCount">
            <summary>
            Returns number of rectangles returned by GetRectangles method.
            </summary>
            <returns>Number of rectangles returned by GetRectangles method.</returns>
        </member>
        <member name="P:Spire.Xls.Core.ICombinedRange.CellsCount">
            <summary>
            Number of cells in the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICombinedRange.RangeGlobalAddress2007">
            <summary>
            Gets address global in the format required by Excel 2007.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ICombinedRange.WorksheetName">
            <summary>
            Gets name of the parent worksheet.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IDataValidation">
            <summary>
            Contains a condition and the formatting attributes applied 
            to the cells, if the condition is met.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.InputTitle">
            <summary>
            Title of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.InputMessage">
            <summary>
            Text of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.ErrorTitle">
            <summary>
            Title of the error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.ErrorMessage">
            <summary>
            Text of the error message.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.Formula1">
            <summary>
            Value of the first formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.DateTime1">
            <summary>
            First formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.Formula2">
            <summary>
            Value of the second formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.DateTime2">
            <summary>
            Second formula's DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.AllowType">
            <summary>
            Type of the allowed data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.CompareOperator">
            <summary>
            Compare operator used.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.IsListInFormula">
            <summary>
            Indicates whether formula contains list of values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.IgnoreBlank">
            <summary>
            Indicates whether empty cell is allowed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.IsSuppressDropDownArrow">
            <summary>
            Indicates whether to suppress drop-down arrow.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.ShowInput">
            <summary>
            Indicates whether to show prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.ShowError">
            <summary>
            Indicates whether to show error box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.PromptBoxHPosition">
            <summary>
            Horizontal position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.PromptBoxVPosition">
            <summary>
            Vertical position of the prompt box.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.IsInputVisible">
            <summary>
             Indicates whether prompt box is visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.IsInputPositionFixed">
            <summary>
            Indicates whether position of the prompt box is fixed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.AlertStyle">
            <summary>
            Style of the error.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.Values">
            <summary>
            Array of possible values (when values in list are entered manually)
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataValidation.DataRange">
            <summary>
            Range of possible values.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IErrorIndicator">
            <summary>
            Represents IErrorIndicator interface.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IErrorIndicator.IgnoreOptions">
            <summary>
            Represents error indicator ignore options.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IExcelApplication">
            <summary>
            Define that all behaviors in Excel must include a Parent property.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExcelApplication.Parent">
            <summary>
            Gets the parent object of the current instance.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IExtendedFormat">
            <summary>
            Represents an extended format interface for Excel applications, inheriting from IExcelApplication.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.Borders">
            <summary>
            Returns borders object for this extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.FillPattern">
            <summary>
            Gets / Sets XlsFill pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.Font">
            <summary>
            Returns font object for this extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.FormulaHidden">
            <summary>
            True if formula is hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.HorizontalAlignment">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludeAlignment">
            <summary>
            True if the style includes the AddIndent, HorizontalAlignment,
            VerticalAlignment, WrapText, and Orientation properties.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludeBorder">
            <summary>
            True if the style includes the Color, ColorIndex, LineStyle,
            and Weight border properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludeFont">
            <summary>
            True if the style includes the Background, Bold, Color,
            ColorIndex, FontStyle, Italic, Name, OutlineFont, Shadow,
            Size, Strikethrough, Subscript, Superscript, and Underline
            font properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludeNumberFormat">
            <summary>
            True if the style includes the NumberFormat property.
            Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludePatterns">
            <summary>
            True if the style includes the Color, ColorIndex,
            InvertIfNegative, Pattern, PatternColor, and PatternColorIndex
            interior properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IncludeProtection">
            <summary>
            True if the style includes the FormulaHidden and Locked protection
            properties. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IndentLevel">
            <summary>
            Indent level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IsFirstSymbolApostrophe">
            <summary>
            If true then first symbol in cell is apostrophe.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.Locked">
            <summary>
            True if cell is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.JustifyLast">
            <summary>
            For far east languages. Supported only for format. Always 0 for US.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.NumberFormat">
            <summary>
            Returns or sets the format code for the object. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.NumberFormatIndex">
            <summary>
            Gets / Sets format index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.NumberFormatLocal">
            <summary>
            Returns or sets the format code for the object as a string in the
            language of the user. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.NumberFormatSettings">
            <summary>
            Returns object that describes number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.ReadingOrder">
            <summary>
            Text direction, the reading order for far east versions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.Rotation">
            <summary>
            Text rotation angle:
            0 Not rotated
            1-90 1 to 90 degrees counterclockwise
            91-180 1 to 90 degrees clockwise
            255 Letters are stacked top-to-bottom, but not rotated.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is more than 0xFF.</exception>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.ShrinkToFit">
            <summary>
            True - shrink content to fit into cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.VerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.WrapText">
            <summary>
            True - Text is wrapped at right border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.PatternKnownColor">
            <summary>
            Returns or sets the color of the interior pattern as an index into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.PatternColor">
            <summary>
            Returns or sets the color of the interior pattern as an System.Drawing.Color value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.KnownColor">
            <summary>
            Returns or sets the color of the interior. The color is specified as
            an index value into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.Color">
            <summary>
            Returns or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IExtendedFormat.IsModified">
            <summary>
            Gets a value indicating whether the object has been modified.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IExtendedFormat.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.IExtendedFormat.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="T:Spire.Xls.Core.IFont">
            <summary>
            Defines the contract for a font, which can be used to specify the style, size, and other attributes of text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.Color">
            <summary>
            Gets / sets font color. Searches for the closestes color in 
            the workbook palette.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IFont.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Core.IFont.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.StrikethroughType">
            <summary>
            Strikethrough Type.
            Read / write sngStrike dblStrike
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.Underline">
            <summary>
            Returns or sets the type of underline applied to the font. Can
            be one of the following FontUnderlineTypeStyle constants.
            Read / write FontUnderlineType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.VerticalAlignment">
            <summary>
            Gets / sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IFont.IsAutoColor">
            <summary>
            Indicates whether color is automatically selected. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IFont.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IGradient">
            <summary>
            Interface used to get gradient XlsFill effects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.BackColorObject">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.ForeColorObject">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.BackKnownColor">
            <summary>
            Represents background color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.ForeKnownColor">
            <summary>
            Represents foreground color index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IGradient.GradientVariant">
            <summary>
            Represents gradient shading variant.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IGradient.CompareTo(Spire.Xls.Core.IGradient)">
            <summary>
            Compares with gradient.
            </summary>
            <param name="gradient">Gradient to compare with.</param>
            <returns>Zero if gradients are equal.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IGradient.TwoColorGradient">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IGradient.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Sets the specified XlsFill to a two-color gradient.
            </summary>
            <param name="style">Represents shading shading style.</param>
            <param name="variant">Represents shading variant.</param>
        </member>
        <member name="T:Spire.Xls.Core.IHPageBreak">
            <summary>
            Represents a horizontal page break. The HPageBreak object is
            a member of the HPageBreaks collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHPageBreak.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IHyperLink">
            <summary>
            Represents a hyperlink in an Excel application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.Address">
            <summary>
            Returns or sets the address of the target document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.Name">
            <summary>
            Returns or sets the name of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.Range">
            <summary>
            Returns a Range object that represents the range the specified hyperlink is attached to. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.ScreenTip">
            <summary>
            Returns or sets the ScreenTip text for the specified hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.SubAddress">
            <summary>
            Returns or sets the location within the document associated with the hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.TextToDisplay">
            <summary>
            Returns or sets the text to be displayed for the specified hyperlink.
            The default value is the address of the hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IHyperLink.Type">
            <summary>
            Returns or sets the object type.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IInterior">
            <summary>
            Defines the contract for an interior.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.PatternKnownColor">
            <summary>
            Returns or sets the color of the interior pattern as an index into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.PatternColor">
            <summary>
            Returns or sets the color of the interior pattern as an System.Drawing.Color value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.KnownColor">
            <summary>
            Returns or sets the color of the interior. The color is specified as
            an index value into the current color palette.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.Color">
            <summary>
            Returns or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.Gradient">
            <summary>
            Returns gradient object for this extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IInterior.FillPattern">
            <summary>
            Gets / Sets XlsFill pattern.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IListObject">
            <summary>
            Represents a table on a worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.Name">
            <summary>
            Gets or sets name of the list object.
            <example>The following code illustrates how to access Name property of the table:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Table Name</para>
                <para>table1.Name = "Products";</para>
                
                <para>//Get Table Name</para>
                <para>Console.WriteLine(table1.Name);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.Location">
            <summary>
            Gets or sets list object's location.
            <example>The following code illustrates how table range can be set and accessed:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Table Range</para>
                <para>table1.Location = worksheet.Range["A1:C7"];</para>
                
                <para>//Get Table Range</para>
                <para>Console.WriteLine(table1.Location.RangeAddressLocal.ToString());</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.Columns">
            <summary>
            Gets collection of all columns of the list object.
            <example>The following code illustrates how to access Columns property of the table:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Total row</para>
                <para>table1.DisplayTotalRow = true;</para>
                <para>table1.Columns[0].TotalsRowLabel = "Total";</para>
                <para>table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                <para>table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.Index">
            <summary>
            Gets index of the current list object.
            <example>The following code illustrates how to access the index of the table:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Print Table index</para>
                <para>Console.WriteLine(table1.Index);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.BuiltInTableStyle">
            <summary>
            Gets or sets the built-in table style for the specified ListObject object.
            <example>The following code illustrates how to set TableBuiltInStyles.TableStyleMedium9 to
            BuiltInTableStyle property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Apply builtin style</para>
                <para>table1.BuiltInTableStyle = TableBuiltInStyles.TableStyleMedium9;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.Worksheet">
            <summary>
            Gets parent worksheet object.
            <example>The following code illustrates how the parent worksheet can be accessed:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Get parent worksheet's name</para>
                <para>Console.WriteLine(table1.Worksheet.Name);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.DisplayName">
            <summary>
            Gets or sets list object name.
            <example>The following code illustrates how the get the DisplayName and print it to console:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Get Table display name</para>
                <para>Console.WriteLine(table1.DisplayName);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.TotalsRowCount">
            <summary>
            Gets number of totals rows.
            <example>The following code illustrates how to get the totals rows count:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Check totals row count</para>
                <para>Console.WriteLine(table1.TotalsRowCount);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.DisplayTotalRow">
            <summary>
            Gets or sets a value indicating whether the Total row is visible.
            <example>The following code illustrates how to enable it by setting it to "True" and show 
            the sum of values in second and third columns in the totals row:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Show total row</para>
                <para>table1.DisplayTotalRow = true;</para>
                <para>table1.Columns[0].TotalsRowLabel = "Total";</para>
                <para>table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                <para>table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.ShowTableStyleRowStripes">
            <summary>
            Gets or sets a value indicating whether row stripes should be present.
            <example>The following code illustrates how to set ShowTableStyleRowStripes to "False" and
            set ShowTableStyleColumnStripes to "True" to enable table formatting in columns only:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Row Column Stripe Visiblity</para>
                <para>table1.ShowTableStyleRowStripes = false;</para>
                <para>table1.ShowTableStyleColumnStripes = true;</para>
                
                <para>//Apply builtin style</para>
                <para>table1.BuiltInTableStyle = TableBuiltInStyles.TableStyleMedium9;</para>
                
                <para>//Create style for table number format</para>
                <para>IStyle style1 = workbook.Styles.Add("CurrencyFormat");</para>
                <para>style1.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* \" - \"??_);_(@_)";</para>
                
                <para>//Apply number format</para>
                <para>worksheet["B2:C6"].CellStyleName = "CurrencyFormat";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.ShowTableStyleColumnStripes">
            <summary>
            Gets or sets a value indicating whether column stripes should be present.
            <example>The following code illustrates how to set ShowTableStyleRowStripes to "False" and
            set ShowTableStyleColumnStripes to "True" to change the default formatting of the table:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Row Column Stripe Visiblity</para>
                <para>table1.ShowTableStyleRowStripes = false;</para>
                <para>table1.ShowTableStyleColumnStripes = true;</para>
                
                <para>//Apply builtin style</para>
                <para>table1.BuiltInTableStyle = TableBuiltInStyles.TableStyleMedium9;</para>
                
                <para>//Create style for table number format</para>
                <para>IStyle style1 = workbook.Styles.Add("CurrencyFormat");</para>
                <para>style1.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* \" - \"??_);_(@_)";</para>
                
                <para>//Apply number format</para>
                <para>worksheet["B2:C6"].CellStyleName = "CurrencyFormat";</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.DisplayLastColumn">
            <summary>
            Gets or sets a value indicating whether last column is present.
            <example>The following code illustrates how to set DisplayLastColumn to "true" to enable the 
            format for the last column:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Column Visiblity</para>
                <para>table1.DisplayFirstColumn = true;</para>
                <para>table1.DisplayLastColumn = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>    
        </member>
        <member name="P:Spire.Xls.Core.IListObject.DisplayFirstColumn">
            <summary>
            Gets or sets a value indicating whether first column is present.
            <example>The following code illustrates how to set DisplayFirstColumn to "true" to enable the 
            format for the first column:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Column Visiblity</para>
                <para>table1.DisplayFirstColumn = true;</para>
                <para>table1.DisplayLastColumn = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.DisplayHeaderRow">
            <summary>
            Gets or sets a Boolean value indicating whether to hide/display header row.
            <example>The following code illustrates how to hide the header row of the table:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Set Header Visiblity</para>
                <para>table1.DisplayHeaderRow = true;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObject.AutoFilters">
            <summary>
            Gets the AutoFiltersCollection collection in the table. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IListObjectColumn">
            <summary>
            Represents a column in the table.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.Name">
            <summary>
            Gets or sets name of the column.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Print Column Name, ID, Index</para>
                <para>Console.WriteLine("Column Name " + table1.Columns[0].Name);</para>
                <para>Console.WriteLine("Column ID " + table1.Columns[0].Id);</para>
                <para>Console.WriteLine("Column Index " + table1.Columns[0].Index);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.Index">
            <summary>
            Gets column index.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Print Column Name, ID, Index</para>
                <para>Console.WriteLine("Column Name " + table1.Columns[0].Name);</para>
                <para>Console.WriteLine("Column ID " + table1.Columns[0].Id);</para>
                <para>Console.WriteLine("Column Index " + table1.Columns[0].Index);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.Id">
            <summary>
            Gets column id of current column. Read-only.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Print Column Name, ID, Index</para>
                <para>Console.WriteLine("Column Name " + table1.Columns[0].Name);</para>
                <para>Console.WriteLine("Column ID " + table1.Columns[0].Id);</para>
                <para>Console.WriteLine("Column Index " + table1.Columns[0].Index);</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.TotalsCalculation">
            <summary>
            Gets or sets function used for totals calculation.
            <example>The following code illustrates how to set IListObject.ShowTotals to "True" to 
            enable totals and set ExcelTotalsCalculation.Sum for second and third columns to get sum 
            of values in the respective columns:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Total row</para>
                <para>table1.ShowTotals = true;</para>
                <para>table1.Columns[0].TotalsRowLabel = "Total";</para>
                <para>table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                <para>table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.TotalsRowLabel">
            <summary>
            Gets or sets label of the totals row.
            <example>The following code illustrates how to set a string "Total" to the first column's 
            TotalsRowLabel property to indicate that it's adjacent cell holds sum of the values of it's column:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Total row</para>
                <para>table1.ShowTotals = true;</para>
                <para>table1.Columns[0].TotalsRowLabel = "Total";</para>
                <para>table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                <para>table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IListObjectColumn.CalculatedFormula">
            <summary>
            Gets or sets calculated formula value.
            <example>The following code illustrates how to set a formula to third column to hold the 
            sum of first and second column's data:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create table</para>
                <para>IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);</para>
                
                <para>//Total row</para>
                <para>table1.ShowTotals = true;</para>
                <para>table1.Columns[0].TotalsRowLabel = "Total";</para>
                <para>table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                <para>table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Table.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.INamedRange">
            <summary>
            Represents a defined name for a range of cells. Names can be
            either built-in names such as Database, Print_Area, and
            Auto_Open or custom names.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Index">
            <summary>
            Returns the index number of the object within the collection of similar
            objects. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Name">
            <summary>
            Returns or sets the name of the object. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.NameLocal">
            <summary>
            Returns or sets the name of the object, in the language of the user.
            Read / write String for Name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.RefersToRange">
            <summary>
            Returns the Range object referred to by a Name object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Value">
            <summary>
            For the Name object, a string containing the formula that the name is
            defined to refer to. The string is in A1-style notation in the language
            of the macro, and it begins with an equal sign.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Visible">
            <summary>
            Determines whether the object is visible. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.IsLocal">
            <summary>
            Indicates whether name is local.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.ValueR1C1">
            <summary>
            Gets named range formula in R1C1 style. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Worksheet">
            <summary>
            Returns parent worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INamedRange.Scope">
            <summary>
            Returns string representation of the name's scope. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.INamedRange.Delete">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.INumberFormat">
            <summary>
            Defines methods and properties for number format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.Index">
            <summary>
            Returns format index. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.FormatString">
            <summary>
            Returns format string. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.FormatType">
            <summary>
            Returns format type of the first section of this number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.IsFraction">
            <summary>
            Indicates whether the first section of this number format contains fraction sign. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.IsScientific">
            <summary>
            Indicates whether first section of this number format contains E/E+
            or E- signs in format string. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.IsThousandSeparator">
            <summary>
            Indicates whether thousand separator is present in the first section
            of this number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.INumberFormat.DecimalPlaces">
            <summary>
            Number of digits after "." sign in the first section of this number format. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IPageSetup">
            <summary>
            Represents the page setup description. The PageSetup object
            contains all page setup attributes (left margin, bottom margin,
            paper size, and so on) as properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.FitToPagesTall">
            <summary>
            Returns or sets the number of pages tall the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write int.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.FitToPagesWide">
            <summary>
            Returns or sets the number of pages wide the worksheet will be scaled
            to when it is printed. Applies only to worksheets. Read / write int.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.IsPrintGridlines">
            <summary>
            True if cell gridlines are printed on the page. Applies only to
            worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.IsPrintHeadings">
            <summary>
            True if row and column headings are printed with this page. Applies
            only to worksheets. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.PrintArea">
            <summary>
            Returns or sets the range to be printed, as a string using A1-style
            references in the language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.PrintTitleColumns">
            <summary>
            Returns or sets the columns that contain the cells to be repeated
            on the left side of each page, as a string in A1-style notation
            in the language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.PrintTitleRows">
            <summary>
            Returns or sets the rows that contain the cells to be repeated at
            the top of each page, as a string in A1-style notation in the
            language of the macro. Read / write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.IsSummaryRowBelow">
            <summary>
            Indicates whether summary rows will appear below detail in outlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.IsSummaryColumnRight">
            <summary>
            Indicates whether summary columns will appear right of the detail in outlines.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IPageSetup.IsFitToPage">
            <summary>
            Indicates whether fit to page mode is selected.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IXLSRange">
            <summary>
            Represents a cell, row, column, selection of cells
            containing one or more contiguous blocks of cells,
            or a 3-D range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RangeAddress">
             <summary>
             Returns the range reference in the language of the macro.
             Read-only String.
             <example>The following code illustrates how to access Address property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddress</para>
                 <para>string address = worksheet.Range[3, 4].RangeAddress;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RangeAddressLocal">
             <summary>
             Returns the range reference for the specified range in the language
             of the user. Read-only String.
             <example>The following code illustrates how to access AddressLocal property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddressLocal</para>
                 <para>string address = worksheet.Range[3, 4].RangeAddressLocal;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RangeGlobalAddress">
             <summary>
             Returns range Address in format "'Sheet1'!$A$1".
             <example>The following code illustrates how to access AddressGlobal property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeAddress</para>
                 <para>string address = worksheet.Range[3, 4].RangeGlobalAddress;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RangeR1C1Address">
             <summary>
             Returns the range reference using R1C1 notation.
             Read-only String.
             <example>The following code illustrates how to access AddressR1C1 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeR1C1Address</para>
                 <para>string address = worksheet.Range[3, 4].RangeR1C1Address;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RangeR1C1AddressLocal">
             <summary>
             Returns the range reference using R1C1 notation.
             Read-only String.
             <example>The following code illustrates how to access AddressR1C1Local property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get RangeR1C1AddressLocal</para>
                 <para>string address = worksheet.Range[3, 4].RangeR1C1Address;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.BooleanValue">
             <summary>
             Gets / sets boolean value that is contained by this range.
             <example>The following code illustrates how to access Boolean property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set and get BooleanValue</para>
                 <para>worksheet.Range[2, 4].BooleanValue = true;</para>
                 <para>bool boolean = worksheet.Range[2, 4].BooleanValue;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Borders">
             <summary>
             Returns a  Borders collection that represents the borders of a style
             or a range of cells (including a range defined as part of a
             conditional format).
             <example>The following code illustrates how to access Borders property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Set borders</para>
                 <para>IBorders borders = worksheet["C2"].Borders;</para>
                 
                 <para>//Set line style</para>
                 <para>borders[BordersLineType.EdgeTop].LineStyle = LineStyleType.Thin;</para>
                 <para>borders[BordersLineType.EdgeBottom].LineStyle = LineStyleType.Thin;</para>
                 
                 <para>//Set border color</para>
                 <para>borders[BordersLineType.EdgeTop].Color = Color.Red;</para>
                 <para>borders[BordersLineType.EdgeBottom].Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.CellList">
             <summary>
             Returns a Range object that represents the cells in the specified range.
             Read-only.
             <example>The following code illustrates how to access CellList property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text. The content contained by ![CDATA[]] will be expressed as plain text</para>
                 <para>List<![CDATA[CellRange]]> cells = worksheet["A1:E8"].CellList;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (CellRange Range in cells)</para>
                 <para>    Range.Text = Range.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellList.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Column">
            <summary>
            Returns the number of the first column in the first area in the specified
            range. Read-only.
            <example>The following code illustrates how to access Column property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Get specific column</para>
                <para>int firstColumn = worksheet["E1:R3"].Column;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.ColumnGroupLevel">
            <summary>
            Column group level. Read-only.
            -1 - Not all columns in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.ColumnWidth">
            <summary>
            Returns or sets the width of all columns in the specified range.
            Read/write Double.
            <example>The following code illustrates how to set the width of all columns in the specified range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Set the ColumnWidth</para>
                <para>worksheet["A1"].Text = "This cell contains sample text";</para>
                <para>worksheet["A1"].ColumnWidth = 25;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("ColumnWidth.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Count">
            <summary>
            Returns the number of objects in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.DateTimeValue">
            <summary>
            Gets / sets DateTime contained by this cell. Read-write DateTime.
            <example>The following code illustrates how to set and access DateTimeValue property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Set and get the DateTimeValue of specified range</para>
                <para>worksheet.Range[2, 4].DateTimeValue = DateTime.Now;</para>
                <para>DateTime dateTime = worksheet.Range[2, 4].DateTimeValue;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("DateTimeValue.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.NumberText">
            <summary>
            Returns cell value after number format application. Read-only.
            <example>The following code illustrates how to access NumberText property of the Range:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Gets cell value with its number format</para>
                <para>CellRange range= worksheet.Range[3, 1];</para>
                <para>range.Value = "1/1/2015";</para>
                <para>range.NumberFormat = "dd-MMM-yyyy";</para>
                <para>string numberText = range.NumberText;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("NumberText.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or
            columns) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or
            rows) that contains the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.ErrorValue">
            <summary>
            Gets / sets error value that is contained by this range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Formula">
            <summary>
            Returns or sets the object's formula in A1-style notation and in
            the language of the macro. Read/write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaArray">
             <summary>
             Represents array-entered formula.
             Visit http://www.cpearson.com/excel/array.htm for more information.
             <example>The following code illustrates how to set and access FormulaArray property of the range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assign array formula</para>
                 <para>worksheet.Range["A1:D1"].FormulaArray = "{1,2,3,4}";</para>
                         
                 <para>//Adding a named range for the range A1 to D1</para>
                 <para>worksheet.Names.Add("ArrayRange", worksheet.Range["A1:D1"]);</para>
                 
                 <para>//Assign formula array with named range</para>
                 <para>worksheet.Range["A2:D2"].FormulaArray = "ArrayRange+100";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("FormulaArray.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaArrayR1C1">
            <summary>
            Returns or sets the formula array for the range, using R1C1-style notation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsFormulaHidden">
            <summary>
            True if the formula will be hidden when the worksheet is protected.
            False if at least part of formula in the range is not hidden.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaDateTime">
            <summary>
            Get / set formula DateTime value contained by this cell.
            DateTime.MinValue if not all cells of the range have same DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaR1C1">
            <summary>
            Returns or sets the formula for the range, using R1C1-style notation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaBoolValue">
            <summary>
            Returns the calculated value of the formula as a boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaErrorValue">
            <summary>
            Returns the calculated value of the formula as a string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasDataValidation">
            <summary>
            Indicates whether specified range object has data validation.
            If Range is not single cell, then returns true only if all cells have data validation. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasBoolean">
             <summary>
             Indicates whether range contains bool value. Read-only.
             <example>The following code illustrates how to set and access HasBoolean property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A3"].Value2 = false;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isboolean = worksheet["A3"].HasBoolean;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasBoolean.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasDateTime">
             <summary>
             Indicates whether range contains DateTime value. Read-only.
             <example>The following code illustrates how to set and access HasDateTime property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A1"].Value2 = DateTime.Now;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isDateTime =  worksheet["A1"].HasDateTime;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasDateTime.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormula">
            <summary>
            True if all cells in the range contain formulas; False if
            at least one of the cells in the range doesn't contain a formula.
            Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaArray">
            <summary>
            Indicates whether range contains array-entered formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaDateTime">
            <summary>
            Indicates if current range has formula value formatted as DateTime. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaNumberValue">
            <summary>
            Indicates if the current range has formula number value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaStringValue">
            <summary>
            Indicates if the current range has formula string value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasNumber">
             <summary>
             Indicates whether the range contains number. Read-only.
             <example>The following code illustrates how to set and access Value2 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A2"].Value2 = 45;</para>
                         
                 <para>//Checking Range types</para>
                 <para>bool isNumber =  worksheet["A2"].HasNumber;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasNumber.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasRichText">
             <summary>
             Indicates whether cell contains formatted rich text string.
             <example>The following code illustrates how to access HasRichText property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>IStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set rich text</para>
                 <para>IRichTextString richText = worksheet["C2"].RichText;</para>
                 <para>richText.Text = "Sample";</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.Color = Color.Red;</para>
                 <para>richText.SetFont(0, 5, font);</para>
                 
                 <para>//Check HasRichText</para>
                 <para>Console.Write(worksheet["C2"].HasRichText);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasRichText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasString">
            <summary>
            Indicates whether the range contains String. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasStyle">
             <summary>
             Indicates whether range has default style. False means default style.
             Read-only.
             <example>The following code illustrates how to access HasStyle property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set color and style</para>
                 <para>style.Color = Color.Red;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Check HasStyle</para>
                 <para>Console.Write(worksheet["C2"].HasStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasStyle.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HorizontalAlignment">
             <summary>
             Returns or sets the horizontal alignment for the specified object.
             Read/write HorizontalAlignType.
             <example>The following code illustrates how to set alignment type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
                         
                 <para>//Set alignment</para>
                 <para>worksheet["A1"].HorizontalAlignment = HorizontalAlignType.Right;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HorizontalAlignment.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IndentLevel">
             <summary>
             Returns or sets the indent level for the cell or range. Can be an
             integer from 0 to 15. Read/write Integer.
             <example>The following code illustrates how to set indent level for a cell:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Set indent level</para>
                 <para>worksheet["C2"].IndentLevel = 2;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IndentLevel.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsBlank">
            <summary>
            Indicates whether the range is blank. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasError">
            <summary>
            Indicates whether range contains error value.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsGroupedByColumn">
            <summary>
            Indicates whether this range is grouped by column. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsGroupedByRow">
            <summary>
            Indicates whether this range is grouped by row. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsInitialized">
            <summary>
            Indicates whether cell is initialized. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.LastColumn">
            <summary>
            Returns last column of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.LastRow">
            <summary>
            Returns last row of the range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.NumberValue">
            <summary>
            Gets / sets double value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.NumberFormat">
             <summary>
             Format of current cell. Analog of Style.NumberFormat property.
             <example>The following code illustrates how to set NumberFormat property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set data</para>
                 <para>worksheet["C2"].Value = "3100.23";</para>
                         
                 <para>//Set number format</para>
                 <para>worksheet["C2"].NumberFormat = "#,##1.##";</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("NumberFormat.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Row">
            <summary>
            Returns the number of the first row of the first area in
            the range. Read-only Long.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RowGroupLevel">
            <summary>
            Row group level. Read-only.
            -1 - Not all rows in the range have same group level.
            0 - No grouping,
            1 - 7 - Group level.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RowHeight">
             <summary>
             Returns the height of all the rows in the range specified,
             measured in points. Returns Double.MinValue if the rows in the specified range
             aren't all the same height. Read / write Double.
             <example>The following code illustrates how to set row height:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
                         
                 <para>//Set row height</para>
                 <para>worksheet["A1"].RowHeight = 30;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("RowHeight.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Rows">
             <summary>
             For a Range object, returns an array of Range objects that represent the
             rows in the specified range.
             <example>The following code illustrates how to access rows:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set rows</para>
                 <para>IXLSRange[] rows = worksheet["A1:E8"].Rows;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (IXLSRange row in rows)</para>
                 <para>  row.Text = row.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Rows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Columns">
             <summary>
             For a Range object, returns an array of Range objects that represent the
             columns in the specified range.
             <example>The following code illustrates how to access columns:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set columns</para>
                 <para>IXLSRange[] columns = worksheet["A1:E8"].Columns;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (IXLSRange column in columns)</para>
                 <para>  column.Text = column.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Columns.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Style">
             <summary>
             Returns a Style object that represents the style of the specified
             range. Read/write IStyle.
             <example>The following code illustrates how to the style of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Add and set style</para>
                 <para>CellStyle style = workbook.Styles.Add("BorderStyle");</para>
                 <para>style.Color = Color.Red;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Style.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.CellStyleName">
             <summary>
             Returns name of the Style object that represents the style of the specified
             range. Read/write String.
             <example>The following code illustrates how to access CellStyleName of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add and set style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                 <para>worksheet["C2"].Style = style;</para>
                         
                 <para>//Check Style name</para>
                 <para>Console.Write(worksheet["C2"].CellStyleName);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Text">
            <summary>
            Gets / sets string value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.TimeSpanValue">
            <summary>
            Gets / sets time value of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Value">
             <summary>
             Returns or sets the value of the specified range.
             Read/write Variant.
             <example>The following code illustrates how to set Value of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set value of the range</para>
                 <para>CellRange range= worksheet.Range[3, 1];</para>
                 <para>range.Value = "1/1/2015";</para>
                         
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Value.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.EnvalutedValue">
             <summary>
             Returns the calculated value of a formula using the most current inputs.
             <example>The following code illustrates how to access a calculated value:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Returns the calculated value of a formula using the most current inputs</para>
                 <para>string calculatedValue = worksheet["C1"].EnvalutedValue;</para>
                 <para>Console.WriteLine(calculatedValue);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Value2">
             <summary>
             Returns or sets the cell value. Read/write Variant.
             The only difference between this property and the Value property is
             that the Value2 property doesn't use the Currency and Date data types.
             <example>The following code illustrates how to access Value2 property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Assigning Value2 property of the Range</para>
                 <para>worksheet["A1"].Value2 = DateTime.Now;</para>
                 <para>worksheet["A3"].Value2 = false;</para>
            
                 <para>//Checking Range types</para>
                 <para>Console.WriteLine(worksheet["A1"].HasDateTime);</para>
                 <para>Console.WriteLine(worksheet["A3"].HasBoolean);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.VerticalAlignment">
             <summary>
             Returns or sets the vertical alignment of the specified object.
             Read/write VerticalAlignType.
             <example>The following code illustrates how to set vertical alignment type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Test";</para>
            
                 <para>//Set alignment</para>
                 <para>worksheet["A1"].VerticalAlignment = VerticalAlignType.Top;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("VerticalAlignment.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Worksheet">
            <summary>
            Returns a Worksheet object that represents the worksheet
            containing the specified range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets cell by row and column index. Row and column indexes are one-based.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range. Row and column indexes are one-based. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Item(System.String)">
            <summary>
            Get cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Item(System.String,System.Boolean)">
            <summary>
            Gets cell range. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.ConditionalFormats">
            <summary>
            Collection of conditional formats.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.DataValidation">
             <summary>
             Data validation for the range.
             <example>The following code illustrates how to access DataValidation property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Data validation for number</para>
                 <para>IDataValidation validation = worksheet.Range["A3"].DataValidation;</para>
                 <para>validation.AllowType = CellDataType.Integer;</para>
            
                 <para>//Value between 0 to 10</para>
                 <para>validation.CompareOperator = ValidationComparisonOperator.Between;</para>
                 <para>validation.Formula1 = "0";</para>
                 <para>validation.Formula2 = "10";</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DataValidation.xlsx");</para>
             </code>
             </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaStringValue">
            <summary>
            Gets / sets string value evaluated by formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.FormulaNumberValue">
            <summary>
             Gets / sets number value evaluated by formula.
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaBoolValue">
            <summary>
            Indicates if current range has formula bool value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasFormulaErrorValue">
            <summary>
            Indicates if current range has formula error value. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Comment">
             <summary>
             Comment assigned to the range. Read-only.
             <example>The following code illustrates how to access Comments property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell</para>
                 <para>worksheet.Range["A1"].AddComment().Text = "Comments";</para>
            
                 <para>//Add Rich Text Comments</para>
                 <para>CellRange range = worksheet.Range["A6"];</para>
                 <para>range.AddComment().RichText.Text = "RichText";</para>
                 <para>IRichTextString rtf = range.Comment.RichText;</para>
            
                 <para>//Formatting first 4 characters</para>
                 <para>IFont redFont = workbook.CreateFont();</para>
                 <para>redFont.IsBold = true;</para>
                 <para>redFont.Color = Color.Red;</para>
                 <para>rtf.SetFont(0, 3, redFont);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DataValidation.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.RichText">
             <summary>
             String with rich text formatting. Read-only.
             <example>The following code illustrates how to set rich text formatting in the range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>IStyle style = workbook.Styles.Add("CustomStyle");</para>
            
                 <para>//Set rich text</para>
                 <para>IRichTextString richText = worksheet["C2"].RichText;</para>
                 <para>richText.Text = "Sample text";</para>
            
                 <para>//Set rich text font</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.IsBold = true;</para>
                 <para>richText.SetFont(0, 5, font);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("RichText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HtmlString">
            <summary>
            Gets and sets the html string which contains data and some formattings in this cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasMerged">
             <summary>
             Indicates whether this range is part of merged range. Read-only.
             <example>The following code illustrates how to access HasMerged property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
            
                 <para>//Set merge</para>
                 <para>worksheet["A1:B1"].Merge();</para>
            
                 <para>//Check merge</para>
                 <para>Console.Write(worksheet["A1:B1"].HasMerged);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.MergeArea">
             <summary>
             Returns a Range object that represents the merged range containing
             the specified cell. If the specified cell is not in a merged range,
             this property returns NULL. Read-only.
             <example>The following code illustrates how to access MergeArea property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample text in cell";</para>
            
                 <para>//Set merge</para>
                 <para>worksheet["C2:D3"].Merge();</para>
            
                 <para>//Check merge area</para>
                 <para>Console.Write(worksheet["C2"].MergeArea.AddressLocal);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsWrapText">
             <summary>
             True if Microsoft Excel wraps the text in the object.
             Read/write Boolean.
             <example>The following code illustrates how to access WrapText property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "This cell contains sample text";</para>
            
                 <para>//Set wrap text</para>
                 <para>worksheet["A1"].IsWrapText = true;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsWrapText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.HasExternalFormula">
            <summary>
            Indicates is current range has external formula. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IgnoreErrorOptions">
            <summary>
            Represents ignore error options.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.IsStringsPreserved">
            <summary>
            Indicates whether all values in the range are preserved as strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.BuiltInStyle">
             <summary>
             Gets/sets built in style.
             <example>The following code illustrates how to access BuiltInStyle property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
            
                 <para>//Set built in style</para>
                 <para>worksheet["C2"].BuiltInStyle = BuiltInStyles.Accent3;</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BuiltInStyle.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IXLSRange.Hyperlinks">
            <summary>
            Returns hyperlinks for this range.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Activate(System.Boolean)">
             <summary>
             Activates a single cell, scroll to it and activates the corresponding sheet.
             To select a range of cells, use the Select method.
             <example>The following code illustrates how to activate a Range with scroll flag:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Activates 'F1' cell.</para>
                 <para>worksheet.Range["F1"].Activate(true);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Activate.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="scroll">True to scroll to the cell</param>
             <returns>Returns the active cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Merge">
             <summary>
             Creates a merged cell from the specified Range object.
             <example>The following code illustrates how to merge the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Merge.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Merge(System.Boolean)">
             <summary>
             Creates a merged cell from the specified Range object.
             <example>The following code illustrates how to merge the Range with clear option:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
                 <para>worksheet["B1"].Text = "sample";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge(true);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Merge.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="clearCells">Indicates whether to clear unnecessary cells.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.UnMerge">
             <summary>
             Separates a merged area into individual cells.
             <example>The following code illustrates how to UnMerge the merged cells:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Merged cell";</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["A1:B1"].Merge(true);</para>
            
                 <para>//Unmerge cells</para>
                 <para>worksheet["A1:B1"].UnMerge();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UnMerge.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.FreezePanes">
             <summary>
             Freezes pane at the current range.
             <example>The following code illustrates how to freeze a pane in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Applying Freeze Pane to the sheet by specifying a cell</para>
                 <para>worksheet.Range["B2"].FreezePanes();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("FreezePanes.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.ClearContents">
             <summary>
             Clear the contents of the Range.
             <example>The following code illustrates how to clear the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Clears the Range C2</para>
                 <para>worksheet.Range["C2"].ClearContents();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ClearContents.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Clear(Spire.Xls.ExcelClearOptions)">
             <summary>
             Clears the cell content, formats, comments based on clear option.
             <example>The following code illustrates how to clear the Range with clear options:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Clears the Range C2 with its clear options</para>
                 <para>worksheet.Range["C2"].Clear(ExcelClearOptions.ClearAll);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ClearContents.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="option">Represents the clear options.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Intersect(Spire.Xls.Core.IXLSRange)">
             <summary>
             Returns intersection of this range with the specified one.
             <example>The following code illustrates how to perform intersectwith in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get intersect range</para>
                 <para>IXLSRange range = worksheet.Range["A16:C16"];</para>
                 <para>IXLSRange commonRange = worksheet.Range["B16:D16"].Intersect(range);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Intersect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="range">The Range with which to intersect.</param>
             <returns>Range intersection; if there is no intersection, NULL is returned.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.Merge(Spire.Xls.Core.IXLSRange)">
             <summary>
             Returns merge of this range with the specified one.
             <example>The following code illustrates how to check whether two ranges are mergable or not:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Merge range</para>
                 <para>worksheet["A2:B2"].Merge();</para>
                 
                 <para>//Get mergable range</para>
                 <para>IXLSRange mergableRange = worksheet["A2"].MergeArea.Merge(worksheet["C2"]);</para>
                 
                 <para>//Check mergable Area</para>
                 <para>Console.Write(mergableRange.RangeAddressLocal);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Intersect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="range">The Range to merge with.</param>
             <returns>Merged ranges or NULL if wasn't able to merge ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.AutoFitRows">
             <summary>
             Autofits all rows in the range.
             <example>The following code illustrates how to auto-size row height to its cell content:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Auto-fit rows</para>
                 <para>worksheet.Range["A2"].Text = "Fit the content to row";</para>
                 <para>worksheet.Range["A2"].IsWrapText = true;</para>
                 <para>worksheet.Range["A2"].AutoFitRows();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.AutoFitColumns">
             <summary>
             Autofits all columns in the range.
             <example>The following code illustrates how to auto-size column width to its cell content:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Auto-fit columns</para>
                 <para>worksheet.Range["B4"].Text = "Fit the content to column";</para>
                 <para>worksheet.Range["B4"].AutoFitColumns();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.AddComment">
             <summary>
             Adds comment to the range.
             <example>The following code illustrates how to insert Comments in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell</para>
                 <para>ICommentShape comment = worksheet.Range["A1"].AddComment();</para>
                 <para>comment.Text= "Comments";</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AddComment.xlsx");</para>
             </code>
             </example>
             </summary>
             <returns>Range's comment.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderAround">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderAround(Spire.Xls.LineStyleType)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderAround(Spire.Xls.LineStyleType,System.Drawing.Color)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range  with color from System.Drawing.Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick , Color.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderAround(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
             <summary>
             Sets around border for current range.
             <example>The following code illustrates how to apply border around the Range with color from Spire.Xls.ExcelColors structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderAround(LineStyleType.Thick , ExcelColors.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderAround.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderInside">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderInside(Spire.Xls.LineStyleType)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderInside(Spire.Xls.LineStyleType,System.Drawing.Color)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range with color from System.Drawing.Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick , Color.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderInside(Spire.Xls.LineStyleType,Spire.Xls.ExcelColors)">
             <summary>
             Sets inside border for current range.
             <example>The following code illustrates how to apply border inside the Range with color from Spire.Xls.ExcelColors structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                 <para>worksheet["D2"].Text = "text";</para>
                 <para>worksheet["C3"].Text = "in";</para>
                 <para>worksheet["D3"].Text = "cell";</para>
            
                 <para>//Set border</para>
                 <para>worksheet["C2:D3"].BorderInside(LineStyleType.Thick , ExcelColors.Red);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderInside.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="borderLine">Represents border line.</param>
             <param name="borderColor">Represents border color as ExcelColors.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.BorderNone">
             <summary>
             Sets none border for current range.
             <example>The following code illustrates how to remove borders in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Remove borders</para>
                 <para>worksheet["C2"].BorderNone();</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("BorderNone.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.CollapseGroup(Spire.Xls.GroupByType)">
             <summary>
             Collapses current group.
             <example>The following code illustrates how to remove borders in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Collapse group</para>
                 <para>worksheet.Range["A5:A15"].CollapseGroup(GroupByType.ByRows);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CollapseGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.ExpandGroup(Spire.Xls.GroupByType)">
             <summary>
             Expands current group.
             <example>The following code illustrates how to expand the group in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Expand group with flag set to expand parent</para>
                 <para>worksheet.Range["A5:A15"].ExpandGroup(GroupByType.ByRows);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ExpandGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.ExpandGroup(Spire.Xls.GroupByType,Spire.Xls.ExpandCollapseFlags)">
             <summary>
             Expands current group.
             <example>The following code illustrates how to perform ExpandGroup in the Range with collapse option:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Expand group with flag set to expand parent</para>
                 <para>worksheet.Range["A5:A15"].ExpandGroup(GroupByType.ByRows, ExpandCollapseFlags.ExpandParent);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("ExpandGroup.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="groupBy">
             This parameter specifies whether the grouping should be performed by rows or by columns. 
             </param>
             <param name="flags">Additional option flags.</param>
        </member>
        <member name="M:Spire.Xls.Core.IXLSRange.ExportDataTable(Spire.Xls.ExportTableOptions)">
            <summary>
            Exports data to a DataTable based on the specified options.
            </summary>
            <param name="options">The options that define how the data should be exported to the DataTable.</param>
            <returns>A DataTable containing the exported data.</returns>
        </member>
        <member name="T:Spire.Xls.Core.IRichTextString">
            <summary>
            Represents a Rich Text String that can be used to apply several styles inside a single cell.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IRichTextString.GetFont(System.Int32)">
            <summary>
            Returns font which is applied to character at the specified position.
            </summary>
            <param name="iPosition">Character index.</param>
            <returns>Font which is applied to character at the specified position.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IRichTextString.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets font for range of characters.
            </summary>
            <param name="iStartPos">First character of the range.</param>
            <param name="iEndPos">Last character of the range.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IRichTextString.ClearFormatting">
            <summary>
            Clears string formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IRichTextString.Clear">
            <summary>
            Clears text and formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IRichTextString.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends rich text string with specified text and font.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="P:Spire.Xls.Core.IRichTextString.Text">
            <summary>
            Gets / sets text of the string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRichTextString.RtfText">
            <summary>
            Returns text in rtf format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IRichTextString.IsFormatted">
            <summary>
            Indicates whether rich text string has formatting runs. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IStyle">
            <summary>
            The Style interface
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyle.BuiltIn">
            <summary>
            True if the style is a built-in style. Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyle.Name">
            <summary>
            Returns or sets the name of the object. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyle.IsInitialized">
            <summary>
            Indicates whether style is initialized (differs from Normal style).
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IStyle.Interior">
            <summary>
            Returns interior object for this extended format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.ITabSheet">
            <summary>
            Represents an Excel worksheet Tab.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.TabKnownColor">
            <summary>
            Gets / sets tab color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.TabColor">
            <summary>
            Gets / sets tab color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.Pictures">
            <summary>
            Returns pictures collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.Workbook">
            <summary>
            Returns parent workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.IsRightToLeft">
            <summary>
            Indicates whether worksheet is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.IsSelected">
            <summary>
            Indicates whether tab of this sheet is selected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.TabIndex">
            <summary>
            Returns index in the parent ITabSheets collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.Name">
            <summary>
            Gets / sets name of the tab sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.Visibility">
            <summary>
            Control visibility of worksheet to end user.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.TextBoxes">
            <summary>
            Returns collection with all textboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.CheckBoxes">
            <summary>
            Returns collection with all checkboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.ComboBoxes">
            <summary>
            Returns collection with all comboboxes inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.RadioButtons">
            <summary>
            Returns collection with all option buttons inside this worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.CodeName">
            <summary>
            Name used by macros to access workbook items. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.ProtectContents">
            <summary>
            Indicates is current sheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.ProtectDrawingObjects">
            <summary>
            True if objects are protected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.ProtectScenarios">
            <summary>
            True if the scenarios of the current sheet are protected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.Protection">
            <summary>
            Gets protected options. Read-only. For sets protection options use "Protect" method.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.ITabSheet.IsPasswordProtected">
            <summary>
            Indicates if the worksheet is password protected.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Activate">
            <summary>
            Makes the current sheet the active sheet. Equivalent to clicking the
            sheet's tab.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Select">
            <summary>
            Selects current tab sheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Unselect">
            <summary>
            Unselects current tab sheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Protect(System.String)">
            <summary>
            Protects worksheet's content with password.
            </summary>
            <param name="password">Password to protect with.</param>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Protect(System.String,Spire.Xls.SheetProtectionType)">
            <summary>
            Protects current worksheet.
            </summary>
            <param name="password">Represents password to protect.</param>
            <param name="options">Represents params to protect.</param>
        </member>
        <member name="M:Spire.Xls.Core.ITabSheet.Unprotect(System.String)">
            <summary>
            Unprotects worksheet's content with password.
            </summary>
            <param name="password">Password to unprotect.</param>
        </member>
        <member name="T:Spire.Xls.Core.IVPageBreak">
            <summary>
            Defines a contract for a vertical page break in a document or spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IVPageBreak.Parent">
            <summary>
            Returns the parent object for the specified object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IWorkbook">
            <summary>
            Represents an MS Excel Workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ActiveSheet">
            <summary>
            Returns an object that represents the active sheet (the sheet on top)
            in the active workbook or in the specified window or workbook. Returns
            Nothing if no sheet is active. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ActiveSheetIndex">
            <summary>
            Gets / sets index of the active sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.AddInFunctions">
            <summary>
            Returns collection of all workbook's add-in functions. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Author">
            <summary>
            Returns or sets the author of the comment. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsHScrollBarVisible">
             <summary>
             Gets or sets a value indicating whether to display horizontal scroll bar. 
             <example>This sample shows how to hide horizontal scroll bar:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
            
                 <para>//Hide horizontal scroll bar</para>
                 <para>workbook.IsHScrollBarVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsHScrollBarVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsVScrollBarVisible">
             <summary>
             Gets or sets a value indicating whether to display vertical scroll bar. 
             <example>This sample shows how to hide vertical scroll bar:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
            
                 <para>//Hide vertical scroll bar</para>
                 <para>workbook.IsVScrollBarVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsVScrollBarVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.BuiltInDocumentProperties">
             <summary>
             Returns collection that represents all the built-in document properties
             for the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the built in document properties:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get the built in document properties</para>
                 <para>IBuiltInDocumentProperties builtInDocumentProperties = workbook.DocumentProperties;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.CodeName">
            <summary>
            Name which is used by macros to access the workbook items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.CustomDocumentProperties">
             <summary>
             Returns collection that represents all the custom document properties
             for the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the custom document properties:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get the document properties</para>
                 <para>ICustomDocumentProperties documentProperties = workbook.CustomDocumentProperties;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Date1904">
            <summary>
            True if the workbook uses the 1904 date system. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsDisplayPrecision">
            <summary>
            True if cell is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsCellProtection">
            <summary>
            True if cell is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsWindowProtection">
            <summary>
            True if window is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Names">
             <summary>
             For an ReservedHandle object, returns a Names collection that represents
             all the names in the active workbook. For a Workbook object, returns
             a Names collection that represents all the names in the specified
             workbook (including all worksheet-specific names).
             <example>The following code snippet illustrates how to get names:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get names</para>
                 <para>INameRanges names = workbook.NameRanges;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ReadOnly">
            <summary>
            True if the workbook has been opened as Read-only. Read-only Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Saved">
            <summary>
            True if no changes have been made to the specified workbook since
            it was last saved. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Styles">
             <summary>
             Returns a Styles collection that represents all the styles
             in the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the Styles:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set styles</para>
                 <para>IStyles styles = workbook.Styles;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Worksheets">
            <summary>
            Returns a Sheets collection that represents all the worksheets
            in the specified workbook. Read-only Sheets object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.HasMacros">
            <summary>
            True indicate that opened workbook contains VBA macros.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Palette">
             <summary>
             Get Palette of colors which an Excel document can have. 
             Here is a table of color indexes to places in the color tool box 
             provided by Excel application:
             --------------------------------------------
             |  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
             ---+----------------------------------------
             |1 | 00 | 51 | 50 | 49 | 47 | 10 | 53 | 54 |
             |2 | 08 | 45 | 11 | 09 | 13 | 04 | 46 | 15 |
             |3 | 02 | 44 | 42 | 48 | 41 | 40 | 12 | 55 |
             |4 | 06 | 43 | 05 | 03 | 07 | 32 | 52 | 14 |
             |5 | 37 | 39 | 35 | 34 | 33 | 36 | 38 | 01 |
             ---+----------------------------------------
             |6 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 |
             |7 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 |
             --------------------------------------------
             <example>The following code illustrates how to access the default colors of excel color palette:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get colors</para>
                 <para>System.Drawing.Color[] colors = workbook.Colors;</para>
                         
                 <para>//Get color</para>
                 <para>System.Drawing.Color color = colors[2];</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.DisplayedTab">
            <summary>
            Index of tab which will be displayed on document open.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Charts">
            <summary>
            Collection of the chart objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ThrowOnUnknownNames">
            <summary>
            Indicates whether exception should be thrown when unknown
            name was found in a formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.DisableMacrosStart">
            <summary>
            This Property allows users to disable load of macros from 
            document. Excel on file open will simply skip macros and will 
            work as if document does not contain them. This options works
            only when file contains macros (HasMacros property is True).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.StandardFontSize">
             <summary>
             Returns or sets the standard font size, in points. Read/write.
             <example>The following code illustrates how to set the standard font size for the workbook:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set standard font</para>
                 <para>workbook.DefaultFontName = "Arial";</para>
                 
                 <para>//Set standard font size</para>
                 <para>workbook.DefaultFontSize = 18;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.StandardFont">
             <summary>
             Returns or sets the name of the standard font. Read/write String.
             <example>The following code illustrates how to set the standard font for the workbook:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set standard font</para>
                 <para>workbook.DefaultFontName = "Arial";</para>
                 
                 <para>//Set standard font size</para>
                 <para>workbook.DefaultFontSize = 18;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Allow3DRangesInDataValidation">
            <summary>
            Indicates whether to allow usage of 3D ranges in DataValidation
            list property (MS Excel doesn't allow).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.RowSeparator">
            <summary>
            Gets / sets row separator for array parsing.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ArgumentsSeparator">
            <summary>
            Formula arguments separator.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.IsRightToLeft">
            <summary>
            Indicates whether worksheet is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.DisplayWorkbookTabs">
            <summary>
            Indicates whether tabs are visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.TabSheets">
            <summary>
            Returns collection of tab sheets. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.DetectDateTimeInValue">
            <summary>
            Indicates whether library should try to detect string value passed to Value (and Value2)
            property as DateTime. Setting this property to false can increase performance greatly for
            such operations especially on Framework 1.0 and 1.1. Default value is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.ReadOnlyRecommended">
            <summary>
            True to display a message when the file is opened, recommending that the file be opened as read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.PasswordToOpen">
            <summary>
            Gets / sets password to encrypt document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.MaxRowCount">
            <summary>
            Returns maximum row count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.MaxColumnCount">
            <summary>
            Returns maximum column count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.Version">
            <summary>
            Gets / sets excel version.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorkbook.PivotCaches">
            <summary>
            Returns pivot caches collection. Read-only.
            <example>The following code snippet illustrates how to get pivot caches:
            <code>
                <para>//Load workbook</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                
                <para>//Gets pivot caches collection</para>
                <para>IPivotCaches pivotCaches = workbook.PivotCaches;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Activate">
            <summary>
            Activates the first window associated with the workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.AddFont(Spire.Xls.Core.IFont)">
            <summary>
            Adds font to the inner fonts collection and makes this font read-only.
            </summary>
            <param name="fontToAdd">Font to add.</param>
            <returns>Added font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Close(System.Boolean,System.String)">
            <summary>
            Closes the object.
            </summary>
            <param name="SaveChanges">If True, all changes will be saved.</param>
            <param name="Filename">Name of the file.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Close(System.Boolean)">
            <summary>
            Closes the object.
            </summary>
            <param name="saveChanges">If True, all changes will be saved.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Close">
            <summary>
            Closes the object without saving.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Close(System.String)">
            <summary>
            Closes the object and saves changes into specified file.
            </summary>
            <param name="Filename">
            File name in which workbook will be saved if SaveChanges is true.
            </param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.CopyToClipboard">
            <summary>
            Copies workbook to the clipboard.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.CreateTemplateMarkersProcessor">
            <summary>
            Creates object that can be used for template markers processing.
            </summary>
            <returns>Object that can be used for template markers processing.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Save">
            <summary>
            Saves changes to the specified workbook.
            <example>This sample shows how to save changes to the specified workbook:
            <code>
                <para>//Load workbook</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                
                <para>//Save to file</para>
                <para>workbook.Save();</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.String)">
            <summary>
            Short variant of SaveAs method.
            </summary>
            <param name="Filename"></param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.String,Spire.Xls.ExcelSaveType)">
            <summary>
            Short variant of SaveAs method.
            </summary>
            <param name="Filename">Name of the file.</param>
            <param name="saveType">Excel save type.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAsHtml(System.String,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves changes to the specified stream.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="saveOptions">Save options in html.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.IO.Stream)">
            <summary>
            Saves changes to the specified stream.
            </summary>
            <param name="stream">Stream that will receive workbook data.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.IO.Stream,Spire.Xls.ExcelSaveType)">
            <summary>
            Saves changes to the specified stream.
            </summary>
            <param name="stream">Stream that will receive workbook data.</param>
            <param name="saveType">Type of the Excel file.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SetPaletteColor(System.Int32,System.Drawing.Color)">
             <summary>
             Set user color for specified element in Color table.
             <example>The following code snippet illustrates how to set palette color:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set palette color</para>
                 <para>workbook.ChangePaletteColor(System.Drawing.Color.Red , 10);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = workbook.Colors[10];</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="index">Index of Color in array.</param>
             <param name="color">New color which must be set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.ResetPalette">
             <summary>
             Recover palette to default values.
             <example>The following code snippets illustrates how to reset the palette:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get colors</para>
                 <para>System.Drawing.Color[] colors = workbook.Colors;</para>
                         
                 <para>//Check color</para>
                 <para>Console.WriteLine(colors[2].Name);</para>
                 
                 <para>//Set color</para>
                 <para>colors[2] = System.Drawing.Color.Yellow;</para>
                 
                 <para>//Reset palette</para>
                 <para>workbook.ResetPalette();</para>
                 
                 <para>//Check color</para>
                 <para>Console.WriteLine(workbook.Colors[2].Name);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.GetPaletteColor(Spire.Xls.ExcelColors)">
             <summary>
             Method return Color object from workbook palette by its index.
             <example>The following code illustrates how to get the RGB color value for the specified color from ExcelColors enumeration:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>System.Drawing.Color color = workbook.GetPaletteColor(ExcelColors.Red);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = workbook.Colors[10];</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="color">Index from palette array.</param>
             <returns>RGB Color.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.GetNearestColor(System.Drawing.Color)">
             <summary>
             Gets the nearest color to the specified Color structure
             from Workbook palette.
             <example>The following code illustrates how to get the indexed color from ExcelColors for the given color from Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>ExcelColors color = workbook.GetMatchingColor(System.Drawing.Color.Red);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.KnownColor = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="color">System color.</param>
             <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.GetNearestColor(System.Int32,System.Int32,System.Int32)">
             <summary>
             Gets the nearest color to the specified by red, green, and blue 
             values color from Workbook palette.
             <example>The following code illustrates how to get the indexed color from ExcelColors for the given color from Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>ExcelColors color = workbook.GetMatchingColor(255, 0, 0);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.KnownColor = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="r">Red component of the color.</param>
             <param name="g">Green component of the color.</param>
             <param name="b">Blue component of the color.</param>
             <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SetColorOrGetNearest(System.Drawing.Color)">
            <summary>
            If there is at least one free color, define a new color;
            if not, search for the closest one.
            </summary>
            <param name="color"></param>
            <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SetColorOrGetNearest(System.Int32,System.Int32,System.Int32)">
            <summary>
            If there is at least one free color, define a new color;
            if not, search for the closest one.
            </summary>
            <param name="r">Red component of the color.</param>
            <param name="g">Green component of the color.</param>
            <param name="b">Blue component of the color.</param>
            <returns>Color index from workbook palette.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.CreateFont">
             <summary>
             Method to create a font object and register it in the workbook.
             <example>The following code illustrates how to create IFont object:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>IRichTextString richText = worksheet["B2"].RichText;</para>
                 
                 <para>//Create font</para>
                 <para>IFont font = workbook.CreateFont();</para>
                 
                 <para>//Set color</para>
                 <para>font.Color = Color.Red;</para>
                 
                 <para>//Set text</para>
                 <para>richText.Text = "Sample";</para>
                 
                 <para>//Set font</para>
                 <para>richText.SetFont(0, 5, font);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.CreateFont(Spire.Xls.Core.IFont)">
            <summary>
            Method that creates font object based on another font object
            and registers it in the workbook.
            </summary>
            <param name="baseFont">Base font for the new one.</param>
            <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.CreateFont(System.Drawing.Font)">
            <summary>
            Method creates a font object based on native font and register it in the workbook.
            </summary>]
            <param name="nativeFont">Native font to get settings from.</param>
            <returns>Newly created font.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.String)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code snippet illustrates how to replace the string with another string:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by newValue</para>
                 <para>string oldValue = "Find";</para>
                 <para>string newValue = "NewValue";</para>
                 <para>workbook.Replace(oldValue, newValue);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.Double)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code snippet illustrates how to replace the string with double:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by double</para>
                 <para>string oldValue = "Ten";</para>
                 <para>workbook.Replace(oldValue, 10.0);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.DateTime)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code illustrates how to replace the string value with datetime:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by dateTime</para>
                 <para>string oldValue = "Find";</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>workbook.Replace(oldValue, dateTime);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.String[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of string values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of string values</para>
                 <para>string oldValue = "Find";</para>
                 <para>string[] newValues = { "X values", "Y values" };</para>
                 <para>workbook.Replace(oldValue, newValues , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.Int32[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of int values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of int values</para>
                 <para>string oldValue = "Find";</para>
                 <para>int[] newValues = { 1, 2 };</para>
                 <para>workbook.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.Double[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of double values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of double values</para>
                 <para>string oldValue = "Find";</para>
                 <para>double[] newValues = { 1.0, 2.0 };</para>
                 <para>workbook.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Replaces specified string by data table values.
             <example>The following code snippet illustrates how to replace the string value with data table:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by data table</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>workbook.Replace(oldValue, table, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Data table with new data.</param>
             <param name="isFieldNamesShown">Indicates whether field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Replace(System.String,System.Data.DataColumn,System.Boolean)">
             <summary>
             Replaces specified string by data column values.
             <example>The following code snippet illustrates how to replace the string value with data column:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by data column</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>System.Data.DataColumn dataColumn = table.Columns[0];</para>
                 <para>workbook.Replace(oldValue, dataColumn, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Data table with new data.</param>
             <param name="isFieldNamesShown">Indicates whether field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindOne(System.String,Spire.Xls.FindType)">
             <summary>
             This method seraches for the first cell with specified string value.
             <example>This sample shows how to find the first cell with specified string value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified string value</para>
                 <para>string value = "value";</para>
                 <para>IXLSRange result = workbook.FindString(value, false, false);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <param name="flags">Type of value to search.</param>
             <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindOne(System.Double,Spire.Xls.FindType)">
             <summary>
             This method seraches for the first cell with specified double value.
             <example>This sample shows how to find the first cell with specified double value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified double value</para>
                 <para>double value = 9.00;</para>
                 <para>IXLSRange result = workbook.FindNumber(value, false);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <param name="flags">Type of value to search.</param>
             <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindOne(System.Boolean)">
             <summary>
             This method seraches for the first cell with specified bool value.
             <example>This sample shows how to find the first cell with specified bool value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified bool value</para>
                 <para>IXLSRange result = workbook.FindBool(true);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindOne(System.DateTime)">
             <summary>
             This method seraches for the first cell with specified DateTime value.
             <example>This sample shows how to find the first cell with specified DateTime value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified DateTime value</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>IXLSRange result = workbook.FindDateTime(dateTime);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindOne(System.TimeSpan)">
             <summary>
             This method seraches for the first cell with specified TimeSpan value.
             <example>This sample shows how to find the first cell with specified TimeSpan value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified TimeSpan value</para>
                 <para>TimeSpan timeSpan = new TimeSpan(2, 30, 30);</para>
                 <para>IXLSRange result = workbook.FindTimeSpan(timeSpan);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>First found cell, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindAll(System.String,Spire.Xls.FindType)">
             <summary>
             This method seraches for the all cells with specified string value.
             <example>This sample shows how to find all cells with specified string value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified string value</para>
                 <para>string value = "value";</para>
                 <para>CellRange[] result = workbook.FindAllString(value , false , false);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <param name="flags">Type of value to search.</param>
             <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindAll(System.Double,Spire.Xls.FindType)">
            <summary>
             This method seraches for the all cells with specified double value.
             <example>This sample shows how to find all cells with specified doulbe value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified double value</para>
                 <para>CellRange[] result = workbook.FindAllNumber(100.32 , false);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <param name="flags">Type of value to search.</param>
             <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindAll(System.Boolean)">
             <summary>
             This method seraches for the all cells with specified bool value.
             <example>This sample shows how to find all cells with specified bool value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified bool value</para>
                 <para>CellRange[] result = workbook.FindAllBool(true);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>All found cells, or Null if value was not found</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindAll(System.DateTime)">
             <summary>
             This method seraches for the all cells with specified DateTime value.
             <example>This sample shows how to find all cells with specified DateTime value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified DateTime value</para>
                 <para>CellRange[] result = workbook.FindAllDateTime(DateTime.Now);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.FindAll(System.TimeSpan)">
             <summary>
             This method seraches for the all cells with specified TimeSpan value.
             <example>This sample shows how to find all cells with specified TimeSpan value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified TimeSpan value</para>
                 <para>TimeSpan value = new TimeSpan(2, 30, 30);</para>
                 <para>CellRange[] result = workbook.FindAllTimeSpan(value);</para>
             </code>
             </example>
             </summary>
             <param name="findValue">Value to search.</param>
             <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.String,System.String)">
             <summary>
             Save active WorkSheet using separator.
             <example>The following code illustrates how to save the active worksheet in a different file with separator:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Result.csv" , ",");</para>
             </code>
             </example>
             </summary>
             <param name="fileName">Path to save.</param>
             <param name="separator">Current separator.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SaveAs(System.IO.Stream,System.String)">
             <summary>
             Save active WorkSheet using separator.
             <example>The following code illustrates how to saves the active worksheet as stream with separator:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Save to stream</para>
                 <para>Stream stream = new MemoryStream();</para>
                 <para>workbook.SaveToFile(stream , ",");</para>
             </code>
             </example>
             </summary>
             <param name="stream">Stream to save.</param>
             <param name="separator">Current separator.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SetSeparators(System.Char,System.Char)">
            <summary>
            Sets separators for formula parsing.
            </summary>
            <param name="argumentsSeparator">Arguments separator to set.</param>
            <param name="arrayRowsSeparator">Array rows separator to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Protect(System.Boolean,System.Boolean)">
            <summary>
            Sets protection for workbook.
            </summary>
            <param name="bIsProtectWindow">Indicates if protect workbook window.</param>
            <param name="bIsProtectContent">Indicates if protect workbook content.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Unprotect">
            <summary>
            Unprotects workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.Clone">
            <summary>
            Creates copy of the current instance.
            </summary>
            <returns>Copy of the current instance.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorkbook.SetWriteProtectionPassword(System.String)">
            <summary>
            This method sets write protection password.
            </summary>
            <param name="password">Password to set.</param>
        </member>
        <member name="T:Spire.Xls.Core.IWorksheet">
            <summary>
            Represents a worksheet. The Worksheet object is a member of the
            Worksheets collection. The Worksheets collection contains all the
            Worksheet objects in a workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.AutoFilters">
            <summary>
            Returns collection of worksheet's autofilters. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Cells">
            <summary>
            Returns all used cells in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.DisplayPageBreaks">
            <summary>
            True if page breaks (both automatic and manual) on the specified
            worksheet are displayed. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Index">
            <summary>
            Returns the index number of the object within the collection of
            similar objects. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.MergedCells">
             <summary>
             Returns all merged ranges. Read-only.
             <example>The following code illustrates how to get the merged ranges:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["C2:D2"].Merge();</para>
                 <para>worksheet["F3:G3"].Merge();</para>
                         
                 <para>//Get merged ranges</para>
                 <para>IXLSRange[] mergedRanges = worksheet.MergedCells;</para>
             
                 <para>//Get merged range count . Output will be 2</para>
                 <para>Console.Write(mergedRanges.Length);</para>
             
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("MergedCells.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Names">
            <summary>
            For a Worksheet object, returns a Names collection that represents
            all the worksheet-specific names (names defined with the "WorksheetName!"
            prefix). Read-only Names object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.CodeName">
            <summary>
            Name that is used by macros to access the workbook items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.PageSetup">
            <summary>
            Returns a PageSetup object that contains all the page setup settings
            for the specified object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.AllocatedRange">
            <summary>
            Returns a Range object that represents a cell or a range of cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Rows">
            <summary>
            For a Worksheet object, returns an array of Range objects that represents
            all the rows on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Columns">
            <summary>
            For a Worksheet object, returns an array of Range objects that represents
            all the columns on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.DefaultRowHeight">
             <summary>
             Returns the standard (default) height of all the rows in the worksheet,
             in points. Read/write Double.
             <example>The following code illustrates how to get the default row height:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get row height</para>
                 <para>Console.Write(worksheet.DefaultRowHeight);</para>
                         
                 <para>//Set default height</para>
                 <para>worksheet.DefaultRowHeight = 40;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DefaultRowHeight.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.DefaultColumnWidth">
             <summary>
             Returns or sets the standard (default) width of all the columns in the
             worksheet. Read/write Double.
             <example>The following code illustrates how to get the default column width:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get column width</para>
                 <para>Console.Write(worksheet.DefaultColumnWidth);</para>
                         
                 <para>//Set default width</para>
                 <para>worksheet.DefaultColumnWidth = 40;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DefaultColumnWidth.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Type">
            <summary>
            Returns or sets the worksheet type. Read-only ExcelSheetType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Range">
             <summary>
             Returns a Range object that represents the used range on the
             specified worksheet. Read-only.            
             <example>The following code illustrates how to get used range on the specified worksheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set Color</para>
                 <para>worksheet["J3"].Style.Color = Color.Red;</para>
                 
                 <para>//Get used range . Output will be B2:J3</para>
                 <para>Console.Write(worksheet.Range.RangeAddressLocal);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Zoom">
             <summary>
             Zoom factor of document. Value must be in range from 10 till 400.
             <example>The following code illustrates how to set zoom level of the sheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set zoom</para>
                 <para>worksheet.Zoom = 200;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Zoom.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.VerticalSplit">
            <summary>
            Gets or sets the position of vertical split in the worksheet.
            </summary>
            <remarks>
            Position of the vertical split (px, 0 = No vertical split):
            Unfrozen pane: Width of the left pane(s) (in twips = 1/20 of a point)
            Frozen pane: Number of visible columns in left pane(s)
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.HorizontalSplit">
            <summary>
            Gets or sets the position of horizontal split in the worksheet.
            </summary>
            <remarks>
            Position of the horizontal split (by, 0 = No horizontal split):
            Unfrozen pane: Height of the top pane(s) (in twips = 1/20 of a point)
            Frozen pane: Number of visible rows in top pane(s)
            </remarks>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.FirstVisibleRow">
            <summary>
            Index to first visible row in bottom pane(s).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.FirstVisibleColumn">
            <summary>
            Index to first visible column in right pane(s).
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.ActivePane">
            <summary>
            Identifier of pane with active cell cursor.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.IsDisplayZeros">
            <summary>
            True if zero values to be displayed
            False otherwise.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.GridLinesVisible">
             <summary>
             True if gridlines are visible;
             False otherwise.
             <example>The following code illustrates how to set visibility for grid lines:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set grid line visibility</para>
                 <para>worksheet.GridLinesVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GridLinesVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.GridLineColor">
             <summary>
             Gets / sets Grid line color.
             <example>The following code illustrates how to set the grid line color:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set grid lines color</para>
                 <para>worksheet.GridLineColor = ExcelColors.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GridLineColor.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.RowColumnHeadersVisible">
            <summary>
            True if row and column headers are visible;
            False otherwise.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.FormulasVisible">
            <summary>
            Gets or sets a value indicating whether the formulas are visible.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.VPageBreaks">
            <summary>
            Returns a VPageBreaks collection that represents the vertical page
            breaks on the sheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.HPageBreaks">
            <summary>
            Returns an HPageBreaks collection that represents the horizontal
            page breaks on the sheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.IsStringsPreserved">
            <summary>
            Indicates if all values in the workbook are preserved as strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Comments">
             <summary>
             Comments collection.            
             <example>The following code illustrates how to access the comments collection in the worksheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell.</para>
                 <para>ICommentShape comment1 = worksheet.Range["A1"].AddComment();</para>
                 <para>ICommentShape comment2 = worksheet.Range["B1"].AddComment();</para>
                         
                 <para>//Set comment text</para>
                 <para>comment1.Text = "Comment1";</para>
                 <para>comment2.Text = "Comment2";</para>
                 
                 <para>//Check count</para>
                 <para>Console.Write(worksheet.Comments.Count);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Comments.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets cell by row and index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cells range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.Item(System.String)">
            <summary>
            Get cell range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.HyperLinks">
            <summary>
            Collection of all worksheet's hyperlinks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.UseRangesCache">
            <summary>
            Indicates whether all created range objects should be cached. Default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.TopVisibleRow">
             <summary>
             Gets/sets top visible row of the worksheet.
             <example>The following code illustrates how to set the top visible row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set top visible row</para>
                 <para>worksheet.TopVisibleRow = 5;</para>
                         
                 <para>//Get top visible row</para>
                 <para>Console.Write(worksheet.TopVisibleRow);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("TopVisibleRow.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.LeftVisibleColumn">
             <summary>
             Gets/sets left visible column of the worksheet.
             <example>The following code illustrates how to set the left visible column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set left visible column</para>
                 <para>worksheet.LeftVisibleColumn = 3;</para>
                         
                 <para>//Get left visible column</para>
                 <para>Console.Write(worksheet.LeftVisibleColumn);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("LeftVisibleColumn.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.PivotTables">
            <summary>
            Returns pivot table collection containing all pivot tables in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.ListObjects">
            <summary>
            Gets collection of all list objects in the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.OleObjects">
             <summary>
             Gets the OLE objects.
             <example>The following code illustrates how to access the IListObjects collection in the worksheet to add a new IOleObject:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create image stream</para>
                 <para>System.Drawing.Image image = System.Drawing.Image.FromFile("image.png");</para>
                         
                 <para>//Add ole object</para>
                 <para>IOleObject oleObject = worksheet.OleObjects.Add("Shapes.xlsx", image, OleLinkType.Embed);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("OLEObjects.xlsx");</para>
             </code>
             </example>
             </summary>
             <value>The OLE objects.</value>
        </member>
        <member name="P:Spire.Xls.Core.IWorksheet.HasOleObjects">
             <summary>
             Gets or sets a value indicating whether this instance is OLE object.
             <example>The following code illustrates how to access the IListObjects collection in the worksheet to add a new IOleObject and check Ole Object:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create image stream</para>
                 <para>System.Drawing.Image image = System.Drawing.Image.FromFile("image.png");</para>
                         
                 <para>//Add ole object</para>
                 <para>IOleObject oleObject = worksheet.OleObjects.Add("Shapes.xlsx", image, OleLinkType.Embed);</para>
                 
                 <para>//Check HasOleObject.Output will be true.</para>
                 Console.Write(worksheet.HasOleObjects);
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("HasOleObjects.xlsx");</para>
             </code>
             </example>
             </summary>
             <value>
             	<c>true</c> if this instance is OLE object; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Clear">
            <summary>
            Clears worksheet data. Removes all formatting and merges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.ClearData">
            <summary>
            Clears worksheet. Only the data is removed from each cell.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.CheckExistence(System.Int32,System.Int32)">
             <summary>
             Indicates whether a cell was initialized or accessed by the user.
             <example>The following code illustrates if the cells was initialized or accessed by the user:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet.Range["A1"].Text = "Hello";</para>
                 
                 <para>//Check the cell.Output will be true.</para>
                 <para>Console.Write(worksheet.CheckExistence(1, 1));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CheckExistence.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iRow">One-based row index of the cell.</param>
             <param name="iColumn">One-based column index of the cell.</param>
             <returns>Value indicating whether the cell was initialized or accessed by the user.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.CreateNamedRanges(System.String,System.String,System.Boolean)">
            <summary>
            Creates object that can be used for template markers processing.
            <param name="namedRange">Names to create</param>
            <param name="referRange">Refers to range</param>
            <param name="vertical">True if the named range values are vertically placed in the sheet.</param>
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.IsColumnVisible(System.Int32)">
            <summary>
            Method check is Column with specifed index visible to end user or not.
            </summary>
            <param name="columnIndex">Index of column.</param>
            <returns>True - column is visible; otherwise False.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.IsRowVisible(System.Int32)">
            <summary>
            Method check is Row with specifed index visible to user or not.
            </summary>
            <param name="rowIndex">Index of row visibility of each must be checked.</param>
            <returns>True - row is visible to user, otherwise False.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.DeleteRow(System.Int32)">
            <summary>
            Removes specified row (with formulas update).
            </summary>
            <param name="index">One-based row index to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Removes specified column (with formulas update).
            </summary>
            <param name="index">One-based column index to remove.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of objects into a worksheet.
             <example>The following code illustrates how to Imports an array of Object into a worksheet with specified alignment:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the Object Array</para>
                 <para>object[] array = new object[4] { "Total Income", "Actual Expense", "Expected Expenses", "Profit" };</para>
                         
                 <para>//Insert the Object Array to Sheet</para>
                 <para>worksheet.InsertArray(array, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrObject">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.String[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of strings into a worksheet.
             <example>The following code illustrates how to Imports an array of String into a worksheet with specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the string Array</para>
                 <para>string[] arrayString = new string[4] { "Total Income", "Actual Expense", "Expected Expenses", "Profit" };</para>
                         
                 <para>//Insert the string Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayString, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrString">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.Int32[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of integers into a worksheet.
             <example>The following code illustrates how to Imports an array of integer values into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the integer Array</para>
                 <para>int[] arrayInt = new int[4] {1000, 2000, 3000, 4000};</para>
                         
                 <para>//Insert the integer Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayInt, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrInt">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.Double[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of doubles into a worksheet.
             <example>The following code illustrates how to Imports an array of Double values into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the double Array</para>
                 <para>double[] arrayDouble = new double[4] { 344.0045, 345.0045, 346.0045, 347.0045 };</para>
                         
                 <para>//Insert the double Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayDouble, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrDouble">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.DateTime[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports an array of DateTimes into worksheet.
             <example>The following code illustrates how to Imports an array of DateTime values into a worksheet with the specified row and colum:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the DateTime Array</para>
                 <para>DateTime[] arrayDate = new DateTime[4] { DateTime.Parse("06:45"), DateTime.Parse("08:30"), DateTime.Parse("09:40"), DateTime.Parse("10:30") };</para>
                         
                 <para>//Insert the DateTime Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayDate, 1, 1, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrDateTime">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
             <returns>Number of imported elements.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertArray(System.Object[0:,0:],System.Int32,System.Int32)">
             <summary>
             Imports an array of objects into a worksheet.
             <example>The following code illustrates how to Imports a two-dimensional array of Object into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Initialize the Object Array</para>
                 <para>object[,] arrayTwoDimen = new object[3, 2] { { "AND", "OR" }, { "NAND", "XOR" },{ "NOR", "NOT" } };</para>
                         
                 <para>//Insert the Object Array to Sheet</para>
                 <para>worksheet.InsertArray(arrayTwoDimen, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertArray.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="arrObject">Array to import.</param>
             <param name="firstRow">Row of the first cell where array should be imported.</param>
             <param name="firstColumn">Column of the first cell where array should be imported.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataColumn(System.Data.DataColumn,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataColumn into worksheet.
             <example>The following code illustrates how to Imports data from a DataColumn into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataColumn to worksheet</para>
                 <para>System.Data.DataColumn column = table.Columns[2];</para>
                 <para>worksheet.InsertDataColumn(column, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataColumn.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataColumn">DataColumn with desired data.</param>
             <param name="isFieldNameShown">True if column name must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataTable should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataTable should be imported.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable with desired data.</param>
             <param name="isFieldNameShown">True if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataTable should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataTable should be imported.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified row and column along with the preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1, 1 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable with desired data.</param>
             <param name="isFieldNameShown">True if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataTable should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataTable should be imported.</param>
             <param name="preserveTypes">
             Indicates whether XlsIO should try to preserve types in DataTable,
             i.e. if it is set to False (default) and in DataTable we have in string column
             value that contains only numbers, it would be converted to number.
             </param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1 , 1 , 2 , 2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable with desired data.</param>
             <param name="isFieldNameShown">True if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataTable should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataTable should be imported.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataTable into worksheet.
             <example>The following code illustrates how to Imports data from a DataTable into a worksheet with specified range along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                         
                 <para>//Insert the DataTable to worksheet</para>
                 <para>worksheet.InsertDataTable(table, true, 1 , 1 , 2 , 2 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataTable.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataTable">DataTable with desired data.</param>
             <param name="isFieldNameShown">True if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataTable should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataTable should be imported.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <param name="preserveTypes">
             Indicates whether XlsIO should try to preserve types in DataTable,
             i.e. if it is set to False (default) and in DataTable we have in string column
             value that contains only numbers, it would be converted to number.
             </param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified row and column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">DataView with desired data.</param>
             <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataView should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified specified row and column along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">DataView with desired data.</param>
             <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataView should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
             <param name="bPreserveTypes">Indicates whether to preserve column types.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , 2 , 2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">DataView with desired data.</param>
             <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataView should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <returns>Number of imported rows.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.InsertDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Imports data from a DataView into worksheet.
             <example>The following code illustrates how to Imports data from a DataView into a worksheet with the specified range along with preserve type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create a DataTable</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("ID", typeof(int));
                 table.Columns.Add("Item", typeof(string));
                 table.Columns.Add("Name", typeof(string));</para>
                 <para>table.Rows.Add(1, "Soap", "David");
                 table.Rows.Add(2, "Paste", "Sam");
                 table.Rows.Add(3, "Cream", "Christoff");</para>
                   
                 <para>//Initialize dataview of datatable</para>
                 <para>System.Data.DataView view = table.DefaultView;</para>
                 
                 <para>//Import data from DataView</para>
                 <para>worksheet.InsertDataView(view, true, 1, 1 , 2 , 2 , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile(InsertDataView.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="dataView">DataView with desired data.</param>
             <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
             <param name="firstRow">Row of the first cell where DataView should be imported.</param>
             <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
             <param name="maxRows">Maximum number of rows to import.</param>
             <param name="maxColumns">Maximum number of columns to import.</param>
             <param name="bPreserveTypes">Indicates whether to preserve column types.</param>
             <returns>Number of imported rows</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.RemovePanes">
            <summary>
            Removes panes from a worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Protect(System.String)">
             <summary>
             Protects worksheet's content with password.
             <example>The following code illustrates how to protect the sheet except select lock/unlock cells:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Protects the first worksheet's content with password</para>
                 <para>worksheet.Protect("123456");</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Protect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="password">Password to protect with.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Unprotect(System.String)">
            <summary>
            Unprotects worksheet's content with password.
            </summary>
            <param name="password">Password to unprotect.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.AutoFitRow(System.Int32)">
             <summary>
             Autofits specified row.
             <example>The following code illustrates how to Auto-fit the row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Value = "Sample text";</para>
                         
                 <para>//Set Style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.Size = 18;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitRow(2);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitRow.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">One-based row index.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.AutoFitColumn(System.Int32)">
             <summary>
             Autofits specified column.
             <example>The following code illustrates how to Auto-fit the column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
                 
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitColumn(1);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AutoFitColumn.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">One-based column index.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.String)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code snippet illustrates how to replace the string with another string:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by newValue</para>
                 <para>string oldValue = "Find";</para>
                 <para>string newValue = "NewValue";</para>
                 <para>worksheet.Replace(oldValue, newValue);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.Double)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code snippet illustrates how to replace the string with double:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by double</para>
                 <para>string oldValue = "Ten";</para>
                 <para>worksheet.Replace(oldValue, 10.0);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.DateTime)">
             <summary>
             Replaces specified string by specified value.
             <example>The following code illustrates how to replace the string value with datetime:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by dateTime</para>
                 <para>string oldValue = "Find";</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>worksheet.Replace(oldValue, dateTime);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValue">New value for the range with specified string.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.String[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of string values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of string values</para>
                 <para>string oldValue = "Find";</para>
                 <para>string[] newValues = { "X values", "Y values" };</para>
                 <para>worksheet.Replace(oldValue, newValues , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.Int32[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of int values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of int values</para>
                 <para>string oldValue = "Find";</para>
                 <para>int[] newValues = { 1, 2 };</para>
                 <para>worksheet.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.Double[],System.Boolean)">
             <summary>
             Replaces specified string by data from array.
             <example>The following code snippet illustrates how to replace the string with array of double values:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by array of double values</para>
                 <para>string oldValue = "Find";</para>
                 <para>double[] newValues = { 1.0, 2.0 };</para>
                 <para>worksheet.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Array of new values.</param>
             <param name="isVertical">Indicates whether array should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Replaces specified string by data table values.
             <example>The following code snippet illustrates how to replace the string value with data table:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by data table</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>worksheet.Replace(oldValue, table, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Data table with new data.</param>
             <param name="isFieldNamesShown">Indicates wheter field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Replace(System.String,System.Data.DataColumn,System.Boolean)">
             <summary>
             Replaces specified string by data column values.
             <example>The following code snippet illustrates how to replace the string value with data column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Replace the oldValue by data column</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>System.Data.DataColumn dataColumn = table.Columns[0];</para>
                 <para>worksheet.Replace(oldValue, dataColumn, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">String value to replace.</param>
             <param name="newValues">Data table with new data.</param>
             <param name="isFieldNamesShown">Indicates whether field name must be shown.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.Remove">
            <summary>
            Removes worksheet from parent worksheets collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.MoveWorksheet(System.Int32)">
            <summary>
            Moves worksheet.
            </summary>
            <param name="iNewIndex">New index of the worksheet.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.ColumnWidthToPixels(System.Double)">
            <summary>
            Converts column width into pixels.
            </summary>
            <param name="widthInChars">Width in characters.</param>
            <returns>Width in pixels</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.PixelsToColumnWidth(System.Double)">
            <summary>
            Converts pixels into column width (in characters).
            </summary>
            <param name="pixels">Width in pixels</param>
            <returns>Widht in characters.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetColumnWidthInPixels(System.Int32,System.Int32)">
             <summary>
             Sets column width in pixels.
             <example>The following code illustrates how to set width for a column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set column width</para>
                 <para>worksheet.SetColumnWidthInPixels(2, 160);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetColumnWidthInPixels.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">One-based column index.</param>
             <param name="value">Width to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetRowHeightPixels(System.Int32,System.Double)">
             <summary>
             Sets row height in pixels.
             <example>The following code illustrates how to set height for a row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set row height</para>
                 <para>worksheet.SetRowHeightPixels(3, 150);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetRowHeightPixels.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="Row">One-based row index to set height.</param>
             <param name="value">Value in pixels to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetColumnWidthPixels(System.Int32)">
             <summary>
             Returns width in pixels from ColumnInfoRecord if there is corresponding ColumnInfoRecord
             or StandardWidth if not.
             <example>The following code illustrates how to get the column width for a particular column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["A1"].Text = "Sample text in cell";</para>
                         
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitColumn(1);</para>
                 
                 <para>//Get column width</para>
                 <para>Console.WriteLine(worksheet.GetColumnWidthPixels(1));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="Column">One-based index of the column.</param>
             <returns>Width in pixels of the specified column.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetRowHeightPixels(System.Int32)">
             <summary>
             Returns height from RowRecord if there is a corresponding RowRecord.
             Otherwise returns StandardHeight. 
             <example>The following code illustrates how to get the row height for a particular row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample text";</para>
                 <para>worksheet["C2"].Style.Font.Size = 18;</para>
                         
                 <para>//Set auto fit</para>
                 <para>worksheet.AutoFitRow(2);</para>
                 
                 <para>//Get row height</para>
                 <para>Console.WriteLine(worksheet.GetRowHeightPixels(2));</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="Row">One-bazed index of the row.</param>
             <returns>
             Height in pixels from RowRecord if there is corresponding RowRecord.
             Otherwise returns StandardHeight.
             </returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToFile(System.String,System.String)">
            <summary>
            Save tabsheet using separator.
            </summary>
            <example>The following code illustrates how to saves the worksheet in a different file with separator:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to file</para>
                <para>worksheet.SaveToFile("SaveToFile.csv" , ",");</para>
            </code>
            </example>
            <param name="fileName">File to save.</param>
            <param name="separator">Current seperator.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToStream(System.IO.Stream,System.String)">
            <summary>
            Save tabsheet using separator.
            <example>The following code illustrates how to saves the worksheet as stream with separator:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Create stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to stream</para>
                <para>worksheet.SaveToStream(stream , ",");</para> 
            </code>
            </example>
            </summary>
            <param name="stream">Stream to save. </param>
            <param name="separator">Current seperator.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetDefaultColumnStyle(System.Int32,Spire.Xls.Core.IStyle)">
             <summary>
             Sets by column index default style for column.
             <example>The following code illustrates how to set the default style for a column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iColumnIndex">Column index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetDefaultColumnStyle(System.Int32,System.Int32,Spire.Xls.Core.IStyle)">
             <summary>
             Sets by column index default style for column.
             <example>The following code illustrates how to set the default style for columns:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2, 5, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iStartColumnIndex">Start column index.</param>
             <param name="iEndColumnIndex">End column index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetDefaultRowStyle(System.Int32,Spire.Xls.Core.IStyle)">
             <summary>
             Sets by column index default style for row.
             <example>The following code illustrates how to set the default style for a row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultRowStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetDefaultRowStyle(System.Int32,System.Int32,Spire.Xls.Core.IStyle)">
             <summary>
             Sets by column index default style for row.
             <example>The following code illustrates how to set the default style for rows:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2, 5, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultRowStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iStartRowIndex">Start row index.</param>
             <param name="iEndRowIndex">End row index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetDefaultColumnStyle(System.Int32)">
             <summary>
             Returns default column style.
             <example>The following code illustrates how to get default column style:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2,style);</para>
                 
                 <para>//Get default style</para>
                 <para>CellStyle defaultStyle = worksheet.GetDefaultColumnStyle(2);</para>
                 
                 <para>//Set color</para>
                 <para>defaultStyle.Color = Color.Blue;</para>
                 <para>worksheet.SetDefaultColumnStyle(3, defaultStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="iColumnIndex">Column index.</param>
             <returns>Default column style or null if style wasn't set.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetDefaultRowStyle(System.Int32)">
             <summary>
             Returns default row style.
             <example>The following code illustrates how to get default row style:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2,style);</para>
                 
                 <para>//Get default style</para>
                 <para>CellStyle defaultStyle = worksheet.GetDefaultRowStyle(2);</para>
                 
                 <para>//Set color</para>
                 <para>defaultStyle.Color = Color.Blue;</para>
                 <para>worksheet.SetDefaultRowStyle(3, defaultStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <returns>Default row style or null if style wasn't set.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetNumber(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetBoolean(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets value in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetText(System.Int32,System.Int32,System.String)">
            <summary>
            Sets text in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Text to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetFormula(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Formula to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetError(System.Int32,System.Int32,System.String)">
            <summary>
            Sets error in the specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
            <param name="value">Error to set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetBlank(System.Int32,System.Int32)">
            <summary>
            Sets blank in specified cell.
            </summary>
            <param name="iRow">One-based row index  of the cell to set value.</param>
            <param name="iColumn">One-based column index of the cell to set value.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetFormulaNumberValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets formula number value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula number value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetFormulaErrorValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula error value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula error value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetFormulaBoolValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets formula bool value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula bool value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SetFormulaStringValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula string value.
            </summary>
            <param name="iRow">One based row index.</param>
            <param name="iColumn">One based column index.</param>
            <param name="value">Represents formula string value for set.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetText(System.Int32,System.Int32)">
            <summary>
            Returns string value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetNumber(System.Int32,System.Int32)">
            <summary>
            Returns number value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>Number contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetFormula(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns formula value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <param name="bR1C1">Indicates whether R1C1 notation should be used.</param>
            <returns>Formula contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetError(System.Int32,System.Int32)">
            <summary>
            Gets error value from cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Returns error value or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetBoolean(System.Int32,System.Int32)">
            <summary>
            Gets bool value from cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Returns found bool value. If cannot found returns false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetFormulaBoolValue(System.Int32,System.Int32)">
            <summary>
            Gets formula bool value from cell.
            </summary>
            <param name="row">Represents row index.</param>
            <param name="column">Represents column index.</param>
            <returns>Returns found bool value. If cannot found returns false.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetFormulaErrorValue(System.Int32,System.Int32)">
            <summary>
            Gets formula error value from cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Returns error value or null.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetFormulaNumberValue(System.Int32,System.Int32)">
            <summary>
            Returns formula number value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>Number contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.GetFormulaStringValue(System.Int32,System.Int32)">
            <summary>
            Returns formula string value corresponding to the cell.
            </summary>
            <param name="row">One-based row index of the cell to get value from.</param>
            <param name="column">One-based column index of the cell to get value from.</param>
            <returns>String contained by the cell.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts range into image (Bitmap).
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.ImageType)">
             <summary>
             Converts range into image.
             <example>The following code illustrates how to convert the specified range into image with the specified type:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Creat stream</para>
                 <para>Stream stream = new MemoryStream();</para>
                 
                 <para>//Save to image</para>
                 <para>System.Drawing.Image image = worksheet.SaveToImage(stream,1, 1, 10, 20, Spire.Xls.ImageType.Bitmap);</para>
                 <para>image.Save("Sample.png", System.Drawing.Imaging.ImageFormat.Png);</para>
             </code>
             </example>
             </summary>
             <param name="firstRow">One-based index of the first row to convert.</param>
             <param name="firstColumn">One-based index of the first column to convert.</param>
             <param name="lastRow">One-based index of the last row to convert.</param>
             <param name="lastColumn">One-based index of the last column to convert.</param>
             <param name="imageType">Type of the image to create.</param>
             <param name="stream">Output stream. It is ignored if null.</param>
             <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToHtml(System.String)">
            <summary>
            Saves worksheet with specified filename.
            <example>The following code snippets illustrates how to save as html to the specified file name:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to HTML file</para>
                <para>worksheet.SaveToHtml("Output.html");</para>
            </code>
            </example>
            </summary>
            <param name="filename">File to save.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToHtml(System.IO.Stream)">
            <summary>
            Save to HTML stream.
            <example>The following code snippets illustrates how to save as html as stream:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Creat stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to HTML stream</para>
                <para>worksheet.SaveToHtml(stream);</para>
            </code>
            </example>
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToHtml(System.String,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves as HTML.
            <example>The following code snippets illustrates how to save as html to the specified file name and save option:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Save to HTML file</para>
                <para>worksheet.SaveToHtml("Sample.html" , Spire.Xls.Core.Spreadsheet.HTMLOptions.Default);</para>
            </code>
            </example>
            </summary>
            <param name="filename">The filename.</param>
            <param name="saveOptions">The option.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToHtml(System.IO.Stream,Spire.Xls.Core.Spreadsheet.HTMLOptions)">
            <summary>
            Saves work sheet to HTML.
            <example>The following code snippets illustrates how to save as html as stream with Save option:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Creat stream</para>
                <para>Stream stream = new MemoryStream();</para>
                
                <para>//Save to HTML stream</para>
                <para>worksheet.SaveToHtml(stream, Spire.Xls.Core.Spreadsheet.HTMLOptions.Default);</para>
            </code>
            </example>
            </summary>
            <param name="stream">Stream to save.</param>
            <param name="saveOptions">Save Options.</param>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts range into metafile image.
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="emfType">Metafile EmfType.</param>
            <param name="outputStream">Output stream. It is ignored if null.</param>
            <returns>Created image.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IWorksheet.SaveToImage(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.ImageType,System.Drawing.Imaging.EmfType)">
            <summary>
            Converts range into image.
            </summary>
            <param name="firstRow">One-based index of the first row to convert.</param>
            <param name="firstColumn">One-based index of the first column to convert.</param>
            <param name="lastRow">One-based index of the last row to convert.</param>
            <param name="lastColumn">One-based index of the last column to convert.</param>
            <param name="imageType">Type of the image to create.</param>
            <param name="outputStream">Output stream. It is ignored if null.</param>
            <param name="emfType">Metafile EmfType.</param>
            <returns>Created image.</returns>
        </member>
        <member name="E:Spire.Xls.Core.IWorksheet.CellValueChanged">
            <summary>
            Occurs when the value of a cell changes.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IAutoFilters">
            <summary>
            Represents a collection of Autofilters.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilters.Range">
            <summary>
            Range to be filtered.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilters.Count">
            <summary>
            Number of columns to be filtered. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilters.Item(System.Int32)">
            <summary>
            Returns single autofilter object by column index. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IAutoFilter">
            <summary>
            Represents autofiltering for the specified worksheet..
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.FirstCondition">
            <summary>
            First condition of autofilter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.SecondCondition">
            <summary>
            Second condition of autofilter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsFiltered">
            <summary>
            False indicates that this autofilter was not used; otherwise True.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsAnd">
            <summary>
            True means to use AND operation between conditions,
            False to use OR. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsTop10Percent">
            <summary>
            True if the Top 10 AutoFilter shows percentage;
            False if it shows items. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsSimple1">
            <summary>
            True if the first condition is a simple equality. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsSimple2">
            <summary>
            True if the second condition is a simple equality. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.ShowTopItem">
            <summary>
            True if the Top 10 AutoFilter shows the top items;
            False if it shows the bottom items. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.IsTop10Items">
            <summary>
            True if the condition is a Top 10 AutoFilter. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilter.Top10Items">
            <summary>
            Number of elements to show in Top10 mode. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IConditionalFormats">
            <summary>
            Represents a collection of conditional formats.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormats.Count">
            <summary>
            Returns number of elements in the collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormats.Item(System.Int32)">
            <summary>
            Returns single element from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormats.AddCondition">
            <summary>
            Adds new condition to the collection.
            </summary>
            <returns>Newly added condition.</returns>
        </member>
        <member name="M:Spire.Xls.Core.IConditionalFormats.RemoveAt(System.Int32)">
            <summary>
            Removes the conditional formatting at the specified Index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IColorConditionValue">
            <summary>
            Condition value for color scale conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IColorConditionValue.FormatColor">
            <summary>
            The color assigned to the threshold of a color scale conditional format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IColorScale">
            <summary>
            This interface provides access to the color scale condition in the conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IColorScale.Criteria">
            <summary>
            Returns a collection of individual IColorConditionValue objects.
            The IColorConditionValue object specifies the type, value, and the color
            of threshold criteria used in the color scale conditional format. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Core.IColorScale.SetConditionCount(System.Int32)">
            <summary>
            Sets number of IColorConditionValue objects in the collection. Supported values are 2 and 3.
            </summary>
            <param name="count">Number of conditions.</param>
        </member>
        <member name="T:Spire.Xls.Core.IConditionalFormat">
            <summary>
            Contains a condition and the formatting attributes applied 
            to the cells, if the condition is met.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.FormatType">
            <summary>
            Type of the conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.Operator">
            <summary>
            Type of the comparison operator.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IsBold">
            <summary>
            Indicates whether the font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IsItalic">
            <summary>
            Indicates whether font is italic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.Priority">
            <summary>
            Priority.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.FontKnownColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.Underline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IsStrikeThrough">
            <summary>
            Indicates whether font is struck through.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.LeftBorderKnownColor">
            <summary>
            Color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.LeftBorderColor">
            <summary>
            Color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.LeftBorderStyle">
            <summary>
            Left border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.RightBorderKnownColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.RightBorderColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.RightBorderStyle">
            <summary>
            Right border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.TopBorderKnownColor">
            <summary>
            Color of the top line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.TopBorderColor">
            <summary>
            Color of the top line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.TopBorderStyle">
            <summary>
            Top border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.BottomBorderKnownColor">
            <summary>
            Color of the bottom line.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.BottomBorderColor">
            <summary>
            Color of the bottom line
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.BottomBorderStyle">
            <summary>
            Bottom border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.FirstFormula">
            <summary>
            First formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.SecondFormula">
            <summary>
            Second formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.KnownColor">
            <summary>
            Pattern foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.Color">
            <summary>
            Pattern foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.BackKnownColor">
            <summary>
            Pattern background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.BackColor">
            <summary>
            Pattern background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.FillPattern">
            <summary>
            XlsFill pattern style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IsSuperScript">
            <summary>
            Indicates whether font is superscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IsSubScript">
            <summary>
            Indicates whether font is subscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.DataBar">
            <summary>
            Returns data bar settings. Valid only if FormatType is set to DataBar. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.IconSet">
            <summary>
            Returns iconset settings. Valid only if FormatType is set to IconSet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IConditionalFormat.ColorScale">
            <summary>
            Returns color scale settings. Valid only if FormatType is set to ColorScale. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IDataBar">
            <summary>
            Represents a data bar conditional formating rule. Applying a data bar to a
            range helps you see the value of a cell relative to other cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.MinPoint">
            <summary>
            Returns a ConditionValue object which specifies how the shortest bar is evaluated
            for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.MaxPoint">
            <summary>
            Returns a ConditionValue object which specifies how the longest bar is evaluated
            for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.BarColor">
            <summary>
            Gets/sets the color of the bars in a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.PercentMax">
            <summary>
            Returns or sets a value that specifies the length of the longest
            data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.PercentMin">
            <summary>
            Returns or sets a value that specifies the length of the shortest
            data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IDataBar.ShowValue">
            <summary>
            Returns or sets a Boolean value that specifies if the value in the cell
            is displayed if the data bar conditional format is applied to the range.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IIconSet">
            <summary>
            This interface provides access to Conditional formatting icon set condition.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IIconSet.IconCriteria">
            <summary>
            Returns an IconCriteria collection which represents the set of criteria for
            an icon set conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IIconSet.IconSet">
            <summary>
            Returns or sets an IconSets collection which specifies the icon set used
            in the conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IIconSet.PercentileValues">
            <summary>
            Returns or sets a Boolean value indicating if the thresholds for an icon
            set conditional format are determined using percentiles. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IIconSet.IsReverseOrder">
            <summary>
            Returns or sets a Boolean value indicating if the order of icons is
            reversed for an icon set.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IIconSet.ShowIconOnly">
            <summary>
            Returns or sets a Boolean value indicating if only the icon is displayed
            for an icon set conditional format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Core.IAutoFilterCondition">
            <summary>
            Represents the autofilter conditions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.DataType">
            <summary>
            Data type. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.ConditionOperator">
            <summary>
            Comparison operator. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.String">
            <summary>
            String value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.Boolean">
            <summary>
            Boolean value. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.ErrorCode">
            <summary>
            Error code. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Core.IAutoFilterCondition.Double">
            <summary>
            Floating-point value. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartFormatCollection">
            <summary>
            Represents a collection of chart format settings.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartFormatCollection.Add(Spire.Xls.Charts.ChartFormat)">
            <summary>
            Adds a chart format to the collection.
            </summary>
            <param name="format">The chart format to add.</param>
        </member>
        <member name="M:Spire.Xls.Charts.ChartFormatCollection.GetFormat(System.Int32)">
            <summary>
            Retrieves the chart format at the specified index.
            </summary>
            <param name="index">The zero-based index of the chart format to retrieve.</param>
            <returns>The ChartFormat object at the specified index.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartFormatCollection.Remove(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the number of elements in the list.</exception>
        </member>
        <member name="P:Spire.Xls.Charts.ChartFormatCollection.Item(System.Int32)">
            <summary>
            Gets chart format.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartArea">
            <summary>
            Represents a chart area in a charting application, which is responsible for defining the plotting area for data series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartArea.Border">
            <summary>
            Represents chart border. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartArea.Interior">
            <summary>
            Represents chart interior. Read only.
            <example>The following code illustrates the use of Interior property:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Create chart and set range</para>
                <para>IChart chart = worksheet.Charts.Add();</para>
                <para>chart.DataRange = worksheet.Range["B2:C6"];</para>
                
                <para>//Set chart type</para>
                <para>chart.ChartType = ExcelChartType.Column3DClustered;</para>
                
                <para>//Gets interior formatting properties for the chart element</para>
                <para>IChartInterior chartInterior = chart.ChartArea.Interior;</para>
                <para>chartInterior.BackgroundColor = Color.Beige;</para>
                <para>chartInterior.Pattern = ExcelPatternType.DarkDownwardDiagonal;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartBorder">
            <summary>
            Represents the border settings for a chart, including properties to define its color, width, and style.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartCategoryAxis">
            <summary>
            Represents the category axis of a chart, which is used to display categorical data.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartCategoryAxis.CategoryLabels">
            <summary>
            Category labels for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartCategoryAxis.Font">
            <summary>
            Gets font used for axis text displaying.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartCategoryAxis.TitleArea">
            <summary>
            Returns text area for the axis title. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartCategoryAxis.MajorGridLines">
            <summary>
            Returns a ChartGridLine object that represents the major gridlines for the specified axis. Only axes in the primary axis group can have gridlines
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartCategoryAxis.MinorGridLines">
            <summary>
            Returns a ChartGridLine object that represents the minor gridlines for the specified axis. Only axes in the primary axis group can have gridlines.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartDataLabels">
            <summary>
            Represents the data labels for a chart, which can include options for formatting and displaying the data associated with each data point.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataLabels.Format">
            <summary>
            Gets data format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataLabels.TextArea">
            <summary>
            Gets or sets text area.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartDataPoint">
            <summary>
            Represents a single data point in a chart, containing properties such as X and Y values.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataPoint.DataFormat">
            <summary>
            Gets data format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataPoint.DataLabels">
            <summary>
            Gets data labels object for the data point. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartDataTable">
            <summary>
            Represents a data table used for storing and managing data that can be visualized in a chart.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartDropBar">
            <summary>
            Represents a chart component designed to display drop bar charts, which are useful for visualizing the change in values over a period of time or across different categories.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartFormat">
            <summary>
            Represents the formatting options for a chart, including settings for appearance, labels, and data presentation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartFormat.DataFormatOrNull">
            <summary>
            Returns dataformat or null; Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartFormat.FirstDropBar">
            <summary>
            Gets first drop bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartFormat.PieSeriesLine">
            <summary>
            Represents series line properties. ( For pie of pie or pie of bar chart types only. ) Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartFormat.SecondDropBar">
            <summary>
            Returns object that represents second drop bar.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartGridLine">
            <summary>
            Represents a grid line in a chart, which can be customized for appearance and behavior within the chart's grid.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartGridLine.Border">
            <summary>
            Gets line border. Read only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartInterior">
            <summary>
            Represents the interior properties of a chart, such as background color and gradient settings.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartLegend">
            <summary>
            Represents the legend of a chart, providing information about the data series displayed in the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartLegend.TextArea">
            <summary>
            Return text area of legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartLegend.LegendEntries">
            <summary>
            Represents legend entries collection. Read only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartLegendEntry">
            <summary>
            Represents an entry in a chart legend, which includes details about a specific data series or category.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartLegendEntry.TextArea">
            <summary>
            Returns text area. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartPageSetup">
            <summary>
            Represents the page setup settings for a chart, including properties such as margins, orientation, and paper size.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartPlotArea">
            <summary>
            Represents the plot area of a chart, which is the area where the data series are drawn.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartPlotArea.Border">
            <summary>
            Represents chart border. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartPlotArea.Interior">
            <summary>
            Represents frame interior. Read only
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartPlotArea.Workbook">
            <summary>
            Represents a new workbook instance.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartSerie">
            <summary>
            Represents a series of data in a chart, containing the data points and related configuration settings for display.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.DataPoints">
            <summary>
            Returns data points collection for the chart series. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.CategoryLabels">
            <summary>
            Category labels for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.Bubbles">
            <summary>
            Bubble sizes for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.Values">
            <summary>
            Values range for the series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.Format">
            <summary>
            Returns serie format.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.DataFormat">
            <summary>
            Returns data format. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSerie.GetSerieNameRange">
            <summary>
            Gets serie name range.
            </summary>
            <returns>Returns range, that represents serie name range. Can be null.</returns>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerie.DataLabels">
            <summary>
            Gets or sets the data labels associated with the chart series, overriding any base class implementation.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartSerieDataFormat">
            <summary>
            Represents the data format for a series in a chart, including properties such as labels, values, and formatting options.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerieDataFormat.AreaProperties">
            <summary>
            Returns object, that represents aera properties. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerieDataFormat.LineProperties">
            <summary>
            Returns object, that represents line properties. Read only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSerieDataFormat.ParentSerie">
            <summary>
            Returns parent serie. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartSeriesAxis">
            <summary>
            Represents the axis configuration for a series in a chart, defining properties such as labels, range, and scale.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeriesAxis.Font">
            <summary>
            Returns font used for axis text displaying. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeriesAxis.MajorGridLines">
            <summary>
            Returns major gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeriesAxis.MinorGridLines">
            <summary>
            Returns minor gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeriesAxis.TitleArea">
            <summary>
            Returns text area for the axis title. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartTextArea">
            <summary>
            Represents a text area within a chart used for displaying textual information such as labels, descriptions, or annotations.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Text">
            <summary>
            Area's text.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.TextRotationAngle">
            <summary>
            Text rotation angle.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.FrameFormat">
            <summary>
            Return format of the text area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.BackgroundMode">
            <summary>
            Display mode of the background.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsAutoMode">
            <summary>
            True if background is set to automatic.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Parent">
            <summary>
            Gets the parent of the textarea.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsBold">
            <summary>
            True if the font is bold. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.KnownColor">
            <summary>
            Returns or sets the primary color of the object, as shown in the
            following table. Use the RGB function to create a color value.
            Read / write Integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Color">
            <summary>
            Gets / sets font color. Searches for the closestes color in 
            the workbook palette.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Size">
            <summary>
            Returns or sets the size of the font. Read / write Variant.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.StrikethroughType">
            <summary>
            Strikethrough Type.
            Read / write sngStrike dblStrike
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Underline">
            <summary>
            Returns or sets the type of underline applied to the font. Can
            be one of the following FontUnderlineTypeStyle constants.
            Read / write FontUnderlineType.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.VerticalAlignment">
            <summary>
            Gets / sets font vertical alignment.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsAutoColor">
            <summary>
            Indicates whether color is automatically selected. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.GenerateNativeFont">
            <summary>
            Generates .Net font object corresponding to the current font.
            </summary>
            <returns>Generated .Net font.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.OColor">
            <summary>
            Returns textarea's color object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.ParagraphType">
            <summary>
            Represents the TextArea Paragraph 
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasTextRotation">
            <summary>
            Gets value indicating whether TextRotation was changed. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsResizeShapeToFitText">
            <summary>
            Gets or sets a value indicating whether the shape should be resized to fit the text.
            </summary>
            <returns>
            A boolean value. True if the shape is resized to fit the text, otherwise false.
            </returns>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsTextWrapped">
            <summary>
            Determines whether the text within the control is wrapped to fit within the control's bounds.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Delimiter">
            <summary>
            Delimeter.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasBubbleSize">
            <summary>
            Indicates whether buble size is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasCategoryName">
            <summary>
            Indicates whether category name is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasLegendKey">
            <summary>
            Indicates whether legend key is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasPercentage">
            <summary>
            Indicates whether percentage is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasSeriesName">
            <summary>
            Indicates whether series name is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasValue">
            <summary>
            Indicates whether value is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Position">
            <summary>
            Represents data labels position.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.ShowLeaderLines">
            <summary>
            Indicates whether Leader Lines is in data labels.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.NumberFormat">
            <summary>
            Gets or sets number format for the text area.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HasDataLabels">
            <summary>
            Indicates whether contain dataLabels .
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.HorizontalAlignType">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Index">
            <summary>
            Returns font index. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsShowLabelPercent">
            <summary>
            Indicates whether to show category label and value as percentage.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.IsTrend">
            <summary>
            Indicates if current text assign to trend object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.NumberFormatIndex">
            <summary>
            Gets index to the number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.ParentWorkbook">
            <summary>
            Returns parent workbook object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.X">
            <summary>
            Represents the X coordinate of a point in a 2D space.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Y">
            <summary>
            Represents the Y-coordinate of a point in a 2D space.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.SetFont(Spire.Xls.ExcelFont)">
            <summary>
            Sets internal font according to the font.
            </summary>
            <param name="font">Font to set.</param>
        </member>
        <member name="P:Spire.Xls.Charts.ChartTextArea.Font">
            <summary>
            Returns FontImpl for current font. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.Clone(System.Object,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Clone current record.
            </summary>
            <param name="parent">The object to be cloned.</param>
            <param name="fontIndexes">A dictionary mapping old font indexes to new font indexes.</param>
            <param name="dicNewSheetNames">A dictionary mapping old sheet names to new sheet names.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartTextArea.Clone(System.Object)">
            <summary>
            Creates object that is copy of the current instance.
            </summary>
            <param name="parent">Parent object for create new instance.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="T:Spire.Xls.Charts.ChartTitle">
            <summary>
            Represents the title of a chart, providing properties and methods to customize its appearance and content.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartValueAxis">
            <summary>
            Represents the value axis of a chart, responsible for defining the scale, range, and other properties related to the data values being plotted.
            </summary>
        </member>
        <member name="F:Spire.Xls.Charts.ChartValueAxis.DefaultValueAxisId">
            <summary>
            Default value axis id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Charts.ChartValueAxis.DefaultSecondaryValueAxisId">
            <summary>
            Default secondary value axis id.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartValueAxis.Font">
            <summary>
            Returns font used for axis text displaying. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartValueAxis.MajorGridLines">
            <summary>
            Returns major gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartValueAxis.MinorGridLines">
            <summary>
            Returns minor gridLines. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartValueAxis.TitleArea">
            <summary>
            Returns text area for the axis title. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartWallOrFloor">
            <summary>
            Represents a wall or floor in a charting context, encapsulating properties and methods related to its visualization and behavior within a chart.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartDataPointsCollection">
            <summary>
            Represents a collection of data points used in a chart.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartDataPointsCollection.Add(Spire.Xls.Charts.ChartDataPoint)">
            <summary>
            Adds new data point to the collection.
            </summary>
            <param name="point">Data point to add.</param>
        </member>
        <member name="M:Spire.Xls.Charts.ChartDataPointsCollection.ClearDataFormats(Spire.Xls.Charts.ChartSerieDataFormat)">
            <summary>
            Clears all series data formats.
            </summary>
            <param name="format">Represents format to update.</param>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataPointsCollection.DefaultDataPoint">
            <summary>
            Returns default data point. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataPointsCollection.DefaultPointFormat">
            <summary>
            Gets default data format .
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartDataPointsCollection.Item(System.Int32)">
            <summary>
            Gets chart point.
            </summary>
        </member>
        <member name="T:Spire.Xls.Charts.ChartSeries">
            <summary>
            Represents a series of data points in a chart, including properties and methods for configuring and manipulating the series.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add(Spire.Xls.Charts.ChartSerie)">
            <summary>
            Adds series to the collection.
            </summary>
            <param name="serieToAdd">Series that should be added to the collection.</param>
            <returns>Series that was added.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.ClearDataFormats(Spire.Xls.Charts.ChartSerieDataFormat)">
            <summary>
            Clears all series data formats.
            </summary>
            <param name="format">Represents format to update.</param>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeries.Item(System.Int32)">
            <summary>
            Returns a single Name object from a Names collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeries.Item(System.String)">
            <summary>
            Returns a single Name object from a Names collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add">
            <summary>
            Defines a new series. Returns a Series object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add(System.String)">
            <summary>
            Defines a new series. Returns a Series object.
            </summary>
            <param name="name">Name of the new series.</param>
            <returns>Newly created series object.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add(Spire.Xls.ExcelChartType)">
            <summary>
            Defines a new series. Returns a Series object.
            </summary>
            <param name="serieType">Type of new serie.</param>
            <returns>Newly created series object.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add(System.String,Spire.Xls.ExcelChartType)">
            <summary>
            Defines a new series. Returns a Series object.
            </summary>
            <param name="name">Name of the new series.</param>
            <param name="serieType">Type of new serie.</param>
            <returns>Newly created series object.</returns>
        </member>
        <member name="M:Spire.Xls.Charts.ChartSeries.Add(System.String,System.Boolean)">
            <summary>
            Adds a new area to the layout with the specified orientation.
            </summary>
            <param name="area">The identifier or name of the area to be added.</param>
            <param name="isVertical">A boolean indicating the orientation of the area. True if vertical, false if horizontal.</param>
            <returns>The index or identifier of the newly added area.</returns>
        </member>
        <member name="P:Spire.Xls.Charts.ChartSeries.CategoryData">
            <summary>
            Gets or sets the category data for the chart's series.
            </summary>
            <value>
            A string representing the category data.
            </value>
            <exception cref="T:System.NotSupportedException">
            Thrown when attempting to set an empty or null value.
            </exception>
        </member>
        <member name="T:Spire.Xls.Collections.WorksheetConditionalFormats">
            <summary>
            Represents a collection of conditional formats applied to a worksheet in a spreadsheet application.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.DataConnections">
            <summary>
            Represents a class responsible for managing data connections.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.DataConnections.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the DataConnections class with the specified parent object.
            </summary>
            <param name="parent">The parent object associated with this instance of DataConnections.</param>
        </member>
        <member name="P:Spire.Xls.Collections.DataConnections.Item(System.Int32)">
            <summary>
            Gets or sets the ExternalConnection at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.ExternalLinkCollection">
            <summary>
            Represents a collection of external links.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.ExternalLinkCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ExternalLinkCollection class with the specified parent.
            </summary>
            <param name="parent">The parent object to which this ExternalLinkCollection belongs.</param>
        </member>
        <member name="P:Spire.Xls.Collections.ExternalLinkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ExternalLink at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.QueryTableCollection">
            <summary>
            Represents a collection of query tables used for database operations.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.QueryTableCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the QueryTableCollection class with the specified parent.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.QueryTableCollection.Add(Spire.Xls.QueryTableXls)">
            <summary>
            Adds a QueryTableXls object to the collection or performs a related operation.
            </summary>
            <param name="table">The QueryTableXls object to be added.</param>
            <returns>The result of the add operation, typically an integer representing the new item's index.</returns>
        </member>
        <member name="P:Spire.Xls.Collections.QueryTableCollection.Item(System.Int32)">
            <summary>
            Gets the querytable by the specific index.
            </summary>
            <param name="index">The index.</param>
            <returns>The querytable</returns>
        </member>
        <member name="T:Spire.Xls.Collections.BuiltInDocumentProperties">
            <summary>
            Returns collection that represents all the built-in document properties.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.RangesCollection">
            <summary>
            Represents a collection of range objects, providing methods to manipulate and query the ranges.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Add(Spire.Xls.CellRange)">
            <summary>
            Adds a range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.AddComment">
            <summary>
            Adds a comment to the range.
            </summary>
            <returns>Added comment.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.AddRange(Spire.Xls.CellRange)">
            <summary>
            Adds a range to the collection.
            </summary>
            <param name="range">Range to add.</param>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Copy(Spire.Xls.CellRange)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range</param>
            <returns>Destination range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Copy(Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destination">Destination range.</param>
            <param name="updateReference">Indicates whether to update reference cells.</param>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Copy(Spire.Xls.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range.</param>
            <param name="updateReference">Indicates whether to update reference cells.</param>
            <param name="copyStyles">Indicates whether to copy styles.</param>
            <returns>Destination range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindAllNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double.
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether to find formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindAllString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether include formula</param>
            <param name="formulaValue">Indicates whether include formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindAllDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime.
            </summary>
            <param name="dateTimeValue">DateTime value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindAllTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with input timespan
            </summary>
            <param name="timeSpanValue">time span value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindAllBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double. 
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string. 
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether includes formula to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime. 
            </summary>
            <param name="dateTimeValue">Datetime value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.FindTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with the input time span. 
            </summary>
            <param name="timeSpanValue">Time span value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Intersect(Spire.Xls.CellRange)">
            <summary>
            Get intersection range with the specified range.
            </summary>
            <param name="range">Range which to intersect.</param>
            <returns>Range intersection.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Move(Spire.Xls.CellRange)">
            <summary>
            Moves the cells to the specified Range.
            </summary>
            <param name="destination">Destnation Range.</param>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Move(Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Moves the cells to the specified Range.
            </summary>
            <param name="destination">Destination Range.</param>
            <param name="updateReference">Indicates whether to update reference range.</param>
        </member>
        <member name="M:Spire.Xls.Collections.RangesCollection.Remove(Spire.Xls.CellRange)">
            <summary>
            Removes range from the collection.
            </summary>
            <param name="range">Range to remove.</param>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or rows) that contains the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or 
            columns) that contains the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Rows">
            <summary>
            Returns the number of the first row of the first area in the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Columns">
            <summary>
            Returns a Range object that represents the columns in the specified range
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Comment">
            <summary>
            Returns a Comment object that represents the comment associated with the cell in the upper-left corner of the range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the 
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Borders">
            <summary>
            Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.MergeArea">
            <summary>
            Returns a Range object that represents the merged range containing the specified cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.RichText">
            <summary>
            Returns a RichTextString object that represents the rich text style.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Style">
            <summary>
            Returns a Style object that represents the style of the specified range
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.RangesCollection.Worksheet">
            <summary>
            Gets the Worksheet object associated with this instance, casting it from the base class.
            </summary>
            <returns>
            A Worksheet object.
            </returns>
        </member>
        <member name="T:Spire.Xls.Collections.PivotCachesCollection">
            <summary>
            Represents a collection of PivotCache objects in an Excel workbook. Each PivotCache object contains the data used by one or more PivotTables.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.PivotTablesCollection">
            <summary>
            Represents a collection of PivotTable objects in a worksheet, allowing for the management and manipulation of pivot tables.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.ChartsCollection">
            <summary>
            Represents a collection of chart objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.ChartsCollection.Item(System.Int32)">
            <summary>
            Gets a chart object by item index.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.ChartsCollection.Item(System.String)">
            <summary>
            Get a chart object by name.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.ChartsCollection.Add">
            <summary>
            Adds a new chart.
            </summary>
            <returns>Created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.ChartsCollection.Add(System.String)">
            <summary>
            Add a new chart with name.
            </summary>
            <param name="name">chart name.</param>
            <returns>Created chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.ChartsCollection.Add(Spire.Xls.ChartSheet)">
            <summary>
            Adds chart to the collection.
            </summary>
            <param name="chart">Chart to add.</param>
            <returns>Added chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.ChartsCollection.Remove(System.String)">
            <summary>
            Removes chart object from the collection.
            </summary>
            <param name="name">Name of the chart to remove.</param>
        </member>
        <member name="T:Spire.Xls.Collections.CommentsCollection">
            <summary>
            Represents a collection of comments.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.CommentsCollection.AddComment(Spire.Xls.CellRange)">
            <summary>
            Adds comment to the specified range.
            </summary>
            <param name="range">Range that adds comment.</param>
            <returns>Created comment object..</returns>
        </member>
        <member name="M:Spire.Xls.Collections.CommentsCollection.AddComment(System.Int32,System.Int32)">
            <summary>
            Adds comment to the specified row and column.
            </summary>
            <param name="rowIndex">Row index..</param>
            <param name="columnIndex">Column index.</param>
            <returns>Created comment object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.CommentsCollection.Remove(Spire.Xls.ExcelComment)">
            <summary>
            Removes comment object from the collection.
            </summary>
            <param name="comment">Comment to remove.</param>
        </member>
        <member name="P:Spire.Xls.Collections.CommentsCollection.Item(System.Int32)">
            <summary>
            Gets a comment object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.CommentsCollection.Item(System.String)">
            <summary>
            Gets single item from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single item from the collection.</returns>
        </member>
        <member name="P:Spire.Xls.Collections.CommentsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets a comment object.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.PicturesCollection">
            <summary>
            Represents a collection of pictures that can be managed and manipulated within an application.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.PicturesCollection.Item(System.Int32)">
            <summary>
            Gets a ExcelPicture item.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Drawing.Image,System.String)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Drawing.Image,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture to the collection.
            </summary>
            <param name="image">Picture to add.</param>
            <param name="pictureName">Picture name.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.String)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="fileName">File name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds picture from the specified file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream object.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">File name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">File name.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image object.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.AddLinkPic(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a linked picture to the specified cell location in an Excel worksheet.
            </summary>
            <param name="topRow">The zero-based index of the row where the top of the picture will be positioned.</param>
            <param name="leftColumn">The zero-based index of the column where the left side of the picture will be positioned.</param>
            <param name="height">The height of the picture in points.</param>
            <param name="width">The width of the picture in points.</param>
            <param name="linktarget">The URL or location that the picture will link to.</param>
            <returns>An ExcelPicture object representing the added linked picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="image">Image to add.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">File name.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="bottomRow">Bottom row.</param>
            <param name="rightColumn">Right column.</param>
            <param name="fileName">File name.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="image">Image.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="stream">Stream with the picture.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">File name.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.PicturesCollection.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32,Spire.Xls.ImageFormatType)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="topRow">Top row of a new picture.</param>
            <param name="leftColumn">Left column.</param>
            <param name="fileName">Name of the shape.</param>
            <param name="scaleWidth">Width scale in percents.</param>
            <param name="scaleHeight">Height scale in percents.</param>
            <param name="imageFormat">Image format to use for picture storing.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="T:Spire.Xls.Collections.WorksheetChartsCollection">
            <summary>
            Represents a collection of charts in a worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetChartsCollection.Add">
            <summary>
            Adds a new chart to the collection.
            </summary>
            <returns>The newly created Chart object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetChartsCollection.Add(Spire.Xls.ExcelChartType)">
            <summary>
            Adds a new chart to the worksheet with the specified chart type.
            </summary>
            <param name="chartType">The type of chart to add, specified by the ExcelChartType enumeration.</param>
            <returns>A Chart object representing the newly added chart.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetChartsCollection.AddCopy(Spire.Xls.Chart,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a copy of the specified chart to the worksheet at the given position and size.
            </summary>
            <param name="chart">The chart to be copied.</param>
            <param name="upperLeftRow">The row index of the upper-left corner of the new chart.</param>
            <param name="upperLeftColumn">The column index of the upper-left corner of the new chart.</param>
            <param name="lowerRightRow">The row index of the lower-right corner of the new chart.</param>
            <param name="lowerRightColumn">The column index of the lower-right corner of the new chart.</param>
            <returns>The newly added chart.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetChartsCollection.Add(Spire.Xls.ExcelChartType,Spire.Xls.Core.IPivotTable)">
            <summary>
            Adds a chart to the worksheet based on the specified pivot table and chart type.
            </summary>
            <param name="pivotChartType">The type of chart to be created.</param>
            <param name="pivotTable">The pivot table that the chart will be based on.</param>
            <returns>The newly created chart.</returns>
        </member>
        <member name="P:Spire.Xls.Collections.WorksheetChartsCollection.Item(System.Int32)">
            <summary>
            Gets the Chart at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.AddInFunctionsCollection">
            <summary>
            Represents a collection of add-in functions that can be utilized within an application to extend its functionality.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.AddInFunctionsCollection.Item(System.Int32)">
            <summary>
            Get Add-In function.
            </summary>
            <param name="index">Item index.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Collections.BordersCollection">
            <summary>
            Represents a collection of borders.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.BordersCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.KnownColor">
            <summary>
            Returns or sets the primary excel color of the object. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.Color">
            <summary>
            Returns or sets the primary color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.Item(Spire.Xls.BordersLineType)">
            <summary>
            Gets border item.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.LineStyle">
            <summary>
            Returns or sets the line style for the border.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.Value">
            <summary>
            Gets or sets line style of borders.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.Count">
            <summary>
            Gets count of borders.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.BordersCollection.Parent">
            <summary>
            Gets the parent object of the current borders.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.FontsCollection">
            <summary>
            Represents a collection of fonts used within an application, providing methods to manage and retrieve font resources.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.FontsCollection.Add(Spire.Xls.Core.Spreadsheet.XlsFontStyle)">
            <summary>
            Adds a specified font style to the collection.
            </summary>
            <param name="font">The XlsFontStyle object to be added.</param>
        </member>
        <member name="M:Spire.Xls.Collections.FontsCollection.Add(Spire.Xls.ExcelFont)">
            <summary>
            Adds the specified ExcelFont to the collection.
            </summary>
            <param name="font">The ExcelFont to add.</param>
        </member>
        <member name="M:Spire.Xls.Collections.FontsCollection.AddFonts(Spire.Xls.Collections.FontsCollection)">
            <summary>
            Adds a collection of fonts to the dictionary.
            </summary>
            <param name="fonts">The collection of fonts to be added.</param>
            <returns>The updated dictionary containing the added fonts.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.FontsCollection.Contains(Spire.Xls.Core.Spreadsheet.XlsFontStyle)">
            <summary>
            Determines whether the collection contains a specific XlsFontStyle object.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.FontsCollection.Contains(Spire.Xls.ExcelFont)">
            <summary>
            Determines whether the collection contains a specific ExcelFont object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.FontsCollection.Item(System.Int32)">
            <summary>
            Gets the ExcelFont object at the specified index in the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.HPageBreaksCollection">
            <summary>
            Represents a collection of horizontal page breaks in a worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.HPageBreaksCollection.Item(System.Int32)">
            <summary>
            Gets page break object item.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.HPageBreaksCollection.Item(Spire.Xls.CellRange)">
            <summary>
            Gets page break object item.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.HPageBreaksCollection.Add(Spire.Xls.CellRange)">
            <summary>
            Adds a horizontal page break. 
            </summary>
            <param name="range">range which new page break inserted.</param>
            <returns>HPageBreak added.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.HPageBreaksCollection.Remove(Spire.Xls.CellRange)">
            <summary>
            Removes the specified cell range from the horizontal page breaks.
            </summary>
            <param name="range">The cell range to be removed.</param>
        </member>
        <member name="M:Spire.Xls.Collections.HPageBreaksCollection.GetPageBreak(System.Int32)">
            <summary>
            Returns page break at the specified row.
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns>Page break object.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.HPageBreaksCollection.GetPageBreak(Spire.Xls.CellRange)">
            <summary>
            Returns page break at the specified range.
            </summary>
            <param name="range">Range object.</param>
            <returns>Page break object.</returns>
        </member>
        <member name="T:Spire.Xls.Collections.HyperLinksCollection">
            <summary>
            Represents a collection of hyperlinks, providing methods to manage and access individual hyperlinks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.HyperLinksCollection.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.HyperLinksCollection.Add(Spire.Xls.CellRange)">
            <summary>
            Addss a new hyperlink.
            </summary>
            <param name="range">range object.</param>
        </member>
        <member name="M:Spire.Xls.Collections.HyperLinksCollection.Add(Spire.Xls.HyperLink)">
            <summary>
            Adds new hyperlink.
            </summary>
            <param name="link">Hyperlink to add.</param>
            <returns>index of Hyperlink added.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.HyperLinksCollection.GetRangeHyperlinks(Spire.Xls.CellRange)">
            <summary>
            Gets hyperlinks for the specified range.
            </summary>
            <param name="range">range object.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Collections.VPageBreaksCollection">
            <summary>
            Represents a collection of vertical page breaks in a worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.VPageBreaksCollection.Item(System.Int32)">
            <summary>
            Gets a object from collection
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.VPageBreaksCollection.Add(Spire.Xls.CellRange)">
            <summary>
            Adds a horizontal page break.
            </summary>
            <param name="range">Range which a page break need inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.VPageBreaksCollection.Remove(Spire.Xls.CellRange)">
            <summary>
            Remove page break with specified range.
            </summary>
            <param name="range">range object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.VPageBreaksCollection.GetPageBreak(System.Int32)">
            <summary>
            Returns page break at the specified Column index.
            </summary>
            <param name="rowIndex">Column index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.VPageBreaksCollection.GetPageBreak(Spire.Xls.CellRange)">
            <summary>
            Returns page break at the specified range.
            </summary>
            <param name="range">range object.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Collections.WorkbookObjectsCollection">
            <summary>
            Represents a collection of ChartSheet objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.WorkbookObjectsCollection.Workbook">
            <summary>
            Parent workbook.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.WorksheetsCollection">
            <summary>
            Represents a collection of Worksheet objects, providing methods and properties for managing multiple worksheets within a workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.Add(System.String)">
            <summary>
            Adds a new worksheet.
            </summary>
            <param name="sheetName">Worksheet name.</param>
            <returns>Added worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.AddCopy(System.Int32)">
            <summary>
            Adds copy of worksheet.
            </summary>
            <param name="sheetIndex">Sheet index.</param>
            <returns>Added worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.AddCopy(Spire.Xls.Worksheet)">
            <summary>
            Adds copy of worksheet.
            </summary>
            <param name="sheet">Worksheet to copy.</param>
            <returns>Added worksheet.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.AddCopy(Spire.Xls.Collections.WorksheetsCollection)">
            <summary>
            Adding worksheets collection to workbook.
            </summary>
            <param name="worksheets">Source worksheets collection.</param>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.Create(System.String)">
            <summary>
            Create a new worksheet.
            </summary>
            <param name="name">Worksheet name</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.Create">
            <summary>
            Creates a new worksheet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindAllNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double.
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether to find formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindAllString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether include formula</param>
            <param name="formulaValue">Indicates whether include formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindAllDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime.
            </summary>
            <param name="dateTimeValue">DateTime value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindAllTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with input timespan
            </summary>
            <param name="timeSpanValue">time span value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindAllBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double. 
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string. 
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether includes formula to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime. 
            </summary>
            <param name="dateTimeValue">Datetime value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.FindTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with the input time span. 
            </summary>
            <param name="timeSpanValue">Time span value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Collections.WorksheetsCollection.Remove(Spire.Xls.Worksheet)">
            <summary>
            Remove worksheet from collection.
            </summary>
            <param name="sheet">Worksheet object.</param>
        </member>
        <member name="P:Spire.Xls.Collections.WorksheetsCollection.Item(System.Int32)">
            <summary>
            Returns a single object from a collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.WorksheetsCollection.Item(System.String)">
            <summary>
            Returns a single object from a collection. Read-only.
            </summary>
        </member>
        <member name="T:Spire.Xls.Collections.StylesCollection">
            <summary>
            Represents a collection of styles that can be applied to various UI elements.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.StylesCollection.Item(System.Int32)">
            <summary>
            gets a object from a collection. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.StylesCollection.Item(System.String)">
            <summary>
            gets a object from a collection. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Add(System.String)">
            <summary>
            Adds a new style.
            </summary>
            <param name="name">Style name</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Add(Spire.Xls.CellStyle)">
            <summary>
            Adds a style.
            </summary>
            <param name="style">Style to added.</param>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Remove(Spire.Xls.CellStyle)">
            <summary>
            Removes the specified CellStyle from the collection.
            </summary>
            <param name="style">The CellStyle to remove.</param>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Contains(Spire.Xls.CellStyle)">
            <summary>
            Style which is in collection.
            </summary>
            <param name="style">Style object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Compare(Spire.Xls.CellStyle,Spire.Xls.CellStyle)">
            <summary>
            Compares two CellStyle objects for equality based on their properties.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.Replace(Spire.Xls.CellStyle)">
            <summary>
            Replaces the current cell style with the provided style.
            </summary>
            <param name="style">The new cell style to replace the current one.</param>
        </member>
        <member name="M:Spire.Xls.Collections.StylesCollection.GetDefaultStyle(System.String)">
            <summary>
            Creates built in style.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>Created style.</returns>
        </member>
        <member name="T:Spire.Xls.Collections.AutoFiltersCollection">
            <summary>
            Represents a collection of automatic filters that can be applied to data in a spreadsheet or similar data grid. Each filter in the collection can define criteria for displaying rows or columns based on specific conditions.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.AutoFiltersCollection.Worksheet">
            <summary>
            Returns parent worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.AutoFiltersCollection.Item(System.Int32)">
            <summary>
            Get auto filter item..
            </summary>
        </member>
        <member name="P:Spire.Xls.Collections.AutoFiltersCollection.Range">
            <summary>
            Range to be filtered.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.Filter">
            <summary>
            Filter the data.
            </summary>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.Filter(System.Boolean)">
            <summary>
            Gets all hidden rows's indexes. 
            </summary>
            <param name="hideRows">If true, hide the filtered rows. </param>
            <returns>Returns all hidden rows indexes. </returns>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFilter(System.Int32,System.String)">
            <summary>
            Adds a filter for a filter column.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]
            </param>
            <param name="criteria">The specified criteria (a string; for example, "hello"). 
            It only can be null or be one of the cells' value in this column.
            </param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFilter(Spire.Xls.Core.IAutoFilter,System.String)">
            <summary>
            Adds a filter to the specified column with the given criteria.
            </summary>
            <param name="column">The column to which the filter will be applied.</param>
            <param name="criteria">The criteria to use for filtering the column.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddDateFilter(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a date filter for a filter column.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]
            </param>
            <param name="dateTimeGroupingType"><see cref="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType"/></param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <remarks>
            If DateTimeGroupingType is Year, only the param year effects.
            If DateTiemGroupingType is Month, only the param year and month effect.
            and so on.
            </remarks>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.RemoveDateFilter(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a date filter.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]
            </param>
            <param name="dateTimeGroupingType"><see cref="T:Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType"/></param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <remarks>
            If DateTimeGroupingType is Year, only the param year effects.
            If DateTiemGroupingType is Month, only the param year and month effect.
            </remarks>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.RemoveFilter(System.Int32,System.String)">
            <summary>
            Removes a filter for a filter column.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]
            </param>
            <param name="criteria">The specified criteria (a string; for example, "hello"). 
            It only can be null or be one of the cells' value in this column.
            </param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.QuickFilter(System.Int32,System.String)">
            <summary>
            Filters a list with specified criteria.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]
            </param>
            <param name="criteria">The specified criteria (a string; for example, "hello"). </param>
            <remarks>
            will remove all other filter setting on this field as Ms Excel 97-2003.
            </remarks>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.QuickFilter(Spire.Xls.Core.IAutoFilter,System.String)">
            <summary>
            Applies a simple filter to the specified column based on the given criteria.
            </summary>
            <param name="column">The column to which the filter will be applied.</param>
            <param name="criteria">The criteria to use for filtering the column.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.DynamicFilter(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType)">
            <summary>
            Adds a dynamic filter.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0]</param>
            <param name="dynamicFilterType">Dynamic filter type.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFontColorFilter(System.Int32,System.Drawing.Color)">
            <summary>
            Adds a font color filter.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0]</param>
            <param name="color">Font Color.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFillColorFilter(System.Int32,Spire.Xls.ExcelPatternType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a fill color filter.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0] </param>
            <param name="pattern">The background pattern type.</param>
            <param name="foreColor">The foreground color.</param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFillColorFilter(System.Int32,System.Drawing.Color)">
            <summary>
            Adds a fill color filter.
            </summary>
            <param name="filterColumnIndex">The column field index on which you want to base the filter (from the left of the list; the leftmost field is field 0).</param>
            <param name="color">Fill Color.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFillColorFilter(Spire.Xls.Core.IAutoFilter,System.Drawing.Color)">
            <summary>
            Adds a color filter to the specified column in an Excel auto filter.
            </summary>
            <param name="column">The column to which the color filter will be applied.</param>
            <param name="color">The color to filter by.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddFontColorFilter(Spire.Xls.Core.IAutoFilter,System.Drawing.Color)">
            <summary>
            Adds a filter to the specified column to show only cells with the given font color.
            </summary>
            <param name="column">The column to which the filter will be applied.</param>
            <param name="color">The font color to filter by.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddIconFilter(System.Int32,Spire.Xls.IconSetType,System.Int32)">
            <summary>
            Adds an icon filter.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0] </param>
            <param name="iconSetType">The icon set type.</param>
            <param name="iconId">The icon id.</param>
            <remarks>
            Only supports to add the icon filter.
            Not supports checking which row is visible if the filter is icon filter.
            </remarks>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.MatchBlanks(System.Int32)">
            <summary>
            Match all blank cell in the list.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.MatchBlanks(Spire.Xls.Core.IAutoFilter)">
            <summary>
            Match all blank cell in the list.
            </summary>
            <param name="column">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.CustomFilter(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object)">
            <summary>
            Filters a list with a custom criteria.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]</param>
            <param name="operatorType">The filter operator type</param>
            <param name="criteria">The custom criteria</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.CustomFilter(System.Int32,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object,System.Boolean,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object)">
            <summary>
            Filters a list with custom criterias.
            </summary>
            <param name="columnIndex">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0]</param>
            <param name="operatorType1">The first filter operator type</param>
            <param name="criteria1">The first custom criteria</param>
            <param name="isAnd"></param>
            <param name="operatorType2">The second filter operator type</param>
            <param name="criteria2">The second custom criteria</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.CustomFilter(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object)">
            <summary>
            Applies a custom filter to a specified column using the given operator and criteria.
            </summary>
            <param name="column">The column to which the filter is applied.</param>
            <param name="operatorType">The type of operator to use for filtering.</param>
            <param name="criteria">The criteria to use for filtering.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.CustomFilter(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object,System.Boolean,Spire.Xls.Core.Spreadsheet.AutoFilter.FilterOperatorType,System.Object)">
            <summary>
            Applies a custom filter to a specified column using two sets of criteria and logical operators.
            </summary>
            <param name="column">The column to which the filter will be applied.</param>
            <param name="operatorType1">The first logical operator to use for filtering.</param>
            <param name="criteria1">The first criteria to apply in the filter.</param>
            <param name="isAnd">Determines whether to use an AND or OR logical operator between the two criteria.</param>
            <param name="operatorType2">The second logical operator to use for filtering.</param>
            <param name="criteria2">The second criteria to apply in the filter.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.DynamicFilter(Spire.Xls.Core.IAutoFilter,Spire.Xls.Core.Spreadsheet.AutoFilter.DynamicFilterType)">
            <summary>
            Applies a dynamic filter to the specified column.
            </summary>
            <param name="column">The column to which the dynamic filter will be applied.</param>
            <param name="dynamicFilterType">The type of dynamic filter to apply.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.ClearFilter(System.String)">
            <summary>
            Delete the column filter by column name
            </summary>
            <param name="columnName">column name</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.ClearFilter(System.Int32)">
            <summary>
            Delete the column filter by column index(filters column index not sheet column index)
            </summary>
            <param name="filterColumnIndex">column index</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.AddDateFilter(Spire.Xls.Core.IAutoFilter,Spire.Xls.Core.Spreadsheet.AutoFilter.DateTimeGroupingType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a date filter to the specified column based on the provided date grouping type and date components.
            </summary>
            <param name="column">The column to which the date filter will be applied.</param>
            <param name="dateTimeGroupingType">The type of date grouping to apply.</param>
            <param name="year">The year component of the date filter.</param>
            <param name="month">The month component of the date filter.</param>
            <param name="day">The day component of the date filter.</param>
            <param name="hour">The hour component of the date filter.</param>
            <param name="minute">The minute component of the date filter.</param>
            <param name="second">The second component of the date filter.</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.FilterTop10(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Filter the top 10 item in the list
            </summary>
            <param name="filterColumnIndex">The column field index on which you want to base the filter (from the left of the list; the leftmost field is field 0). </param>
            <param name="isTop">Indicates whether filter from top or bottom</param>
            <param name="isPercent">Indicates whether the items is percent or count </param>
            <param name="itemCount">The item count</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.FilterTop10(Spire.Xls.Core.IAutoFilter,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Filter the top 10 item in the list
            </summary>
            <param name="column">The column field on which you want to base the filter. for exapmle: sheet.AutoFilters[0] </param>
            <param name="isTop">Indicates whether filter from top or bottom</param>
            <param name="isPercent">Indicates whether the items is percent or count </param>
            <param name="itemCount">The item count</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.MatchNonBlanks(System.Int32)">
            <summary>
            Match all not blank cell in the list.
            </summary>
            <param name="filterColumnIndex">The column field index on which you want to base the filter (from the left of the list; the leftmost field is field 0).</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.MatchNonBlanks(Spire.Xls.Core.Spreadsheet.AutoFilter.FilterColumn)">
            <summary>
            Match all not blank cell in the list.
            </summary>
            <param name="column">The column field on which you want to base the filter . for exapmle: sheet.AutoFilters[0]</param>
        </member>
        <member name="M:Spire.Xls.Collections.AutoFiltersCollection.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="T:Spire.Xls.CustomFontData">
            <summary>
            Represents custom font data.
            </summary>
        </member>
        <member name="P:Spire.Xls.CustomFontData.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:Spire.Xls.CustomFontData.FontFileName">
            <summary>
            Gets or sets the name of the font file.
            </summary>
        </member>
        <member name="P:Spire.Xls.CustomFontData.FontFamilyName">
            <summary>
            Gets or sets the name of the font family.
            </summary>
        </member>
        <member name="P:Spire.Xls.CustomFontData.FontData">
            <summary>
            Gets or sets the font data as a byte array.
            </summary>
        </member>
        <member name="M:Spire.Xls.CustomFontData.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the CustomFontData class with the specified file name and font data.
            </summary>
            <param name="fileName">The name of the font file.</param>
            <param name="data">The byte array containing the font data.</param>
        </member>
        <member name="T:Spire.Xls.FileFormat">
            <summary>
            Represents possible excel versions.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Xlsb2007">
            <summary>
            Represents excel version 2007 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Xlsb2010">
            <summary>
            Represents excel version 2010 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.ODS">
            <summary>
            OpenOffice Spreadsheet documents
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.CSV">
            <summary>
            CSV file.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.XML">
            <summary>
            Xml file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.PDF">
            <summary>
            PDF file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Bitmap">
            <summary>
            Bitmap file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.XPS">
            <summary>
            XPS file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.HTML">
            <summary>
            SVG file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Version97to2003">
            <summary>
            Represents excel version 97-2003.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Version2007">
            <summary>
            Represents excel version 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Version2010">
            <summary>
            Represents excel version 2010.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Version2013">
            <summary>
            Represents excel version 2013.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Version2016">
            <summary>
            Represents excel version 2016.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.PostScript">
            <summary>
            PostScript file
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.OFD">
            <summary>
             Open Fixed-layout Document (OFD) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.PCL">
            <summary>
            Represents PCL file.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Xlsm">
            <summary>
            Represents an Excel file with macros enabled, typically used for running VBA scripts or automating tasks within the spreadsheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.ET">
            <summary>
            Represents ET file.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.ETT">
            <summary>
            Represents ETT file.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.UOS">
            <summary>
             UOF Spreadsheet (UOS) format.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.XLT">
            <summary>
            Represents the XLT file format, which is a template file used by Microsoft Excel for creating new spreadsheets. XLT files can contain predefined styles, formulas, and other settings that can be reused in new Excel workbooks.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.XLTX">
            <summary>
            Represents an Excel Open XML Template file format (.xltx). This file type is used for creating templates in Microsoft Excel that do not contain any macro-enabled content.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.XLTM">
            <summary>
            Represents the XLTM file format, which is a template file used by Microsoft Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.FileFormat.Markdown">
            <summary>
             Represents Markdown file.
            </summary>
        </member>
        <member name="T:Spire.Xls.GoalSeek">
             <summary>
             Goal seek.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeek.MaxIterations">
             <summary>
             Gets or sets max iterations.
             </summary>
        </member>
        <member name="M:Spire.Xls.GoalSeek.TryCalculate(Spire.Xls.CellRange,System.Double,Spire.Xls.CellRange)">
             <summary>
             Try goal seek calculate.
             </summary>
        </member>
        <member name="M:Spire.Xls.GoalSeek.TryCalculate(Spire.Xls.CellRange,System.Double,Spire.Xls.CellRange,System.Double)">
             <summary>
             Try goal seek calculate.
             </summary>
        </member>
        <member name="T:Spire.Xls.GoalSeekResult">
             <summary>
             Goal seek calculate result.
             </summary>
        </member>
        <member name="M:Spire.Xls.GoalSeekResult.Determine">
             <summary>
             Determine the result.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeekResult.TargetCellName">
             <summary>
             Gets the name of target cell.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeekResult.VariableCellName">
             <summary>
             Gets the name of variable cell.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeekResult.Iterations">
             <summary>
             Gets the iterations.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeekResult.TargetValue">
             <summary>
             Gets the target value.
             </summary>
        </member>
        <member name="P:Spire.Xls.GoalSeekResult.GuessResult">
             <summary>
             Gets the guess result value.
             </summary>
        </member>
        <member name="T:Spire.Xls.License.XLSProtect">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.License.LicenseProvider">
            <summary>
            Class Spire.Doc.LicenseProvider.
            </summary>  
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.SetLicense(System.String)">
            <summary>
            Provides a license by a license file path, which will be used for loading license.
            </summary>
            <param name="licenseFileFullPath">License file full path.</param>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.SetLicense(System.IO.Stream)">
            <summary>
            Provides a license by a license stream, which will be used for loading license.
            </summary>
            <param name="licenseFileStream">License data stream.</param>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.SetLicenseKey(System.String)">
            <summary>
            Provides a license by a license key, which will be used for loading license.
            </summary>
            <param name="key">The value of the Key attribute of the element License of you license xml file.</param>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.SetLicenseFileName(System.String)">
            <summary>
             Sets the license file name, which will be used for loading license.
            </summary>
            <param name="licenseFileName">License file name.</param>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.ClearLicense">
            <summary>
            Clear all cached license.
            </summary>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.LoadLicense">
            <summary>
            Load the license provided by current setting to the license cache.
            </summary>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.SetLicenseKey(System.String,System.Boolean)">
            <summary>
            Sets the license key required for license loading, and specifies whether to use a development or test license.
            </summary>
            <param name="key">The value of the Key attribute of the element License of you license xml file.</param>
            <param name="useDevOrTestLicense">Indicates whether to apply a development or test license.</param>
        </member>
        <member name="M:Spire.Xls.License.LicenseProvider.UnbindDevelopmentOrTestingLicenses">
            <summary>
            Unbinds development or testing licenses of the specified type. This method iterates
            through all stored licenses, identifies those marked as development or test licenses,
            resets their state, and attempts to unbind them using the LicenseUtilities.UnbindLicense
            method. The process stops upon successfully unbinding the first matching license.
            The approach to lifting development or testing licenses does not allow frequent
            invocation by the same machine code, mandating a two-hour wait period before
            it can be invoked again.
            </summary>
            <returns>true if a development or test license was found and successfully unbound; otherwise,false.</returns>
        </member>
        <member name="T:Spire.Xls.TextSaveOptions">
            <summary>
            Represents options for saving text data.
            </summary>
        </member>
        <member name="P:Spire.Xls.TextSaveOptions.RetainHiddenData">
            <summary>
            Gets or sets whether retain hidden data. Default is true.
            </summary>
        </member>
        <member name="P:Spire.Xls.TextSaveOptions.RetainBlankRowsAndCols">
            <summary>
            Gets or sets whether retain blank rows and columns. Default is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.TextSaveOptions.Separator">
            <summary>
            Gets or sets the separator. Default is ",".
            </summary>
        </member>
        <member name="P:Spire.Xls.TextSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding. Default is UTF8.
            </summary>
        </member>
        <member name="M:Spire.Xls.Compound.MemoryStorage.ContainsStorage(System.String)">
            <summary>
            Determines whether a MemoryStorage object contains a specific name.        
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.XlsDocumentProperty">
            <summary>
            Summary description for DocumentProperty.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.DEF_START_ID2">
            <summary>
            Start index for Id2 PropVariant property.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.DEF_FILE_TIME_START_YEAR">
            <summary>
            Start year for FILETIME structure.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_propertyId">
            <summary>
            Property id.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_strName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_type">
            <summary>
            Property type.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_strLinkSource">
            <summary>
            The source of a linked custom document property. Read/write String.
            </summary>
        </member>
        <member name="F:Spire.Xls.XlsDocumentProperty.m_bLinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content
            of the container document. False if the value is static. Read/write Boolean.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="strName">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.#ctor(Spire.Xls.BuiltInPropertyType,System.Object)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="propertyId">Property id.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.#ctor(Spire.Xls.IPropertyData,System.Boolean)">
            <summary>
            Initialezes new instance of the document property.
            </summary>
            <param name="variant">Variant that contains property data.</param>
            <param name="bSummary">
            Indicates whether property is from document summary or not (only for
            built-int properties).</param>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.IsBuiltIn">
            <summary>
            Indicates whether property is built-in. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.PropertyId">
            <summary>
            Returns / sets property id for built-in properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Name">
            <summary>
            Returns property name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Value">
            <summary>
            Gets / sets property value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Boolean">
            <summary>
            Gets / sets boolean value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Integer">
            <summary>
            Gets / sets integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Int32">
            <summary>
            Gets / sets 4-bytes signed integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Double">
            <summary>
            Gets / sets double value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Text">
            <summary>
            Gets / sets string value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.DateTime">
            <summary>
            Gets / sets DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.TimeSpan">
            <summary>
            Gets / sets TimeSpan value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.Blob">
            <summary>
            Gets / sets Blob value.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.StringArray">
            <summary>
            Gets / sets array of strings.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.ObjectArray">
            <summary>
            Gets / sets array of objects. Supported object types are string and Int32.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.PropertyType">
            <summary>
            Gets / sets document property type.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.LinkSource">
            <summary>
            Returns or sets the source of a linked custom document property. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.LinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content of the container document. False if the value is static. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsDocumentProperty.InternalName">
            <summary>
            Gets the internal name of the object.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.FillPropVariant(Spire.Xls.IPropertyData,System.Int32)">
            <summary>
            Copies document property data into PropVariant.
            </summary>
            <param name="variant">Destination object.</param>
            <param name="iPropertyId">PropertyId for custom properties.</param>
            <returns>True if was able to Fill variant; false otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.CorrectIndex(Spire.Xls.BuiltInPropertyType,System.Boolean@)">
            <summary>
            Converts propertyId into correct index.
            </summary>
            <param name="propertyId">PropertyId to convert.</param>
            <param name="bSummary">[out] Indicates whether this is documnet summary property of simply document property.</param>
            <returns>Correct property index.</returns>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.DetectPropertyType">
            <summary>
            Tries to detect and set property type.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.SetLinkSource(Spire.Xls.IPropertyData)">
            <summary>
            Sets value of LinkSource property.
            </summary>
            <param name="variant">Variant that contains value to set.</param>
            TODO: This should become private or protected internal after finishing implementation
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.Write(Spire.CompoundFile.XLS.Native.IPropertyStorage,Spire.CompoundFile.XLS.Native.PropVariant,System.Int32)">
            <summary>
            Saves property into IPropertyStorage.
            </summary>
            <param name="storProp">Storage to save into.</param>
            <param name="variant">Property variant used as buffer.</param>
            <param name="iPropertyId">Property id for custom properties.</param>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.XlsDocumentProperty.CloneValue">
            <summary>
            Creates copy of the internal value.
            </summary>
        </member>
        <member name="T:Spire.Xls.BuiltInProperty">
            <summary>
            Property IDs for the SummaryInformation Property Set.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Title">
            <summary>
            Title document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Subject">
            <summary>
            Subject document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Author">
            <summary>
            Author document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Keywords">
            <summary>
            Keywords document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Comments">
            <summary>
            Comments document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Template">
            <summary>
            Template document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.LastAuthor">
            <summary>
            LastAuthor document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.RevisionNumber">
            <summary>
            Revnumber document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.EditTime">
            <summary>
            EditTime document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.LastPrinted">
            <summary>
            LastPrinted document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.CreationDate">
            <summary>
            CreationDate document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.LastSaveDate">
            <summary>
            LastSaveDate document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.PageCount">
            <summary>
            PageCount document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.WordCount">
            <summary>
            WordCount document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.CharCount">
            <summary>
            CharCount document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Thumbnail">
            <summary>
            Thumbnail document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.ApplicationName">
            <summary>
            ApplicationName document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Security">
            <summary>
            Ssecurity document property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Category">
            <summary>
            Category Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.PresentationTarget">
            <summary>
            Target format for presentation (35mm, printer, video, and so on) id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.ByteCount">
            <summary>
            ByteCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.LineCount">
            <summary>
            LineCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.ParagraphCount">
            <summary>
            ParCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.SlideCount">
            <summary>
            SlideCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.NoteCount">
            <summary>
            NoteCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.HiddenCount">
            <summary>
            HiddenCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.MultimediaClipCount">
            <summary>
            MmclipCount Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.ScaleCrop">
            <summary>
            ScaleCrop property Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.HeadingPair">
            <summary>
            HeadingPair Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.DocParts">
            <summary>
            DocParts Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Manager">
            <summary>
            Manager Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.Company">
            <summary>
            Company Id.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInProperty.LinksDirty">
            <summary>
            LinksDirty Id.
            </summary>
        </member>
        <member name="T:Spire.Xls.PropertyType">
            <summary>
            Enumeration with all supported property types.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Bool">
            <summary>
            Indicates a Boolean value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Int">
            <summary>
            Indicates an integer value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Int32">
            <summary>
            Indicates an 4-bytes signed integer value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Int16">
            <summary>
            Indicates a wide string terminated by a null.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.UInt32">
            <summary>
            Indicates a 4-bytes unsigned interger value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.String">
            <summary>
            Indicates a wide string terminated by a null.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.AsciiString">
            <summary>
            Indicates a FILETIME value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.DateTime">
            <summary>
            Indicates a FILETIME value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Blob">
            <summary>
            Indicates length prefixed bytes.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Vector">
            <summary>
            Indicates a simple, counted array.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Object">
            <summary>
            Indicates an object.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Double">
            <summary>
            Indicates a double value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Empty">
            <summary>
            Indicates an array of strings.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.Null">
            <summary>
            Indicates null value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.ClipboardData">
            <summary>
            Indicates clipboard data.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.AsciiStringArray">
            <summary>
            Indicates an array of strings.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.StringArray">
            <summary>
            Indicates an array of strings.
            </summary>
        </member>
        <member name="F:Spire.Xls.PropertyType.ObjectArray">
            <summary>
            Indicates an array of objects. Supported types are string and integer values.
            </summary>
        </member>
        <member name="T:Spire.Xls.ConverterSetting">
            <summary>
            Convert Setting
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.PrintPageEventHandler">
            <summary>
            Print each page using this EventHandler
            </summary>  
        </member>
        <member name="P:Spire.Xls.ConverterSetting.XDpi">
            <summary>
            Gets or sets the horizontal resolution, in dots per inch (DPI). Default value is 96.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.YDpi">
            <summary>
            Gets or sets the vertical resolution, in dots per inch (DPI). Default value is 96.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.GrayLevelForPrint">
            <summary>
            Whether to set gray level for printing
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.PrintWithSheetPageSetting">
            <summary>
            If PrintWithSheetPageSetting = false(Default) . printing all pages with default page settings
            If PrintWithSheetPageSetting = true . printing each page with its owning sheet's page settings
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.JPEGQuality">
            <summary>
            Gets or sets a value determining the quality.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.IsCellAutoFit">
            <summary>
            Indicates whether the width and height of the cells is automatically fitted by cell value. 
            The default value is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.ToImageWithoutMargins">
            <summary>
            To image without margins. Default false.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.SheetFitToPageRetainPaperSize">
            <summary>
            Gets or sets a value indicates whether retain paper size when to one sheet context render to only one page.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.SheetFitToPage">
            <summary>
            One sheet context render to only one page. 
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.SheetFitToWidth">
            <summary>
            Sheet content fit to page width.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.IsReCalculateOnConvert">
            <summary>
            Gets or sets a value indicating whether the workbook should be recalculated during conversion.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.IgnoreErrorCalculateResult">
            <summary>
            Ignore error calculate result when calculating formula.
            Default is false.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.ClearCacheOnConverted">
            <summary>
            Gets or sets a value indicating whether the cache should be cleared when conversion is completed.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.PdfConformanceLevel">
            <summary>
            Gets or sets the Pdf document's Conformance-level.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.PdfSecurity">
            <summary>
            Represents the security settings of the PDF document.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.ChartImageType">
            
             <summary>
             Indicate the chart render image type.
             </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.IsRegionClip">
            <summary>
            Enables or disables clipping the image to the region
            </summary>
        </member>
        <member name="P:Spire.Xls.ConverterSetting.MaxConvertPages">
             <summary>
            Sets or gets the maximum number of pages for the conversion.
             </summary>
        </member>
        <member name="T:Spire.Xls.PageColRow">
            <summary>
            Represents a range of columns and rows on a page, defined by starting and ending column and row indices.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageColRow.StartRow">
            <summary>
            Represents the starting row index for operations or data processing.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageColRow.EndRow">
            <summary>
            Represents the index of the last row in a data structure or table.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageColRow.StartCol">
            <summary>
            Represents the starting column index for a particular operation or data structure.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageColRow.EndCol">
            <summary>
            Represents the ending column index in a data structure, such as a table or matrix.
            </summary>
        </member>
        <member name="T:Spire.Xls.PrintingPageType">
            <summary>
            Indicates which pages will not be printed.
            </summary>
        </member>
        <member name="F:Spire.Xls.PrintingPageType.Default">
            <summary>
            Prints all pages.
            </summary>
        </member>
        <member name="F:Spire.Xls.PrintingPageType.IgnoreBlank">
            <summary>
            Don't print the pages which the cells are blank. 
            </summary>
        </member>
        <member name="F:Spire.Xls.PrintingPageType.IgnoreStyle">
            <summary>
            Don't print the pages which cells only contain styles. 
            </summary>
        </member>
        <member name="T:Spire.Xls.DBConnection">
            <summary>
            Represents a database connection that extends the functionality of an external connection.
            </summary>
        </member>
        <member name="M:Spire.Xls.DBConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.DBConnection"/> class.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.ID">
            <summary>
            Gets the ID of the connection.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.Name">
            <summary>
            Gets or sets the name of the connection.
            When setting the name, it also marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.ConnType">
            <summary>
            Gets the connection data source type based on the value of connConvert.conntype.
            </summary>
            <returns>The ConnectionDataSourceType corresponding to the value of connConvert.conntype.</returns>
        </member>
        <member name="P:Spire.Xls.DBConnection.BackgroundRefresh">
            <summary>
            Gets or sets a value indicating whether background refresh is enabled.
            When the value is set, it also marks the connection converter as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.RefreshedVersion">
            <summary>
            Gets or sets the refreshed version of the connection.
            When setting the value, it also marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.SaveData">
            <summary>
            Gets or sets the save data flag.
            When setting the value, it also sets the ischanged flag to true.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.OdcFile">
            <summary>
            Gets or sets the ODC file path associated with the connection.
            Setting this value marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.KeepAlive">
            <summary>
            Gets or sets a value indicating whether to keep the connection alive.
            When set, it updates the corresponding property in the connConvert object and marks it as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.OnlyUseConnectionFile">
            <summary>
            Gets or sets a value indicating whether to use the connection file only.
            When the value is set, it also marks the connection converter as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.Connection">
            <summary>
            Gets or sets the database connection string.
            When setting the value, it also marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.Command">
            <summary>
            Gets or sets the command associated with the connection converter.
            When the value is set, it updates the internal command and marks the converter as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DBConnection.CommandType">
            <summary>
            Gets or sets the command type for the OLEDB command.
            </summary>
            <value>
            The command type.
            </value>
        </member>
        <member name="T:Spire.Xls.RenameStrategy">
            <summary>
            Defines the strategies for handling rename conflicts.
            </summary>
        </member>
        <member name="F:Spire.Xls.RenameStrategy.Exception">
            <summary>
            Represents a general exception that occurred.
            </summary>
        </member>
        <member name="F:Spire.Xls.RenameStrategy.Digit">
            <summary>
            Represents a digit character.
            </summary>
        </member>
        <member name="F:Spire.Xls.RenameStrategy.Letter">
            <summary>
            Represents a letter character.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExportTableOptions">
            <summary>
            Represents options for exporting a table.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExportTableOptions.#ctor">
            <summary>
            Initializes a new instance of the ExportTableOptions class.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExportTableOptions.KeepDataFormat">
            <summary>
            Gets or sets a value indicating whether to keep the data format.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExportTableOptions.ExportColumnNames">
            <summary>
            Gets or sets a value indicating whether to export column names.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExportTableOptions.RenameStrategy">
            <summary>
            Gets or sets the rename strategy.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExportTableOptions.ComputedFormulaValue">
            <summary>
            Gets or sets the computed formula value.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExternalConnection">
            <summary>
            Represents an abstract class for external database connections.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.ID">
            <summary>
            Gets the unique identifier for the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.ConnType">
            <summary>
            Gets the type of the connection data source.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.BackgroundRefresh">
            <summary>
            Gets or sets a value indicating whether background refresh is enabled.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.RefreshedVersion">
            <summary>
            Gets or sets the refreshed version of something.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.SaveData">
            <summary>
            Gets or sets a value indicating whether to save data.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.OdcFile">
            <summary>
            Gets or sets the ODC file.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the object should be kept alive.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalConnection.OnlyUseConnectionFile">
            <summary>
            Gets or sets a value indicating whether to use a connection file only.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExternalLink">
            <summary>
            Represents an external link in a spreadsheet, inheriting from Spire.Xls.Core.Spreadsheet.XlsObject.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExternalLink.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ExternalLink class.
            </summary>
            <param name="parent">The parent object of the ExternalLink.</param>
        </member>
        <member name="P:Spire.Xls.ExternalLink.DataSource">
            <summary>
            Gets or sets the data source of the external link.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalLink.IsReferred">
            <summary>
            Gets a value indicating whether the current link is referred.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExternalLink.IsVisible">
            <summary>
            Gets a value indicating whether the item is visible.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExternalLink.AddExternalName(System.String,System.String)">
            <summary>
            Adds an external name reference to the link conversion.
            </summary>
            <param name="text">The text to be referenced.</param>
            <param name="referTo">The reference to which the text should be linked.</param>
        </member>
        <member name="T:Spire.Xls.ImportObjectOptions">
            <summary>
            Represents options for importing objects.
            </summary>
        </member>
        <member name="M:Spire.Xls.ImportObjectOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.ImportObjectOptions"/> class.
            Sets the default value for the <see cref="F:Spire.Xls.ImportObjectOptions.optionConvert"/> property to a new instance of <see cref="T:Spire.Xls.Core.Converter.Spreadsheet.ImportTableOptions"/>.
            </summary>
        </member>
        <member name="P:Spire.Xls.ImportObjectOptions.ConvertNumericData">
            <summary>
            Gets or sets a value indicating whether numeric data should be converted.
            </summary>
        </member>
        <member name="P:Spire.Xls.ImportObjectOptions.InsertRows">
            <summary>
            Gets or sets a value indicating whether rows should be inserted.
            </summary>
        </member>
        <member name="P:Spire.Xls.ImportObjectOptions.CheckMergedCells">
            <summary>
            Gets or sets a value indicating whether to check for merged cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.ImportObjectOptions.IsFieldNameShown">
            <summary>
            Gets or sets a value indicating whether the field name is shown.
            </summary>
        </member>
        <member name="P:Spire.Xls.ImportObjectOptions.DateFormat">
            <summary>
            Gets or sets the date format.
            </summary>
        </member>
        <member name="T:Spire.Xls.QueryTableXls">
            <summary>
            Represents QueryTable information.
            </summary>
        </member>
        <member name="P:Spire.Xls.QueryTableXls.AdjustColumnWidth">
            <summary>
            Returns or sets the AdjustColumnWidth of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.QueryTableXls.PreserveFormatting">
            <summary>
            Returns or sets the PreserveFormatting of the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.ReferRangeArea">
            <summary>
            Represents a reference range area.
            </summary>
        </member>
        <member name="M:Spire.Xls.ReferRangeArea.#ctor">
            <summary>
            Initializes a new instance of the ReferRangeArea class.
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.IsExternalLink">
            <summary>
            Indicates whether this is an external link.
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.ExternalFileName">
            <summary>
             this.KeepedRels = source.KeepedRels;
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.SheetName">
            <summary>
            Indicates which sheet this is in
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.EndColumn">
            <summary>
            The end column of the area.
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.StartColumn">
            <summary>
            The start column of the area.
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.EndRow">
            <summary>
            The end row of the area.
            </summary>
        </member>
        <member name="P:Spire.Xls.ReferRangeArea.StartRow">
            <summary>
            The start row of the area.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeReflection">
            <summary>
            Represents a class for shape reflection operations.
            </summary>
        </member>
        <member name="M:Spire.Xls.ShapeReflection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ShapeReflection class with the specified parent object.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:Spire.Xls.ShapeReflection.SetConvert(System.Object)">
            <summary>
            Sets the convert object to a ShapePropertyCollection and extracts the reflection effect.
            </summary>
            <param name="obj">The object to convert.</param>
        </member>
        <member name="M:Spire.Xls.ShapeReflection.Clone(System.Object)">
            <summary>
            Clones the current instance of ShapeReflection and sets the parent.
            </summary>
            <param name="parent">The parent object.</param>
            <returns>A new instance of ShapeReflection that is a copy of the current instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parent parameter is null.</exception>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.Blur">
            <summary>
            Gets or sets the blur radius for the reflection conversion.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.Direction">
            <summary>
            Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.Distance">
            <summary>
            Gets and sets how far to distance the shadow.
            </summary>
            <value>
            The distance.
            </value>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.FadeDirection">
            <summary>
            Gets and sets the direction to offset the reflection.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.RotWithShape">
            <summary>
            Gets or sets a value indicating whether the rotation should be applied with the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.Size">
            <summary>
            Gets or sets the size of the reflect convert.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeReflection.Transparency">
            <summary>
            Gets or sets the transparency level of the reflect convert.
            </summary>
        </member>
        <member name="T:Spire.Xls.WebQueryConnection">
            <summary>
            Represents a connection to a web-based query service.
            </summary>
        </member>
        <member name="M:Spire.Xls.WebQueryConnection.#ctor">
            <summary>
            Initializes a new instance of the WebQueryConnection class.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.ID">
            <summary>
            Gets the ID of the connection.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.Name">
            <summary>
            Gets or sets the name of the connection.
            When setting the name, it also marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.ConnType">
            <summary>
            Gets the connection data source type.
            </summary>
            <returns>The connection data source type.</returns>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.BackgroundRefresh">
            <summary>
            Gets or sets a value indicating whether background refresh is enabled.
            When the value is set, it also marks the connection converter as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.RefreshedVersion">
            <summary>
            Gets or sets the refreshed version of the connection conversion.
            When setting the value, it also marks the connection conversion as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.SaveData">
            <summary>
            Gets or sets the save data flag and marks the connection as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.OdcFile">
            <summary>
            Gets or sets the ODC file associated with the connection converter.
            When the value is set, the ischanged property is also set to true to indicate that the connection converter has been modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.KeepAlive">
            <summary>
            Gets or sets the value indicating whether the connection should keep alive.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.OnlyUseConnectionFile">
            <summary>
            Gets or sets a value indicating whether to use a connection file only.
            When the value is set, it also sets the ischanged property to true.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.SourceData">
            <summary>
            Gets or sets the source data for the connection conversion.
            Setting this property updates the internal state of the connection conversion object to indicate that changes have been made.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.ParsePre">
            <summary>
            Gets or sets a value indicating whether to parse preformatted text.
            When the value is set, it also marks the connection converter as changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.Consecutive">
            <summary>
            Gets or sets a value indicating whether the consecutive property has been changed.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.Xl2000">
            <summary>
            Gets or sets the value indicating whether the web_xl2000 property of the connConvert object is set to true or false.
            Setting this property to true or false will also set the ischanged property of the connConvert object to true.
            </summary>
        </member>
        <member name="P:Spire.Xls.WebQueryConnection.Url">
            <summary>
            Gets or sets the URL for the connection.
            When setting the value, it also marks the connection as changed.
            </summary>
        </member>
        <member name="T:Spire.Xls.Chart">
            <summary>
            Represents a chart shape in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Series">
            <summary>
            Returns an object that represents either a single series (a Series object) or a collection of all the series (a SeriesCollection collection) in the chart or chart group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.ChartTitleArea">
            <summary>
            Gets title text area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.ChartArea">
             <summary>
             Returns a ChartArea object that represents the complete chart area for the chart.
             <example>The following code illustrates how to access IChartFrameFormat using ChartArea 
             property and set foreground color for the ChartArea:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart frame format</para>
                 <para>IChartFrameFormat frameFormat = chart.ChartArea;</para>
                 <para>//Set color</para>
                 <para>frameFormat.Fill.ForeColor = System.Drawing.Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Chart.DataRange">
            <summary>
            DataRange for the chart series.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.DataTable">
             <summary>
             Returns a DataTable object that represents the chart data table.
             <example>The following code illustrates how to set HasDataTable to "true" to enable data table
             and set IChartDataTable.HasBorders to "false" to hide the borders of data table:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set Chart data table</para>
                 <para>chart.HasDataTable = true;</para>
                 <para>IChartDataTable dataTable = chart.DataTable;</para>
                 <para>//Set border</para>
                 <para>dataTable.HasBorders = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Floor">
            <summary>
            Returns a Floor object that represents the floor of the 3-D chart.
            <example>The following code illustrates how to access IChartWallOrFloor using Floor 
            property and set foreground color for the chart's Floor:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Get chart</para>
                <para>Chart chart = worksheet.Charts[0];</para>
                
                <para>//Set chart wall</para>
                <para>IChartWallOrFloor floor = chart.Floor;</para>
                <para>//Set color</para>
                <para>floor.Fill.FillType = ShapeFillType.SolidColor;</para>
                <para>floor.Fill.ForeColor = System.Drawing.Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Legend">
             <summary>
             Represents chart legend.
             <example>The following code illustrates how to access IChartLegend using IChart.Legend 
             property and set IChartLegend.Position to LegendPositionType.Left:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart legend and legend position</para>
                 <para>IChartLegend legend = chart.Legend;</para>
                 <para>legend.Position = LegendPositionType.Left;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Chart.PageSetup">
            <summary>
            Page setup for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.PlotArea">
             <summary>
             Returns a PlotArea object that represents the plot area of a chart.
             <example>The following code illustrates how to access IChartFrameFormat using PlotArea 
             property and set foreground color for the chart's PlotArea:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Add data</para>
                 <para>worksheet.Range["A1"].Text = "Jan";
                       worksheet.Range["B1"].Text = "Feb";
                       worksheet.Range["C1"].Text = "Mar";
                       worksheet.Range["A2"].Text = "10";
                       worksheet.Range["B2"].Text = "20";
                       worksheet.Range["C2"].Text = "30";</para>
                         
                 <para>//Create chart and range</para>
                 <para>Chart chart = worksheet.Charts.Add();</para>
                 <para>chart.DataRange = worksheet.Range["A1:C2"];</para>
                 
                 <para>//Set chart frame format</para>
                 <para>IChartFrameFormat frameFormat = chart.PlotArea;</para>
                 <para>//Set color</para>
                 <para>frameFormat.Fill.ForeColor = System.Drawing.Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Chart.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Chart.PrimaryCategoryAxis">
            <summary>
            Returns primary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.PrimaryValueAxis">
            <summary>
            Returns primary value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.PrimarySerieAxis">
            <summary>
            Returns primary series axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.SecondaryCategoryAxis">
            <summary>
            Returns secondary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.SecondaryValueAxis">
            <summary>
            Returns secondary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Workbook">
            <summary>
            Workbook contains the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Walls">
            <summary>
            Represents chart walls.
            <example>The following code illustrates how to access IChartWallOrFloor using Walls 
            property and set foreground color for the chart's Walls:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                        
                <para>//Get chart</para>
                <para>Chart chart = worksheet.Charts[0];</para>
                
                <para>//Set chart wall</para>
                <para>IChartWallOrFloor wall = chart.Walls;</para>
                <para>//Set color</para>
                <para>wall.Fill.FillType = ShapeFillType.SolidColor;</para>
                <para>wall.Fill.ForeColor = System.Drawing.Color.Red;</para>
                
                <para>//Save to file</para>
                <para>workbook.SaveToFile("Chart.xlsx");</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Chart.Worksheet">
            <summary>
            Worksheet which contains the chart.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartShadow">
            <summary>
            Represents Chart`s Shadow
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartShadow.ShadowOuterType">
            <summary>
            Gets or sets the shadow outer presets.
            </summary>
            <value>The shadow outer presets.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.ShadowInnerType">
            <summary>
            Gets or sets the shadow inner presets.
            </summary>
            <value>The shadow inner presets.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.ShadowPrespectiveType">
            <summary>
            Gets or sets the shadow prespective presets.
            </summary>
            <value>The shadow prespective presets.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.HasCustomStyle">
            <summary>
            Gets or sets a value indicating whether this instance has custom shadow style.
            </summary>
            <value>
            	<c>true</c> if this instance has custom shadow style; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Transparency">
            <summary>
            Gets or sets the transparency of Shadow.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Size">
            <summary>
            Gets or sets the size of Shadow.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Blur">
            <summary>
            Gets or sets the blur of Shadow.
            </summary>
            <value>The blur.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Angle">
            <summary>
            Gets or sets the angle of Shadow.
            </summary>
            <value>The angle.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Distance">
            <summary>
            Gets or sets the distance of Shadow.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
            <value>The color of the shadow.</value>
        </member>
        <member name="P:Spire.Xls.ChartShadow.SoftEdge">
            <summary>
            Gets or sets the radio of soft edge.
            </summary>
        </member>
        <member name="M:Spire.Xls.ChartShadow.CustomShadowStyles(Spire.Xls.XLSXChartShadowOuterType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the outer shadow styles.
            </summary>
            <param name="iOuter">The Excel2007ChartPresetsOuter enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iSize">Size of the Shadow accepts the values between(0-200).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [custom shadow style].</param>
        </member>
        <member name="M:Spire.Xls.ChartShadow.CustomShadowStyles(Spire.Xls.XLSXChartShadowInnerType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the inner shadow styles.
            </summary>
            <param name="iInner">The Excel2007ChartPresetsInner enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [custom shadow style].</param>
        </member>
        <member name="M:Spire.Xls.ChartShadow.CustomShadowStyles(Spire.Xls.XLSXChartPrespectiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Customs the perspective shadow styles.
            </summary>
            <param name="iPerspective">The Excel2007ChartPresetsPerspective enumeration.</param>
            <param name="iTransparency">Transparency of the Shadow accepts the values between(0-100).</param>
            <param name="iSize">Size of the Shadow accepts the values between(0-200).</param>
            <param name="iBlur">Blur level of the Shadow accepts the values between(0-100).</param>
            <param name="iAngle">Angle or Direction of the Shadow accepts the values between(0-359).</param>
            <param name="iDistance">Distance of the Shadow accepts the values between(0-200).</param>
            <param name="iCustomShadowStyle">if set to <c>true</c> [i custom shadow style].</param>
        </member>
        <member name="M:Spire.Xls.ChartShadow.Clone(System.Object)">
            <summary>
            Clone current Record.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="T:Spire.Xls.ChartSheet">
            <summary>
            Represents a ChartSheet
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Series">
            <summary>
            Returns an object that represents either a single series (a Series object) or a collection of all the series (a SeriesCollection collection) in the chart or chart group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.ChartTitleArea">
            <summary>
            Gets title text area. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.ChartArea">
            <summary>
            Returns an object that represents the complete chart area for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.DataRange">
            <summary>
            DataRange for the chart series.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.DataTable">
            <summary>
            Returns a DataTable object that represents the chart data table.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Floor">
            <summary>
            Returns a Floor object that represents the floor of the 3-D chart
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Legend">
            <summary>
            Represents chart legend.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.PageSetup">
            <summary>
            Page setup for the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.PlotArea">
            <summary>
            Returns a PlotArea object that represents the plot area of a chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.PrimaryCategoryAxis">
            <summary>
            Returns primary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.PrimaryValueAxis">
            <summary>
            Returns primary value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.PrimarySerieAxis">
            <summary>
            Returns primary series axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.SecondaryCategoryAxis">
            <summary>
            Returns secondary category axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.SecondaryValueAxis">
            <summary>
            Returns secondary value axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Workbook">
            <summary>
            Workbook which contains the chart.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Walls">
            <summary>
            Represents chart walls.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.TextBoxes">
            <summary>
            Returns inner textboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.CheckBoxes">
            <summary>
            Returns inner checkboxes collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ChartSheet.Comments">
            <summary>
            Represents comments collection for the worksheet. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.ChartSheet.ToSVGStream(System.IO.Stream)">
            <summary>
            Convert chart to Svg stream
            </summary>
            <param name="stream">stream.</param>
        </member>
        <member name="T:Spire.Xls.ConditionalFormats">
            <summary>
            Contains a condition and the formatting for cells.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormats.Item(System.Int32)">
            <summary>
            Returns single element from the collection. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormats.AddCondition">
            <summary>
            Adds new condition to the collection.
            </summary>
            <returns>Newly added condition.</returns>
        </member>
        <member name="M:Spire.Xls.ConditionalFormats.AddCondition(Spire.Xls.ConditionalFormatType,System.Boolean)">
            <summary>
            Adds a new conditional format to the collection with the specified type and stop if true setting.
            </summary>
            <param name="type">The type of the conditional format.</param>
            <param name="stopIsTrue">Indicates whether to stop evaluating further conditions if this condition is true.</param>
            <returns>A new instance of ConditionalFormatWrapper configured with the specified type and stop if true setting.</returns>
        </member>
        <member name="T:Spire.Xls.PivotTableFields">
            <summary>
            Represents a collection of fields in a pivot table, which are used to categorize, summarize, and filter data.
            </summary>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the PivotTableFields class.
            </summary>
            <param name="parent">The parent object, expected to be of type XlsPivotTable.</param>
            <returns>
            None. This constructor sets up the internal state of the PivotTableFields object.
            </returns>
        </member>
        <member name="P:Spire.Xls.PivotTableFields.Item(System.String)">
            <summary>
            Returns single entry from the collection.
            </summary>
            <param name="name">Name of the item to get.</param>
            <returns>Single entry from the collection.</returns>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.Clone(System.Object)">
            <summary>
            Creates a copy of the current object.
            </summary>
            <param name="parent">New parent for the created object.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0 or greater than or equal to the size of the collection.</exception>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.Remove(Spire.Xls.PivotField)">
            <summary>
            Removes the first occurrence of a specific object from the PivotField collection.
            </summary>
            <param name="item">The PivotField object to remove from the collection.</param>
            <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.Clear">
            <summary>
            Clears all items from the collection.
            </summary>
        </member>
        <member name="M:Spire.Xls.PivotTableFields.Add(Spire.Xls.PivotField)">
            <summary>
            Adds a PivotField item to the collection.
            </summary>
            <param name="item">The PivotField item to add.</param>
        </member>
        <member name="T:Spire.Xls.ConditionalFormatWrapper">
            <summary>
            Summary description for ConditionalFormatWrapper.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatWrapper.m_formats">
            <summary>
            Parent conditional formats wrapper.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatWrapper.m_iIndex">
            <summary>
            Condition index.
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.#ctor(Spire.Xls.Core.Spreadsheet.Collections.CondFormatCollectionWrapper,System.Int32)">
            <summary>
            Creates new instance of the wrapper.
            </summary>
            <param name="formats">Parent formats collection.</param>
            <param name="iIndex">Condition index.</param>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Parent">
            <summary>
            Parent object for this object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Priority">
            <summary>
            Gets or sets the priority of the condition.
            </summary>
            <returns>The priority value of the condition.</returns>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.TopBottom">
            <summary>
            Get the conditional formatting's "TopBottom" instance.
            The default instance's rule highlights cells whose
            values fall in the top 10 bracket.
            Valid only for type = TopBottom.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Average">
            <summary>
            Get the conditional formatting's "Average" instance.
            The default instance's rule highlights cells that are 
            above the average for all values in the range.
            Valid only for type = Average.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FormatType">
            <summary>
            Type of the conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.StopIfTrue">
            <summary>
            True, no rules with lower priority may be applied over this rule, when this rule evaluates to true.
            Only applies for Excel 2007;
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Operator">
            <summary>
            Type of the comparison operator.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsBold">
            <summary>
            Indicates whether the font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsItalic">
            <summary>
            Indicates whether font is italic.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FontKnownColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Underline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsStrikeThrough">
            <summary>
            Indicates whether font is struck through.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.LeftBorderKnownColor">
            <summary>
            Color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.LeftBorderColor">
            <summary>
            Color of the left line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.LeftBorderStyle">
            <summary>
            Left border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.RightBorderKnownColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.RightBorderColor">
            <summary>
            Color of the right line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.RightBorderStyle">
            <summary>
            Right border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.TopBorderKnownColor">
            <summary>
            Color of the top line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.TopBorderColor">
            <summary>
            Color of the top line
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.TopBorderStyle">
            <summary>
            Top border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BottomBorderKnownColor">
            <summary>
            Color of the bottom line.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BottomBorderColor">
            <summary>
            Color of the bottom line
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BottomBorderStyle">
            <summary>
            Bottom border line style.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FirstFormula">
            <summary>
            First formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FirstFormulaR1C1">
            <summary>
            First formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.SecondFormulaR1C1">
            <summary>
            First formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.SecondFormula">
            <summary>
            Second formula.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.KnownColor">
            <summary>
            Pattern foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.Color">
            <summary>
            Pattern foreground color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BackKnownColor">
            <summary>
            Pattern background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BackColor">
            <summary>
            Pattern background color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FillPattern">
            <summary>
            XlsFill pattern style.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsSuperScript">
            <summary>
            Indicates whether font is superscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsSubScript">
            <summary>
            Indicates whether font is subscript.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.NumberFormat">
            <summary>
            Gets or sets the number format for the condition.
            </summary>
            <returns>
            The current number format as a string.
            </returns>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.ColorScale">
            <summary>
            Returns color scale settings. Valid only if FormatType is set to ColorScale. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.DataBar">
            <summary>
            Returns data bar settings. Valid only if FormatType is set to DataBar. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IconSet">
            <summary>
            Returns iconset settings. Valid only if FormatType is set to IconSet. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.GetCondition">
            <summary>
            Returns unwrapped condition.
            </summary>
            <returns>Unwrapped condition.</returns>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.MakeFormula">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.MakeFormula(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.ConditionalFormatWrapper.SetTimePeriod(Spire.Xls.Core.Spreadsheet.ConditionalFormatting.TimePeriodType)">
            <summary>
            Sets the time period for the conditional formatting rule.
            </summary>
            <param name="timePeriod">The time period type to apply for the conditional formatting.</param>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.OColor">
            <summary>
            Conditional format color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BackColorObject">
            <summary>
            Conditional format background color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.TopBorderColorObject">
            <summary>
            Conditional format top border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.BottomBorderColorObject">
            <summary>
            Conditional format bottom border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.LeftBorderColorObject">
            <summary>
            Conditional format left border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.RightBorderColorObject">
            <summary>
            Conditional format right border color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.FontColorObject">
            <summary>
            Conditional format font color. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsPatternStyleModified">
            <summary>
            Indicates whether pattern style was modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsBackgroundColorPresent">
            <summary>
            If true - background color present. otherwise - false.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsBorderFormatPresent">
            <summary>
            True if contains border formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsBottomBorderModified">
            <summary>
            True if bottom border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsFontColorPresent">
            <summary>
            If true - format color present. otherwise - false.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsFontFormatPresent">
            <summary>
            True if contains font formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsLeftBorderModified">
            <summary>
            True if left border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsPatternColorPresent">
            <summary>
            Indicates whether pattern color .
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsPatternFormatPresent">
            <summary>
            True if contains pattern formatting.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsRightBorderModified">
            <summary>
            True if right border style and color modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.IsTopBorderModified">
            <summary>
            True if top border style and color are modified.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionalFormatWrapper.DxfId">
            <summary>
            Gets or sets the DXF ID associated with the object.
            </summary>
        </member>
        <member name="T:Spire.Xls.DocumentProperty">
            <summary>
            Represents a property of a document.
            </summary>
        </member>
        <member name="F:Spire.Xls.DocumentProperty.DEF_FILE_TIME_START_YEAR">
            <summary>
            The default file time start year, typically set to 1600.
            </summary>
        </member>
        <member name="F:Spire.Xls.DocumentProperty.m_propertyId">
            <summary>
            Property id.
            </summary>
        </member>
        <member name="F:Spire.Xls.DocumentProperty.m_strName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="F:Spire.Xls.DocumentProperty.m_strLinkSource">
            <summary>
            The source of a linked custom document property. Read/write String.
            </summary>
        </member>
        <member name="F:Spire.Xls.DocumentProperty.m_bLinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content
            of the container document. False if the value is static. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.IsBuiltIn">
            <summary>
            Indicates whether property is built-in. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.PropertyId">
            <summary>
            Returns property id for built-in properties. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.PropertyType">
            <summary>
            Gets / sets document property type.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.InternalName">
            <summary>
            Gets the internal name of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Name">
            <summary>
            Returns property name. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Value">
            <summary>
            Gets / sets property value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Blob">
            <summary>
            Gets / sets Blob value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Boolean">
            <summary>
            Gets / sets boolean value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Integer">
            <summary>
            Gets / sets integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Int32">
            <summary>
            Gets / sets 4-bytes signed integer value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Double">
            <summary>
            Gets / sets double value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.Text">
            <summary>
            Gets / sets string value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.DateTime">
            <summary>
            Gets / sets DateTime value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.TimeSpan">
            <summary>
            Gets / sets TimeSpan value.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.LinkSource">
            <summary>
            Returns or sets the source of a linked custom document property. Read/write String.
            </summary>
        </member>
        <member name="P:Spire.Xls.DocumentProperty.LinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content
            of the container document. False if the value is static. Read/write Boolean.
            </summary>
        </member>
        <member name="M:Spire.Xls.DocumentProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Spire.Xls.DocumentProperty.SetLinkSource(Spire.Xls.IPropertyData)">
            <summary>
            Sets the link source from the provided IPropertyData object.
            Validates that the variant is not null and has a type of VT_LPSTR or VT_LPWSTR.
            Converts the variant value to a string and assigns it to the LinkSource property.
            </summary>
            <param name="variant">The IPropertyData object containing the link source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the variant parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the variant type is not VT_LPSTR or VT_LPWSTR.</exception>
        </member>
        <member name="M:Spire.Xls.DocumentProperty.CorrectIndex(Spire.Xls.BuiltInPropertyType,System.Boolean@)">
            <summary>
            Converts propertyId into correct index.
            </summary>
            <param name="propertyId">PropertyId to convert.</param>
            <param name="bSummary">[out] Indicates whether this is documnet summary property of simply document property.</param>
            <returns>Correct property index.</returns>
        </member>
        <member name="T:Spire.Xls.ExcelInterior">
            <summary>
            Represents the interior object for extended format .
            This class provides methods and properties to set the fill color, pattern, and other styling options for cell interiors.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelInterior.m_interior">
            <summary>
            Represents the interior object for extended format.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelInterior.#ctor(Spire.Xls.Core.IInterior)">
            <summary>
            Initializes a new instance of the ExcelInterior class with the specified interior object.
            </summary>
            <param name="interior">The interior object to initialize the ExcelInterior with.</param>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.PatternKnownColor">
            <summary>
            Gets or sets the known color of the pattern applied to the interior .
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.PatternColor">
            <summary>
            Gets or sets the pattern color of the interior.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.KnownColor">
            <summary>
            Gets or sets the known color of the interior.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.Color">
            <summary>
            Gets or sets the color of the interior fill.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.Gradient">
            <summary>
            Gets the gradient of the interior.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelInterior.FillPattern">
            <summary>
            Gets or sets the fill pattern of the interior.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotCache">
            <summary>
            Represents a cache of data used by a PivotTable in Excel. The PivotCache stores the data source and any filters or transformations applied to the data, which can then be used to quickly refresh the PivotTable without re-querying the original data source.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotField">
            <summary>
            Represents a field in a pivot table, which can be used to define the rows, columns, values, or filters in the pivot table.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotTable">
            <summary>
            Represents a pivot table that summarizes and organizes data in a tabular format, allowing for dynamic analysis and reporting.
            </summary>
        </member>
        <member name="T:Spire.Xls.Sparkline">
            <summary>
            A sparkline represents a tiny chart or graphic in a worksheet cell that provides a visual representation of data. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Sparkline.DataRange">
            <summary>
            Represents the data range of the sparkline.
            </summary>
            <value>The data range.</value>
            <exception cref="!:ArgumentOutOfRange">
            if the value.Rows.Length is not equal to 1.
            </exception>
        </member>
        <member name="P:Spire.Xls.Sparkline.RefRange">
            <summary>
            Represents the reference range of the sparkline.
            </summary>
            <value>The reference range.</value>
            <exception cref="!:ArgumentOutOfRange">
            if the value.Rows.length and value.Columns.Length is not equal to 1;
            </exception>
        </member>
        <member name="P:Spire.Xls.Sparkline.Column">
            <summary>
            Gets the column index of a sparkline.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Spire.Xls.Sparkline.Row">
            <summary>
            Gets the row index of a sparkline.
            </summary>
            <value>The row index.</value>
        </member>
        <member name="T:Spire.Xls.SparklineCollection">
            <summary>
            Represents the SparklineCollection.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.#ctor(Spire.Xls.SparklineGroup)">
            <summary>
            Initializes a new instance of the SparklineCollection class with the specified SparklineGroup.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Add">
            <summary>
            Adds Sparkline instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a sparkline to the specified row and column using the data from the given range.
            </summary>
            <param name="dataRange">The range of cells containing the data for the sparkline.</param>
            <param name="row">The row index where the sparkline will be added.</param>
            <param name="column">The column index where the sparkline will be added.</param>
            <returns>The Sparkline object that was added.</returns>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Add(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Add(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.RefreshRanges(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Adds the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.RefreshRanges(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Refresh data range of the sparkline.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Clear">
            <summary>
            Clears the sparklines.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineCollection.Clear(Spire.Xls.Sparkline)">
            <summary>
            Clears the sparkline.
            </summary>
            <param name="sparkline">The sparkline.</param>
        </member>
        <member name="T:Spire.Xls.SparklineGroup">
            <summary>
            Represents a SparklineGroup.The SparklineGroup object is a member of the 
            SparklineGroups collection.The SparklineGroups collection contains all 
            the SparklineGroup objects in a workheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.SparklineList">
            <summary>
            Gets the collection of sparklines associated with the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowHorizontalAxis">
            <summary>
            Indicates whether to show the sparkline horizontal axis. The horizontal axis appears if the sparkline has data that crosses the zero axis.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.IsDisplayHidden">
            <summary>
            Indicates whether to show data in hidden rows and columns.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.PlotRightToLeft">
            <summary>
            Indicates whether the plot data is right to left. 
            </summary>
            <value><c>true</c> if [plot right to left]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowFirstPoint">
            <summary>
            Indicates whether to highlight the first point of data in the sparkline group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowLastPoint">
            <summary>
            Indicates whether to highlight the last point of data in the sparkline group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowLowPoint">
            <summary>
            Indicates whether to highlight the lowest points of data in the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowHighPoint">
             <summary>
            Indicates whether to highlight the highest points of data in the sparkline group. 
             </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowNegativePoint">
            <summary>
            Indicates whether to highlight the negative values on the sparkline group with a different color or marker.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.ShowMarkers">
            <summary>
            Indicates whether to highlight each point in each line sparkline in the sparkline group.  
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.VerticalAxisMaxValue">
            <summary>
            Gets and sets the custom maximum value for the vertical axis. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.VerticalAxisMaxType">
            <summary>
            Represents the vertical axis maximum value type. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.VerticalAxisMinValue">
            <summary>
            Gets and sets the custom minimum value for the vertical axis. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.VerticalAxisMinValueType">
            <summary>
            Represents the vertical axis minimum value type. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.SparklineType">
            <summary>
            Indicates the sparkline type of the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.IsHorizontalDateAxis">
            <summary>
            Indicates wheter represents the horizontal axis type as Dateaxis.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.EmptyCellsType">
            <summary>
            Indicates how to display empty cells.
            </summary>
            <value>The DisplayEmptyCellsAs property gets/sets the m_displayEmptyCellsAs data member.</value>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.HorizontalDateAxisRange">
            <summary>
            Represents the range that contains the date values for the sparkline data.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.HorizontalAxisColor">
            <summary>
            Gets and sets the color of the horizontal axis in the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.FirstPointColor">
            <summary>
            Gets and sets the color of the first point of data in the sparkline group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.HighPointColor">
            <summary>
            Gets and sets the color of the highest points of data in the sparkline group. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.LastPointColor">
            <summary>
            Gets and sets the color of the last point of data in the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.LineWeight">
            <summary>
            Gets and sets the line weight in each line sparkline in the sparkline group, in the unit of points. 
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.LowPointColor">
            <summary>
            Gets and sets the color of the lowest points of data in the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.MarkersColor">
             <summary>
            Gets and sets the color of points in each line sparkline in the sparkline group.
             </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.NegativePointColor">
            <summary>
            Gets and sets the color of the negative values on the sparkline group.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.SparklineColor">
            <summary>
            Gets and sets the color of the sparklines in the sparkline group. 
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroup.Add">
            <summary>
            Adds a new Sparkline to the collection.
            </summary>
            <returns>
            The updated SparklineCollection with the new Sparkline added.
            </returns>
        </member>
        <member name="P:Spire.Xls.SparklineGroup.Item(System.Int32)">
            <summary>
            Gets the SparklineCollection at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Xls.SparklineGroupCollection">
            <summary>
            The SparklineGroupCollection represents the collection of SparklineGroup objects.
            </summary>
        </member>
        <member name="P:Spire.Xls.SparklineGroupCollection.Item(System.Int32)">
            <summary>
            Gets the SparklineGroup at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroupCollection.Clear">
            <summary>
            Clears the sparkline group.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroupCollection.Remove(Spire.Xls.SparklineGroup)">
            <summary>
            Remove a sparkline group.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroupCollection.Clear(Spire.Xls.SparklineGroup)">
            <summary>
            Clears the sparkline group.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroupCollection.AddGroup(Spire.Xls.SparklineType)">
            <summary>
            Adds the SparklineGroup instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.SparklineGroupCollection.AddGroup">
            <summary>
            Adds the SparklineGroup instance.
            </summary>
        </member>
        <member name="T:Spire.Xls.MarkerDesigner">
            <summary>
            WorkbookDesignerused for template markers to the workbook and worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddDataTable(System.String,System.Data.DataTable)">
            <summary>
            Add datatable to template markers(Match column name automatically).
            </summary>
            <param name="paraName">Parameter Name</param>
            <param name="dataTable">Datatable object</param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddDataTable(System.String,System.Data.DataTable,System.Int32)">
            <summary>
            Add datatable to template markers(Match column name automatically).
            </summary>
            <param name="paraName">Parameter Name</param>
            <param name="dataTable">Datatable object</param>
            <param name="rowCount">Number of data rows used per apply</param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddDataView(System.String,System.Data.DataView)">
            <summary>
            Add dataview to template markers(Match column name automatically).
            </summary>
            <param name="paraName">Parameter Name</param>
            <param name="dataView">Datatable object</param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddArray(System.String,System.Object[])">
            <summary>
            Adds an array of values to a specified parameter in the method.
            </summary>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddDataColumn(System.String,System.Data.DataColumn)">
            <summary>
            Adds a data column to the template marker with the specified parameter name and value.
            </summary>
            <param name="paramName">The name of the parameter to add.</param>
            <param name="paramValue">The data column value to associate with the parameter.</param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.AddParameter(System.String,System.Object)">
            <summary>
            Adds parameter to template markers.
            </summary>
            <param name="paraName">Parameter Name</param>
            <param name="paramValue">Parameter Value</param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.RemoveParameter(System.String)">
            <summary>
            Removes parameter from template marker.
            </summary>
            <param name="paraName"></param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.Contains(System.String)">
            <summary>
            Checks parameter is exist.
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:Spire.Xls.MarkerDesigner.Apply">
            <summary>
            Apply templates markers
            </summary>
        </member>
        <member name="P:Spire.Xls.MarkerDesigner.Prefix">
            <summary>
            Prefix of Marker
            </summary>
        </member>
        <member name="P:Spire.Xls.MarkerDesigner.IsDetectDataTypes">
            <summary>
            Whether detect the dataTypes when apply marker
            </summary>
        </member>
        <member name="T:Spire.Xls.ColorScale">
            <summary>
            The color scale condition in the conditional format
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.Criteria">
            <summary>
            Indicates the type, value, and the color
            of threshold criteria used in the color scale conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MaxColor">
            <summary>
            Get or set the max value object's corresponding color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MidColor">
            <summary>
            Get or set the mid value object's corresponding color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MinColor">
            <summary>
            Get or set the min value object's corresponding color.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MaxValue">
            <summary>
            Get or set this ColorScale's max value object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MidValue">
            <summary>
            Get or set this ColorScale's mid value object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ColorScale.MinValue">
            <summary>
            Get or set this ColorScale's min value object.
            </summary>
        </member>
        <member name="M:Spire.Xls.ColorScale.AddCriteria(Spire.Xls.Core.Spreadsheet.ColorConditionValue)">
            <summary>
            Add a ColorConditionValue
            </summary>
            <param name="item">item detail <see cref="T:Spire.Xls.Core.Spreadsheet.ColorConditionValue"/></param>
        </member>
        <member name="M:Spire.Xls.ColorScale.AddCriteria(Spire.Xls.ConditionValueType,System.Object,System.Drawing.Color)">
            <summary>
            Add a ColorConditionValue
            </summary>
            <param name="type">the ConditionValueType</param>
            <param name="value"></param>
            <param name="color"></param>
        </member>
        <member name="M:Spire.Xls.ColorScale.SetConditionCount(System.Int32)">
            <summary>
            Sets number of objects in the collection.
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Spire.Xls.ConditionalFormat">
            <summary>
            Contains a condition and the formatting for cells.
            </summary>
        </member>
        <member name="T:Spire.Xls.DataBar">
            <summary>
            Represents a data bar conditional formating rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.MinPoint">
            <summary>
            The shortest bar is evaluated for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.MaxPoint">
            <summary>
            The longest bar is evaluated for a data bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.BarColor">
            <summary>
            Gets or sets the color of the bar in a data bar condition format.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.PercentMax">
            <summary>
            Gets or sets a value that specifies the length of the longest data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.PercentMin">
            <summary>
            Gets or sets a value that specifies the length of the shortest data bar as a percentage of cell width.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.ShowValue">
            <summary>
            Gets or sets a Boolean value that specifies if the value in the cell is displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.AxisColor">
            <summary>
            Gets the color of the axis for cells with conditional formatting as data bars.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.AxisPosition">
            <summary>
            Gets or sets the position of the axis of the data bars specified by a conditional formatting rule.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.BarBorder">
            <summary>
            Gets an object that specifies the border of a data bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.BarFillType">
            <summary>
            Gets or sets the type of fill for the data bar.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.Direction">
            <summary>
            Gets or sets the direction the databar is displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.DataBar.NegativeBarFormat">
            <summary>
            Gets the NegativeBarFormat object associated with a data bar conditional formatting rule.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelComment">
            <summary>
            Represents a comment in an Excel worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelComment.#ctor(Spire.Xls.Core.ICommentShape)">
            <summary>
            Initializes a new instance of the ExcelComment class with the specified comment shape.
            </summary>
            <param name="commentShape">The comment shape.</param>
        </member>
        <member name="P:Spire.Xls.ExcelComment.RichText">
            <summary>
            Gets the rich text representation of the current object.
            </summary>
            <returns>A new RichText object containing the rich text content of the current object.</returns>
        </member>
        <member name="T:Spire.Xls.ExcelCommentObject">
            <summary>
            Represents an Excel comment object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Comment">
            <summary>
            Gets the comment shape associated with the cell.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelCommentObject.#ctor(Spire.Xls.Core.ICommentShape)">
            <summary>
            Initializes a new instance of the ExcelCommentObject class with the specified comment shape.
            </summary>
            <param name="commentShape">The comment shape to use for the comment object.</param>
        </member>
        <member name="M:Spire.Xls.ExcelCommentObject.SetCommentLocation(System.Boolean,System.Boolean)">
            <summary>
            Sets the location of the comment.
            </summary>
            <param name="isMoveWithCell">Indicates whether the comment should move with the cell.</param>
            <param name="isSizeWithCell">Indicates whether the comment should resize with the cell.</param>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Author">
            <summary>
            Gets or sets the author of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsVisible">
            <summary>
            Gets or sets the visibility of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.HtmlString">
            <summary>
            Gets or sets the HTML string associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Row">
            <summary>
            Gets the row number of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Column">
            <summary>
            Gets the column number associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.RichText">
            <summary>
            Gets the rich text string associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Line">
            <summary>
            Gets the line format of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Fill">
            <summary>
            Gets the fill format of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Text">
            <summary>
            Gets or sets the text associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.AutoSize">
            <summary>
            Indicates whether the size of the specified object is changed automatically
            to fit text within its boundaries. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.TextFrame">
            <summary>
            Gets the text frame of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.ResizeBehave">
            <summary>
            Specifies all possible settings for how drawing object shall be resized when the rows and columns between its start and ending anchor are resized or inserted.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Visible">
            <summary>
            Gets or sets the visibility of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Height">
            <summary>
            Gets or sets the height of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.HAlignment">
            <summary>
            Gets or sets the horizontal alignment of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.VAlignment">
            <summary>
            Gets or sets the vertical alignment of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.TextRotation">
            <summary>
            Gets or sets the rotation of the text in the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.ID">
            <summary>
            Gets the ID of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Left">
            <summary>
            Gets or sets the left position of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Name">
            <summary>
            Gets or sets the name of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Top">
            <summary>
            Gets or sets the top position of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Width">
            <summary>
            Gets or sets the width of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.ShapeType">
            <summary>
            Gets or sets the shape type of the Excel shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsLocked">
            <summary>
            Gets or sets a value indicating whether the comment is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsPrintable">
            <summary>
            Gets or sets a value indicating whether the comment is printable.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.AlternativeText">
            <summary>
            Gets or sets the alternative text associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Wrapped">
            <summary>
            Gets the wrapped Spire.Xls.Core.ICommentShape object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Parent">
            <summary>
            Gets the parent object of the current instance.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsTextLocked">
            <summary>
            Gets or sets a value indicating whether the text is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsSmartArt">
            <summary>
            Indicates whether the object is a SmartArt shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.OnAction">
            <summary>
            Gets or sets the action associated with the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.IsLockAspectRatio">
            <summary>
            Gets or sets a value indicating whether the aspect ratio of the comment is locked.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Shadow">
            <summary>
            Gets the shadow of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Glow">
            <summary>
            Gets the glow effect of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Reflection">
            <summary>
            Gets the reflection effect of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.ThreeD">
            <summary>
            Gets the 3D formatting of the comment.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.Rotation">
            <summary>
            Gets or sets the rotation of the comment,in degrees.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelCommentObject.LinkedCell">
            <summary>
            Gets or sets the linked cell of the range.
            </summary>
            <value>
            The linked cell.
            </value>
            <exception cref="T:System.NotSupportedException">
            This operation is not supported.
            </exception>
        </member>
        <member name="M:Spire.Xls.ExcelCommentObject.Remove">
            <summary>
            Removes the comment .
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelCommentObject.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the comment based on the provided width and height.
            </summary>
            <param name="scaleWidth">The width factor to scale the comment.</param>
            <param name="scaleHeight">The height factor to scale the comment.</param>
        </member>
        <member name="M:Spire.Xls.ExcelHelper.CellNameToRowColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Converts cell name to row and column index.
            </summary>
            <param name="name">Name of the cell.</param>
            <param name="iRow">Row index.</param>
            <param name="iColumn">Column index.</param>
        </member>
        <member name="M:Spire.Xls.ExcelHelper.GetColumnIndex(System.String)">
            <summary>
            Converts column name into index.
            </summary>
            <param name="columnName">Name to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Spire.Xls.ExcelPicture">
            <summary>
            Represents an Excel picture shape within a spreadsheet.
            </summary>
        </member>
        <member name="T:Spire.Xls.Format3D">
            <summary>
            Represents a 3D format object in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelTopType">
            <summary>
            Gets or sets the bevel top.
            </summary>
            <value>The bevel top.</value>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelBottomType">
            <summary>
            Gets or sets the bevel bottom.
            </summary>
            <value>The bevel bottom.</value>
        </member>
        <member name="P:Spire.Xls.Format3D.MaterialType">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:Spire.Xls.Format3D.LightingType">
            <summary>
            Gets or sets the lighting.
            </summary>
            <value>The lighting.</value>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelTopWidth">
            <summary>
            Gets or sets the width of the top bevel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelTopHeight">
            <summary>
            Gets or sets the height of the top bevel of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelBottomWidth">
            <summary>
            Gets or sets the width of the bottom bevel of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.BevelBottomHeight">
            <summary>
            Gets or sets the height of the bottom bevel of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.ExtrusionHeight">
            <summary>
            Gets or sets the extrusion height of the shape.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.ExtrusionColor">
            <summary>
            Gets or sets the extrusion color of a shape.
            </summary>
            <value>
            The extrusion color.
            </value>
        </member>
        <member name="P:Spire.Xls.Format3D.ContourWidth">
            <summary>
            Gets or sets the width of the contour.
            </summary>
        </member>
        <member name="P:Spire.Xls.Format3D.ContourColor">
            <summary>
            Gets or sets the contour color.
            </summary>
            <returns>The contour color as a System.Drawing.Color object.</returns>
        </member>
        <member name="P:Spire.Xls.Format3D.LightingAngle">
            <summary>
            Gets or sets the lighting angle for the 3D shape.
            </summary>
        </member>
        <member name="M:Spire.Xls.Format3D.Clone(System.Object)">
            <summary>
            Clones the object with the specified parent.
            </summary>
            <param name="parent">The parent object.</param>
            <returns>A cloned object.</returns>
        </member>
        <member name="T:Spire.Xls.IconSet">
            <summary>
            Conditional formatting icon set condition.
            </summary>
        </member>
        <member name="P:Spire.Xls.IconSet.IconCriteria">
            <summary>
            Gets an IconCriteria collection
            </summary>
        </member>
        <member name="P:Spire.Xls.IconSet.IconSetType">
            <summary>
            Get or sets icon set type
            </summary>
        </member>
        <member name="P:Spire.Xls.IconSet.PercentileValues">
            <summary>
            Gets or sets a Boolean value indicates whether thresholds for an icon
            set conditional format are determined using percentiles. 
            </summary>
        </member>
        <member name="P:Spire.Xls.IconSet.IsReverseOrder">
            <summary>
            Gets or sets a Boolean value indicates whether the order of icons is
            reversed for an icon set.
            </summary>
        </member>
        <member name="P:Spire.Xls.IconSet.ShowIconOnly">
            <summary>
            Gets or sets a Boolean value indcates whether only the icon is displayed
            for an icon set conditional format.
            </summary>
        </member>
        <member name="T:Spire.Xls.CellBorder">
            <summary>
            Represents a cell border.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellBorder.#ctor(Spire.Xls.Core.IBorder)">
            <summary>
            Create CellBorder from IBorder.
            </summary>
            <param name="border">IBorder.</param>
        </member>
        <member name="M:Spire.Xls.CellBorder.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Gets the theme color of the border
            </summary>
            <param name="type">The type of theme color.</param>
            <param name="tint">The tint of the theme color.</param>
            <returns>True if the theme color is successfully retrieved.</returns>
        </member>
        <member name="M:Spire.Xls.CellBorder.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Sets the theme color of the border.
            </summary>
            <param name="type">The type of theme color.</param>
            <param name="tint">The tint of the theme color.</param>
        </member>
        <member name="P:Spire.Xls.CellBorder.KnownColor">
            <summary>
            Returns or sets a ExcelColors value that represents the color of the border
            </summary>
        </member>
        <member name="P:Spire.Xls.CellBorder.Color">
            <summary>
            Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. 
            Read/write Color.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellBorder.OColor">
            <summary>
            Returns or sets the primary color of the object.
            Read/write ExcelColors.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellBorder.LineStyle">
            <summary>
            Returns or sets the line style for the border. Read/write LineStyleType.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellBorder.ShowDiagonalLine">
            <summary>
            Indicates whether shows diagonal line.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellBorder.Parent">
            <summary>
            Gets the parent object of the border.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellBorder.CopyFrom(Spire.Xls.CellBorder)">
            <summary>
            Copies styles from source border.
            </summary>
            <param name="srcBorder">source border.</param>
        </member>
        <member name="M:Spire.Xls.CellBorderWrapper.CopyFrom(Spire.Xls.CellBorder)">
            <summary>
            Copies styles from source border.
            </summary>
            <param name="srcBorder">source border.</param>
        </member>
        <member name="T:Spire.Xls.CellRange">
            <summary>
            Represents a range of cells in a grid or spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellRange.Activate">
            <summary>
            Active single cell in the worksheet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.CellRange.AddComment(Spire.Xls.ExcelComment)">
            <summary>
            Adds a comment to the range.
            </summary>
            <param name="comment">Comment to add</param>
        </member>
        <member name="M:Spire.Xls.CellRange.AddSignatureLine(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add signature line to cell.
            </summary>
            <param name="signer">Suggested signer.</param>
            <param name="signerTitle">Suggested signer's title.</param>
            <param name="signerMail">Suggested signer's e-mail address.</param>
            <param name="instruction">Instructions to the signer.</param>
            <param name="allowAddComment">Whether allow the signer to add comments in the sign dialog.</param>
            <param name="showDate">Whether show sign date in signature line.</param>
        </member>
        <member name="M:Spire.Xls.CellRange.AddComment">
             <summary>
             Adds a comment to the range.
             <example>The following code illustrates how to insert Comments in the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell</para>
                 <para>ICommentShape comment = worksheet.Range["A1"].AddComment();</para>
                 <para>comment.Text= "Comments";</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("AddComment.xlsx");</para>
             </code>
             </example>
             </summary>
             <returns>Created comment or exists one.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Clone(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},Spire.Xls.Workbook)">
            <summary>
            Clones current IXLSRange.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="rangeNames">new names.</param>
            <param name="book">Parent workbook.</param>
            <returns>Cloned instance.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Move(Spire.Xls.CellRange)">
            <summary>
            Moves the cells to the specified Range.
            </summary>
            <param name="destRange">Destnation Range.</param>
        </member>
        <member name="M:Spire.Xls.CellRange.Move(Spire.Xls.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Moves the range to the specified destination range with options for copying styles and updating references.
            </summary>
            <param name="destRange">The destination range to move the range to.</param>
            <param name="copyStyle">Whether to copy the styles from the source range to the destination range.</param>
            <param name="updateReference">Whether to update the references in the destination range.</param>
        </member>
        <member name="M:Spire.Xls.CellRange.Copy(Spire.Xls.CellRange)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range</param>
            <returns>Destination range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Copy(Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range.</param>
            <param name="updateReference">Indicates whether to update reference cells.</param>
        </member>
        <member name="M:Spire.Xls.CellRange.Copy(Spire.Xls.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range.</param>
            <param name="updateReference">Indicates whether to update reference cells.</param>
            <param name="copyStyles">Indicates whether to copy styles.</param>
            <returns>Destination range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Copy(Spire.Xls.CellRange,Spire.Xls.CopyRangeOptions)">
            <summary>
            Copies the range to the specified range.
            </summary>
            <param name="destRange">Destination range.</param>
            <param name="copyOptions">Copy options.</param>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAll(System.String,Spire.Xls.FindType,Spire.Xls.ExcelFindOptions)">
            <summary>
            Finds the all ranges with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <param name="findOptions">Way to search.</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAllNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double.
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether to find formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAllString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether include formula</param>
            <param name="formulaValue">Indicates whether include formula value</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAllDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime.
            </summary>
            <param name="dateTimeValue">DateTime value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAllTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with input timespan
            </summary>
            <param name="timeSpanValue">time span value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindAllBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool. 
            </summary>
            <param name="boolValue">Bool value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double. 
            </summary>
            <param name="doubleValue">Double value to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string. 
            </summary>
            <param name="stringValue">String value to search for</param>
            <param name="formula">Indicates whether includes formula to search for</param>
            <param name="formulaValue">Indicates whether includes formula value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input datetime. 
            </summary>
            <param name="dateTimeValue">Datetime value to search for</param>
            <returns>Found range</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.FindTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with the input time span. 
            </summary>
            <param name="timeSpanValue">Time span value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Intersect(Spire.Xls.CellRange)">
            <summary>
            Get intersection range with the specified range.
            </summary>
            <param name="range">Range which to intersect.</param>
            <returns>Range intersection.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.Merge(Spire.Xls.CellRange)">
             <summary>
             Creates a merged cell from the specified Range object.
             <example>The following code illustrates how to check whether two ranges are mergable or not:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Merge range</para>
                 <para>worksheet["A2:B2"].Merge();</para>
                 
                 <para>//Get mergable range</para>
                 <para>IXLSRange mergableRange = worksheet["A2"].MergeArea.Merge(worksheet["C2"]);</para>
                 
                 <para>//Check mergable Area</para>
                 <para>Console.Write(mergableRange.RangeAddressLocal);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Intersect.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="range">The Range to merge with.</param>
             <returns>Merged ranges.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.SetDataValidation(Spire.Xls.Validation)">
            <summary>
            Sets data validation for the range.
            </summary>
            <param name="dataValidation">Data validation to set.</param>
        </member>
        <member name="P:Spire.Xls.CellRange.Borders">
             <summary>
             Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).
             <example>The following code illustrates how to access Borders property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Set borders</para>
                 <para>IBorders borders = worksheet["C2"].Borders;</para>
                 
                 <para>//Set line style</para>
                 <para>borders[BordersLineType.EdgeTop].LineStyle = LineStyleType.Thin;</para>
                 <para>borders[BordersLineType.EdgeBottom].LineStyle = LineStyleType.Thin;</para>
                 
                 <para>//Set border color</para>
                 <para>borders[BordersLineType.EdgeTop].Color = Color.Red;</para>
                 <para>borders[BordersLineType.EdgeBottom].Color = Color.Red;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Style">
             <summary>
             Returns a Style object that represents the style of the specified range.
             <example>The following code illustrates how to the style of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Add and set style</para>
                 <para>CellStyle style = workbook.Styles.Add("BorderStyle");</para>
                 <para>style.Color = Color.Red;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Style.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Cells">
            <summary>
            Returns a Range object that represents the cells in the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.CellList">
             <summary>
             Returns a Range object that represents the cells in the specified range.
             <example>The following code illustrates how to access CellList property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text. The content contained by ![CDATA[]] will be expressed as plain text</para>
                 <para>List<![CDATA[CellRange]]> cells = worksheet["A1:E8"].CellList;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (CellRange Range in cells)</para>
                 <para>    Range.Text = Range.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellList.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Columns">
             <summary>
             Returns a Range object that represents the columns in the specified range.
             <example>The following code illustrates how to access columns:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set columns</para>
                 <para>IXLSRange[] columns = worksheet["A1:E8"].Columns;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (IXLSRange column in columns)</para>
                 <para>  column.Text = column.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Columns.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Rows">
             <summary>
             Returns the number of the first row of the first area in the range.
             <example>The following code illustrates how to access rows:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set rows</para>
                 <para>IXLSRange[] rows = worksheet["A1:E8"].Rows;</para>
                         
                 <para>//Do some manipulations</para>
                 <para>foreach (IXLSRange row in rows)</para>
                 <para>  row.Text = row.RangeAddressLocal;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Rows.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets cell range. Row and column indexes are one-based.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.CellRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets cell range. Row and column indexes are one-based.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.CellRange.Item(System.String)">
            <summary>
            Gets cell range.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.CellRange.Item(System.String,System.Boolean)">
            <summary>
            Gets cell range
            </summary>
            <param name="name"></param>
            <param name="IsR1C1Notation"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.CellRange.Comment">
             <summary>
             Returns a Comment object that represents the comment associated with the cell in the upper-left corner of the range.
             <example>The following code illustrates how to access Comments property of the Range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell</para>
                 <para>worksheet.Range["A1"].AddComment().Text = "Comments";</para>
            
                 <para>//Add Rich Text Comments</para>
                 <para>CellRange range = worksheet.Range["A6"];</para>
                 <para>range.AddComment().RichText.Text = "RichText";</para>
                 <para>IRichTextString rtf = range.Comment.RichText;</para>
            
                 <para>//Formatting first 4 characters</para>
                 <para>IFont redFont = workbook.CreateFont();</para>
                 <para>redFont.IsBold = true;</para>
                 <para>redFont.Color = Color.Red;</para>
                 <para>rtf.SetFont(0, 3, redFont);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("DataValidation.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.Worksheet">
            <summary>
            Returns a worksheet object that represents the worksheet 
            containing the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.RichText">
             <summary>
             Returns a RichTextString object that represents the rich text style.
             <example>The following code illustrates how to set rich text formatting in the range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>IStyle style = workbook.Styles.Add("CustomStyle");</para>
            
                 <para>//Set rich text</para>
                 <para>IRichTextString richText = worksheet["C2"].RichText;</para>
                 <para>richText.Text = "Sample text";</para>
            
                 <para>//Set rich text font</para>
                 <para>IFont font = style.Font;</para>
                 <para>font.IsBold = true;</para>
                 <para>richText.SetFont(0, 5, font);</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("RichText.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.EntireColumn">
            <summary>
            Returns a Range object that represents the entire column (or 
            columns) that contains the specified range.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.EndCell">
            <summary>
            Returns a Range object that represents the cell at the end of the 
            region that contains the source range.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.MergeArea">
             <summary>
             Returns a Range object that represents the merged range containing the specified cell.
             <example>The following code illustrates how to access MergeArea property:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample text in cell";</para>
            
                 <para>//Set merge</para>
                 <para>worksheet["C2:D3"].Merge();</para>
            
                 <para>//Check merge area</para>
                 <para>Console.Write(worksheet["C2"].MergeArea.AddressLocal);</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellRange.EntireRow">
            <summary>
            Returns a Range object that represents the entire row (or rows) that contains the specified range.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellRange.GetDependentRanges(System.Boolean)">
            <summary>
            Retrieves the dependent ranges for a cell or a range of cells.
            </summary>
            <param name="isAll">Indicates whether to retrieve all dependent ranges or only the immediate ones.</param>
            <returns>An array of CellRange objects representing the dependent ranges.</returns>
        </member>
        <member name="M:Spire.Xls.CellRange.GetReferRanges">
            <summary>
            Retrieves the reference ranges.
            </summary>
            <returns>An array of ReferRangeArea objects representing the reference ranges.</returns>
        </member>
        <member name="T:Spire.Xls.CellStyleFlag">
            <summary>
            Represents a set of flags that define the style of a cell in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.All">
            <summary>
            All properties will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.Borders">
            <summary>
            All borders settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.LeftBorder">
            <summary>
            Left border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.RightBorder">
            <summary>
            Right border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.TopBorder">
            <summary>
            Top border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.BottomBorder">
            <summary>
            Bottom border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.DiagonalDownBorder">
            <summary>
            Diagonal down border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.DiagonalUpBorder">
            <summary>
            Diagonal up border settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.Font">
            <summary>
            Font settings will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontSize">
            <summary>
            Font size setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontName">
            <summary>
            Font name setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontColor">
            <summary>
            Font color setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontBold">
            <summary>
            Font bold setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontItalic">
            <summary>
            Font italic setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontUnderline">
            <summary>
            Font underline setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontStrike">
            <summary>
            Font strikeout setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.FontScript">
            <summary>
            Font script setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.NumberFormat">
            <summary>
            Number format setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.HorizontalAlignment">
            <summary>
            Horizontal alignment setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.VerticalAlignment">
            <summary>
            Vertical alignment setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.Indent">
            <summary>
            Indent level setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.Rotation">
            <summary>
            Rotation setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.WrapText">
            <summary>
            Wrap text setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.ShrinkToFit">
            <summary>
            Shrink to fit setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.TextDirection">
            <summary>
            Text direction setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.CellShading">
            <summary>
            Cell shading setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.Locked">
            <summary>
            Locked setting will be applied.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleFlag.HideFormula">
            <summary>
            Hide formula setting will be applied.
            </summary>
        </member>
        <member name="T:Spire.Xls.CellStyle">
             <summary>
             Represents the style of the cell range.
             <example>The following code illustrates how to the style of the specified range:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["C2"].Text = "Sample";</para>
                         
                 <para>//Add and set style</para>
                 <para>CellStyle style = workbook.Styles.Add("BorderStyle");</para>
                 <para>style.Color = Color.Red;</para>
                 <para>worksheet["C2"].Style = style;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Style.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.CellStyle.Borders">
            <summary>
            Returns a Borders collection that represents the borders of a style.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyle.Font">
            <summary>
            Returns a Font object that represents the font of the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyle.Interior">
            <summary>
            Returns interior object for extended format.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellStyle.clone">
            <summary>
            clone CellStyle
            </summary>
            <returns>CellStyle.</returns>
        </member>
        <member name="M:Spire.Xls.CellStyle.clone(Spire.Xls.Workbook)">
            <summary>
            clone CellStyle and add to book.Styles
            </summary>
            <param name="book">the Workbook</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.CellStyleObject">
            <summary>
            Represents  CellStyleObject
            </summary>
        </member>
        <member name="M:Spire.Xls.CellStyleObject.#ctor(Spire.Xls.Core.IStyle)">
            <summary>
            Creates object that will contain all styles that are used by range.
            </summary>
            <param name="style">style.</param>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.JustifyLast">
            <summary>
            Represents justify text alignment
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.NumberFormatLocal">
            <summary>
            Returns or sets the format code for the object as a string in the
            language of the user.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Interior">
            <summary>
            Get interior object for this extended format.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IsModified">
            <summary>
            Returns the style has been modified
            </summary>
        </member>
        <member name="M:Spire.Xls.CellStyleObject.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.CellStyleObject.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Borders">
            <summary>
            Returns a  Borders collection that represents the borders of a
            style or a range of cells (including a range defined as part of
            a conditional format).
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.BuiltIn">
            <summary>
            True if the style is a built-in style.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.FillPattern">
            <summary>
            Gets or Sets fill pattern type.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Font">
            <summary>
            Returns a Font object that represents the font of the specified 
            object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.FormulaHidden">
            <summary>
            True if the formula will be hidden when the worksheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.HorizontalAlignment">
            <summary>
            Returns or sets the horizontal alignment for the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludeAlignment">
            <summary>
            True if the style includes the AddIndent, HorizontalAlignment,
            VerticalAlignment, WrapText, and Orientation properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludeBorder">
            <summary>
            True if the style includes the Color, KnownColor, LineStyle, and Weight border properties
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludeFont">
            <summary>
            True if the style includes the Background, Bold, Color, KnownColor, FontStyle, Italic, Name, OutlineFont, Shadow, Size, Strikethrough, Subscript, Superscript, and Underline font properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludeNumberFormat">
            <summary>
            True if the style includes the NumberFormat property.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludePatterns">
            <summary>
            True if the style includes the Color, KnownColor,
            InvertIfNegative, Pattern, PatternColor, and PatternKnownColor
            interior properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IncludeProtection">
            <summary>
            True if the style includes the FormulaHidden and Locked protection
            properties.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IndentLevel">
            <summary>
            Returns or sets the indent level for the style.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IsInitialized">
            <summary>
            Indicates whether style is initialized (differs from Normal style).
            Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Locked">
            <summary>
            True if the object is locked; False if the object can be modified when the sheet is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Name">
            <summary>
            Returns or sets the name of the object. Read-only String.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.NumberFormat">
            <summary>
            Returns or sets the format code for the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.NumberFormatIndex">
            <summary>
            Gets or Sets format index.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.NumberFormatSettings">
            <summary>
            Returns object that describes number format. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Rotation">
            <summary>
            The text orientation. Can be an integer value from 1 to 180 degrees
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.ShrinkToFit">
            <summary>
            True if text automatically shrinks to fit in the available column width.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.VerticalAlignment">
            <summary>
            Returns or sets the vertical alignment of the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.WrapText">
            <summary>
            True if Microsoft Excel wraps the text in the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.ReadingOrder">
            <summary>
            Returns or sets the reading order for the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.IsFirstSymbolApostrophe">
            <summary>
            If true then first symbol in cell is apostrophe.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.PatternKnownColor">
            <summary>
            Returns or sets the excel color of the interior.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.PatternColor">
            <summary>
            Returns or sets the color of the interior pattern.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.KnownColor">
            <summary>
            Gets or sets the cell shading excel color.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Color">
            <summary>
            Gets or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleObject.Parent">
            <summary>
            Get the parent.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellStyleObject.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.CellStyleObject.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleWrapper.Borders">
            <summary>
            Returns a Borders collection that represents the borders of a style.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleWrapper.Font">
            <summary>
            Returns a Font object that represents the font of the specified object.
            </summary>
        </member>
        <member name="P:Spire.Xls.CellStyleWrapper.Workbook">
            <summary>
            Returns  workbook contains the style.. 
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelVersion">
            <summary>
            Represents possible excel versions.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Xlsb2007">
            <summary>
            Represents excel version 2007 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Xlsb2010">
            <summary>
            Represents excel version 2010 xlsb
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.ODS">
            <summary>
            OpenOffice Spreadsheet documents
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.UOS">
            <summary>
            UOF Spreadsheet documents
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Version97to2003">
            <summary>
            Represents excel version 97-2003.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Version2007">
            <summary>
            Represents excel version 2007
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Version2010">
            <summary>
            Represents excel version 2010
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Version2013">
            <summary>
            Represents excel version 2013.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVersion.Version2016">
            <summary>
            Represents excel version 2016.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelSaveType">
            <summary>
            Enumeration of the Save types in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSaveType.SaveAsXLS">
            <summary>
            Represents the save as xls option.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSaveType.SaveAsTemplate">
            <summary>
            Represents the save as template option.
            </summary>
        </member>
        <member name="T:Spire.Xls.FindType">
            <summary>
            Possible types of param, specified as string, number in FindFirst, FindAll methods. 
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.Text">
            <summary>
            Represents the Text Finding type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.Formula">
            <summary>
            Represents the Formula Finding type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.FormulaStringValue">
            <summary>
            Represents the FormulaStringValue Finding type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.Error">
            <summary>
            Represents the Error Finding type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.Number">
            <summary>
            Represents the Number Finding type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FindType.FormulaValue">
            <summary>
            Represents the FormulaValue Finding type.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelColors">
            <summary>
            Predefined colors in excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Black">
            <summary>
            Represents the Black color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.White">
            <summary>
            Represents the White color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Red">
            <summary>
            Represents the Red color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightGreen">
            <summary>
            Represents the LightGreen color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Blue">
            <summary>
            Represents the Blue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Yellow">
            <summary>
            Represents the Yellow color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Magenta">
            <summary>
            Represents the Magenta color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Cyan">
            <summary>
            Represents the Cyan color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.None">
            <summary>
            No color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Aqua">
            <summary>
            Represents the Aqua color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.BlackCustom">
            <summary>
            Represents the BlackCustom color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.BlueCustom">
            <summary>
            Represents the BlueCustom color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.BlueGray">
            <summary>
            Represents the BlueGray color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.BrightGreen">
            <summary>
            Represents the BrightGreen color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Brown">
            <summary>
            Represents the Brown color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.DarkBlue">
            <summary>
            Represents the DarkBlue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.DarkGreen">
            <summary>
            Represents the DarkGreen color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.DarkRed">
            <summary>
            Represents the DarkRed color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.DarkTeal">
            <summary>
            Represents the DarkTeal color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.DarkYellow">
            <summary>
            Represents the DarkYellow color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Gold">
            <summary>
            Represents the Gold color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Green">
            <summary>
            Represents the Green color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Gray25Percent">
            <summary>
            Represents the Gray25Percent color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Gray40Percent">
            <summary>
            Represents the Gray40Percent color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Gray50Percent">
            <summary>
            Represents the Gray50Percent color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Gray80Percent">
            <summary>
            Represents the Gray80Percent color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Indigo">
            <summary>
            Represents the Indigo color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Lavender">
            <summary>
            Represents the Lavender color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightBlue">
            <summary>
            Represents the LightBlue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightGreen1">
            <summary>
            Represents the LightGreen1 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightOrange">
            <summary>
            Represents the LightOrange color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightTurquoise">
            <summary>
            Represents the LightTurquoise color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.LightYellow">
            <summary>
            Represents the LightYellow color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Lime">
            <summary>
            Represents the Lime color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.OliveGreen">
            <summary>
            Represents the OliveGreen color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Orange">
            <summary>
            Represents the Orange color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.PaleBlue">
            <summary>
            Represents the PaleBlue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Pink">
            <summary>
            Represents the Pink color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Plum">
            <summary>
            Represents the Plum color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Red2">
            <summary>
            Represents the Red2 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Rose">
            <summary>
            Represents the Rose color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.SeaGreen">
            <summary>
            Represents the SeaGreen color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.SkyBlue">
            <summary>
            Represents the SkyBlue color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Tan">
            <summary>
            Represents the Tan color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Teal">
            <summary>
            Represents the Teal color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Turquoise">
            <summary>
            Represents the Turquoise color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Violet">
            <summary>
            Represents the Violet color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.WhiteCustom">
            <summary>
            Represents the WhiteCustom color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.YellowCustom">
            <summary>
            Represents the YellowCustom color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color0">
            <summary>
            Represents the Color0 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color1">
            <summary>
            Represents the Color1 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color2">
            <summary>
            Represents the Color2 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color3">
            <summary>
            Represents the Color3 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color4">
            <summary>
            Represents the Color4 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color5">
            <summary>
            Represents the Color5 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color6">
            <summary>
            Represents the Color6 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color7">
            <summary>
            Represents the Color7 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color8">
            <summary>
            Represents the Color8 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color9">
            <summary>
            Represents the Color9 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color10">
            <summary>
            Represents the Color10 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color11">
            <summary>
            Represents the Color11 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color12">
            <summary>
            Represents the Color12 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color13">
            <summary>
            Represents the Color13 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color14">
            <summary>
            Represents the Color14 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color15">
            <summary>
            Represents the Color15 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color16">
            <summary>
            Represents the Color16 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color17">
            <summary>
            Represents the Color17 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color18">
            <summary>
            Represents the Color18 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color19">
            <summary>
            Represents the Color19 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color20">
            <summary>
            Represents the Color20 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color21">
            <summary>
            Represents the Color21 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color22">
            <summary>
            Represents the Color22 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color23">
            <summary>
            Represents the Color23 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color24">
            <summary>
            Represents the Color24 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color25">
            <summary>
            Represents the Color25 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color26">
            <summary>
            Represents the Color26 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color27">
            <summary>
            Represents the Color27 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color28">
            <summary>
            Represents the Color28 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color29">
            <summary>
            Represents the Color29 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color30">
            <summary>
            Represents the Color30 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color31">
            <summary>
            Represents the Color31 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color32">
            <summary>
            Represents the Color32 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color33">
            <summary>
            Represents the Color33 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color34">
            <summary>
            Represents the Color34 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color35">
            <summary>
            Represents the Color35 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color36">
            <summary>
            Represents the Color36 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color37">
            <summary>
            Represents the Color37 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color38">
            <summary>
            Represents the Color38 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color39">
            <summary>
            Represents the Color39 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color40">
            <summary>
            Represents the Color40 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color41">
            <summary>
            Represents the Color41 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color42">
            <summary>
            Represents the Color42 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color43">
            <summary>
            Represents the Color43 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color44">
            <summary>
            Represents the Color44 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color45">
            <summary>
            Represents the Color45 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color46">
            <summary>
            Represents the Color46 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color47">
            <summary>
            Represents the Color47 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color48">
            <summary>
            Represents the Color48 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color49">
            <summary>
            Represents the Color49 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color50">
            <summary>
            Represents the Color50 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color51">
            <summary>
            Represents the Color51 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color52">
            <summary>
            Represents the Color52 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color53">
            <summary>
            Represents the Color53 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color54">
            <summary>
            Represents the Color54 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color55">
            <summary>
            Represents the Color55 color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelColors.Color56">
            <summary>
            Represents the Color56 color.
            </summary>
        </member>
        <member name="T:Spire.Xls.HttpContentType">
            <summary>
            HttpContent type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpContentType.Excel97">
            <summary>
            Represents the Excel97 HttpContent type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpContentType.Excel2000">
            <summary>
            Represents the Excel2000 HttpContent type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpContentType.Excel2007">
            <summary>
            Represents the Excel2007 HttpContent type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpContentType.Excel2010">
            <summary>
            Represents the CSV HttpContent type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpContentType.CSV">
            <summary>
            Represents the CSV HttpContent type.
            </summary>
        </member>
        <member name="T:Spire.Xls.HttpDownloadType">
            <summary>
            Enumeration to specify if the spreadsheet should be opened inside browser or saved 
            as an attachment to disk.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpDownloadType.Open">
            <summary>
             File should be opened in browser.
            </summary>
        </member>
        <member name="F:Spire.Xls.HttpDownloadType.PromptDialog">
            <summary>
            Prompt dialog should be displayed.
            </summary>
        </member>
        <member name="T:Spire.Xls.XmlOpenType">
            <summary>
            Supported Xml open types.
            </summary>
        </member>
        <member name="F:Spire.Xls.XmlOpenType.MSExcel">
            <summary>
            Xml format used by MS Excel.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelFindOptions">
            <summary>
            Possible type of finding options
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelFindOptions.None">
            <summary>
            Represents none of the option is selected.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelFindOptions.MatchCase">
            <summary>
            Represents to match the case while finding the value.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelFindOptions.MatchEntireCellContent">
            <summary>
            Represents to match the whole search word while finding the value.
            </summary>
        </member>
        <member name="T:Spire.Xls.WorksheetCopyType">
            <summary>
            Enumeration to specify options when copying worksheets.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.ClearBefore">
            <summary>
            Represents the ClearBefore copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyNames">
            <summary>
            Represents the CopyNames copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyCells">
            <summary>
            Represents the CopyCells copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyRowHeight">
            <summary>
            Represents the CopyRowHeight copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyColumnHeight">
            <summary>
            Represents the CopyColumnHeight copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyOptions">
            <summary>
            Represents the CopyOptions copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyMerges">
            <summary>
            Represents the CopyMerges copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyShapes">
            <summary>
            Represents the CopyShapes copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyConditionlFormats">
            <summary>
            Represents the CopyConditionlFormats copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyAutoFilters">
            <summary>
            Represents the CopyAutoFilters copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyDataValidations">
            <summary>
            Represents the CopyDataValidations copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyPageSetup">
            <summary>
            Copy page setup (page breaks, paper orientation, header, footer and other properties).
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyTables">
            <summary>
            Represents the CopyAll copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyPivotTables">
            <summary>
            Copy pivot table objects.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyPalette">
            <summary>
            Copies palette.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyAll">
            <summary>
            Represents the CopyAll copy flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetCopyType.CopyWithoutNames">
            <summary>
            Represents the CopyWithoutNames copy flags.
            </summary>
        </member>
        <member name="T:Spire.Xls.ImageType">
            <summary>
            Possible image types for image conversion.
            </summary>
        </member>
        <member name="F:Spire.Xls.ImageType.Bitmap">
            <summary>
            Bitmap image.
            </summary>
        </member>
        <member name="F:Spire.Xls.ImageType.Metafile">
            <summary>
            Metafile image.
            </summary>
        </member>
        <member name="T:Spire.Xls.CopyRangeOptions">
            <summary>
            Enumeration to specify the options to update formulas and merged ranges during copy range
            operation.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.UpdateFormulas">
            <summary>
            Indicates whether update formula during copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.UpdateMerges">
            <summary>
            Indicates whether update merges during copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.CopyStyles">
            <summary>
            Indicates that we have to copy styles during range copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.CopyShapes">
            <summary>
            Indicates that we have to copy shapes during range copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.CopyErrorIndicators">
            <summary>
            Indicates that we have to copy error indicators during range copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.CopyConditionalFormats">
            <summary>
            Indicates that we have to copy conditional formats during range copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.CopyDataValidations">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.OnlyCopyFormulaValue">
            <summary>
            Indicates that we have to copy cell formula during range copy.
            </summary>
        </member>
        <member name="F:Spire.Xls.CopyRangeOptions.All">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="T:Spire.Xls.PageBreakType">
            <summary>
            Page break types in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageBreakType.Automatic">
             <summary>
            Represents the Automatic type.
             </summary>
        </member>
        <member name="F:Spire.Xls.PageBreakType.Manual">
             <summary>
            Represents the Manual type.
             </summary>
        </member>
        <member name="F:Spire.Xls.PageBreakType.None">
             <summary>
            Represents the None type.
             </summary>
        </member>
        <member name="T:Spire.Xls.SheetProtectionType">
            <summary>
            Represents sheet protection flags enums.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.None">
            <summary>
            Not allows the user to do any thing on a protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.Objects">
            <summary>
            True to protect shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.Scenarios">
            <summary>
            True to protect scenarios.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.FormattingCells">
            <summary>
            True allows the user to format any cell on a protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.FormattingColumns">
            <summary>
            True allows the user to format any column on a protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.FormattingRows">
            <summary>
            True allows the user to format any row on a protected.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.InsertingColumns">
            <summary>
            True allows the user to insert columns on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.InsertingRows">
            <summary>
            True allows the user to insert rows on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.InsertingHyperlinks">
            <summary>
            True allows the user to insert hyperlinks on the worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.DeletingColumns">
            <summary>
            True allows the user to delete columns on the protected worksheet,
            where every cell in the column to be deleted is unlocked.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.DeletingRows">
            <summary>
            True allows the user to delete rows on the protected worksheet,
            where every cell in the row to be deleted is unlocked.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.LockedCells">
            <summary>
            True allows the user to select locked cells on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.Sorting">
            <summary>
            True allows the user to sort on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.Filtering">
            <summary>
            True allows the user to set filters on the protected worksheet.
            Users can change filter criteria but can not enable or disable an auto filter.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.UsingPivotTables">
            <summary>
            True allows the user to use pivot table reports on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.UnLockedCells">
            <summary>
             True allows the user to select locked cells on the protected worksheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.Content">
            <summary>
            Represents all flags
            </summary>
        </member>
        <member name="F:Spire.Xls.SheetProtectionType.All">
            <summary>
            Allows the user to do any thing on a protected worksheet.
            </summary>
        </member>
        <member name="T:Spire.Xls.HyperLinkType">
            <summary>
            Hyper link type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HyperLinkType.None">
            <summary>
            No hyperlink.
            </summary>
        </member>
        <member name="F:Spire.Xls.HyperLinkType.Url">
            <summary>
            Represents the Url hyperlink type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HyperLinkType.File">
            <summary>
            Represents the File hyperlink type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HyperLinkType.Unc">
            <summary>
            Represents the Unc hyperlink type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HyperLinkType.Workbook">
            <summary>
            Represents the Workbook hyperlink type.
            </summary>
        </member>
        <member name="T:Spire.Xls.CellFormatType">
            <summary>
            Cell format types.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.Unknown">
            <summary>
            Represents unknown format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.General">
            <summary>
            Represents general number format.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.Text">
            <summary>
            Represents text number format.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.Number">
            <summary>
            Represents number number format.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.DateTime">
            <summary>
            Represents datetime number format.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellFormatType.Formula">
            <summary>
            Represents Formula.
            </summary>
        </member>
        <member name="T:Spire.Xls.GroupByType">
            <summary>
            Enumeration of Group types in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.GroupByType.ByRows">
            <summary>
            Represents the grouping by rows option.
            </summary>
        </member>
        <member name="F:Spire.Xls.GroupByType.ByColumns">
            <summary>
            Represents the grouping by columns option.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExpandCollapseFlags">
            <summary>
            Flags for expand/collapse settings.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExpandCollapseFlags.Default">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExpandCollapseFlags.IncludeSubgroups">
            <summary>
            Indicates whether subgroups must be included into operation.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExpandCollapseFlags.ExpandParent">
            <summary>
            Indicates whether we have to expand parent group when expanding child (to make it visible).
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelClearOptions">
            <summary>
            Enumeration of possible directions to clear the Cell formats, content, comments or clear all of them.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelClearOptions.ClearFormat">
            <summary>
            Clears the formats of the cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelClearOptions.ClearContent">
            <summary>
            Clears the contents of the cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelClearOptions.ClearComment">
            <summary>
            Clears the comments of the cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelClearOptions.ClearAll">
            <summary>
            Clears the comments, content and formats of the cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelClearOptions.ClearConditionalFormats">
            <summary>
            Clears all the Conditional Format
            </summary>
        </member>
        <member name="T:Spire.Xls.BuiltInStyles">
            <summary>
            Specifies existing built-in styles for Excel 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Normal">
            <summary>
            Indicates Normal style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.RowLevel_">
            <summary>
            Indicates RowLevel_ style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.ColLevel_">
            <summary>
            Indicates ColLevel_ style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Comma">
            <summary>
            Indicates Comma style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Currency">
            <summary>
            Indicates Currency style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Percent">
            <summary>
            Indicates Percent style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Comma0">
            <summary>
            Indicates Comma[0] style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Currency0">
            <summary>
            Indicates Currency[0] style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Hyperlink">
            <summary>
            Indicates Currency style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.FollowedHyperlink">
            <summary>
            Indicates Followed Hyperlink style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Note">
            <summary>
            Indicates Note style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.WarningText">
            <summary>
            Indicates Warning Text style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Title">
            <summary>
            Indicates Title style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Heading1">
            <summary>
            Indicates Heading 1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Heading2">
            <summary>
            Indicates Heading 2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Heading3">
            <summary>
            Indicates Heading 3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Heading4">
            <summary>
            Indicates Heading 4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Input">
            <summary>
            Indicates Input style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Output">
            <summary>
            Indicates Output style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Calculation">
            <summary>
            Indicates Calculation style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.CheckCell">
            <summary>
            Indicates Check Cell style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.LinkedCell">
            <summary>
            Indicates Linked Cell style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Total">
            <summary>
            Indicates Total style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Good">
            <summary>
            Indicates Good style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Bad">
            <summary>
            Indicates Bad style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Neutral">
            <summary>
            Indicates Neutral style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent1">
            <summary>
            Indicates Accent1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent1_20">
            <summary>
            Indicates 20% - Accent1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent1_40">
            <summary>
            Indicates 40% - Accent1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent1_60">
            <summary>
            Indicates 60% - Accent1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent2">
            <summary>
            Indicates Accent2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent2_20">
            <summary>
            Indicates 20% - Accent2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent2_40">
            <summary>
            Indicates 40% - Accent2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent2_60">
            <summary>
            Indicates 60% - Accent2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent3">
            <summary>
            Indicates Accent3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent3_20">
            <summary>
            Indicates 20% - Accent3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent3_40">
            <summary>
            Indicates 40% - Accent3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent3_60">
            <summary>
            Indicates 60% - Accent3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent4">
            <summary>
            Indicates Accent4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent4_20">
            <summary>
            Indicates 20% - Accent4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent4_40">
            <summary>
            Indicates 40% - Accent4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent4_60">
            <summary>
            Indicates 60% - Accent4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent5">
            <summary>
            Indicates Accent5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent5_20">
            <summary>
            Indicates 20% - Accent5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent5_40">
            <summary>
            Indicates 40% - Accent5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent5_60">
            <summary>
            Indicates 60% - Accent5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent6">
            <summary>
            Indicates Accent6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent6_20">
            <summary>
            Indicates 20% - Accent6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent6_40">
            <summary>
            Indicates 40% - Accent6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.Accent6_60">
            <summary>
            Indicates 60% - Accent6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInStyles.ExplanatoryText">
            <summary>
            Indicates Explanatory Text style.
            </summary>
        </member>
        <member name="T:Spire.Xls.FontVertialAlignmentType">
            <summary>
            Defines the possible settings for vertical alignment of a run of text.
            This is used to get superscript or subscript text without altering the
            font size properties of the rest of the text run.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontVertialAlignmentType.Baseline">
            <summary>
            Returns the text in this run to the baseline, default,
            alignment, and returns it to the original font size.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontVertialAlignmentType.Superscript">
            <summary>
            Specifies that this text should be superscript. Raises the text in this
            run above the baseline and changes it to a smaller size, if a smaller
            size is available.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontVertialAlignmentType.Subscript">
            <summary>
            Specifies that this text should be subscript. Lowers the text in this
            run below the baseline and changes it to a smaller size, if a smaller
            size is available.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientVariantsType">
            <summary>
            Represents shape shading variants.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientVariantsType.ShadingVariants1">
            <summary>
            Represents first shading variants.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientVariantsType.ShadingVariants2">
            <summary>
            Represents second shading variants.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientVariantsType.ShadingVariants3">
            <summary>
            Represnets third shading variants.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientVariantsType.ShadingVariants4">
            <summary>
            Represents fourth shading variants.
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartBevelType">
            <summary>
            This enumeration value indicates the bevel properties for both Top nad Bottom Bevel
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.None">
            <summary>
            No bevel
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Angle">
            <summary>
            Represents Angle 
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.ArtDeco">
            <summary>
            Represents Art Deco
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Circle">
            <summary>
            Represents Circle
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Convex">
            <summary>
            Represents Convex
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.CoolSlant">
            <summary>
            Represents Cool Slant
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Cross">
            <summary>
            Represents Cross
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Divot">
            <summary>
            Represents Divot
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.HardEdge">
            <summary>
            Represents Hard Edge
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.RelaxedInset">
            <summary>
            Represents Relaxed Inset
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Riblet">
            <summary>
            Represents Riblet
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.Slope">
            <summary>
            Represents Slope
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartBevelType.SoftRound">
            <summary>
            Represents Soft round
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartMaterialType">
            <summary>
            Indicates the Material property values fro the chart
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.None">
            <summary>
            Represents No Material Effect
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Matte">
            <summary>
            Represents Matte Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.WarmMatte">
            <summary>
            Represents WarmMatte Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Plastic">
            <summary>
            Represents Plastic Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Metal">
            <summary>
            Represents Metal Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.DarkEdge">
            <summary>
            Represents Dark Edge Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.SoftEdge">
            <summary>
            Represents Soft Edge Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Flat">
            <summary>
            Represents Flat Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.WireFrame">
            <summary>
            Represents Wire Frame Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Powder">
            <summary>
            Represents Powder Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.TranslucentPowder">
            <summary>
            Represents Translucent Powder Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.Clear">
            <summary>
            Represents Clear Material
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.SoftMetal">
            <summary>
            Soft metal
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.LegacyMatte">
            <summary>
            Legacy matte
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.LegacyMetal">
            <summary>
            Legacy metal
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.LegacyPlastic">
            <summary>
            Legacy plastic
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartMaterialType.LegacyWireframe">
            <summary>
            Legacy wireframe
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartLightingType">
            <summary>
            This enumeration value indicates the Lighting properties for the 
            Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.ThreePoint">
            <summary>
            Represents ThreePoint Lighting(Default)
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Balance">
            <summary>
            Represents Balance Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.BrightRoom">
            <summary>
            Represents Bright Room  Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Chilly">
            <summary>
            Represents Chilly Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Contrasting">
            <summary>
            Represents Contrasting Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Flat">
            <summary>
            Represents Flat Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Flood">
            <summary>
            Represents Flood Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Freezing">
            <summary>
            Represents Freezing Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Glow">
            <summary>
            Represents Glow Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Harsh">
            <summary>
            Represents Harsh Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Morning">
            <summary>
            Represents Morning Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Soft">
            <summary>
            Represents Soft Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.Sunrise">
            <summary>
            Represents Sunrise Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.SunSet">
            <summary>
            Represents Sun Set Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.TwoPoint">
            <summary>
            Represents TwoPoint Lighting
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyFlat1">
            <summary>
            LegacyFlat1
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyFlat2">
            <summary>
            LegacyFlat2
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyFlat3">
            <summary>
            LegacyFlat3
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyFlat4">
            <summary>
            LegacyFlat4
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyHarsh1">
            <summary>
            LegacyHarsh1
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyHarsh2">
            <summary>
            LegacyHarsh2
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyHarsh3">
            <summary>
            LegacyHarsh3
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyHarsh4">
            <summary>
            LegacyHarsh4
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyNormal1">
            <summary>
            LegacyNormal1
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyNormal2">
            <summary>
            LegacyNormal2
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyNormal3">
            <summary>
            LegacyNormal3
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartLightingType.LegacyNormal4">
            <summary>
            LegacyNormal4
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartShadowOuterType">
            <summary>
            Indicates the Outer Shadow values
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.None">
            <summary>
            Represents No shadow
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetRight">
            <summary>
            Represents Outer shadow at Right
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetDiagonalBottomRight">
            <summary>
            Represents Outer shadow at DiagonalBottomRight
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetBottom">
            <summary>
            Represents Outer shadow at Bottom
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetDiagonalTopLeft">
            <summary>
            Represents Outer shadow at DiagonalTopLeft
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetCenter">
            <summary>
            Represents Outer shadow at Center
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetTop">
            <summary>
            Represents Outer shadow at Top
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetLeft">
            <summary>
            Represents Outer shadow at Left
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetDiagonalTopRight">
            <summary>
            Represents Outer shadow at DiagonalTopRight
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowOuterType.OffsetDiagonalBottomLeft">
            <summary>
            Represents Outer shadow at DiagonalBottomLeft
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartShadowInnerType">
            <summary>
            Indicates the Inner Shadow Values
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.None">
            <summary>
            Represents No shadow.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideDiagonalBottomLeft">
            <summary>
            Represents Inner Shadow at Diagonal Bottom Left
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideTop">
            <summary>
            Represents Inner Shadow at Top
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideRight">
            <summary>
            Represents Inner Shadow at Right
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideLeft">
            <summary>
            Represents Inner Shadow at Left
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideDiagonalTopRight">
            <summary>
            Represents Inner Shadow at TopRight
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideDiagonalBottomRight">
            <summary>
            Represents Inner Shadow at Diagonal Bottom Right
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideCenter">
            <summary>
            Represents Inner Shadow at Center
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideBottom">
            <summary>
            Represents Inner Shadow at Bottom
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartShadowInnerType.InsideDiagonalTopLeft">
            <summary>
            Represents Inner Shadow at Diagonal Top left
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXChartPrespectiveType">
            <summary>
            Indicates the Perspective shadow Values
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.None">
            <summary>
            Represents the No Shadow
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.DiagonalUpperRight">
            <summary>
            Represents Perspective Shadow at Diagonal Upper Right
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.DiagonalLowerRight">
            <summary>
            Represents Perspective Shadow at Diagonal Lower Right
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.DiagonalUpperLeft">
            <summary>
            Represents Perspective Shadow at Diagonal Upper Left
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.DiagonalLowerLeft">
            <summary>
            Represents Perspective Shadow at Diagonal Lower Left
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXChartPrespectiveType.Below">
            <summary>
            Represents Perspective Shadow at Below
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeLayerChangeType">
            <summary>
            Change target type of shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLayerChangeType.BringToFront">
            <summary>
            bring to front. 
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLayerChangeType.SendToBack">
            <summary>
            send to back.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLayerChangeType.BringForward">
            <summary>
            bring forward.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLayerChangeType.SendBackward">
            <summary>
            send backward.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeFillType">
            <summary>
            Represents shape XlsFill type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.SolidColor">
            <summary>
            Solid color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.Pattern">
            <summary>
            Represents pattern type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.Texture">
            <summary>
            Represents texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.Picture">
            <summary>
            Represents picture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.UnknownGradient">
            <summary>
            Represents unsupport gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.Gradient">
            <summary>
            Represents gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeFillType.NoFill">
            <summary>
            Represents noFill type.
            </summary>
        </member>
        <member name="T:Spire.Xls.ImageFormatType">
            <summary>
            Image formats.
            </summary>
        </member>
        <member name="F:Spire.Xls.ImageFormatType.Original">
            <summary>
            Original picture format.
            </summary>
        </member>
        <member name="F:Spire.Xls.ImageFormatType.Png">
               // <summary>
               // DIN picture format.
               // </summary>
               Dib = ( int )MsoBlipType.msoblipDIB,
            <summary>
            PNG picture format.
            </summary>
        </member>
        <member name="F:Spire.Xls.ImageFormatType.Jpeg">
            <summary>
            JPG picture format.
            </summary>
        </member>
        <member name="T:Spire.Xls.LineShapeType">
            <summary>
            Represents different types of line shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineShapeType.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:Spire.Xls.LineShapeType.ElbowLine">
            <summary>
            PloyLine
            </summary>
        </member>
        <member name="F:Spire.Xls.LineShapeType.CurveLine">
            <summary>
            CurveLine
            </summary>
        </member>
        <member name="F:Spire.Xls.LineShapeType.LineInv">
            <summary>
            Represents a line inversion operation.
            </summary>
        </member>
        <member name="T:Spire.Xls.PrstGeomShapeType">
            <summary>
            Represents the predefined geometric shapes available for use in presentations.
            </summary>
        </member>
        <member name="T:Spire.Xls.OleObjectType">
            <summary>
            defines the types of OLE object
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.None">
            <summary>
            Type is not defined
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.AdobeAcrobatDocument">
            <summary>
            Adobe Acrobat Document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Bitmap">
            <summary>
            Bitmap Image.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.MediaClip">
            <summary>
            Media Clip
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Equation">
            <summary>
            Equation
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.GraphChart">
            <summary>
            Graph Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Excel97to2003Worksheet">
            <summary>
            Excel 97-2003 Worksheet. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.ExcelBinaryWorksheet">
            <summary>
            Excel Binary Worksheet. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.ExcelChart">
            <summary>
            Excel chart. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.ExcelMacroWorksheet">
            <summary>   
            Excel Macro-Enabled Worksheet. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.ExcelWorksheet">
            <summary>
            Excel Worksheet. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPoint97to2003Presentation">
            <summary>
            PowerPoint 97-2003 Presentation.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPoint_97_2003_Slide">
            <summary>
            PowerPoint 97-2003 Slide. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPointMacroPresentation">
            <summary>
            PowerPoint Macro-Enabled Presentation.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPointMacroSlide">
            <summary>
            PowerPoint Macro-Enabled Slide.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPointPresentation">
            <summary>
            PowerPoint Presentation. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.PowerPointSlide">
            <summary>
            PowerPoint Slide.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Word97to2003Document">
            <summary>
            Word 97-2003 Document.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.WordDocument">
            <summary>
            Word Document.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.WordMacroDocument">
            <summary>
            Word Macro-Enabled Document. 
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.VisioDrawing">
            <summary>
            Visio Deawing
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.MIDISequence">
            <summary>
            MIDI Sequence
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenDocumentPresentation">
            <summary>
            OpenDocument Presentation
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenDocumentSpreadsheet">
            <summary>
            OpenDocument Spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenDocumentText">
            <summary>
            OpenDocument Text
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenOfficeSpreadsheet1_1">
            <summary>
            OpenOffice.org 1.1 Spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenOfficeText_1_1">
            <summary>
            OpenOffice.org 1.1 Text
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Package">
            <summary>
            Package
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.VideoClip">
            <summary>
            Video Clip
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.WaveSound">
            <summary>
            Wave Sound
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.WordPadDocument">
            <summary>
            WordPad Document
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenOfficeSpreadsheet">
            <summary>
            OpenOffice spreadsheet
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.OpenOfficeText">
            <summary>
            OpenOffice Text
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Png">
            <summary>
            Png
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Emf">
            <summary>
            Emf
            </summary>
        </member>
        <member name="F:Spire.Xls.OleObjectType.Msg">
            <summary>
            Msg
            </summary>
        </member>
        <member name="T:Spire.Xls.OleLinkType">
            <summary>
            Defines types of the ole object field.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleLinkType.Embed">
            <summary>
            Ole object field type is EMBED.
            </summary>
        </member>
        <member name="F:Spire.Xls.OleLinkType.Link">
            <summary>
            Ole object field type is LINK.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelComboType">
            <summary>
            Represents possible combo box type values.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.Regular">
            <summary>
            Regular sheet dropdown control.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.PivotTablePageField">
            <summary>
            PivotTable page field dropdown.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.AutoFilter">
            <summary>
            AutoFilter dropdown.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.AutoComplete">
            <summary>
            AutoComplete dropdown.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.DataValidation">
            <summary>
            Data validation list dropdown.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.PivotTableRowOrColumn">
            <summary>
            PivotTable row or column field dropdown.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelComboType.TableTotalRow">
            <summary>
            Dropdown for the Total Row of a table.
            </summary>
        </member>
        <member name="T:Spire.Xls.DeleteOption">
            <summary>
            Represents the options available for deleting Range.
            </summary>
        </member>
        <member name="F:Spire.Xls.DeleteOption.MoveUp">
            <summary>
             Move the below range to above.
            </summary>
        </member>
        <member name="F:Spire.Xls.DeleteOption.MoveLeft">
            <summary>
            Move the right range to left.
            </summary>
        </member>
        <member name="T:Spire.Xls.InsertMoveOption">
            <summary>
            Represents the options available for insert Range.
            </summary>
        </member>
        <member name="F:Spire.Xls.InsertMoveOption.MoveDown">
            <summary>
             Move the above range down.
            </summary>
        </member>
        <member name="F:Spire.Xls.InsertMoveOption.MoveRight">
            <summary>
            Move the range to right.
            </summary>
        </member>
        <member name="T:Spire.Xls.InsertOptionsType">
            <summary>
            Enumeration of the insert options in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.InsertOptionsType.FormatAsBefore">
            <summary>
            Indicates that inserted row/column has the same format as the row above or column left.
            </summary>
        </member>
        <member name="F:Spire.Xls.InsertOptionsType.FormatAsAfter">
            <summary>
            Indicates that inserted row/column has the same format as the row below or column right.
            </summary>
        </member>
        <member name="F:Spire.Xls.InsertOptionsType.FormatDefault">
            <summary>
            Indicates that inserted row/column has default format.
            </summary>
        </member>
        <member name="T:Spire.Xls.UnknownVariableAction">
            <summary>
            Defines action that must be taken when meeting unknown variable during template markers processing.
            </summary>
        </member>
        <member name="F:Spire.Xls.UnknownVariableAction.Exception">
            <summary>
            Throws exception if no variable is defined.
            </summary>
        </member>
        <member name="F:Spire.Xls.UnknownVariableAction.Skip">
            <summary>
            Skips processing variable and leaves it in the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.UnknownVariableAction.ReplaceBlank">
            <summary>
            Replaces variable with empty string.
            </summary>
        </member>
        <member name="T:Spire.Xls.VariableTypeAction">
            <summary>
            Defines value type and numberformat in the 
            template marker variable.
            </summary>
        </member>
        <member name="F:Spire.Xls.VariableTypeAction.DetectDataType">
            <summary>
            Detects the DataType of the marker variable.
            </summary>
        </member>
        <member name="F:Spire.Xls.VariableTypeAction.DetectNumberFormat">
            <summary>
            Detects both the NumberFormat and DataType of the marker variable.
            </summary>
        </member>
        <member name="F:Spire.Xls.VariableTypeAction.None">
            <summary>
            Represents the None Action.
            </summary>
        </member>
        <member name="T:Spire.Xls.BuiltInPropertyType">
            <summary>
            SummaryInformation property type.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Title">
            <summary>
            Title document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Subject">
            <summary>
            Subject document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Author">
            <summary>
            Author document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Keywords">
            <summary>
            Keywords document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Comments">
            <summary>
            Comments document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Template">
            <summary>
            Template document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.LastAuthor">
            <summary>
            LastAuthor document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.RevisionNumber">
            <summary>
            Revnumber document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.EditTime">
            <summary>
            EditTime document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.LastPrinted">
            <summary>
            LastPrinted document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.CreationDate">
            <summary>
            CreationDate document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.LastSaveDate">
            <summary>
            LastSaveDate document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.PageCount">
            <summary>
            PageCount document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.WordCount">
            <summary>
            WordCount document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.CharCount">
            <summary>
            CharCount document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Thumbnail">
            <summary>
            Thumbnail document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.ApplicationName">
            <summary>
            ApplicationName document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Security">
            <summary>
            Ssecurity document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Category">
            <summary>
            Category  document property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.PresentationTarget">
            <summary>
            Target format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.ByteCount">
            <summary>
            ByteCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.LineCount">
            <summary>
            LineCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.ParagraphCount">
            <summary>
            ParCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.SlideCount">
            <summary>
            SlideCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.NoteCount">
            <summary>
            NoteCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.HiddenCount">
            <summary>
            HiddenCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.MultimediaClipCount">
            <summary>
            MmclipCount.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.ScaleCrop">
            <summary>
            ScaleCrop property.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.HeadingPair">
            <summary>
            HeadingPair.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.DocParts">
            <summary>
            DocParts.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.LinksDirty">
            <summary>
            LinksDirty.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.DocumentVersion">
            <summary>
            DocumentVersion.
            </summary>
        </member>
        <member name="F:Spire.Xls.BuiltInPropertyType.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Spire.Xls.PageBreakExtentType">
            <summary>
            Page break extent types in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageBreakExtentType.Full">
             <summary>
            Represents full page break option.
             </summary>
        </member>
        <member name="F:Spire.Xls.PageBreakExtentType.Partial">
             <summary>
            Represents partial page break option.
             </summary>
        </member>
        <member name="T:Spire.Xls.FilterDataType">
            <summary>
            Data type for filters.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.NotUsed">
            <summary>
            Represents the filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.FloatingPoint">
            <summary>
            Represents the FloatingPoint filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.String">
            <summary>
            Represents the String filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.Boolean">
            <summary>
            Represents the Boolean filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.ErrorCode">
            <summary>
            Represents the ErrorCode filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.MatchAllBlanks">
            <summary>
            Represents the MatchAllBlanks filter data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterDataType.MatchAllNonBlanks">
            <summary>
            Represents the MatchAllNonBlanks filter data type.
            </summary>
        </member>
        <member name="T:Spire.Xls.FilterConditionType">
            <summary>
            Filter conditions.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.Less">
            <summary>
            Represents the Less filter condition type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.Equal">
            <summary>
            Represents the Equal filter condition type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.LessOrEqual">
            <summary>
            Represents the LessOrEqual filter condition type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.Greater">
            <summary>
            Represents the Greater filter condition type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.NotEqual">
            <summary>
            Represents the NotEqual filter condition type.
            </summary>
        </member>
        <member name="F:Spire.Xls.FilterConditionType.GreaterOrEqual">
            <summary>
            Represents the GreaterOrEqual filter condition type.
            </summary>
        </member>
        <member name="T:Spire.Xls.AutoFormatType">
            <summary>
            Represents auto format values.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Simple">
            <summary>
            Represents Simple auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Classic1">
            <summary>
            Represents Classic1 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Classic_2">
            <summary>
            Represents Classic2 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Classic_3">
            <summary>
            Represents Classic3 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Accounting1">
            <summary>
            Represents Accounting1 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Accounting2">
            <summary>
            Represents Accounting2 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Accounting3">
            <summary>
            Represents Accounting3 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Accounting4">
            <summary>
            Represents Accounting4 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Colorful1">
            <summary>
            Represents Colorful1 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Colorful2">
            <summary>
            Represents Colorful2 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Colorful3">
            <summary>
            Represents Colorful3 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.List1">
            <summary>
            Represents List1 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.List2">
            <summary>
            Represents List2 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.List3">
            <summary>
            Represents List3 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Effect3D1">
            <summary>
            Represents Effect3D1 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.Effect3D2">
            <summary>
            Represents Effect3D2 auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatType.None">
            <summary>
            Represents None auto format.
            </summary>
        </member>
        <member name="T:Spire.Xls.AutoFormatOptions">
            <summary>
            Represents auto format options.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Number">
            <summary>
            Represents number auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Border">
            <summary>
            Represents border auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Font">
            <summary>
            Represents font auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Patterns">
            <summary>
            Represents patterns auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Alignment">
            <summary>
            Represents alignment auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.Width_Height">
            <summary>
            Represents width\height auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.None">
            <summary>
            Represents none auto format option.
            </summary>
        </member>
        <member name="F:Spire.Xls.AutoFormatOptions.All">
            <summary>
            Represents all auto format option.
            </summary>
        </member>
        <member name="T:Spire.Xls.MeasureUnits">
            <summary>
            Represents the MeasureUnits types.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Display">
            <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Millimeter">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Centimeter">
            <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Xls.MeasureUnits.EMU">
            <summary>
            12700 emu's = 1 point.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartStyleElements">
            <summary>
            Contains the list of style elements
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.axisTitle">
            <summary>
            Indicates the Axis Title Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.categoryAxis">
            <summary>
            Indicates the Category Axis element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.chartArea">
            <summary>
            Indicates the chart Area Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataLabel">
            <summary>
            Indicates the Data Label Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataLabelCallout">
            <summary>
            Indicates the Data Label callout Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPoint">
            <summary>
            Indicates the Data Point Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPoint3D">
            <summary>
            Indicates the Data Point 3D Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPointLine">
            <summary>
            Indicates the Data Point Line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPointMarker">
            <summary>
            Indicates the Data Point Marker Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPointMarkerLayout">
            <summary>
            Indicates the Data Point Marker Layout Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataPointWireframe">
            <summary>
            Indicates the Data Point Wireframe Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dataTable">
            <summary>
            Indicates the Data Table Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.downBar">
            <summary>
            Indicates the Down Bar Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.dropLine">
            <summary>
            Indicates the Drop Line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.errorBar">
            <summary>
            Indicates the Error Bar Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.floor">
            <summary>
            Indicates the Floor Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.gridlineMajor">
            <summary>
            Indicates the Major grid line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.gridlineMinor">
            <summary>
            Indicates the Minor grid line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.hiLoLine">
            <summary>
            Indicates the High-Low Line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.leaderLine">
            <summary>
            Indicates the Leader Line Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.legend">
            <summary>
            Indicates the Legend Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.plotArea">
            <summary>
            Indicates the Plot Area Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.plotArea3D">
            <summary>
            Indicates the Plot Area 3D Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.seriesAxis">
            <summary>
            Indicates the Series Axis Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.seriesLine">
            <summary>
            Indicates the SeriesLine Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.title">
            <summary>
            Indicates the Title Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.trendline">
            <summary>
            Indicates the Trendline Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.trendlineLabel">
            <summary>
            Indicates the TrendLine Label Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.upBar">
            <summary>
            Indicates the Up Bar Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.valueAxis">
            <summary>
            Indicates the Value Axis Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.wall">
            <summary>
            Indicates the Wall Element
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartStyleElements.extLst">
            <summary>
            Indicates the Extension List Element
            </summary>
        </member>
        <member name="T:Spire.Xls.ColorModel">
            <summary>
            Contains the list of color models
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.none">
            <summary>
            No color models have been used
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.scrgbClr">
            <summary>
            expressing Red, Green, Blue color in Percentages.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.srgbClr">
            <summary>
            specifies the color two hex digits per color, in the order RGB.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.hslClr">
            <summary>
            represents a color using the Hue, Saturation, and Luminescence.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.sysClr">
            <summary>
            represents a system color, and introduces a level of indirection.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.schemeClr">
            <summary>
            schemeClr represents a color from a theme.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.prstClr">
            <summary>
            prstClr represents a preset color by its name.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorModel.styleClr">
            <summary>
            element that specifies a color calculated from a CT_ColorStyle.
            </summary>
        </member>
        <member name="T:Spire.Xls.StyleEntryModifierEnum">
            <summary>
            Contains the style entry modifier enumerations
            </summary>
        </member>
        <member name="F:Spire.Xls.StyleEntryModifierEnum.none">
            <summary>
            No modifier enum is applied
            </summary>
        </member>
        <member name="F:Spire.Xls.StyleEntryModifierEnum.allowNoFillOverride">
            <summary>
            fill properties specified on this StyleEntry can be replaced with no fill instead.
            </summary>
        </member>
        <member name="F:Spire.Xls.StyleEntryModifierEnum.allowNoLineOverride">
            <summary>
            line properties specified on this StyleEntry can be replaced with no line instead.
            </summary>
        </member>
        <member name="T:Spire.Xls.EndLineCap">
            <summary>
            This simple type enumeration specifies how to cap the ends of lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.EndLineCap.flat">
            <summary>
            Line ends at end point.
            </summary>
        </member>
        <member name="F:Spire.Xls.EndLineCap.rnd">
            <summary>
            Rounded ends. Semi-circle protrudes by half line width.
            </summary>
        </member>
        <member name="F:Spire.Xls.EndLineCap.sq">
            <summary>
            Square protrudes by half line width.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelHorizontalAlignment">
            <summary>
            Represents different horizontal alignments
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.Left">
            <summary>
            Represents Left horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.Center">
            <summary>
            Represents Center horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.Right">
            <summary>
            Represents Right horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.LeftMiddle">
            <summary>
            Represents LeftMiddle horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.CenterMiddle">
            <summary>
            Represents CenterMiddle horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelHorizontalAlignment.RightMiddle">
            <summary>
            Represents RightMiddle horizontal alignment setting for the shapes.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelVerticalAlignment">
            <summary>
            Represents different vertical alignments
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.Top">
            <summary>
            Represents Top vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.Middle">
            <summary>
            Represents Middle vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.Bottom">
            <summary>
            Represents Bottom vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.TopCentered">
            <summary>
            Represents TopCentered vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.MiddleCentered">
            <summary>
            Represents MiddleCentered vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelVerticalAlignment.BottomCentered">
            <summary>
            Represents BottomCentered vertical alignment setting for the shapes.
            </summary>
        </member>
        <member name="T:Spire.Xls.TextDirection">
            <summary>
            Represents different text direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextDirection.Horizontal">
            <summary>
            Represents the horizontal text direction
            </summary>
        </member>
        <member name="F:Spire.Xls.TextDirection.RotateAllText90">
            <summary>
            Rotates the text by 90 degrees
            </summary>
        </member>
        <member name="F:Spire.Xls.TextDirection.RotateAllText270">
            <summary>
            Rotates the text by 270 degrees
            </summary>
        </member>
        <member name="F:Spire.Xls.TextDirection.StackedLeftToRight">
            <summary>
            Rotates the text from left to right
            </summary>
        </member>
        <member name="F:Spire.Xls.TextDirection.StackedRightToLeft">
            <summary>
            Rotates the text from right to left
            </summary>
        </member>
        <member name="T:Spire.Xls.FontCollectionIndex">
            <summary>
            Enumeration represents one of the fonts associated with the style.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontCollectionIndex.none">
            <summary>
            (None) No font reference.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontCollectionIndex.minor">
            <summary>
            (Minor Font) The minor font of the style's font scheme.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontCollectionIndex.major">
            <summary>
            (Major Font) The major font of the style's font scheme.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelCalculationMode">
            <summary>
            Enum that defines different types of the formula calculations.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelCalculationMode.Manual">
            <summary>
            Represents the MANUAL calculation type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelCalculationMode.Auto">
            <summary>
            Represents the AUTOMATIC calculation type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelCalculationMode.AutoNoTable">
            <summary>
            Represents the AUTOMATIC EXCEPT TABLES calculation type.
            </summary>
        </member>
        <member name="T:Spire.Xls.ViewMode">
            <summary>
            Defines the view setting of the sheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.ViewMode.Normal">
            <summary>
            Normal view
            </summary>
        </member>
        <member name="F:Spire.Xls.ViewMode.Preview">
            <summary>
            Preview
            </summary>
        </member>
        <member name="F:Spire.Xls.ViewMode.Layout">
            <summary>
            Page Layout View
            </summary>
        </member>
        <member name="T:Spire.Xls.BordersLineType">
             <summary>
            Specifies border and diagonal line types in Excel.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.DiagonalDown">
             <summary>
            Border running from the upper left-hand corner to the lower right of each cell in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.DiagonalUp">
             <summary>
            Border running from the lower left-hand corner to the upper right of each cell in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.EdgeBottom">
             <summary>
            Border at the bottom of the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.EdgeLeft">
             <summary>
            Border at the left-hand edge of the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.EdgeRight">
             <summary>
            Border at the right-hand edge of the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.EdgeTop">
             <summary>
            Border at the top of the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.horizontal">
             <summary>
            Border at the horizontal edge of the range in the table.
             </summary>
        </member>
        <member name="F:Spire.Xls.BordersLineType.vertical">
             <summary>
            Border at the vertical edge of the range in the table.
             </summary>
        </member>
        <member name="T:Spire.Xls.LineStyleType">
            <summary>
            Border line styles.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.None">
            <summary>
            Represents no border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Thin">
            <summary>
            Represents the thin border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Medium">
            <summary>
            Represents the medium border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Dashed">
             <summary>
            Represents the dashed border line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Dotted">
            <summary>
            Represents the dotted border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Thick">
            <summary>
            Represents the thick border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Double">
            <summary>
            Represents the double border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.Hair">
            <summary>
            Represents the hair border line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.MediumDashed">
             <summary>
            Represents the medium_dashed medium_dashed line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.DashDot">
             <summary>
            Represents the DashDot border line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.MediumDashDot">
             <summary>
            Represents the MediumDashDot border line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.DashDotDot">
             <summary>
            Represents the DashDotDot border line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.MediumDashDotDot">
             <summary>
            Represents the MediumDashDotDot border line style.
             </summary>
        </member>
        <member name="F:Spire.Xls.LineStyleType.SlantedDashDot">
             <summary>
            Represents the SlantedDashDot border line style.
             </summary>
        </member>
        <member name="T:Spire.Xls.AlertStyleType">
            <summary>
            Possible error style values:
            </summary>
        </member>
        <member name="F:Spire.Xls.AlertStyleType.Stop">
            <summary>
            Specifies that the alert should be displayed with the stop style.
            </summary>
        </member>
        <member name="F:Spire.Xls.AlertStyleType.Warning">
            <summary>
            Specifies that the alert should be displayed with the warning style. 
            </summary>
        </member>
        <member name="F:Spire.Xls.AlertStyleType.Info">
            <summary>
            Specifies that the alert should be displayed with the information style. 
            </summary>
        </member>
        <member name="T:Spire.Xls.ValidationComparisonOperator">
            <summary>
            The Comparison operator for conditional formatting.
            </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.Between">
             <summary>
            Represents between option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.NotBetween">
             <summary>
            Represents not between option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.Equal">
             <summary>
            Represents equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.NotEqual">
             <summary>
            Represents not equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.Greater">
             <summary>
            Represents greater than option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.Less">
             <summary>
            Represents less than option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.GreaterOrEqual">
             <summary>
            Represents greater than or equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ValidationComparisonOperator.LessOrEqual">
             <summary>
            Represents less than or equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="T:Spire.Xls.CellDataType">
            <summary>
            Cell data types:
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Any">
            <summary>
            Represents the Any data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Integer">
            <summary>
            Represents the Integer data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Decimal">
            <summary>
            Represents the Decimal data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.User">
            <summary>
            Represents the User data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Date">
            <summary>
            Represents the Date data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Time">
            <summary>
            Represents the Time data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.TextLength">
            <summary>
            Represents the TextLength data type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CellDataType.Formula">
            <summary>
            Represents the Formula data type.
            </summary>
        </member>
        <member name="T:Spire.Xls.WorksheetVisibility">
            <summary>
            Visibility of worksheet type.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetVisibility.Visible">
            <summary>
            Worksheet is visible.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetVisibility.Hidden">
            <summary>
            Worksheet is hidden.
            </summary>
        </member>
        <member name="F:Spire.Xls.WorksheetVisibility.StrongHidden">
            <summary>
            Cleared with a Visual Basic macro. 
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelTotalsCalculation">
            <summary>
            Specifies the type of calculation in the Totals row of a list column.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.None">
            <summary>
            No calculation.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Sum">
            <summary>
            Sum of all values in the list column.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Average">
            <summary>
            Average.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Count">
            <summary>
            Count of non-empty cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.CountNums">
            <summary>
            Count of cells with numeric values.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Min">
            <summary>
            Minimum value in the list.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.StdDev">
            <summary>
            Standard deviation value.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Var">
            <summary>
            Variable.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Max">
            <summary>
            Maximum value in the list.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTotalsCalculation.Custom">
            <summary>
            formula provideid in totalsRowFormula.
            </summary>
        </member>
        <member name="T:Spire.Xls.HorizontalAlignType">
            <summary>
            Horizontal alignment type.
            </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.General">
             <summary>
            Represents the general horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Left">
             <summary>
            Represents left horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Center">
             <summary>
            Represents center horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Right">
             <summary>
            Represents center horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Fill">
             <summary>
            Represents XlsFill horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Justify">
             <summary>
            Represents justify  horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.CenterAcrossSelection">
             <summary>
            Represents center across selection horizontal alignment setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.HorizontalAlignType.Distributed">
             <summary>
            Represents distributed horizontal alignment setting.
             </summary>
        </member>
        <member name="T:Spire.Xls.VerticalAlignType">
            <summary>
            Vertical alignment type.
            </summary>
        </member>
        <member name="F:Spire.Xls.VerticalAlignType.Top">
             <summary>
            Represents top vertical alignment.
             </summary>
        </member>
        <member name="F:Spire.Xls.VerticalAlignType.Center">
             <summary>
            Represents center vertical alignment.
             </summary>
        </member>
        <member name="F:Spire.Xls.VerticalAlignType.Bottom">
             <summary>
            Represents bottom vertical alignment.
             </summary>
        </member>
        <member name="F:Spire.Xls.VerticalAlignType.Justify">
             <summary>
            Represents justify vertical alignment.
             </summary>
        </member>
        <member name="F:Spire.Xls.VerticalAlignType.Distributed">
             <summary>
            Represents distributed vertical alignment.
             </summary>
        </member>
        <member name="T:Spire.Xls.IgnoreErrorType">
            <summary>
            Represents flags of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.None">
            <summary>
            Represents None flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.EvaluateToError">
            <summary>
            Represents EvaluateToError flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.EmptyCellReferences">
            <summary>
            Represents EmptyCellReferences flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.NumberAsText">
            <summary>
            Represents NumberAsText flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.OmittedCells">
            <summary>
            Represents OmittedCells flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.InconsistentFormula">
            <summary>
            Represents InconsistentFormula flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.TextDate">
            <summary>
            Represents TextDate flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.UnlockedFormulaCells">
            <summary>
            Represents UnlockedFormulaCells flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="F:Spire.Xls.IgnoreErrorType.All">
            <summary>
            Represents All flag of excel ignore error indicator.
            </summary>
        </member>
        <member name="T:Spire.Xls.ReadingOrderType">
            <summary>
            Reading order types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ReadingOrderType.Context">
            <summary>
            Represents the Context reading order type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ReadingOrderType.LeftToRight">
            <summary>
            Represents the LeftToRight reading order type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ReadingOrderType.RightToLeft">
            <summary>
            Represents the RightToLeft reading order type.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientStyleType">
            <summary>
            Represents excel shape shading style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.Horizontal">
            <summary>
            Represents horizontal style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.Vertical">
            <summary>
            Represents vertical style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.Diagonl_Up">
            <summary>
            Represents diagonl up style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.Diagonl_Down">
            <summary>
            Represents diagonl down style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.From_Corner">
            <summary>
            Represents from corner style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientStyleType.From_Center">
            <summary>
            Represents from center style.
            </summary>
        </member>
        <member name="T:Spire.Xls.OrderType">
            <summary>
            Page order for sheet in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.OrderType.DownThenOver">
             <summary>
            Represents Down, then over.
             </summary>
        </member>
        <member name="F:Spire.Xls.OrderType.OverThenDown">
             <summary>
            Represents Over, then down.
             </summary>
        </member>
        <member name="T:Spire.Xls.PageOrientationType">
            <summary>
            Page orientation types in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.PageOrientationType.Landscape">
             <summary>
            Represents landscape setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.PageOrientationType.Portrait">
             <summary>
            Represents potrait setting.
             </summary>
        </member>
        <member name="T:Spire.Xls.PrintCommentType">
            <summary>
            Print comments types.
            </summary>
        </member>
        <member name="F:Spire.Xls.PrintCommentType.InPlace">
             <summary>
            Represents As displayed on sheet  setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.PrintCommentType.NoComments">
             <summary>
            Represents (None) setting.
             </summary>
        </member>
        <member name="F:Spire.Xls.PrintCommentType.SheetEnd">
             <summary>
            Represents at end of sheet setting.
             </summary>
        </member>
        <member name="T:Spire.Xls.PrintErrorsType">
            <summary>
            Print error values.
            </summary>
        </member>
        <member name="F:Spire.Xls.PrintErrorsType.Blank">
             <summary>
            Represents the blank option.
             </summary>
        </member>
        <member name="F:Spire.Xls.PrintErrorsType.Dash">
             <summary>
            Represents the dash option.
             </summary>
        </member>
        <member name="F:Spire.Xls.PrintErrorsType.Displayed">
             <summary>
            Represents the displayed option.
             </summary>
        </member>
        <member name="F:Spire.Xls.PrintErrorsType.NA">
             <summary>
            Represents the NA option.
             </summary>
        </member>
        <member name="T:Spire.Xls.TableBuiltInStyles">
            <summary>
            Excel 2007 table built in styles.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium28">
            <summary>
            Represents TableStyleMedium28 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium27">
            <summary>
            Represents TableStyleMedium27 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium26">
            <summary>
            Represents TableStyleMedium26 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium25">
            <summary>
            Represents TableStyleMedium25 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium24">
            <summary>
            Represents TableStyleMedium24 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium23">
            <summary>
            Represents TableStyleMedium23 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium22">
            <summary>
            Represents TableStyleMedium22 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium21">
            <summary>
            Represents TableStyleMedium21 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium20">
            <summary>
            Represents TableStyleMedium20 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium19">
            <summary>
            Represents TableStyleMedium19 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium18">
            <summary>
            Represents TableStyleMedium18 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium17">
            <summary>
            Represents TableStyleMedium17 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium16">
            <summary>
            Represents TableStyleMedium16 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium15">
            <summary>
            Represents TableStyleMedium15 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium14">
            <summary>
            Represents TableStyleMedium14 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium13">
            <summary>
            Represents TableStyleMedium13 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium12">
            <summary>
            Represents TableStyleMedium12 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium11">
            <summary>
            Represents TableStyleMedium11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium10">
            <summary>
            Represents TableStyleMedium10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium9">
            <summary>
            Represents TableStyleMedium9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium8">
            <summary>
            Represents TableStyleMedium8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium7">
            <summary>
            Represents TableStyleMedium7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium6">
            <summary>
            Represents TableStyleMedium6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium5">
            <summary>
            Represents TableStyleMedium5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium4">
            <summary>
            Represents TableStyleMedium4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium3">
            <summary>
            Represents TableStyleMedium3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium2">
            <summary>
            Represents TableStyleMedium2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleMedium1">
            <summary>
            Represents TableStyleMedium1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight21">
            <summary>
            Represents TableStyleLight21 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight20">
            <summary>
            Represents TableStyleLight20 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight19">
            <summary>
            Represents TableStyleLight19 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight18">
            <summary>
            Represents TableStyleLight18 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight17">
            <summary>
            Represents TableStyleLight17 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight16">
            <summary>
            Represents TableStyleLight16 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight15">
            <summary>
            Represents TableStyleLight15 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight14">
            <summary>
            Represents TableStyleLight14 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight13">
            <summary>
            Represents TableStyleLight13 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight12">
            <summary>
            Represents TableStyleLight12 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight11">
            <summary>
            Represents TableStyleLight11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight10">
            <summary>
            Represents TableStyleLight10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight9">
            <summary>
            Represents TableStyleLight9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight8">
            <summary>
            Represents TableStyleLight8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight7">
            <summary>
            Represents TableStyleLight7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight6">
            <summary>
            Represents TableStyleLight6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight5">
            <summary>
            Represents TableStyleLight5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight4">
            <summary>
            Represents TableStyleLight4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight3">
            <summary>
            Represents TableStyleLight3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight2">
            <summary>
            Represents TableStyleLight2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleLight1">
            <summary>
            Represents TableStyleLight1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark11">
            <summary>
            Represents TableStyleDark11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark10">
            <summary>
            Represents TableStyleDark10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark9">
            <summary>
            Represents TableStyleDark9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark8">
            <summary>
            Represents TableStyleDark8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark7">
            <summary>
            Represents TableStyleDark7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark6">
            <summary>
            Represents TableStyleDark6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark5">
            <summary>
            Represents TableStyleDark5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark4">
            <summary>
            Represents TableStyleDark4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark3">
            <summary>
            Represents TableStyleDark3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark2">
            <summary>
            Represents TableStyleDark2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.TableStyleDark1">
            <summary>
            Represents TableStyleDark1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.TableBuiltInStyles.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.ConditionValuePosition">
            <summary>
            Specifies condition value position.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValuePosition.Third">
            <summary>
            the Third value.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValuePosition.Second">
            <summary>
            the second value.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValuePosition.First">
            <summary>
            the first value.
            </summary>
        </member>
        <member name="T:Spire.Xls.ConditionValueType">
            <summary>
            Specifies the types of condition values that can be used.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Max">
            <summary>
            Indicates that the maximum value in the range shall be
            used as the maximum value for the gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Min">
            <summary>
            Indicates that the minimum value in the range shall be
            used as the minimum value for the gradient.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.None">
            <summary>
            No conditional value.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Number">
            <summary>
            Number is used.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Percent">
            <summary>
            Percentage is used. 
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Formula">
            <summary>
            Formula is used.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValueType.Percentile">
            <summary>
            Percentile is used.
            </summary>
        </member>
        <member name="T:Spire.Xls.IconSetType">
            <summary>
            Icon set type for conditional formatting. 
            The threshold values for triggering the different icons within a set are
            configurable, and the icon order is reversible. 
            </summary>  
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeArrows">
            <summary>
            3 arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeArrowsGray">
            <summary>
            3 gray arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeFlags">
            <summary>
            3 flags icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeTrafficLights1">
            <summary>
            3 traffic lights icon set (#1).
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeTrafficLights2">
            <summary>
            3 traffic lights icon set with thick black border.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeSigns">
            <summary>
            3 signs icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeSymbols">
            <summary>
            3 symbols icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeSymbols2">
            <summary>
            3 Symbols icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeTriangles">
            <summary>
            3 triangles set
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.ThreeStars">
            <summary>
            3 stars set
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FiveBoxes">
            <summary>
            5 boxes set
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FourArrows">
            <summary>
            4 arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FourArrowsGray">
            <summary>
            4 gray arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FourRedToBlack">
            <summary>
            4 'red to black' icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FourRating">
            <summary>
            4 ratings icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FourTrafficLights">
            <summary>
            4 traffic lights icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FiveArrows">
            <summary>
            5 arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FiveArrowsGray">
            <summary>
            5 gray arrows icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FiveRating">
            <summary>
            5 rating icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.FiveQuarters">
            <summary>
            5 quarters icon set.
            </summary>
        </member>
        <member name="F:Spire.Xls.IconSetType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:Spire.Xls.TopBottomType">
            <summary>
            TopBottom type.
            </summary>
        </member>
        <member name="T:Spire.Xls.AverageType">
            <summary>
            Average type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.Above">
             <summary>
            Above the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.AboveEqual">
             <summary>
            Above or equal the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.Below">
             <summary>
            below the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.BelowEqual">
             <summary>
            below or equal the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.AboveStdDev1">
             <summary>
            StdDev above 1 than the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.AboveStdDev2">
             <summary>
            StdDev above 2 than the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.AboveStdDev3">
             <summary>
            StdDev above 3 than the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.BelowStdDev1">
             <summary>
            StdDev below 1 than the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.BelowStdDev2">
             <summary>
            StdDev below 2 than the average for all values in the range.
             </summary>
        </member>
        <member name="F:Spire.Xls.AverageType.BelowStdDev3">
             <summary>
            StdDev below 3 than the average for all values in the range.
             </summary>
        </member>
        <member name="T:Spire.Xls.ConditionalFormatType">
            <summary>
            Conditional formatting type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.CellValue">
             <summary>
            Represents the Cell Value Is option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.Formula">
             <summary>
            Represents the Formula Is option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.DataBar">
             <summary>
            Represents the DataBar option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.IconSet">
             <summary>
            Represents the IconSet option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.ColorScale">
             <summary>
            Represents the ColorScale option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.BeginsWith">
             <summary>
            Represents the BeginsWith option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.ContainsText">
             <summary>
            Represents the ContainsText option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.EndsWith">
             <summary>
            Represents the EndsWith option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.NotContainsText">
             <summary>
            Represents the NotContainsText option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.TopBottom">
             <summary>
            Represents the TopBottom option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.Average">
             <summary>
            Represents the Average option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.ContainsBlanks">
             <summary>
            Represents the ContainsBlanks option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.ContainsErrors">
             <summary>
            Represents the ContainsErrors option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.DuplicateValues">
             <summary>
            Represents the DuplicateValues option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.NotContainsBlanks">
             <summary>
            Represents the NotContainsBlanks option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.NotContainsErrors">
             <summary>
            Represents the NotContainsErrors option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.TimePeriod">
             <summary>
            Represents the TimePeriod option for conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatType.UniqueValues">
             <summary>
            Represents the UniqueValues option for conditional formatting.
             </summary>
        </member>
        <member name="T:Spire.Xls.ComparisonOperatorType">
            <summary>
            The Comparison operator for conditional formatting in Excel.
            </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.None">
             <summary>
            Represents no option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.Between">
             <summary>
            Represents between option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.NotBetween">
             <summary>
            Represents not between option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.Equal">
             <summary>
            Represents equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.NotEqual">
             <summary>
            Represents not equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.Greater">
             <summary>
            Represents greater than option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.Less">
             <summary>
            Represents less than option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.GreaterOrEqual">
             <summary>
            Represents greater than or equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="F:Spire.Xls.ComparisonOperatorType.LessOrEqual">
             <summary>
            Represents less than or equal to option for comparison in conditional formatting.
             </summary>
        </member>
        <member name="T:Spire.Xls.ResizeBehaveType">
            <summary>
            Represents The ResizeBehave mode. 
            </summary>
        </member>
        <member name="F:Spire.Xls.ResizeBehaveType.FreeFloating">
            <summary>
            Don't move or resize with underlying rows/columns.
            </summary>
        </member>
        <member name="F:Spire.Xls.ResizeBehaveType.MoveNotResize">
            <summary>
            Move with cells but do not resize.
            </summary>
        </member>
        <member name="F:Spire.Xls.ResizeBehaveType.MoveAndResize">
            <summary>
            Move and resize with anchor cells.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.Horizontal">
            <summary>
            Vertical text type enum(Horizontal)
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.Vertical">
            <summary>
            Vertical text type enum(Vertical)
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.RotateAllText90">
            <summary>
            Rotate All Text 90
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.RotateAllText270">
            <summary>
            Rotate All Text 270
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.StackedLeftToRight">
            <summary>
            Stacked left to right
            </summary>
        </member>
        <member name="F:Spire.Xls.TextVerticalValue.StackedRightToLeft">
            <summary>
            Stacked right to left
            </summary>
        </member>
        <member name="T:Spire.Xls.TextRotationType">
            <summary>
            Text Rotation types.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextRotationType.LeftToRight">
            <summary>
            Represents the LeftToRight text rotation.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextRotationType.TopToBottom">
            <summary>
            Represents the TopToBottom text rotation.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextRotationType.CounterClockwise">
            <summary>
            Represents the CounterClockwise text rotation.
            </summary>
        </member>
        <member name="F:Spire.Xls.TextRotationType.Clockwise">
            <summary>
            Represents the Clockwise text rotation.
            </summary>
        </member>
        <member name="T:Spire.Xls.CheckState">
            <summary>
            Specifies check state of the check box.
            </summary>
        </member>
        <member name="F:Spire.Xls.CheckState.Unchecked">
            <summary>
            Indicates that checkbox is unchecked.
            </summary>
        </member>
        <member name="F:Spire.Xls.CheckState.Checked">
            <summary>
            Indicates that checkbox is checked.
            </summary>
        </member>
        <member name="F:Spire.Xls.CheckState.Mixed">
            <summary>
            Mixed state.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeLineStyleType">
            <summary>
            Represents shape line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLineStyleType.LineSingle">
            <summary>
            Represents single line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLineStyleType.LineThinThin">
            <summary>
            Represents thin thin line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLineStyleType.LineThinThick">
            <summary>
            Represents thin thick line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLineStyleType.LineThickThin">
            <summary>
            Represents thick thin line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeLineStyleType.LineThickBetweenThin">
            <summary>
            Represents thick between thin line style.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeDashLineStyleType">
            <summary>
            Represents shape dash line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.Solid">
            <summary>
            Represents solid style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.Dotted">
            <summary>
            Represents Dotted style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.DottedRound">
            <summary>
            Represents DottedRound style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.Dashed">
            <summary>
            Represents Dashed style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.MediumDashed">
            <summary>
            Represents MediumDashed style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.DashDot">
            <summary>
            Represents DashDot style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.MediumDashDot">
            <summary>
            Represents MediumDashDot style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeDashLineStyleType.DashDotDot">
            <summary>
            Represents DashDotDot style.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeArrowStyleType">
            <summary>
            Represents shape arrow style type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineNoArrow">
            <summary>
            Represetns no arrow.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineArrow">
            <summary>
            Represetns standart arrow.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineArrowStealth">
            <summary>
            Represetns Stealth arrow.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineArrowDiamond">
            <summary>
            Represetns Diamond arrow.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineArrowOval">
            <summary>
            Represetns Oval arrow.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowStyleType.LineArrowOpen">
            <summary>
            Represetns Open arrow.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeArrowLengthType">
            <summary>
            Represents arrow head length.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowLengthType.ArrowHeadShort">
            <summary>
            Represents short arrow head length.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowLengthType.ArrowHeadMedium">
            <summary>
            Represents short arrow head length.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowLengthType.ArrowHeadLong">
            <summary>
            Represents short arrow head length.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeArrowWidthType">
            <summary>
            Represents arrow head width.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowWidthType.ArrowHeadNarrow">
            <summary>
            Represents short arrow head width.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowWidthType.ArrowHeadMedium">
            <summary>
            Represents short arrow head width.
            </summary>
        </member>
        <member name="F:Spire.Xls.ShapeArrowWidthType.ArrowHeadWide">
            <summary>
            Represents short arrow head width.
            </summary>
        </member>
        <member name="T:Spire.Xls.SelectionType">
            <summary>
            The selection type of list box.
            </summary>
        </member>
        <member name="F:Spire.Xls.SelectionType.Single">
            <summary>
            Sigle selection type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SelectionType.Multi">
            <summary>
            Multiple selection type. 
            </summary>
        </member>
        <member name="F:Spire.Xls.SelectionType.Extend">
            <summary>
            Externd selection type.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientTextureType">
            <summary>
            Represents gradient texture.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Newsprint">
            <summary>
            Represents Newsprint texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Recycled_Paper">
            <summary>
            Represents Recycled Paper texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Parchment">
            <summary>
            Represents Parchment texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Stationery">
            <summary>
            Represents Stationery texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.GreenMarble">
            <summary>
            Represents Green Marble texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.WhiteMarble">
            <summary>
            Represents White Marble texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.BrownMarble">
            <summary>
            Represents Brown Marble texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Granite">
            <summary>
            Represents Granite texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.BlueTissuePaper">
            <summary>
            Represents Blue Tissue Paper texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.PinkTissuePaper">
            <summary>
            Represents Pink Tissue Paper texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.PurpleMesh">
            <summary>
            Represents Purple Mesh texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Bouquet">
            <summary>
            Represents Bouquet texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Papyrus">
            <summary>
            Represents Papyrus texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Canvas">
            <summary>
            Represents Canvas texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Denim">
            <summary>
            Represents Denim texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.WovenMat">
            <summary>
            Represents Woven Mat texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.WaterDroplets">
            <summary>
            Represents Water Droplets texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.PaperBag">
            <summary>
            Represents Paper Bag texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.FishFossil">
            <summary>
            Represents Fish Fossil texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Sand">
            <summary>
            Represents Sand texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Cork">
            <summary>
            Represents Cork texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Walnut">
            <summary>
            Represents Walnut texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.Oak">
            <summary>
            Represents Oak texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.MediumWood">
            <summary>
            Represents Medium Wood texture type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientTextureType.UserDefined">
            <summary>
            Represents user defined texture type.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientPresetType">
            <summary>
            Represents preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradEarlySunset">
            <summary>
            Represents early sunset preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradLateSunset">
            <summary>
            Represents late sunset preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradNightfall">
            <summary>
            Represents nightfall preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradDaybreak">
            <summary>
            Represents daybreak preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradHorizon">
            <summary>
            Represents horizon preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradDesert">
            <summary>
            Represents desert preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradOcean">
            <summary>
            Represents ccean preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradCalmWater">
            <summary>
            Represents calm water preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradFire">
            <summary>
            Represents fire preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradFog">
            <summary>
            Represents fog preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradMoss">
            <summary>
            Represents moss preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradPeacock">
            <summary>
            Represents peacock preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradWheat">
            <summary>
            Represents wheat preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradParchment">
            <summary>
            Represents parchment preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradMahogany">
            <summary>
            Represents mahogany preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradRainbow">
            <summary>
            Represents rainbow preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradRainbow2">
            <summary>
            Represents rainbowII preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradGold">
            <summary>
            Represents gold preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradGold2">
            <summary>
            Represents goldII preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradBrass">
            <summary>
            Represents brass preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradChrome">
            <summary>
            Represents chrome preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradChrome2">
            <summary>
            Represents chromeII preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradSilver">
            <summary>
            Represents silver preset gradient type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPresetType.GradSapphire">
            <summary>
            Represents sapphire preset gradient type.
            </summary>
        </member>
        <member name="T:Spire.Xls.SortOrientationType">
            <summary>
            Represents the sort orientation.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortOrientationType.TopToBottom">
            <summary>
            Sorts from top to Bottom.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortOrientationType.LeftToRight">
            <summary>
            Sorts from Left to Right.
            </summary>
        </member>
        <member name="T:Spire.Xls.SortComparsionType">
            <summary>
            Represents the sort by in the range.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortComparsionType.Values">
            <summary>
            Sort based on values in the cell.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortComparsionType.BackgroundColor">
            <summary>
            Sort based on the cell back color.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortComparsionType.FontColor">
            <summary>
            Sort based on the font color.
            </summary>
        </member>
        <member name="T:Spire.Xls.SortedWayType">
            <summary>
            Represents the algorithm to sort.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortedWayType.QuickSort">
            <summary>
            Represents the Quick sort rule.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortedWayType.HeapSort">
            <summary>
            Represents the Heap sort rule.
            </summary>
        </member>
        <member name="F:Spire.Xls.SortedWayType.InsertionSort">
            <summary>
            Represents the Insertion sort rule.
            </summary>
        </member>
        <member name="T:Spire.Xls.OrderBy">
            <summary>
            Represents the sort order.
            </summary>
        </member>
        <member name="F:Spire.Xls.OrderBy.Ascending">
            <summary>
            Represent the ascending sort.
            </summary>
        </member>
        <member name="F:Spire.Xls.OrderBy.Descending">
            <summary>
            Represent the descending sort.
            </summary>
        </member>
        <member name="F:Spire.Xls.OrderBy.Top">
            <summary>
            Represents the position value in the sort list
            </summary>
        </member>
        <member name="F:Spire.Xls.OrderBy.Bottom">
            <summary>
            Represents the position of value in the sort list.
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathLineTo">
            <summary>
            Straight line segment
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathCurveTo">
            <summary>
            Cubic Bezier curve
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathMoveTo">
            <summary>
            Start a new path
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathClose">
            <summary>
            If the starting POINT and the end POINT are not the same, a single 
            straight line is drawn to connect the starting POINT and ending POINT of the path.
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathEnd">
            <summary>
            The end of the current path
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathEscape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.MsopathArcTo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.MsoPathType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelChartType">
            <summary>
            Chart types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ColumnClustered">
            <summary>
            Represents the column clustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ColumnStacked">
            <summary>
            Represents the stacked column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Column100PercentStacked">
            <summary>
            Represents the 100% stacked column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Column3DClustered">
            <summary>
            Represents the 3D clustered column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Column3DStacked">
            <summary>
            Represents the 3D stacked column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Column3D100PercentStacked">
            <summary>
            Represents the 3D 100% stacked column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Column3D">
            <summary>
            Represents the 3D column chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.BarClustered">
            <summary>
            Represents the clustered bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.BarStacked">
            <summary>
            Represents the stacked bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bar100PercentStacked">
            <summary>
            Represents the 100% stacked bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bar3DClustered">
            <summary>
            Represents the 3D clustered bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bar3DStacked">
            <summary>
            Represents the 3D stacked bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bar3D100PercentStacked">
            <summary>
            Represents the 100% 3D stacked bar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Line">
            <summary>
            Represents the Line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.LineStacked">
            <summary>
            Represents the stacked line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Line100PercentStacked">
            <summary>
            Represents the 100% stacked line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.LineMarkers">
            <summary>
            Represents the markers line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.LineMarkersStacked">
            <summary>
            Represents the stacked markers line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.LineMarkers100PercentStacked">
            <summary>
            Represents the 100% stacked markers line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Line3D">
            <summary>
            Represents the 3D line chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pie">
            <summary>
            Represents the pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pie3D">
            <summary>
            Represents the 3D pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PieOfPie">
            <summary>
            Represents the pie of pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PieExploded">
            <summary>
            Represents the exploded pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pie3DExploded">
            <summary>
            Represents the 3D exploded pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PieBar">
            <summary>
            Represents the bar pie chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ScatterMarkers">
            <summary>
            Represents the markers scatter chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ScatterSmoothedLineMarkers">
            <summary>
            Represents the ScatterSmoothedLineMarkers chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ScatterSmoothedLine">
            <summary>
            Represents the ScatterSmoothedLine chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ScatterLineMarkers">
            <summary>
            Represents the ScatterLineMarkers chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ScatterLine">
            <summary>
            Represents the ScatterLine chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Area">
            <summary>
            Represents the Area chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.AreaStacked">
            <summary>
            Represents the AreaStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Area100PercentStacked">
            <summary>
            Represents the Area100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Area3D">
            <summary>
            Represents the Area3D chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Area3DStacked">
            <summary>
            Represents the Area3DStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Area3D100PercentStacked">
            <summary>
            Represents the Area3D100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Doughnut">
            <summary>
            Represents the Doughnut chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.DoughnutExploded">
            <summary>
            Represents the DoughnutExploded chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Radar">
            <summary>
            Represents the Radar chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.RadarMarkers">
            <summary>
            Represents the RadarMarkers chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.RadarFilled">
            <summary>
            Represents the RadarFilled chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Surface3D">
            <summary>
            Represents the Surface3D chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Surface3DNoColor">
            <summary>
            Represents the Surface3DNoColor chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.SurfaceContour">
            <summary>
            Represents the SurfaceContour chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.SurfaceContourNoColor">
            <summary>
            Represents the SurfaceContourNoColor chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bubble">
            <summary>
            Represents the Bubble chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Bubble3D">
            <summary>
            Represents the Bubble3D chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.StockHighLowClose">
            <summary>
            Represents the StockHighLowClose chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.StockOpenHighLowClose">
            <summary>
            Represents the StockOpenHighLowClose chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.StockVolumeHighLowClose">
            <summary>
            Represents the StockVolumeHighLowClose chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.StockVolumeOpenHighLowClose">
            <summary>
            Represents the StockVolumeOpenHighLowClose chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CylinderClustered">
            <summary>
            Represents the CylinderClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CylinderStacked">
            <summary>
            Represents the CylinderStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Cylinder100PercentStacked">
            <summary>
            Represents the Cylinder100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CylinderBarClustered">
            <summary>
            Represents the CylinderBarClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CylinderBarStacked">
            <summary>
            Represents the CylinderBarStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CylinderBar100PercentStacked">
            <summary>
            Represents the CylinderBar100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Cylinder3DClustered">
            <summary>
            Represents the Cylinder3DClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ConeClustered">
            <summary>
            Represents the ConeClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ConeStacked">
            <summary>
            Represents the ConeStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Cone100PercentStacked">
            <summary>
            Represents the Cone100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ConeBarClustered">
            <summary>
            Represents the ConeBarClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ConeBarStacked">
            <summary>
            Represents the ConeBarStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.ConeBar100PercentStacked">
            <summary>
            Represents the ConeBar100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Cone3DClustered">
            <summary>
            Represents the Cone3DClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PyramidClustered">
            <summary>
            Represents the PyramidClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PyramidStacked">
            <summary>
            Represents the PyramidStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pyramid100PercentStacked">
            <summary>
            Represents the Pyramid100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PyramidBarClustered">
            <summary>
            Represents the PyramidBarClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PyramidBarStacked">
            <summary>
            Represents the PyramidBarStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.PyramidBar100PercentStacked">
            <summary>
            Represents the PyramidBar100PercentStacked chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pyramid3DClustered">
            <summary>
            Represents the Pyramid3DClustered chart type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.CombinationChart">
            <summary>
            Represents the CombinationChart chart types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Funnel">
            <summary>
            Represents the Excel 2016 Funnel Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.WaterFall">
            <summary>
            Represents the Excel 2016 Water Fall Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.BoxAndWhisker">
            <summary>
            Represents the Excel 2016 Box and Whisker Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Histogram">
            <summary>
            Represents the Excel 2016 Histogram Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.Pareto">
            <summary>
            Represents the Excel 2016 Pareto Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.TreeMap">
            <summary>
            Represents the Excel 2016 Tree Map Chart
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelChartType.SunBurst">
            <summary>
            Represents the Excel 2016 Sun Burst Chart
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartPlotEmptyType">
            <summary>
            Chart plot empty type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPlotEmptyType.NotPlotted">
            <summary>
            No plot.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPlotEmptyType.Zero">
            <summary>
            Represents the Zero empty plot.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPlotEmptyType.Interpolated">
            <summary>
            Represents the Interpolated empty plot.
            </summary>
        </member>
        <member name="T:Spire.Xls.RectangleStyleType">
            <summary>
            Excel rectangle style.
            </summary>
        </member>
        <member name="F:Spire.Xls.RectangleStyleType.Regular">
            <summary>
            Represents the Regular rectangle style.
            </summary>
        </member>
        <member name="F:Spire.Xls.RectangleStyleType.Shadowed">
            <summary>
            Represents the Shadowed rectangle style.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartLinePatternType">
            <summary>
            Chart line patterns.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.Solid">
             <summary>
            Represents the Solid line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.Dash">
             <summary>
            Represents the Dash line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.Dot">
             <summary>
            Represents the Dot line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.DashDot">
             <summary>
            Represents the Dash-dot line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.DashDotDot">
             <summary>
            Represents the Dash-dot-dot line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.None">
             <summary>
            Represents the no line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.DarkGray">
             <summary>
            Represents the Dark Gray line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.MediumGray">
             <summary>
            Represents the Medium Gray line pattern setting for Chart.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLinePatternType.LightGray">
             <summary>
            Represents the Light Gray line pattern setting for Chart.
             </summary>
        </member>
        <member name="T:Spire.Xls.ChartLineWeightType">
            <summary>
            Chart line weight values type. 
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartLineWeightType.Hairline">
             <summary>
            Represents the Hairline weight for Chart line.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLineWeightType.Narrow">
             <summary>
            Represents the Narrow weight for Chart line.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLineWeightType.Medium">
             <summary>
            Represents the Medimun weight for Chart line.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartLineWeightType.Wide">
             <summary>
            Represents the Wide weight for Chart line.
             </summary>
        </member>
        <member name="T:Spire.Xls.AxisType">
            <summary>
            Primary axis types for Charts..
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisType.Category">
             <summary>
            Represents the Category (X) Axis.
             </summary>
        </member>
        <member name="F:Spire.Xls.AxisType.Value">
             <summary>
            Represents the Value (Y) Axis.
             </summary>
        </member>
        <member name="F:Spire.Xls.AxisType.Serie">
            <summary>
            Represents the Serie Axis.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartBackgroundMode">
            <summary>
            Chart background mode.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartBackgroundMode.Transparent">
             <summary>
            Represents the Transparent option.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartBackgroundMode.Opaque">
             <summary>
            Represents the Opaque option.
             </summary>
        </member>
        <member name="T:Spire.Xls.TickMarkType">
            <summary>
            Represents enum of chart tick mark values.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickMarkType.TickMarkNone">
            <summary>
            Represents tick mark none.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickMarkType.TickMarkInside">
            <summary>
            Represents tick mark inside.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickMarkType.TickMarkOutside">
            <summary>
            Represents tick mark outside.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickMarkType.TickMarkCross">
            <summary>
            Represents tick mark cross.
            </summary>
        </member>
        <member name="T:Spire.Xls.TickLabelPositionType">
            <summary>
            Represents enum of chart tick label position values.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickLabelPositionType.TickLabelPositionNone">
            <summary>
            Represents none label position.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickLabelPositionType.TickLabelPositionLow">
            <summary>
            Represents low label position.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickLabelPositionType.TickLabelPositionHigh">
            <summary>
            Represents high label position.
            </summary>
        </member>
        <member name="F:Spire.Xls.TickLabelPositionType.TickLabelPositionNextToAxis">
            <summary>
            Represents nex to axis label position.
            </summary>
        </member>
        <member name="T:Spire.Xls.AxisTextDirectionType">
            <summary>
            Represents axis text direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTextDirectionType.Context">
            <summary>
            Represents context text direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTextDirectionType.LeftToRight">
            <summary>
            Represents Left-To-Right text direction.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTextDirectionType.RightToLeft">
            <summary>
            Represents Right-To-Left text direction.
            </summary>
        </member>
        <member name="T:Spire.Xls.CategoryType">
            <summary>
            Represents category type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CategoryType.Category">
            <summary>
            Represents Category category type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CategoryType.Time">
            <summary>
            Represents time category type.
            </summary>
        </member>
        <member name="F:Spire.Xls.CategoryType.Automatic">
            <summary>
            Represents automatic category type.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartBaseUnitType">
            <summary>
            Represents chart base unit.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartBaseUnitType.Day">
            <summary>
            Represents Day base unit.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartBaseUnitType.Month">
            <summary>
            Represents Month base unit.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartBaseUnitType.Year">
            <summary>
            Represents Year base unit.
            </summary>
        </member>
        <member name="T:Spire.Xls.LegendPositionType">
            <summary>
            Legend placement for charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.Bottom">
             <summary>
            Represents the bottom option.
             </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.Corner">
             <summary>
            Represents the Corner option.
             </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.Top">
             <summary>
            Represents the Top option.
             </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.Right">
             <summary>
            Represents the Right option.
             </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.Left">
             <summary>
            Represents the Left option.
             </summary>
        </member>
        <member name="F:Spire.Xls.LegendPositionType.NotDocked">
             <summary>
            Represents the Not Docked option.
             </summary>
        </member>
        <member name="T:Spire.Xls.DataLabelPositionType">
            <summary>
            Represents Data label placement.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Automatic">
            <summary>
            Represents default position.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Outside">
            <summary>
            Represents the Outside data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Inside">
            <summary>
            Represents the Inside data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Center">
            <summary>
            Represents the Center data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.OutsideBase">
            <summary>
            Represents the OutsideBase data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Above">
            <summary>
            Represents the Above data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Below">
            <summary>
            Represents the Below data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Left">
            <summary>
            Represents the Left data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Right">
            <summary>
            Represents the Right data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.BestFit">
            <summary>
            Represents the BestFit data label placement option.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataLabelPositionType.Moved">
            <summary>
            Represents the Moved data label placement option.
            </summary>
        </member>
        <member name="T:Spire.Xls.Excel2007DataLabelPos">
            <summary>
            Represents the data label positioning.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.b">
            <summary>
            Specifies that data labels shall be displayed below the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.bestFit">
            <summary>
            Specifies that data labels shall be displayed in the best position.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.ctr">
            <summary>
            Specifies that data labels shall be displayed centered on the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.inBase">
            <summary>
            Specifies that data labels shall be displayed inside the base of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.inEnd">
            <summary>
            Specifies that data labels shall be displayed inside the end of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.l">
            <summary>
            Specifies that data labels shall be displayed to the left of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.outEnd">
            <summary>
            Specifies that data labels shall be displayed outside the end of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.r">
            <summary>
            Specifies that data labels shall be displayed to the right of the data marker.
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2007DataLabelPos.t">
            <summary>
            Specifies that data labels shall be displayed above the data marker.}
            </summary>
        </member>
        <member name="T:Spire.Xls.BaseFormatType">
            <summary>
            Base format options.
            </summary>
        </member>
        <member name="F:Spire.Xls.BaseFormatType.Rectangle">
            <summary>
            Represents Rectangle base format.
            </summary>
        </member>
        <member name="F:Spire.Xls.BaseFormatType.Circle">
            <summary>
            Represents Circle base format.
            </summary>
        </member>
        <member name="T:Spire.Xls.TopFormatType">
            <summary>
            Top format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TopFormatType.Straight">
            <summary>
            Represents Straight top format.
            </summary>
        </member>
        <member name="F:Spire.Xls.TopFormatType.Sharp">
            <summary>
            Represents Sharp top format.
            </summary>
        </member>
        <member name="F:Spire.Xls.TopFormatType.Trunc">
            <summary>
            Represents Trunc top format.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartMarkerType">
            <summary>
            Chart marker types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.None">
             <summary>
            Represents the None option for the marker type.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Square">
             <summary>
            Represents the square style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Diamond">
             <summary>
            Represents the diamond style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Triangle">
             <summary>
            Represents the Triangle style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.X">
             <summary>
            Represents the X style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Star">
             <summary>
            Represents the Star style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.DowJones">
             <summary>
            Represents the Dow Jones style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.StandardDeviation">
             <summary>
            Represents the Standard Deviation style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Circle">
             <summary>
            Represents the Circle style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.PlusSign">
             <summary>
            Represents the Plus style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Auto">
             <summary>
            Represents the Auto style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartMarkerType.Picture">
             <summary>
            Represents the Picture style in the custom marker option for Chart lines.
             </summary>
        </member>
        <member name="T:Spire.Xls.BubbleSizeType">
            <summary>
            Bubble size.
            </summary>
        </member>
        <member name="F:Spire.Xls.BubbleSizeType.Area">
             <summary>
            Area buble size.
             </summary>
        </member>
        <member name="F:Spire.Xls.BubbleSizeType.Width">
             <summary>
            Width buble size.
             </summary>
        </member>
        <member name="T:Spire.Xls.SplitType">
            <summary>
            Split type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SplitType.Position">
            <summary>
            Represents the Position split type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SplitType.Value">
            <summary>
            Represents the Value split type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SplitType.Percent">
            <summary>
            Represents the Percent split type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SplitType.Custom">
            <summary>
            Represents the Custom split type.
            </summary>
        </member>
        <member name="T:Spire.Xls.ErrorBarIncludeType">
            <summary>
            Represents error bar include values.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarIncludeType.Both">
            <summary>
            Represents both error bar include.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarIncludeType.Plus">
            <summary>
            Represents plus error bar include.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarIncludeType.Minus">
            <summary>
            Represents minus error bar include.
            </summary>
        </member>
        <member name="T:Spire.Xls.ErrorBarType">
            <summary>
            Error-bar type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarType.Percentage">
            <summary>
            Represents the Percentage error-bar source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarType.Fixed">
            <summary>
            Represents the FixedValue error-bar source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarType.StandardDeviation">
            <summary>
            Represents the StandardDeviation error-bar source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarType.Custom">
            <summary>
            Represents the Custom error-bar source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ErrorBarType.StandardError">
            <summary>
            Represents the StandardError error-bar source type.
            </summary>
        </member>
        <member name="T:Spire.Xls.TrendLineType">
            <summary>
            Represents trend line values.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Exponential">
            <summary>
            Represents Exponential trend line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Linear">
            <summary>
            Represents Linear trend line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Logarithmic">
            <summary>
            Represents Logarithmic trend line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Moving_Average">
            <summary>
            Represents Moving average trend line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Polynomial">
            <summary>
            Represents Polynomial trend line type.
            </summary>
        </member>
        <member name="F:Spire.Xls.TrendLineType.Power">
            <summary>
            Represents Power trend line type.
            </summary>
        </member>
        <member name="T:Spire.Xls.AxisLineIdentifierType">
            <summary>
            Axis line indentifier type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisLineIdentifierType.AxisLineItself">
            <summary>
            The axis line itself.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisLineIdentifierType.MajorGridLine">
            <summary>
            Major grid line along the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisLineIdentifierType.MinorGridLine">
            <summary>
            Minor grid line along the axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisLineIdentifierType.WallsOrFloor">
            <summary>
            Walls or floor -- walls if parent axis is type 0 or 2;
            floor if parent axis is type 1.
            </summary>
        </member>
        <member name="T:Spire.Xls.LegendSpacingType">
            <summary>
            Legend spacing for charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.LegendSpacingType.Close">
            <summary>
            Represents the Close .
            </summary>
        </member>
        <member name="F:Spire.Xls.LegendSpacingType.Medium">
            <summary>
            Represents the Medium.
            </summary>
        </member>
        <member name="F:Spire.Xls.LegendSpacingType.Open">
            <summary>
            Represents the Open.
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartDisplayUnitType">
            <summary>
            Represents excel chart uint to display.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.None">
            <summary>
            Represents None display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.Hundreds">
            <summary>
            Represents Hundreds display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.Thousands">
            <summary>
            Represents Thousands display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.TenThousands">
            <summary>
            Represents TenThousands display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.HundredThousands">
            <summary>
            Represents HundredThousands display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.Millions">
            <summary>
            Represents Millions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.TenMillions">
            <summary>
            Represents TenMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.HundredMillions">
            <summary>
            Represents HundredMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.ThousandMillions">
            <summary>
            Represents ThousandMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.MillionMillions">
            <summary>
            Represents MillionMillions display Unit
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartDisplayUnitType.Custom">
            <summary>
            Represents Custom display Unit
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartParagraphType">
            <summary>
            MS Chart Font Type
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartParagraphType.None">
            <summary>
            No Font Tag
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartParagraphType.Default">
            <summary>
            Default Property tag
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartParagraphType.RichText">
            <summary>
            Rich text tag
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartPieType">
            <summary>
            Chart pile type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPieType.Normal">
            <summary>
            Represents the Normal pie type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPieType.Pie">
            <summary>
            Represents the Pie pie type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartPieType.Bar">
            <summary>
            Represents the Bar pie type.
            </summary>
        </member>
        <member name="T:Spire.Xls.DropLineStyleType">
            <summary>
            Drop line style type.
            </summary>
        </member>
        <member name="F:Spire.Xls.DropLineStyleType.Drop">
            <summary>
            Represents the Drop line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.DropLineStyleType.HiLow">
            <summary>
            Represents the HiLow drop line style.
            </summary>
        </member>
        <member name="F:Spire.Xls.DropLineStyleType.Series">
            <summary>
            Represents the Series drop line style.
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXBorderJoinType">
            <summary>
            shape border join type 
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXBorderJoinType.Round">
            <summary>
            Rounded edge
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXBorderJoinType.Bevel">
            <summary>
            Beveled edge
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXBorderJoinType.Mitter">
            <summary>
            Metter join 
            </summary>
        </member>
        <member name="T:Spire.Xls.CompoundLineType">
            <summary>
            Represents style of drawing lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.CompoundLineType.Single">
            <summary>
            Single line (of width lineWidth)
            </summary>
        </member>
        <member name="F:Spire.Xls.CompoundLineType.ThickBetweenThin">
            <summary>
            Three lines, thin, thick, thin
            </summary>
        </member>
        <member name="F:Spire.Xls.CompoundLineType.ThinThick">
            <summary>
            Double lines, one thin, one thick
            </summary>
        </member>
        <member name="F:Spire.Xls.CompoundLineType.ThickThin">
            <summary>
            Double lines, one thick, one thin
            </summary>
        </member>
        <member name="F:Spire.Xls.CompoundLineType.ThinThin">
            <summary>
            Double lines of equal width
            </summary>
        </member>
        <member name="T:Spire.Xls.SparklineType">
            <summary>
            Defined types of Sparkline chart types.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineType.Stacked">
            <summary>
            Sparkline type is WinLoss.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineType.Column">
            <summary>
            Sparkline type is Column.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineType.Line">
            <summary>
            Sparkline type is Line.
            </summary>
        </member>
        <member name="T:Spire.Xls.SpartlineVerticalAxisType">
            <summary>
            Defines the Sparkline vertical axis type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SpartlineVerticalAxisType.Automatic">
            <summary>
            Automatic value for the vertical axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.SpartlineVerticalAxisType.Same">
            <summary>
            Same value for the vertical axis.
            </summary>
        </member>
        <member name="F:Spire.Xls.SpartlineVerticalAxisType.Custom">
            <summary>
            Custom value for the vertical axis.
            </summary>
        </member>
        <member name="T:Spire.Xls.SparklineEmptyCells">
            <summary>
            Defines the Display of the Empty Cells within the Sparkline Range.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineEmptyCells.Gaps">
            <summary>
            Display as Gaps.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineEmptyCells.Zero">
            <summary>
            Diaplay as Zero.
            </summary>
        </member>
        <member name="F:Spire.Xls.SparklineEmptyCells.Line">
            <summary>
            Display as Continued line.
            </summary>
        </member>
        <member name="T:Spire.Xls.AxisTypes">
            <summary>
            Axis types.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTypes.None">
            <summary>
            Represents the None axis type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTypes.Row">
            <summary>
            Represents the Row axis type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTypes.Column">
            <summary>
            Represents the Column axis type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTypes.Page">
            <summary>
            Represents the Page axis type.
            </summary>
        </member>
        <member name="F:Spire.Xls.AxisTypes.Data">
            <summary>
            Represents the Data axis type.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotGroupByTypes">
            <summary>
            The groupby types of pivot field.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Value">
            <summary>
            Value groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Seconds">
            <summary>
            Seconds groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Minutes">
            <summary>
            Minutes groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Hours">
            <summary>
            Hours groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Days">
            <summary>
            Days groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Months">
            <summary>
            Months groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Quarters">
            <summary>
            Quarters groupby type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotGroupByTypes.Years">
            <summary>
            Years groupby type.
            </summary>
        </member>
        <member name="T:Spire.Xls.PagesOrderType">
            <summary>
            Page order type
            </summary>
        </member>
        <member name="F:Spire.Xls.PagesOrderType.DownThenOver">
            <summary>
            Represents the DownThenOver pages order.
            </summary>
        </member>
        <member name="F:Spire.Xls.PagesOrderType.OverThenDown">
            <summary>
            Represents the OverThenDown pages order.
            </summary>
        </member>
        <member name="T:Spire.Xls.DataSourceType">
            <summary>
            Data source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataSourceType.Worksheet">
            <summary>
            Represents the Worksheet data source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataSourceType.ExternalData">
            <summary>
            Represents the ExternalData data source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataSourceType.Consolidation">
            <summary>
            Represents the Consolidation data source type.
            </summary>
        </member>
        <member name="F:Spire.Xls.DataSourceType.ScenarioPivotTable">
            <summary>
            Represents the ScenarioPivotTable data source type.
            </summary>
        </member>
        <member name="T:Spire.Xls.SubtotalTypes">
            <summary>
            Represents the  Subtotal types.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.None">
            <summary>
            Represents the None type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Default">
            <summary>
            Represents the Default type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Sum">
            <summary>
            Represents the Sum type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Counta">
            <summary>
            Represents the Counta type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Average">
            <summary>
            Represents the Average type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Max">
            <summary>
            Represents the Max type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Min">
            <summary>
            Represents the Min type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Product">
            <summary>
            Represents the Product type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Count">
            <summary>
            Represents the Count type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Stdev">
            <summary>
            Represents the Stdev type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Stdevp">
            <summary>
            Represents the Stdevp type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Var">
            <summary>
            Represents the Var type.
            </summary>
        </member>
        <member name="F:Spire.Xls.SubtotalTypes.Varp">
            <summary>
            Represents the Varp type.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotAutoFomatTypes">
            <summary>
            Represents PivotTable auto format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.None">
            <summary>
            Represents None format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Classic">
            <summary>
            Represents Classic auto format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report1">
            <summary>
            Represents Report1 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report2">
            <summary>
            Represents Report2 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report3">
            <summary>
            Represents Report3 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report4">
            <summary>
            Represents Report4 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report5">
            <summary>
            Represents Report5 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report6">
            <summary>
            Represents Report6 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report7">
            <summary>
            Represents Report7 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report8">
            <summary>
            Represents Report8 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report9">
            <summary>
            Represents Report9 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Report10">
            <summary>
            Represents Report10 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table1">
            <summary>
            Represents Table1 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table2">
            <summary>
            Represents Table2 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table3">
            <summary>
            Represents Table3 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table4">
            <summary>
            Represents Table4 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table5">
            <summary>
            Represents Table5 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table6">
            <summary>
            Represents Table6 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table7">
            <summary>
            Represents Table7 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table8">
            <summary>
            Represents Table8 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table9">
            <summary>
            Represents Table9 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotAutoFomatTypes.Table10">
            <summary>
            Represents Table10 format type.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundType.None">
            <summary>
            Represents none background.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundType.Color">
            <summary>
            Represents color backgorund.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundType.Image">
            <summary>
            Represents image background.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImageType.Position">
            <summary>
            Represents position typeof image background.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImageType.Area">
            <summary>
            Represents area typeof image background.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImageType.Tile">
            <summary>
            Represents tile type of image background.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.TopLeft">
            <summary>
            Represents TopLeft.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.TopCenter">
            <summary>
            Represents TopCenter.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.TopRight">
            <summary>
            Represents TopRight.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.CenterLeft">
            <summary>
            Represents CenterLeft.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.CenterCenter">
            <summary>
            Represents CenterCenter.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.CenterRight">
            <summary>
            Represents CenterRight.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.BottomLeft">
            <summary>
            Represents BottomLeft.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.BottomCenter">
            <summary>
            Represents BottomCenter.
            </summary>
        </member>
        <member name="F:Spire.Xls.OdsPageBackgroundImagePositionType.BottomRight">
            <summary>
            Represents BottomRight.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotBuiltInStyles">
            <summary>
            Excel 2007 pivot table built in styles.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium28">
            <summary>
            Represents PivotStyleMedium28 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium27">
            <summary>
            Represents PivotStyleMedium27 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium26">
            <summary>
            Represents PivotStyleMedium26 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium25">
            <summary>
            Represents PivotStyleMedium25 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium24">
            <summary>
            Represents PivotStyleMedium24 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium23">
            <summary>
            Represents PivotStyleMedium23 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium22">
            <summary>
            Represents PivotStyleMedium22 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium21">
            <summary>
            Represents PivotStyleMedium21 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium20">
            <summary>
            Represents PivotStyleMedium20 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium19">
            <summary>
            Represents PivotStyleMedium19 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium18">
            <summary>
            Represents PivotStyleMedium18 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium17">
            <summary>
            Represents PivotStyleMedium17 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium16">
            <summary>
            Represents PivotStyleMedium16 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium15">
            <summary>
            Represents PivotStyleMedium15 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium14">
            <summary>
            Represents PivotStyleMedium14 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium13">
            <summary>
            Represents PivotStyleMedium13 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium12">
            <summary>
            Represents PivotStyleMedium12 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium11">
            <summary>
            Represents PivotStyleMedium11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium10">
            <summary>
            Represents PivotStyleMedium10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium9">
            <summary>
            Represents PivotStyleMedium9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium8">
            <summary>
            Represents PivotStyleMedium8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium7">
            <summary>
            Represents PivotStyleMedium7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium6">
            <summary>
            Represents PivotStyleMedium6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium5">
            <summary>
            Represents PivotStyleMedium5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium4">
            <summary>
            Represents PivotStyleMedium4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium3">
            <summary>
            Represents PivotStyleMedium3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium2">
            <summary>
            Represents PivotStyleMedium2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleMedium1">
            <summary>
            Represents PivotStyleMedium1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight28">
            <summary>
            Represents PivotStyleLight28 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight27">
            <summary>
            Represents PivotStyleLight27 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight26">
            <summary>
            Represents PivotStyleLight26 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight25">
            <summary>
            Represents PivotStyleLight25 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight24">
            <summary>
            Represents PivotStyleLight24 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight23">
            <summary>
            Represents PivotStyleLight23 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight22">
            <summary>
            Represents PivotStyleLight22 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight21">
            <summary>
            Represents PivotStyleLight21 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight20">
            <summary>
            Represents PivotStyleLight20 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight19">
            <summary>
            Represents PivotStyleLight19 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight18">
            <summary>
            Represents PivotStyleLight18 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight17">
            <summary>
            Represents PivotStyleLight17 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight16">
            <summary>
            Represents PivotStyleLight16 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight15">
            <summary>
            Represents PivotStyleLight15 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight14">
            <summary>
            Represents PivotStyleLight14 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight13">
            <summary>
            Represents PivotStyleLight13 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight12">
            <summary>
            Represents PivotStyleLight12 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight11">
            <summary>
            Represents PivotStyleLight11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight10">
            <summary>
            Represents PivotStyleLight10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight9">
            <summary>
            Represents PivotStyleLight9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight8">
            <summary>
            Represents PivotStyleLight8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight7">
            <summary>
            Represents PivotStyleLight7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight6">
            <summary>
            Represents PivotStyleLight6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight5">
            <summary>
            Represents PivotStyleLight5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight4">
            <summary>
            Represents PivotStyleLight4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight3">
            <summary>
            Represents PivotStyleLight3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight2">
            <summary>
            Represents PivotStyleLight2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleLight1">
            <summary>
            Represents PivotStyleLight1 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark28">
            <summary>
            Represents PivotStyleDark28 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark27">
            <summary>
            Represents PivotStyleDark27 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark26">
            <summary>
            Represents PivotStyleDark26 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark25">
            <summary>
            Represents PivotStyleDark25 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark24">
            <summary>
            Represents PivotStyleDark24 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark23">
            <summary>
            Represents PivotStyleDark23 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark22">
            <summary>
            Represents PivotStyleDark22 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark21">
            <summary>
            Represents PivotStyleDark21 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark20">
            <summary>
            Represents PivotStyleDark20 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark19">
            <summary>
            Represents PivotStyleDark19 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark18">
            <summary>
            Represents PivotStyleDark18 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark17">
            <summary>
            Represents PivotStyleDark17 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark16">
            <summary>
            Represents PivotStyleDark16 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark15">
            <summary>
            Represents PivotStyleDark15 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark14">
            <summary>
            Represents PivotStyleDark14 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark13">
            <summary>
            Represents PivotStyleDark13 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark12">
            <summary>
            Represents PivotStyleDark12 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark11">
            <summary>
            Represents PivotStyleDark11 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark10">
            <summary>
            Represents PivotStyleDark10 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark9">
            <summary>
            Represents PivotStyleDark9 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark8">
            <summary>
            Represents PivotStyleDark8 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark7">
            <summary>
            Represents PivotStyleDark7 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark6">
            <summary>
            Represents PivotStyleDark6 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark5">
            <summary>
            Represents PivotStyleDark5 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark4">
            <summary>
            Represents PivotStyleDark4 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark3">
            <summary>
            Represents PivotStyleDark3 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark2">
            <summary>
            Represents PivotStyleDark2 style.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotBuiltInStyles.PivotStyleDark1">
            <summary>
            Represents PivotStyleDark1 style.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotTableLayoutType">
            <summary>
            Specifies the pivot table layout
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotTableLayoutType.Compact">
            <summary>
            Compact Row
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotTableLayoutType.Outline">
            <summary>
            Outline Row
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotTableLayoutType.Tabular">
            <summary>
            Tabular Row
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotPageAreaFieldsOrderType">
            <summary>
            Repersents the Page field area order when there are
            multiple page fields in the page area
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotPageAreaFieldsOrderType.DownThenOver">
            <summary>
            The page fields are laid, Down then over order
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotPageAreaFieldsOrderType.OverThenDown">
            <summary>
            The page fields are laid, over then down order
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Average">
            <summary>
            Represents the Average 
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Blank">
            <summary>
            Represent the Blank line in the pivot Table
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Count">
            <summary>
            Represent the count aggregate functions
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.CountA">
            <summary>
            Represent the count number aggregate functions
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Data">
            <summary>
            Represent the data
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Default">
            <summary>
            Represent the default type of Pivot Table.
            (total aggregate is default)
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.GrandTotal">
            <summary>
            Represent the grand total
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Max">
            <summary>
            Represent the maximum aggregate function
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Min">
            <summary>
            Represent the minimum aggregate function
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Product">
            <summary>
            Represent the product functions
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.StdDev">
            <summary>
            Represents the "standard deviation" aggregate function.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.StdDevP">
            <summary>
            Represents the "standard deviation population" aggregate function.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Sum">
            <summary>
            Represents the "sum" aggregate value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.Var">
            <summary>
            Represents the "variance" aggregate value.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotItemType.VarP">
            <summary>
            Represents the "variance population" aggregate value.
            </summary>
        </member>
        <member name="T:Spire.Xls.XLSXPivotItemType">
            <summary>
            This simple type defines the Open Xml Pivot type for a pivotItem.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.avg">
            <summary>
            Represents the Average 
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.blank">
            <summary>
            Represent the Blank line in the pivot Table
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.count">
            <summary>
            Represent the count aggregate functions
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.countA">
            <summary>
            Represent the count number aggregate functions
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.data">
            <summary>
            Represent the data
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.defaults">
            <summary>
            Represent the default type of Pivot Table.
            (total aggregate is default)
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.grand">
            <summary>
            Represent the grand total
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.max">
            <summary>
            Represent the maximum aggregate function
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.min">
            <summary>
            Represent the minimum aggregate function
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.product">
            <summary>
            Represent the product functions
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.stdDev">
            <summary>
            Represents the "standard deviation" aggregate function.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.stdDevP">
            <summary>
            Represents the "standard deviation population" aggregate function.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.sum">
            <summary>
            Represents the "sum" aggregate value.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.var">
            <summary>
            Represents the "variance" aggregate value.
            </summary>
        </member>
        <member name="F:Spire.Xls.XLSXPivotItemType.varP">
            <summary>
            Represents the "variance population" aggregate value.
            </summary>
        </member>
        <member name="T:Spire.Xls.ConditionalFormatScope">
            <summary>
            Reperesents the scope of conditional formatting applied in the PivotTable
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatScope.DataFields">
            <summary>
            Indicates that conditional formatting is applied to the selected data fields.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatScope.Intersections">
            <summary>
            Indicates that conditional formatting is applied to the
            selected PivotTable field intersections.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalFormatScope.Selections">
            <summary>
            Indicates that conditional formatting is applied to the
            selected cells.
            </summary>
        </member>
        <member name="T:Spire.Xls.ConditionalTopNType">
            <summary>
            This simple type defines the values for the Top N conditional formatting evaluation for the PivotTable
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalTopNType.All">
            <summary>
            Indicates that Top N conditional formatting is evaluated across the entire scope range.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalTopNType.Column">
            <summary>
            Indicates that Top N conditional formatting is evaluated for each column.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalTopNType.None">
            <summary>
            Indicates that Top N conditional formatting is not  evaluated
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionalTopNType.Row">
            <summary>
            Indicates that Top N conditional formatting is not evaluated
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Number">
            <summary>
            Indicates whether field contains number.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Integer">
            <summary>
            Indicates whether field contains integer numbers.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.String">
            <summary>
            Indicates whether field contains strings.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Blank">
            <summary>
            Indicates whether field contains blank values.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Date">
            <summary>
            Indicates whether field contains dates.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Boolean">
            <summary>
            Indicates whether field contains booleans.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.Float">
            <summary>
            Indicates whether field contains float numbers.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotDataType.LongText">
            <summary>
            Indicates whether filed contains long Text.
            </summary>
        </member>
        <member name="T:Spire.Xls.PivotTableElement">
               // <summary>
               // Represents PivotStyleMedium28 style.
               // </summary>
               PivotStyleMedium28,
               // <summary>
               // Represents PivotStyleMedium27 style.
               // </summary>
               PivotStyleMedium27,
               // <summary>
               // Represents PivotStyleMedium26 style.
               // </summary>
               PivotStyleMedium26,
               // <summary>
               // Represents PivotStyleMedium25 style.
               // </summary>
               PivotStyleMedium25,
               // <summary>
               // Represents PivotStyleMedium24 style.
               // </summary>
               PivotStyleMedium24,
               // <summary>
               // Represents PivotStyleMedium23 style.
               // </summary>
               PivotStyleMedium23,
               // <summary>
               // Represents PivotStyleMedium22 style.
               // </summary>
               PivotStyleMedium22,
               // <summary>
               // Represents PivotStyleMedium21 style.
               // </summary>
               PivotStyleMedium21,
               // <summary>
               // Represents PivotStyleMedium20 style.
               // </summary>
               PivotStyleMedium20,
               // <summary>
               // Represents PivotStyleMedium19 style.
               // </summary>
               PivotStyleMedium19,
               // <summary>
               // Represents PivotStyleMedium18 style.
               // </summary>
               PivotStyleMedium18,
               // <summary>
               // Represents PivotStyleMedium17 style.
               // </summary>
               PivotStyleMedium17,
               // <summary>
               // Represents PivotStyleMedium16 style.
               // </summary>
               PivotStyleMedium16,
               // <summary>
               // Represents PivotStyleMedium15 style.
               // </summary>
               PivotStyleMedium15,
               // <summary>
               // Represents PivotStyleMedium14 style.
               // </summary>
               PivotStyleMedium14,
               // <summary>
               // Represents PivotStyleMedium13 style.
               // </summary>
               PivotStyleMedium13,
               // <summary>
               // Represents PivotStyleMedium12 style.
               // </summary>
               PivotStyleMedium12,
               // <summary>
               // Represents PivotStyleMedium11 style.
               // </summary>
               PivotStyleMedium11,
               // <summary>
               // Represents PivotStyleMedium10 style.
               // </summary>
               PivotStyleMedium10,
               // <summary>
               // Represents PivotStyleMedium9 style.
               // </summary>
               PivotStyleMedium9,
               // <summary>
               // Represents PivotStyleMedium8 style.
               // </summary>
               PivotStyleMedium8,
               // <summary>
               // Represents PivotStyleMedium7 style.
               // </summary>
               PivotStyleMedium7,
               // <summary>
               // Represents PivotStyleMedium6 style.
               // </summary>
               PivotStyleMedium6,
               // <summary>
               // Represents PivotStyleMedium5 style.
               // </summary>
               PivotStyleMedium5,
               // <summary>
               // Represents PivotStyleMedium4 style.
               // </summary>
               PivotStyleMedium4,
               // <summary>
               // Represents PivotStyleMedium3 style.
               // </summary>
               PivotStyleMedium3,
               // <summary>
               // Represents PivotStyleMedium2 style.
               // </summary>
               PivotStyleMedium2,
               // <summary>
               // Represents PivotStyleMedium1 style.
               // </summary>
               PivotStyleMedium1,
               // <summary>
               // Represents PivotStyleLight28 style.
               // </summary>
               PivotStyleLight28,
               // <summary>
               // Represents PivotStyleLight27 style.
               // </summary>
               PivotStyleLight27,
               // <summary>
               // Represents PivotStyleLight26 style.
               // </summary>
               PivotStyleLight26,
               // <summary>
               // Represents PivotStyleLight25 style.
               // </summary>
               PivotStyleLight25,
               // <summary>
               // Represents PivotStyleLight24 style.
               // </summary>
               PivotStyleLight24,
               // <summary>
               // Represents PivotStyleLight23 style.
               // </summary>
               PivotStyleLight23,
               // <summary>
               // Represents PivotStyleLight22 style.
               // </summary>
               PivotStyleLight22,
               // <summary>
               // Represents PivotStyleLight21 style.
               // </summary>
               PivotStyleLight21,
               // <summary>
               // Represents PivotStyleLight20 style.
               // </summary>
               PivotStyleLight20,
               // <summary>
               // Represents PivotStyleLight19 style.
               // </summary>
               PivotStyleLight19,
               // <summary>
               // Represents PivotStyleLight18 style.
               // </summary>
               PivotStyleLight18,
               // <summary>
               // Represents PivotStyleLight17 style.
               // </summary>
               PivotStyleLight17,
               // <summary>
               // Represents PivotStyleLight16 style.
               // </summary>
               PivotStyleLight16,
               // <summary>
               // Represents PivotStyleLight15 style.
               // </summary>
               PivotStyleLight15,
               // <summary>
               // Represents PivotStyleLight14 style.
               // </summary>
               PivotStyleLight14,
               // <summary>
               // Represents PivotStyleLight13 style.
               // </summary>
               PivotStyleLight13,
               // <summary>
               // Represents PivotStyleLight12 style.
               // </summary>
               PivotStyleLight12,
               // <summary>
               // Represents PivotStyleLight11 style.
               // </summary>
               PivotStyleLight11,
               // <summary>
               // Represents PivotStyleLight10 style.
               // </summary>
               PivotStyleLight10,
               // <summary>
               // Represents PivotStyleLight9 style.
               // </summary>
               PivotStyleLight9,
               // <summary>
               // Represents PivotStyleLight8 style.
               // </summary>
               PivotStyleLight8,
               // <summary>
               // Represents PivotStyleLight7 style.
               // </summary>
               PivotStyleLight7,
               // <summary>
               // Represents PivotStyleLight6 style.
               // </summary>
               PivotStyleLight6,
               // <summary>
               // Represents PivotStyleLight5 style.
               // </summary>
               PivotStyleLight5,
               // <summary>
               // Represents PivotStyleLight4 style.
               // </summary>
               PivotStyleLight4,
               // <summary>
               // Represents PivotStyleLight3 style.
               // </summary>
               PivotStyleLight3,
               // <summary>
               // Represents PivotStyleLight2 style.
               // </summary>
               PivotStyleLight2,
               // <summary>
               // Represents PivotStyleLight1 style.
               // </summary>
               PivotStyleLight1,
               // <summary>
               // Represents PivotStyleDark28 style.
               // </summary>
               PivotStyleDark28,
               // <summary>
               // Represents PivotStyleDark27 style.
               // </summary>
               PivotStyleDark27,
               // <summary>
               // Represents PivotStyleDark26 style.
               // </summary>
               PivotStyleDark26,
               // <summary>
               // Represents PivotStyleDark25 style.
               // </summary>
               PivotStyleDark25,
               // <summary>
               // Represents PivotStyleDark24 style.
               // </summary>
               PivotStyleDark24,
               // <summary>
               // Represents PivotStyleDark23 style.
               // </summary>
               PivotStyleDark23,
               // <summary>
               // Represents PivotStyleDark22 style.
               // </summary>
               PivotStyleDark22,
               // <summary>
               // Represents PivotStyleDark21 style.
               // </summary>
               PivotStyleDark21,
               // <summary>
               // Represents PivotStyleDark20 style.
               // </summary>
               PivotStyleDark20,
               // <summary>
               // Represents PivotStyleDark19 style.
               // </summary>
               PivotStyleDark19,
               // <summary>
               // Represents PivotStyleDark18 style.
               // </summary>
               PivotStyleDark18,
               // <summary>
               // Represents PivotStyleDark17 style.
               // </summary>
               PivotStyleDark17,
               // <summary>
               // Represents PivotStyleDark16 style.
               // </summary>
               PivotStyleDark16,
               // <summary>
               // Represents PivotStyleDark15 style.
               // </summary>
               PivotStyleDark15,
               // <summary>
               // Represents PivotStyleDark14 style.
               // </summary>
               PivotStyleDark14,
               // <summary>
               // Represents PivotStyleDark13 style.
               // </summary>
               PivotStyleDark13,
               // <summary>
               // Represents PivotStyleDark12 style.
               // </summary>
               PivotStyleDark12,
               // <summary>
               // Represents PivotStyleDark11 style.
               // </summary>
               PivotStyleDark11,
               // <summary>
               // Represents PivotStyleDark10 style.
               // </summary>
               PivotStyleDark10,
               // <summary>
               // Represents PivotStyleDark9 style.
               // </summary>
               PivotStyleDark9,
               // <summary>
               // Represents PivotStyleDark8 style.
               // </summary>
               PivotStyleDark8,
               // <summary>
               // Represents PivotStyleDark7 style.
               // </summary>
               PivotStyleDark7,
               // <summary>
               // Represents PivotStyleDark6 style.
               // </summary>
               PivotStyleDark6,
               // <summary>
               // Represents PivotStyleDark5 style.
               // </summary>
               PivotStyleDark5,
               // <summary>
               // Represents PivotStyleDark4 style.
               // </summary>
               PivotStyleDark4,
               // <summary>
               // Represents PivotStyleDark3 style.
               // </summary>
               PivotStyleDark3,
               // <summary>
               // Represents PivotStyleDark2 style.
               // </summary>
               PivotStyleDark2,
               // <summary>
               // Represents PivotStyleDark1 style.
               // </summary>
               PivotStyleDark1,
        </member>
        <member name="T:Spire.Xls.PivotFieldSortType">
            <summary>
             sort orders that can be applied to fields in a PivotTable.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotFieldSortType.Ascending">
            <summary>
            Indicates the field is sorted in ascending order.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotFieldSortType.Descending">
            <summary>
            Indicates the field is sorted in descending order.
            </summary>
        </member>
        <member name="F:Spire.Xls.PivotFieldSortType.Manual">
            <summary>
            Indicates the field is sorted manually.
            </summary>
        </member>
        <member name="T:Spire.Xls.ThemeColorType">
            <summary>
            theme color type
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Dk1">
            <summary>
            Background Color1
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Lt1">
            <summary>
            Text Color1
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Dk2">
            <summary>
            Background Color2
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Lt2">
            <summary>
            Text Color2
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent1">
            <summary>
            Accent Color1
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent2">
            <summary>
            Accent Color2
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent3">
            <summary>
            Accent Color3
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent4">
            <summary>
            Accent Color4
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent5">
            <summary>
            Accent Color5
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Accent6">
            <summary>
            Accent Color6
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.Hlink">
            <summary>
            Hyperlink Color
            </summary>
        </member>
        <member name="F:Spire.Xls.ThemeColorType.FolHlink">
            <summary>
            FollowedHyperlink Color
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartExSidePosition">
            <summary>
            It specifies an enumeration of side positions
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExSidePosition.l">
            <summary>
            The title or legend is on the left side
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExSidePosition.t">
            <summary>
            The title or legend is on the top
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExSidePosition.r">
            <summary>
            The title or legend is on the left side
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExSidePosition.b">
            <summary>
            The title or legend is on the bottom
            </summary>
        </member>
        <member name="T:Spire.Xls.ChartExPositionAlignment">
             <summary>
            It represent side position alignment of a chart element
             </summary>
        </member>
        <member name="F:Spire.Xls.ChartExPositionAlignment.min">
            <summary>
            The chart element is positioned at the top of the side
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExPositionAlignment.max">
            <summary>
            The chart element is positioned at the bottom of the side
            </summary>
        </member>
        <member name="F:Spire.Xls.ChartExPositionAlignment.ctr">
            <summary>
            The chart element is positioned at the center of the side
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelQuartileCalculation">
             <summary>
            It represents Quartile calculation used for Box and Whisker Chart series
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelQuartileCalculation.InclusiveMedian">
            <summary>
            It includes the Median when splitting the dataset into Quartiles.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelQuartileCalculation.ExclusiveMedian">
            <summary>
            It excludes the Median when splitting the dataset into Quartiles.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelTreeMapLabelOption">
             <summary>
            It represents the Label position in Tree Map chart
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTreeMapLabelOption.None">
             <summary>
            No Parent labels are shown
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTreeMapLabelOption.Banner">
             <summary>
            The Parent label layout is a Banner above the category        
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelTreeMapLabelOption.Overlapping">
            <summary>
            The Parent label is laid out within the category
            </summary>        
        </member>
        <!-- Badly formed XML comment ignored for member "T:Spire.Xls.Excel2016Charttype" -->
        <member name="F:Spire.Xls.Excel2016Charttype.funnel">
            <summary>
            Indicates the Funnel Chart type
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.boxWhisker">
            <summary>
            Indicates the Box and Whisker chart type
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.clusteredColumn">
            <summary>
            Used in Histogram and Pareto charts
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.paretoLine">
            <summary>
            Used in Histogram and Pareto charts
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.sunburst">
            <summary>
            Indicates the Sun burst chart type
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.treemap">
            <summary>
            Indicates the Tree Map chart type
            </summary>
        </member>
        <member name="F:Spire.Xls.Excel2016Charttype.waterfall">
            <summary>
            Indicates the Water fall chart type
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect6">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect7">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect9">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect10">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect11">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect12">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect13">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect14">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect15">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect16">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect17">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect18">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect19">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect20">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect21">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect22">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect23">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect24">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect25">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect26">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect27">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect28">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect29">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.PresetTextEffect.TextEffect30">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelSheetType">
            <summary>
            Sheet types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSheetType.ChartSheet">
            <summary>
            Charts.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSheetType.DialogSheet">
             <summary>
            Dialogs.
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSheetType.Excel4IntlMacroSheet">
             <summary>
            Excel 4.0 International Marcos sheet.
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSheetType.Excel4MacroSheet">
             <summary>
            Excel 4.0 Marcos sheet.
             </summary>
        </member>
        <member name="F:Spire.Xls.ExcelSheetType.NormalWorksheet">
             <summary>
            Worksheets.
             </summary>
        </member>
        <member name="T:Spire.Xls.FontUnderlineType">
            <summary>
            Font underline types.
            </summary>
        </member>
        <member name="F:Spire.Xls.FontUnderlineType.None">
             <summary>
            Represents no underline.
             </summary>
        </member>
        <member name="F:Spire.Xls.FontUnderlineType.Single">
             <summary>
            Represents single underline.
             </summary>
        </member>
        <member name="F:Spire.Xls.FontUnderlineType.Double">
             <summary>
            Represents double underline.
             </summary>
        </member>
        <member name="F:Spire.Xls.FontUnderlineType.SingleAccounting">
             <summary>
            Represents SingleAccounting underline.
             </summary>
        </member>
        <member name="F:Spire.Xls.FontUnderlineType.DoubleAccounting">
             <summary>
            Represents DoubleAccounting underline.
             </summary>
        </member>
        <member name="T:Spire.Xls.ExcelPatternType">
            <summary>
            Patterns style.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.None">
            <summary>
            No pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Solid">
            <summary>
            Represents the Solid pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent50">
            <summary>
            Represents the Percent50 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent70">
            <summary>
            Represents the Percent70 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent25">
            <summary>
            Represents the Percent25 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DarkHorizontal">
            <summary>
            Represents the DarkHorizontal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DarkVertical">
            <summary>
            Represents the DarkVertical pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DarkDownwardDiagonal">
            <summary>
            Represents the DarkDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DarkUpwardDiagonal">
            <summary>
            Represents the DarkUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ForwardDiagonal">
            <summary>
            Represents the ForwardDiagonal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent75">
            <summary>
            Represents the Percent75 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Horizontal">
            <summary>
            Represents the Horizontal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Vertical">
            <summary>
            Represents the Vertical pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.LightDownwardDiagonal">
            <summary>
            Represents the LightDownwardDiagonal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.LightUpwardDiagonal">
            <summary>
            Represents the LightUpwardDiagonal pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Angle">
            <summary>
            Represents the Angle pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent60">
            <summary>
            Represents the Percent60 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent10">
            <summary>
            Represents the Percent10 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent05">
            <summary>
            Represents the Percent05 pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent50Gray">
            <summary>
            Represents the Percent50Gray pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent75Gray">
            <summary>
            Represents the Percent75Gray pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent25Gray">
            <summary>
            Represents the Percent25Gray pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.HorizontalStripe">
            <summary>
            Represents the HorizontalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.VerticalStripe">
            <summary>
            Represents the VerticalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ReverseDiagonalStripe">
            <summary>
            Represents the ReverseDiagonalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DiagonalStripe">
            <summary>
            Represents the DiagonalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.DiagonalCrosshatch">
            <summary>
            Represents the DiagonalCrosshatch pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThickDiagonalCrosshatch">
            <summary>
            Represents the ThickDiagonalCrosshatch pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinHorizontalStripe">
            <summary>
            Represents the ThinHorizontalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinVerticalStripe">
            <summary>
            Represents the ThinVerticalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinReverseDeagonalStripe">
            <summary>
            Represents the ThinReverseDeagonalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinDiagonalStripe">
            <summary>
            Represents the ThinDiagonalStripe pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinHorizontalCrosshatch">
            <summary>
            Represents the ThinHorizontalCrosshatch pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.ThinDiagonalCrosshatch">
            <summary>
            Represents the ThinDiagonalCrosshatch pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent125Gray">
            <summary>
            Represents the Percent125Gray pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Percent625Gray">
            <summary>
            Represents the Percent625Gray pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelPatternType.Gradient">
            <summary>
            Represent gradient pattern.
            </summary>
        </member>
        <member name="T:Spire.Xls.PaperSizeType">
            <summary>
            Paper size type.
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.Paper10x14">
            <summary>
            Represents paper size of 10 inches X 14 inches 
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.Paper11x17">
             <summary>
            Represents paper size of 11 inches X 17 inches 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA3">
             <summary>
            Represents A3 (297 mm x  420 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA4">
             <summary>
            Represents A4 (210 mm x  297 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA4Small">
             <summary>
            Represents A4 Small (210 mm x  297 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA5">
             <summary>
            Represents A5 (148 mm x  210 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperB4">
             <summary>
            Represents B4 (250 mm x  353 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperB5">
             <summary>
            Represents B5 (176 mm x  250 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperCSheet">
             <summary>
            Represents C paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperDSheet">
             <summary>
            Represents D paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelope10">
             <summary>
            Represents Envelope# 10 paper size(4-1/8 X 9-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelope11">
             <summary>
            Represents Envelope# 11 paper size( (4-1/2 X 10-3/8 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelope12">
             <summary>
            Represents Envelope# 12 paper size(4-3/4 X 11 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelope14">
             <summary>
            Represents Envelope# 14 paper size(5 X 11-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelope9">
             <summary>
            Represents Envelope# 9 paper size(3-7/8  X 8-7/8 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeB4">
             <summary>
            Represents B4 Envelope paper size (250 mm x 353 mm).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeB5">
             <summary>
            Represents B5 Envelope paper size (176 mm x 250 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeB6">
             <summary>
            Represents B6 Envelope paper size (176 mm x 125 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeC3">
             <summary>
            Represents C3 Envelope paper size (324 mm x 458 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeC4">
             <summary>
            Represents C4 Envelope paper size (229 mm x 324 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeC5">
             <summary>
            Represents C5 Envelope paper size (162 mm x 229 mm).  
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeC6">
             <summary>
            Represents C6 Envelope paper size (114 mm x 162 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeC65">
             <summary>
            Represents C65 Envelope paper size (114 mm x 229 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeDL">
             <summary>
            Represents DL Envelope paper size (110 mm x 220 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeItaly">
             <summary>
            Represents Italy Envelope paper size (110 mm x 230 mm). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopeMonarch">
             <summary>
            Represents Monarch Envelope paper size (3-7/8  X 7-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEnvelopePersonal">
             <summary>
            Represents Personal Envelope paper size (3-5/8  X 6-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperEsheet">
             <summary>
            Represents E paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperExecutive">
             <summary>
            Represents Executive paper size (7-1/2  X 10-1/2 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperFanfoldLegalGerman">
             <summary>
            Represents German Fanfold paper size (8-1/2  X 13 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperFanfoldStdGerman">
             <summary>
            Represents German Standard Fanfold paper size (8-1/2  X 12 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperFanfoldUS">
             <summary>
            Represents U.S. Standard Fanfold  paper size (14-7/8  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperFolio">
             <summary>
            Represents Folio paper size (8-1/2  X 13 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperLedger">
             <summary>
            Represents Ledger paper size (17  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperLegal">
             <summary>
            Represents Legal paper size (8-1/2  X 14 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperLetter">
             <summary>
            Represents Letter paper size (8-1/2  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperLetterSmall">
             <summary>
            Represents Letter Small paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperNote">
             <summary>
            Represents Note paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperQuarto">
             <summary>
            Represents Quarto paper size(215 mm x 275 mm).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperStatement">
             <summary>
            Represents Statement paper size(5-1/2  X 8-1/2 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperTabloid">
             <summary>
            Represents Tabloid paper size(11 X 17 inches).
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperUser">
             <summary>
            Represents User paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.ISOB4">
            <summary>
            Represents ISO B4 paper size(250 mm by 353 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.JapaneseDoublePostcard">
            <summary>
            Represents Japanese double postcard(200 mm by 148 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.StandardPaper9By11">
            <summary>
            Represents Standard paper(9 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.StandardPaper10By11">
            <summary>
            Represents Standard paper(10 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.StandardPaper15By11">
            <summary>
            Represents Standard paper(15 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.InviteEnvelope">
            <summary>
            Represents Invite envelope (220 mm by 220 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.LetterExtraPaper9275By12">
            <summary>
            Represents Letter extra paper (9.275 in. by 12 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.LegalExtraPaper9275By15">
            <summary>
            Represents Legal extra paper (9.275 in. by 15 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.TabloidExtraPaper">
            <summary>
            Represents Tabloid extra paper (11.69 in. by 18 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A4ExtraPaper">
            <summary>
            Represents A4 extra paper (236 mm by 322 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.LetterTransversePaper">
            <summary>
            Represents Letter transverse paper (8.275 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A4TransversePaper">
            <summary>
            Represents A4 transverse paper (210 mm by 297 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.LetterExtraTransversePaper">
            <summary>
            Represents Letter extra transverse paper (9.275 in. by 12 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.SuperASuperAA4Paper">
            <summary>
            Represents SuperA/SuperA/A4 paper (227 mm by 356 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.SuperBSuperBA3Paper">
            <summary>
            Represents SuperB/SuperB/A3 paper (305 mm by 487 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.LetterPlusPaper">
            <summary>
            Represents Letter plus paper (8.5 in. by 12.69 in.).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A4PlusPaper">
            <summary>
            Represents A4 plus paper (210 mm by 330 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A5TransversePaper">
            <summary>
            Represents A5 transverse paper (148 mm by 210 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.JISB5TransversePaper">
            <summary>
            Represents JIS B5 transverse paper (182 mm by 257 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A3ExtraPaper">
            <summary>
            Represents A3 extra paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A5ExtraPpaper">
            <summary>
            Represents A5 extra paper (174 mm by 235 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.ISOB5ExtraPaper">
            <summary>
            Represents ISO B5 extra paper (201 mm by 276 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A2Paper">
            <summary>
            Represents A2 paper (420 mm by 594 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A3TransversePaper">
            <summary>
            Represents A3 transverse paper (297 mm by 420 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A3ExtraTransversePaper">
            <summary>
            Represents A3 extra transverse paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseDoublePostcard">
            <summary>
            Japanese Double Postcard 200 x 148 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.A6Paper">
            <summary>
            A6 105 x 148 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeKaku2">
            <summary>
            Japanese Envelope Kaku #2
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeKaku3">
            <summary>
            Japanese Envelope Kaku #3
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeChou3">
            <summary>
            Japanese Envelope Chou #3
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeChou4">
            <summary>
            Japanese Envelope Chou #4
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperLetterRotated">
            <summary>
            11in × 8.5in
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA3Rotated">
            <summary>
            420mm × 297mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA4Rotated">
            <summary>
            297mm × 210mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA5Rotated">
            <summary>
            210mm × 148mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJISB4Rotated">
            <summary>
            B4 (JIS) Rotated 364 x 257 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJISB5Rotated">
            <summary>
            B5 (JIS) Rotated 257 x 182 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapanesePostcardRotated">
            <summary>
            Japanese Postcard Rotated 148 x 100 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseDoublePostcardRotated">
            <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA6Rotated">
            <summary>
            A6 Rotated 148 x 105 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeKaku2Rotated">
            <summary>
            Japanese Envelope Kaku #2 Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeKaku3Rotated">
            <summary>
            Japanese Envelope Kaku #3 Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeChou3Rotated">
            <summary>
            Japanese Envelope Chou #3 Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeChou4Rotated">
            <summary>
            Japanese Envelope Chou #4 Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJISB6">
            <summary>
            B6 (JIS) 128 x 182 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJISB6Rotated">
            <summary>
            B6 (JIS) Rotated 182 x 128 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.Paper12x11">
            <summary>
            12 x 11 in
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeYou4">
            <summary>
            Japanese Envelope You #4
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperJapaneseEnvelopeYou4Rotated">
            <summary>
            Japanese Envelope You #4 Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRC16K">
            <summary>
            PRC 16K 146 x 215 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRC32K">
            <summary>
            PRC 32K 97 x 151 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCBig32K">
            <summary>
            PRC 32K(Big) 97 x 151 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope1">
            <summary>
            PRC Envelope #1 102 x 165 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope2">
            <summary>
            PRC Envelope #2 102 x 176 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope3">
            <summary>
            PRC Envelope #3 125 x 176 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope4">
            <summary>
            PRC Envelope #4 110 x 208 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope5">
            <summary>
            PRC Envelope #5 110 x 220 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope6">
            <summary>
            PRC Envelope #6 120 x 230 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope7">
            <summary>
            PRC Envelope #7 160 x 230 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope8">
            <summary>
            PRC Envelope #8 120 x 309 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope9">
            <summary>
            PRC Envelope #9 229 x 324 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope10">
            <summary>
            PRC Envelope #10 324 x 458 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRC16KRotated">
            <summary>
            PRC 16K Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRC32KRotated">
            <summary>
            PRC 32K Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCBig32KRotated">
            <summary>
            PRC 32K(Big) Rotated
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope1Rotated">
            <summary>
            PRC Envelope #1 Rotated 165 x 102 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope2Rotated">
            <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope3Rotated">
            <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope4Rotated">
            <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope5Rotated">
            <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope6Rotated">
            <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope7Rotated">
            <summary>
            PRC Envelope #7 Rotated 230 x 160 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope8Rotated">
            <summary>
            PRC Envelope #8 Rotated 309 x 120 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope9Rotated">
            <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperPRCEnvelope10Rotated">
            <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA1">
             <summary>
            Represents A1 (841 mm x 594 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.PaperA0">
             <summary>
            Represents A0 (1189 mm x 841 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Xls.PaperSizeType.Custom">
            <summary>
            Custom paper size
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelShapeType">
            <summary>
            Excel shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Unknown">
            <summary>
            Represents the Unknown shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Chart">
            <summary>
            Represents the Chart shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Comment">
            <summary>
            Represents the Comment shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Group">
            <summary>
            Represents the Group shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.EmbeddedOLEObject">
            <summary>
            Represents the EmbeddedOLEObject shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.FormControl">
            <summary>
            Represents the FormControl shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Picture">
            <summary>
            Represents the Picture shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.TextBox">
            <summary>
            Represents the TextBox shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Oval">
            <summary>
            Represents the Oval shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.PrstGomShape">
            <summary>
            Represents the Preset Geom shape type.
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.OleObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Arc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.ScrollBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Button">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Line">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Polygon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.CheckBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.RadioButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Label">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.DialogBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.Spinner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.ListBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.GroupBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.ComboBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.ExcelShapeType.CellsDrawing">
            <summary>
            Only for preserving the drawing object in the template file.
            </summary>
        </member>
        <member name="T:Spire.Xls.CommentHAlignType">
            <summary>
            Comment horizontally align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Left">
            <summary>
            Represents the Left comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Center">
            <summary>
            Represents the Center comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Right">
            <summary>
            Represents the Right comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Justified">
            <summary>
            Represents the Justified comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Justify">
            <summary>
            Represents the Justified comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentHAlignType.Distributed">
            <summary>
            Represents the Destributed comment align.
            </summary>
        </member>
        <member name="T:Spire.Xls.CommentVAlignType">
            <summary>
            Comment vertically align
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentVAlignType.Top">
            <summary>
            Represents the Top comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentVAlignType.Center">
            <summary>
            Represents the Center comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentVAlignType.Bottom">
            <summary>
            Represents the Bottom comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentVAlignType.Justify">
            <summary>
            Represents the Justified comment align.
            </summary>
        </member>
        <member name="F:Spire.Xls.CommentVAlignType.Distributed">
            <summary>
            Represents the Destributed comment align.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientColorType">
            <summary>
            Represents gradient color type.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientColorType.OneColor">
            <summary>
            Represents one color gradient style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientColorType.TwoColor">
            <summary>
            Represents two color gradinent style.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientColorType.Preset">
            <summary>
            Represents preset gradient style.
            </summary>
        </member>
        <member name="T:Spire.Xls.GradientPatternType">
            <summary>
            Represents excel gradient pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat5Percent">
            <summary>
            Represents 5% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat10Percent">
            <summary>
            Represents 10% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat20Percent">
            <summary>
            Represents 20% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat25Percent">
            <summary>
            Represents 25% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat30Percent">
            <summary>
            Represents 30% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat40Percent">
            <summary>
            Represents 40% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat50Percent">
            <summary>
            Represents 50% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat60Percent">
            <summary>
            Represents 60% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat70Percent">
            <summary>
            Represents 70% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat75Percent">
            <summary>
            Represents 75% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat80Percent">
            <summary>
            Represents 80% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.Pat90Percent">
            <summary>
            Represents 90% gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDarkDownwardDiagonal">
            <summary>
            Represents Dark Downward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDarkHorizontal">
            <summary>
            Represents Dark Horizontal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDarkUpwardDiagonal">
            <summary>
            Represents Dark Upward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDarkVertical">
            <summary>
            Represents Dark Vertical gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDashedDownwardDiagonal">
            <summary>
            Represents Dashed Downward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDashedHorizontal">
            <summary>
            Represents Dashed Horizontal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDashedUpwardDiagonal">
            <summary>
            Represents Dashed Upward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDashedVertical">
            <summary>
            Represents Dashed Vertical gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDiagonalBrick">
            <summary>
            Represents Diagonal Brick gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDivot">
            <summary>
            Represents Divot gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDottedDiamond">
            <summary>
            Represents Dotted Diamond gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatDottedGrid">
            <summary>
            Represents Dotted Grid gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatHorizontalBrick">
            <summary>
            Represents Horizontal Brick gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLargeCheckerBoard">
            <summary>
            Represents Large Checker Board gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLargeConfetti">
            <summary>
            Represents Large Confetti gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLargeGrid">
            <summary>
            Represents Large Grid gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLightDownwardDiagonal">
            <summary>
            Represents Light Downward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLightHorizontal">
            <summary>
            Represents Light Horizontal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLightUpwardDiagonal">
            <summary>
            Represents Light Upward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatLightVertical">
            <summary>
            Represents Light Vertical gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatMixed">
            <summary>
            Represents Mixed gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatNarrowHorizontal">
            <summary>
            Represents Narrow Horizontal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatNarrowVertical">
            <summary>
            Represents Narrow Vertical gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatOutlinedDiamond">
            <summary>
            Represents Outlined Diamond gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatPlaid">
            <summary>
            Represents Plaid gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatShingle">
            <summary>
            Represents Shingle gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatSmallCheckerBoard">
            <summary>
            Represents Small Checker Board gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatSmallConfetti">
            <summary>
            Represents Small Confetti gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatSmallGrid">
            <summary>
            Represents Small Grid gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatSolidDiamond">
            <summary>
            Represents Solid Diamond gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatSphere">
            <summary>
            Represents Sphere gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatTrellis">
            <summary>
            Represents Trellis gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatWave">
            <summary>
            Represents Wave gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatWeave">
            <summary>
            Represents Weave gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatWideDownwardDiagonal">
            <summary>
            Represents Wide Downward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatWideUpwardDiagonal">
            <summary>
            Represents Wide Upward Diagonal gradient pattern
            </summary>
        </member>
        <member name="F:Spire.Xls.GradientPatternType.PatZigZag">
            <summary>
            Represents Zig Zag gradient pattern
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelAddInFunction">
            <summary>
            Represents a single add-in, either installed or not installed.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelFont">
            <summary>
            Represents a font in an Excel worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsItalic">
            <summary>
            True if the font style is italic. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.KnownColor">
            <summary>
            Returns or sets the primary excel color of the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.Color">
            <summary>
            Returns or sets the primary color of the font.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelFont.SetThemeColor(Spire.Xls.ThemeColorType,System.Double)">
            <summary>
            Set the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
        </member>
        <member name="M:Spire.Xls.ExcelFont.GetThemeColor(Spire.Xls.ThemeColorType@,System.Double@)">
            <summary>
            Get the theme color.
            </summary>
            <param name="type">theme color type</param>
            <param name="tint"></param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsBold">
            <summary>
            True if the font is bold.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.FontName">
            <summary>
            Returns or sets the font name. Read / write string.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.Size">
            <summary>
            Returns or sets the size of the font. Read / write integer.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsStrikethrough">
            <summary>
            True if the font is struck through with a horizontal line.
            Read / write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.StrikethroughType">
            <summary>
            Gets or sets the strikethrough type.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsSubscript">
            <summary>
            True if the font is formatted as subscript.
            False by default. Read / write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsSuperscript">
            <summary>
            True if the font is formatted as superscript. False by default.
            Read/write Boolean
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.IsAutoColor">
            <summary>
            Indicates whether color is automatically selected. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.Underline">
            <summary>
            Returns or sets the type of underline applied to the font. 
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelFont.VerticalAlignment">
            <summary>
            Gets / sets font vertical alignment.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelFont.GenerateNativeFont">
            <summary>
            Generates system font object.
            </summary>
            <returns>Font object.</returns>
        </member>
        <member name="P:Spire.Xls.ExcelFont.Parent">
            <summary>
            Gets the parent object of the current instance.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelFont.BeginUpdate">
            <summary>
            Begins a update on the font.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelFont.EndUpdate">
            <summary>
            Ends the update process of the font.
            </summary>
        </member>
        <member name="T:Spire.Xls.ExcelGradient">
            <summary>
            Represents a gradient fill in an Excel spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelGradient.#ctor(Spire.Xls.Core.IGradient)">
            <summary>
            Initializes a new instance of the ExcelGradient class.
            </summary>
            <param name="gradient">The gradient object to initialize the ExcelGradient with.</param>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.Wrapped">
            <summary>
            Gets the wrapped gradient object as an instance of Spire.Xls.Core.Spreadsheet.GradientWrapper.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.BackColor">
            <summary>
            Gets or sets the background color of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.BackColorObject">
            <summary>
            Gets the background color object from the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.BackKnownColor">
            <summary>
            Gets or sets the background known color of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.ForeColor">
            <summary>
            Gets or sets the foreground color of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.ForeKnownColor">
            <summary>
            Gets or sets the known color of the foreground in a gradient fill.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.ForeColorObject">
            <summary>
            Gets the foreground color object from the gradient.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.GradientStyle">
            <summary>
            Gets or sets the gradient style type of the cell.
            </summary>
        </member>
        <member name="P:Spire.Xls.ExcelGradient.GradientVariant">
            <summary>
            Gets or sets the gradient variant.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelGradient.CompareTo(Spire.Xls.Core.IGradient)">
            <summary>
            Compares with gradient.
            </summary>
            <param name="gradient">Gradient to compare with.</param>
            <returns>Zero if gradients are equal.</returns>
        </member>
        <member name="M:Spire.Xls.ExcelGradient.TwoColorGradient">
            <summary>
            Applies a two-color gradient effect to the current graphics object.
            </summary>
        </member>
        <member name="M:Spire.Xls.ExcelGradient.TwoColorGradient(Spire.Xls.GradientStyleType,Spire.Xls.GradientVariantsType)">
            <summary>
            Applies a two-color gradient fill to the current shape.
            </summary>
            <param name="style">The style of the gradient.</param>
            <param name="variant">The variant of the gradient.</param>
        </member>
        <member name="T:Spire.Xls.HPageBreak">
            <summary>
            Represents a horizontal page break in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.HPageBreak.Location">
            <summary>
            Location of the page break.
            </summary>
        </member>
        <member name="T:Spire.Xls.HyperLink">
            <summary>
            Represents a hyperlink in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.HyperLink.Range">
            <summary>
            Returns a Range object that represents the range the specified hyperlink is attached to.
            </summary>
        </member>
        <member name="T:Spire.Xls.OColor">
            <summary>
            This object used to store, convert colors.
            </summary>
        </member>
        <member name="T:Spire.Xls.OColor.AfterChangeHandler">
            <summary>
            Delegate used for after change event.
            </summary>
        </member>
        <member name="P:Spire.Xls.OColor.Value">
            <summary>
            Returns color value (it can be index, rgb color, etc.)
            </summary>
        </member>
        <member name="P:Spire.Xls.OColor.Tint">
            <summary>
            Gets or sets Tint.
            </summary>
        </member>
        <member name="P:Spire.Xls.OColor.ColorType">
            <summary>
            Returns type of the stored color.
            </summary>
        </member>
        <member name="M:Spire.Xls.OColor.#ctor">
            <summary>
            Initializes a new instance of the OColor class.
            </summary>
        </member>
        <member name="M:Spire.Xls.OColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Spire.Xls.OColor"/> class with the specified RGB color.
            </summary>
            <param name="rgb">The RGB color.</param>
        </member>
        <member name="M:Spire.Xls.OColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spire.Xls.OColor.SetTheme(System.Int32,Spire.Xls.Core.IWorkbook)">
            <summary>
            Sets theme color.
            </summary>
            <param name="themeIndex">Theme color index.</param>
            <param name="book">Parent workbook.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetTheme(System.Int32,Spire.Xls.Core.IWorkbook,System.Double)">
            <summary>
            Sets theme color
            </summary>
            <param name="themeIndex">Theme color index.</param>
            <param name="book">Parent workbook.</param>
            <param name="dTintValue">Tint value.</param>
        </member>
        <member name="M:Spire.Xls.OColor.GetThemeColor(System.Int32@,System.Double@)">
            <summary>
            Gets theme color.
            </summary>
            <param name="themeIndex">Theme color index.</param>
            <param name="tint">Tint value.</param>
            <remarks>
            If the color is a theme color, true returned, is not then false will be returned.
            </remarks>
        </member>
        <member name="M:Spire.Xls.OColor.SetTabRGBColor(System.Drawing.Color,Spire.Xls.Core.IWorkbook)">
            <summary>
            Sets Tab RGB color value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="book">Parent workbook.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetRGBColor(System.Drawing.Color,Spire.Xls.Core.IWorkbook)">
            <summary>
            Sets RGB color value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="book">Parent workbook.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetRGB(System.Drawing.Color,Spire.Xls.Core.IWorkbook,System.Double)">
            <summary>
            Sets rgb color.
            </summary>
            <param name="rgb">Rgb color to set.</param>
            <param name="book">Parent workbook.</param>
            <param name="dTintValue">Tint value.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetRGBColor(System.Drawing.Color)">
            <summary>
            Sets RGB color value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetKnownColor(Spire.Xls.ExcelColors,System.Boolean)">
            <summary>
            Sets the color to a known color and raises an event if specified.
            </summary>
            <param name="value">The known color to set.</param>
            <param name="raiseEvent">Indicates whether to raise the AfterChange event.</param>
        </member>
        <member name="M:Spire.Xls.OColor.SetKnownColor(Spire.Xls.ExcelColors)">
            <summary>
            Sets known color.
            </summary>
            <param name="value">Excel color to set.</param>
        </member>
        <member name="M:Spire.Xls.OColor.GetKnownColor(Spire.Xls.Workbook)">
            <summary>
            Retrieves the known color from the workbook.
            </summary>
            <param name="book">The workbook to retrieve the known color from.</param>
            <returns>The known color from the workbook.</returns>
        </member>
        <member name="M:Spire.Xls.OColor.CopyFrom(Spire.Xls.OColor,System.Boolean)">
            <summary>
            Copies data from another color object.
            </summary>
            <param name="OColor">Color object to copy data from.</param>
            <param name="callEvent">Indicates whether we should call AfterChange method.</param>
        </member>
        <member name="M:Spire.Xls.OColor.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="M:Spire.Xls.OColor.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="T:Spire.Xls.ColorType">
            <summary>
            Color types.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorType.Known">
            <summary>
            Known color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorType.RGB">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="F:Spire.Xls.ColorType.Theme">
            <summary>
             Theme color.
             </summary>
        </member>
        <member name="T:Spire.Xls.PageSetup">
            <summary>
            Represents the page setup description. The PageSetup object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties.
            </summary>
        </member>
        <member name="T:Spire.Xls.RichText">
            <summary>
            Represents a rich text object in a Spire.Xls worksheet.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichText.#ctor(Spire.Xls.Core.IRichTextString)">
            <summary>
            Initializes a new instance of the RichText class.
            </summary>
            <param name="richTextString">The rich text string.</param>
        </member>
        <member name="M:Spire.Xls.RichText.GetFont(System.Int32)">
            <summary>
            Returns font for character at specified position.
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:Spire.Xls.RichText.SetFont(System.Int32,System.Int32,Spire.Xls.ExcelFont)">
            <summary>
            Sets font for specified range of characters.
            </summary>
            <param name="startPos">Position of first character.</param>
            <param name="endPos">Position of last character.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="T:Spire.Xls.RichTextObject">
            <summary>
            Represents a rich text object in a spreadsheet.
            </summary>
        </member>
        <member name="F:Spire.Xls.RichTextObject.m_richText">
            <summary>
            Parent range.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichTextObject.#ctor(Spire.Xls.Core.IRichTextString)">
            <summary>
            Initializes a new instance of the RichTextObject class with the specified rich text string.
            </summary>
            <param name="richText">The rich text string to initialize the object with.</param>
        </member>
        <member name="M:Spire.Xls.RichTextObject.GetFont(System.Int32)">
            <summary>
            Returns font for character at specified position.
            </summary>
            <param name="position">Position of the symbol.</param>
            <returns>
            Font for character at specified position if it is equal for all
            cells in the parent range, otherwise NULL is returned.
            </returns>
        </member>
        <member name="M:Spire.Xls.RichTextObject.SetFont(System.Int32,System.Int32,Spire.Xls.Core.IFont)">
            <summary>
            Sets font for specified range of characters.
            </summary>
            <param name="startPos">First character to set font.</param>
            <param name="endPos">Last character to set.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:Spire.Xls.RichTextObject.ClearFormatting">
            <summary>
            Clears formatting.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichTextObject.Clear">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="P:Spire.Xls.RichTextObject.Text">
            <summary>
            Gets or sets text;
            </summary>
        </member>
        <member name="P:Spire.Xls.RichTextObject.RtfText">
            <summary>
            Gets Rtf Text. Read-Only.
            </summary>
        </member>
        <member name="P:Spire.Xls.RichTextObject.IsFormatted">
            <summary>
            Indicates whether rich text string contains formatting Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.RichTextObject.Parent">
            <summary>
            Gets the parent object of the RichText control.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichTextObject.BeginUpdate">
            <summary>
            This method should be called before several updates to the object will take place.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichTextObject.EndUpdate">
            <summary>
            This method should be called after several updates to the object took place.
            </summary>
        </member>
        <member name="M:Spire.Xls.RichTextObject.Append(System.String,Spire.Xls.Core.IFont)">
            <summary>
            Appends the specified text and font to the rich text.
            </summary>
            <param name="text">The text to append.</param>
            <param name="font">The font to apply to the appended text.</param>
        </member>
        <member name="T:Spire.Xls.Validation">
            <summary>
            Represents a class for handling validation.
            </summary>
        </member>
        <member name="P:Spire.Xls.Validation.DataRange">
            <summary>
            Returns data type validation for a range
            </summary>
        </member>
        <member name="T:Spire.Xls.VPageBreak">
            <summary>
            Represents a vertical page break.
            </summary>
        </member>
        <member name="P:Spire.Xls.VPageBreak.Location">
            <summary>
            Returns or sets the cell (a Range object) that defines the page-break location.
            </summary>
        </member>
        <member name="T:Spire.Xls.Worksheet">
            <summary>
            Represents a worksheet. The Worksheet object is a member of the
            Worksheets collection. The Worksheets collection contains all the
            Worksheet objects in a workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.AllocatedRange">
            <summary>
            Returns a Range object that represents the used range on the
            specified worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Worksheet.Item(System.Int32,System.Int32)">
            <summary>
            Get cell range.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Worksheet.Item(System.String)">
            <summary>
            Get cell range.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Xls.Worksheet.MergedCells">
             <summary>
             Returns all merged ranges. Read-only.
             <example>The following code illustrates how to get the merged ranges:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Merge cells</para>
                 <para>worksheet["C2:D2"].Merge();</para>
                 <para>worksheet["F3:G3"].Merge();</para>
                         
                 <para>//Get merged ranges</para>
                 <para>IXLSRange[] mergedRanges = worksheet.MergedCells;</para>
             
                 <para>//Get merged range count . Output will be 2</para>
                 <para>Console.Write(mergedRanges.Length);</para>
             
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("MergedCells.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAll(System.String,Spire.Xls.FindType,Spire.Xls.ExcelFindOptions)">
            <summary>
            Finds the all cells with specified string value.
            </summary>
            <param name="findValue">Value to search.</param>
            <param name="flags">Type of value to search.</param>
            <param name="findOptions">Way to search.</param>
            <returns>All found cells, or Null if value was not found.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input number.
            </summary>
            <param name="doubleValue">Double value to search for.</param>
            <param name="formulaValue">Indicates if includes formula value.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for.</param>
            <param name="formula">Indicates if includes formula.</param>
            <param name="formulaValue">Indicates if includes formula value.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllString(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for.</param>
            <param name="formula">Indicates if includes formula.</param>
            <param name="formulaValue">Indicates if includes formula value.</param>
            <param name="isRegex">Indicates if stringValue param is regex.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input date time.
            </summary>
            <param name="dateTimeValue">Datetime value to search for.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with the input time span.
            </summary>
            <param name="timeSpanValue">Time span value to search for.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindAllBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool.
            </summary>
            <param name="boolValue">Bool value to search for.</param>
            <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindBool(System.Boolean)">
            <summary>
            Finds the cell with the input bool.
            </summary>
            <param name="boolValue">Bool value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindNumber(System.Double,System.Boolean)">
            <summary>
            Finds the cell with the input double.
            </summary>
            <param name="doubleValue">Double value to search for.</param>
            <param name="formulaValue">Indicates if includes formula value.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the cell with the input string.
            </summary>
            <param name="stringValue">String value to search for.</param>
            <param name="formula">Indicates whether includes formula.</param>
            <param name="formulaValue">Indicates whether includes formula value.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindDateTime(System.DateTime)">
            <summary>
            Finds the cell with the input date time.
            </summary>
            <param name="dateTimeValue">DateTime value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.FindTimeSpan(System.TimeSpan)">
            <summary>
            Finds the cell with the input time span.
            </summary>
            <param name="timeSpanValue">Time span value to search for.</param>
            <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.CopyFrom(Spire.Xls.Worksheet)">
            <summary>
            Copy data from specified worksheet.
            </summary>
            <param name="worksheet">worksheet object</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Copys data from a source range to a destination range. 
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Copys data from a source range to a destination range. 
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range.</param>
            <param name="copyStyle">Indicates whether copys styles.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copys data from a source range to a destination range. 
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range</param>
            <param name="copyStyle">Indicates whether copy styles.</param>
            <param name="updateReference">Indicates whether update reference ranges.</param>
            <param name="ignoreSize">Indicates whether check range sizes.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.Worksheet,System.Int32,System.Int32)">
            <summary>
            Copy data from source range to destination worksheet.
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="worksheet">Destination worksheet</param>
            <param name="destRow">Row index of destination worksheet.</param>
            <param name="destColumn">Column index of destination worksheet.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.Worksheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy data from source range to destination worksheet.
            </summary>
            <param name="sourceRange">Source range</param>
            <param name="worksheet">Destination worksheet.</param>
            <param name="destRow">Row index of destination worksheet.</param>
            <param name="destColumn">Column index of destination worksheet.</param>
            <param name="copyStyle">Indicates whehter copy styles.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.Worksheet,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copy data from source range to destination worksheet.
            </summary>
            <param name="sourceRange">Source range</param>
            <param name="worksheet">Destination worksheet.</param>
            <param name="destRow">Row index of destination worksheet.</param>
            <param name="destColumn">Column index of destination worksheet.</param>
            <param name="copyStyle">Indicates whehter copy styles.</param>
            <param name="updateRerence">Indicates whether update reference range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copys data from a source range to a destination range. 
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range</param>
            <param name="copyStyle">Indicates whether copy styles.</param>
            <param name="updateReference">Indicates whether update reference ranges.</param>
            <param name="ignoreSize">Indicates whether check range sizes.</param>
            <param name="copyShape">Indicates whether copy shape.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Copy(Spire.Xls.CellRange,Spire.Xls.CellRange,Spire.Xls.CopyRangeOptions)">
            <summary>
            Copys data from a source range to a destination range. 
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range</param>
            <param name="copyOptions">Copy options.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.CopyRow(Spire.Xls.CellRange,Spire.Xls.Worksheet,System.Int32,Spire.Xls.CopyRangeOptions)">
            <summary>
            Copys data from a source row to a destination row. 
            </summary>
            <param name="sourceRow">Source row.</param>
            <param name="destSheet">Destination sheet</param>
            <param name="destRowIndex">Destination row index</param>
            <param name="copyOptions">Copy options.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.CopyColumn(Spire.Xls.CellRange,Spire.Xls.Worksheet,System.Int32,Spire.Xls.CopyRangeOptions)">
            <summary>
            Copys data from a source column to a destination column. 
            </summary>
            <param name="sourceColumn">Source column.</param>
            <param name="destSheet">Destination sheet</param>
            <param name="destColIndex">Destination column index</param>
            <param name="copyOptions">Copy options.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Move(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Move data from source range to destination range.
            </summary>
            <param name="sourceRange">Source range.</param>
            <param name="destRange">Destination range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.Move(Spire.Xls.CellRange,Spire.Xls.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Moves a range of cells from a source range to a destination range.
            </summary>
            <param name="sourceRange">The range of cells to move.</param>
            <param name="destRange">The destination range where the cells will be moved.</param>
            <param name="updateReference">If true, updates formulas and merges in the destination range.</param>
            <param name="copyStyle">If true, copies the style of the source range to the destination range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.ExportDataTable(Spire.Xls.CellRange,System.Boolean)">
            <summary>
            Exports worksheet data into a DataTable.
            </summary>
            <param name="range">Range to export.</param>
            <param name="exportColumnNames">Indicates if export column name.</param>
            <returns>exported datatable</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.ExportDataTable(Spire.Xls.CellRange,Spire.Xls.ExportTableOptions)">
            <summary>
            Exports the data from the specified cell range to a DataTable.
            </summary>
            <param name="range">The cell range to export.</param>
            <param name="options">The options for exporting the table.</param>
            <returns>A DataTable containing the data from the specified cell range.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Xls.ExportTableOptions)">
            <summary>
            Exports a portion of a DataTable starting from a specified cell and spanning a specified number of rows and columns.
            </summary>
            <param name="firstRow">The zero-based index of the first row to export.</param>
            <param name="firstColumn">The zero-based index of the first column to export.</param>
            <param name="maxRows">The maximum number of rows to export.</param>
            <param name="maxColumns">The maximum number of columns to export.</param>
            <param name="options">The options for exporting the DataTable.</param>
            <returns>A DataTable containing the exported portion of the original DataTable.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.ExportDataTable(Spire.Xls.CellRange,System.Boolean,System.Boolean)">
            <summary>
            Exports worksheet data into a DataTable.
            </summary>
            <param name="range">Range to export.</param>
            <param name="exportColumnNames">Indicates if export column name.</param>
            <param name="computedFormulaValue">Indicates wheter compute formula value.</param>
            <returns>exported datatable</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Exports worksheet data into a DataTable
            </summary>
            <param name="firstRow">Row of first cell.</param>
            <param name="firstColumn">Column of first cell.</param>
            <param name="maxRows">Maximun rows to export.</param>
            <param name="maxColumns">Maximun columns to export.</param>
            <param name="exportColumnNames">Indicates if export column name.</param>
            <returns>Exported datatable.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.GetIntersectRanges(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Intersects two ranges.
            </summary>
            <param name="range1">First range.</param>
            <param name="range2">Second range.</param>
            <returns>Intersection of two ranges</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.Merge(Spire.Xls.CellRange,Spire.Xls.CellRange)">
            <summary>
            Combines a range of cells into a single cell. 
            </summary>
            <param name="range1">First range.</param>
            <param name="range2">Second range.</param>
            <returns>Merged ranges</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.SetDefaultColumnStyle(System.Int32,Spire.Xls.CellStyle)">
             <summary>
             Sets default style for column.
             <example>The following code illustrates how to set the default style for a column:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">Column index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.SetDefaultColumnStyle(System.Int32,System.Int32,Spire.Xls.CellStyle)">
             <summary>
             Sets default style for column.
             <example>The following code illustrates how to set the default style for columns:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2, 5, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="firstColumnIndex">First column index.</param>
             <param name="lastColumnIndex">Last column index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.SetDefaultRowStyle(System.Int32,Spire.Xls.CellStyle)">
             <summary>
             Sets default style for row.
             <example>The following code illustrates how to set the default style for a row:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultRowStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.SetDefaultRowStyle(System.Int32,System.Int32,Spire.Xls.CellStyle)">
             <summary>
             Sets default style for row.
             <example>The following code illustrates how to set the default style for rows:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2, 5, style);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("SetDefaultRowStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="firstRowIndex">First row index.</param>
             <param name="lastRowIndex">Last row index.</param>
             <param name="defaultStyle">Default style.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.GetDefaultColumnStyle(System.Int32)">
             <summary>
             Returns default column style.
             <example>The following code illustrates how to get default column style:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultColumnStyle(2,style);</para>
                 
                 <para>//Get default style</para>
                 <para>CellStyle defaultStyle = worksheet.GetDefaultColumnStyle(2);</para>
                 
                 <para>//Set color</para>
                 <para>defaultStyle.Color = Color.Blue;</para>
                 <para>worksheet.SetDefaultColumnStyle(3, defaultStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="columnIndex">Column index.</param>
             <returns>Default column style or null if default style is not exists.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.GetDefaultRowStyle(System.Int32)">
             <summary>
             Returns default row style.
             <example>The following code illustrates how to get default row style:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Create style</para>
                 <para>CellStyle style = workbook.Styles.Add("CustomStyle");</para>
                         
                 <para>//Set Color</para>
                 <para>style.Color = Color.Red;</para>
                 
                 <para>//Set default style</para>
                 <para>worksheet.SetDefaultRowStyle(2,style);</para>
                 
                 <para>//Get default style</para>
                 <para>CellStyle defaultStyle = worksheet.GetDefaultRowStyle(2);</para>
                 
                 <para>//Set color</para>
                 <para>defaultStyle.Color = Color.Blue;</para>
                 <para>worksheet.SetDefaultRowStyle(3, defaultStyle);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("GetDefaultColumnStyle.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="rowIndex">Row index.</param>
             <returns>Default row style or null if default style is not set.</returns>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemoveMergedCells(Spire.Xls.CellRange)">
            <summary>
            Remove merged cells from specified range.
            </summary>
            <param name="range">Specified range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemoveRange(Spire.Xls.CellRange)">
            <summary>
            Removes range from list.
            </summary>
            <param name="range">Specified range.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes range from list.
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemovePicture(System.Int32)">
            <summary>
            Remove picture from this worksheet.
            </summary>
            <param name="index">Picture ID</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemovePicture(System.String)">
            <summary>
            Remove picture from this worksheet.
            </summary>
            <param name="picturename">Picture name</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.RemovePicture(Spire.Xls.Core.IPictureShape)">
            <summary>
            Remove picture from this worksheet.
            </summary>
            <param name="picture">A pictureshape</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.ApplyStyle(Spire.Xls.CellStyle)">
            <summary>
            Apply style to whole sheet.
            </summary>
            <param name="style">style to apply</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.FreezePanes(System.Int32,System.Int32)">
            <summary>
            Freezes panes at the specified cell in the worksheet. 
            </summary>
            <param name="rowIndex">Row index.</param>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.GetFreezePanes(System.Int32@,System.Int32@)">
            <summary>
            Get Freezes panes cell's index in the worksheet. 
            </summary>
            <param name="rowIndex">Row index. 0 means no freeze row</param>
            <param name="columnIndex">Column index. 0 means no freeze column</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.SetActiveCell(Spire.Xls.CellRange)">
            <summary>
            Sets active cell
            </summary>
            <param name="range">Cell to activate.</param>
        </member>
        <member name="M:Spire.Xls.Worksheet.OnDispose">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Cells">
            <summary>
            Returns all used cells in the worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Columns">
            <summary>
            Rrepresents all used columns on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.PageSetup">
            <summary>
            Returns a PageSetup object that contains all the page setup settings
            for the specified object. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.AutoFilters">
            <summary>
            Returns autofilterscollection of worksheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Charts">
            <summary>
            Returns charts collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.QueryTables">
            <summary>
            Gets the collection of query tables associated with the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Comments">
             <summary>
             Returns comments collection for this worksheet. Read-only.
             <example>The following code illustrates how to access the comments collection in the worksheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Adding comments to a cell.</para>
                 <para>ICommentShape comment1 = worksheet.Range["A1"].AddComment();</para>
                 <para>ICommentShape comment2 = worksheet.Range["B1"].AddComment();</para>
                         
                 <para>//Set comment text</para>
                 <para>comment1.Text = "Comment1";</para>
                 <para>comment2.Text = "Comment2";</para>
                 
                 <para>//Check count</para>
                 <para>Console.Write(worksheet.Comments.Count);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Comments.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.HPageBreaks">
            <summary>
            Returns an HPageBreaks collection that represents the horizontal
            page breaks on the sheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.HyperLinks">
            <summary>
            Collection of all worksheet's hyperlinks.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Pictures">
            <summary>
            Pictures collection. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.CellImages">
            <summary>
            Cell image array. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.PrintRange">
            <summary>
            Print area of worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.VPageBreaks">
            <summary>
            Returns a VPageBreaks collection that represents the vertical page
            breaks on the sheet. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Range">
             <summary>
             Returns a Range object that represents the used range on the
             specified worksheet. Read-only.            
             <example>The following code illustrates how to get used range on the specified worksheet:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set Color</para>
                 <para>worksheet["J3"].Style.Color = Color.Red;</para>
                 
                 <para>//Get used range . Output will be B2:J3</para>
                 <para>Console.Write(worksheet.Range.RangeAddressLocal);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("UsedRange.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Worksheet.CalculateAndGetRowHeight(System.Int32)">
            <summary>
            Calculates and returns the height of a specific row in a worksheet.
            </summary>
            <param name="rowIndex">The index of the row for which to calculate the height.</param>
            <returns>The height of the specified row in points.</returns>
        </member>
        <member name="P:Spire.Xls.Worksheet.Rows">
            <summary>
            Represents all the rows on the specified worksheet. Read-only Range object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.Workbook">
            <summary>
            Gets the workbook associated with the current object, retrieving it from the parent workbook's inner workbook property,this method equals ParentWorkbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Worksheet.ParentWorkbook">
            <summary>
            Gets the parent workbook of the current worksheet,this method equals Workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Worksheet.CheckProtectionPassword(System.String)">
            <summary>
            Checks if the provided password matches the protection password of the worksheet.
            </summary>
            <param name="password">The password to be verified.</param>
            <returns>
            Returns true if the password is correct or if both the password and the protection algorithm info are null; otherwise, returns false.
            </returns>
        </member>
        <member name="T:Spire.Xls.SaveShapeTypeOption">
            <summary>
            Specifies the shape type that needs to be converted to a picture, and defaults to all types
            </summary>
        </member>
        <member name="M:Spire.Xls.SaveShapeTypeOption.#ctor">
            <summary>
            Initializes a new instance of the SaveShapeTypeOption class.
            </summary>
            <returns>
            A new instance of the SaveShapeTypeOption class.
            </returns>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveGroupShape">
            <summary>
            Identifies whether Group shape converted to a picture.(Child of this group shape will not convert)
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SavePicture">
            <summary>
            Identifies whether Picture shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveTextBox">
            <summary>
            Identifies whether TextBox shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveButton">
            <summary>
            Identifies whether Button shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveCheckBox">
            <summary>
            Identifies whether CheckBox shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveRadioButton">
            <summary>
            Identifies whether RadioButton shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveGroupBox">
            <summary>
            Identifies whether GroupBox shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveLabel">
            <summary>
            Identifies whether Label shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveListBox">
            <summary>
            Identifies whether ListBox shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveComboBox">
            <summary>
            Identifies whether ComboBox shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveArc">
            <summary>
            Identifies whether Arc shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveLine">
            <summary>
            Identifies whether Line shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveOval">
            <summary>
            Identifies whether eOval shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveRectangle">
            <summary>
            Identifies whether Rectangle shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SavePrstGomShape">
            <summary>
            Identifies whether PrstGomShape shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveDml">
            <summary>
            Identifies whether Dml shape converted to a picture
            </summary>
        </member>
        <member name="P:Spire.Xls.SaveShapeTypeOption.SaveAll">
            <summary>
            Identifies whether All shape converted to a picture
            </summary>
        </member>
        <member name="T:Spire.Xls.Workbook">
            <summary>
            Represents a workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.SprBpcmUuRG9jLkRvY3Vt(System.Object,System.Object)">
            <summary>
            Set internal license information(office viewer).
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
        </member>
        <member name="M:Spire.Xls.Workbook.#ctor">
            <summary>
            Create a new instance of workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Worksheets">
            <summary>
            Returns a Sheets collection that represents all the worksheets in the specified workbook. Read-only Sheets object.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.NameRanges">
             <summary>
             Gets Names collection that represents all the names in the specified
             workbook.
             <example>The following code snippet illustrates how to get names:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get names</para>
                 <para>INameRanges names = workbook.NameRanges;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CheckComptiliblity">
            <summary>
            Indicates whether check comptiliblity when saving workbook.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Spire.Xls.Workbook.DataConns">
            <summary>
            Gets the collection of data connections associated with the workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CultureInfo">
            <summary>
            Gets or sets the culture information used for formatting and parsing.
            This setting is equivalent to setting the editing language of Excel.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ExternalLinks">
            <summary>
            Gets the collection of external links in the workbook.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.GetSafeSheetName(System.String)">
            <summary>
            Returns a safe sheet name by replacing invalid characters with a specified replacement character.
            </summary>
            <param name="inputName">The input sheet name to be sanitized.</param>
            <param name="replacement">The character to replace invalid characters with (default is a space).</param>
            <returns>A safe sheet name with invalid characters replaced.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetSafeSheetName(System.String,System.Char)">
            <summary>
            Safely converts the input worksheet name by replacing restricted characters and truncating if necessary.
            </summary>
            <param name="inputName">The original worksheet name to be sanitized.</param>
            <param name="replaceChar">The character to replace restricted characters with.</param>
            <returns>A sanitized worksheet name that is safe to use in Excel.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the inputName is null or empty.</exception>
        </member>
        <member name="P:Spire.Xls.Workbook.ActiveSheet">
            <summary>
            Returns an object that represents the active sheet (the sheet 
            on top) in the active workbook or in the specified window or 
            workbook. Returns Nothing if no sheet is active. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Allow3DRangesInDataValidation">
            <summary>
            Indicates whether to allow usage of 3D ranges in DataValidation
            list property (MS Excel doesn't allow).
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ActiveSheetIndex">
            <summary>
            Gets or sets index of the active worksheet.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.AddInFunctions">
            <summary>
            Returns collection of add-in functions. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CalculationMode">
            <summary>
            Get or set calculation mode.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.DataSorter">
            <summary>
            Gets Data sorter to sort the data..
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.MaxColumnCount">
            <summary>
            Returns maximum column count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.MaxRowCount">
            <summary>
            Returns maximum row count for each worksheet in this workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CodeName">
            <summary>
            Name which used by macros to access to workbook items.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Colors">
             <summary>
             Returns colors in the palette for the workbook. The palette has 56 entries, each represented by an RGB value. Read/write Object.
             <example>The following code illustrates how to access the default colors of excel color palette:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get colors</para>
                 <para>System.Drawing.Color[] colors = workbook.Colors;</para>
                         
                 <para>//Get color</para>
                 <para>System.Drawing.Color color = colors[2];</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ConverterSetting">
            <summary>
            Gets or sets the converter settings for the Excel workbook.
            </summary>
            <returns>The converter settings for the Excel workbook.</returns>
        </member>
        <member name="P:Spire.Xls.Workbook.Date1904">
            <summary>
            True if the workbook uses the 1904 date system. Read/write Boolean.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.MaxRowsOfSharedFormula">
            <summary>
            Gets or sets the maximum number of rows for shared formulas in the workbook.
            </summary>
            <value>
            The maximum number of rows for shared formulas.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the value is less than 0 or greater than or equal to the maximum row count of the workbook.
            </exception>
        </member>
        <member name="P:Spire.Xls.Workbook.DefaultFontName">
             <summary>
             Returns or sets the name of the default font.
             <example>The following code illustrates how to set the standard font for the workbook:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set standard font</para>
                 <para>workbook.DefaultFontName = "Arial";</para>
                 
                 <para>//Set standard font size</para>
                 <para>workbook.DefaultFontSize = 18;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.DefaultFontSize">
             <summary>
             Returns or sets the default font size.
             <example>The following code illustrates how to set the standard font size for the workbook:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>worksheet["B2"].Text = "Text";</para>
                         
                 <para>//Set standard font</para>
                 <para>workbook.DefaultFontName = "Arial";</para>
                 
                 <para>//Set standard font size</para>
                 <para>workbook.DefaultFontSize = 18;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.AddCustomFont(Spire.Xls.CustomFontData)">
            <summary>
            Adds a custom font to the PDF document.
            </summary>
            <param name="data">The custom font data to add.</param>
            <returns>The same custom font data that was added.</returns>
        </member>
        <member name="P:Spire.Xls.Workbook.CustomFontFilePaths">
            <summary>
            Returns or sets the custom path of font files.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.GetCustomFontParsedResult">
            <summary>
            Get result that parse the custom path of font files 
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CustomFontFileDirectory">
            <summary>
            Sets the custom directory of font files.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.SetGlobalCustomFontsFolders(System.String[])">
            <summary>
            Sets the path to the folder where the global custom font is located.
            </summary>
            <param name="fontPath">the folder path.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.ClearFontCache">
            <summary>
            Clear used fonts in cache.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.DisableMacrosStart">
            <summary>
            Allows users to disable load of macros from document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.FileName">
            <summary>
            Gets file name.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.HasMacros">
            <summary>
            Indicates whether contains VBA macros.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsCellProtection">
            <summary>
            Indicates whether cells are protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsRightToLeft">
            <summary>
            Indicates whether worksheet is displayed right to left.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsSaved">
            <summary>
            Indicates whether workbook changes have been saved. 
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsWindowProtection">
            <summary>
            Indicates window is protected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.MarkerDesigner">
            <summary>
            Gets the MarkerDesigner instance.
            </summary>
            <returns>The MarkerDesigner instance.</returns>
        </member>
        <member name="P:Spire.Xls.Workbook.MaxDigitWidth">
            <summary>
            Gets the maximum digit width in the Excel workbook.
            </summary>
            <returns>The maximum digit width as an integer.</returns>
        </member>
        <member name="P:Spire.Xls.Workbook.OpenPassword">
            <summary>
            Returns or sets password to encrypt document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.WriteProtection">
            <summary>
            Returns options of the workbook write protection.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsVScrollBarVisible">
             <summary>
             Returns or sets whether show vertical scroll bar.
             <example>This sample shows how to hide vertical scroll bar:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
            
                 <para>//Hide vertical scroll bar</para>
                 <para>workbook.IsVScrollBarVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsVScrollBarVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsHScrollBarVisible">
             <summary>
             Returns or sets whether show horizontal scroll bar.
             <example>This sample shows how to hide horizontal scroll bar:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
            
                 <para>//Hide horizontal scroll bar</para>
                 <para>workbook.IsHScrollBarVisible = false;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("IsHScrollBarVisible.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.SheetTabBarWidth">
            <summary>
            Returns or sets the width of worksheet tab bar. 1/1000 of window width.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.OptimizeImport">
            <summary>
            Indicates whether to optimize Import data. This option will
            take effect only on Import methods that are available with the worksheet
            WARNING: Setting this property to True can decrease memory significantly,
            but will increase the performance of data import .
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.PivotCaches">
            <summary>
            Returns pivot caches collection. Read-only.
            <example>The following code snippet illustrates how to get pivot caches:
            <code>
                <para>//Create worksheet</para>
                <para>Workbook workbook = new Workbook();</para>
                <para>workbook.LoadFromFile("Sample.xlsx");</para>
                <para>Worksheet worksheet = workbook.Worksheets[0];</para>
                
                <para>//Gets pivot caches collection</para>
                <para>IPivotCaches pivotCaches = workbook.PivotCaches;</para>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.PrintDocument">
            <summary>
            Gets the PrintDocument
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ReadOnly">
            <summary>
            Indicates whether the workbook has been opened as Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.SelectedTab">
            <summary>
            Gets or sets tab index of selected.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ShowTabs">
            <summary>
            Get or sets a value whether the Workbook tabs are displayed.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Styles">
             <summary>
             Returns a Styles collection that represents all the styles in the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the Styles:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set styles</para>
                 <para>IStyles styles = workbook.Styles;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.UseStorageMode">
            <summary>
            User Compound storage mode
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Version">
            <summary>
            Gets or sets the version of the Excel workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.ProhibitDtd">
            <summary>
            prohibt dtd processing switch
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.IsHideWindow">
            <summary>
            Hide window
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Charts">
            <summary>
            Returns a Sheets collection that represents all the chart sheets in the specified workbook. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.Chartsheets">
            <summary>
            Gets a list of chartsheets in the Excel workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CustomDocumentProperties">
             <summary>
             Returns collection that represents all the custom document properties
             for the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the custom document properties:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get the document properties</para>
                 <para>ICustomDocumentProperties documentProperties = workbook.CustomDocumentProperties;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.CustomTableStyles">
            <summary>
            Gets the custom table styles defined in the Excel workbook.
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.DocumentProperties">
             <summary>
             Returns a BuiltInDocumentProperties collection that represents all the built-in document properties for the specified workbook. Read-only.
             <example>The following code snippet illustrates how to get the built in document properties:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Get the built in document properties</para>
                 <para>IBuiltInDocumentProperties builtInDocumentProperties = workbook.DocumentProperties;</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String)">
            <summary>
            Loads a file and imports its data. 
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,System.Boolean)">
            <summary>
            Loads a file and imports its data. 
            </summary>
            <param name="fileName">File name</param>
            <param name="preserveMode">Preserve mode</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,Spire.Xls.ExcelVersion)">
            <summary>
            Loads a file and imports its data. 
            </summary>
            <param name="fileName">File name</param>
            <param name="version">Excel version</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,System.String)">
            <summary>
            Loads text files stream with user defined separator. 
            </summary>
            <param name="fileName">File name</param>
            <param name="separator">Delimiter of text file. </param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Loads text files with user defined separator.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Delimiter of text file.</param>
            <param name="row">Start row.</param>
            <param name="column">Start column.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,System.String,System.Int32,System.Int32,Spire.Xls.ExcelVersion)">
            <summary>
            Loads text files with user defined separator.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Delimiter of text file.</param>
            <param name="row">Start row.</param>
            <param name="column">Start column.</param>
            <param name="version">workbook version</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromFile(System.String,System.String,System.Int32,System.Int32,Spire.Xls.ExcelVersion,System.Text.Encoding)">
            <summary>
            Loads text files with user defined separator.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Delimiter of text file.</param>
            <param name="row">Start row.</param>
            <param name="column">Start column.</param>
            <param name="version">workbook version</param>
            <param name="encoding">Text Encoding</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromStream(System.IO.Stream)">
            <summary>
            Load workbook from the stream.
            </summary>
            <param name="stream">Stream contains data.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Load workbook from the stream.
            </summary>
            <param name="stream">Stream contains data.</param>
            <param name="loadStyles">Indicates whether loads styles.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromStream(System.IO.Stream,Spire.Xls.ExcelVersion)">
            <summary>
            Load workbook from the stream.
            </summary>
            <param name="stream">Stream contains data</param>
            <param name="version">Excel version</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromStream(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            Loads text files stream with user defined separator.max row 60000.
            </summary>
            <param name="stream">File stream.</param>
            <param name="separator">Delimiter of text file.</param>
            <param name="row">Start row.</param>
            <param name="column">Start column.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromStream(System.IO.Stream,System.String,System.Int32,System.Int32,Spire.Xls.ExcelVersion)">
            <summary>
            Loads text files stream with user defined separator. Version2007 support 60000+ row 
            </summary>
            <param name="stream">File stream.</param>
            <param name="separator">Delimiter of text file.</param>
            <param name="row">Start row.</param>
            <param name="column">Start column.</param>
            <param name="version">Excel version.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromXml(System.String)">
            <summary>
            Loads a xml file and imports its data. 
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromXml(System.IO.Stream)">
            <summary>
            Loads a xml file and imports its data. 
            </summary>
            <param name="stream">Stream contains data.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromHtml(System.String)">
            <summary>
            Loads a html file and imports its data. 
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromHtml(System.IO.Stream)">
            <summary>
            Loads a html file and imports its data. 
            </summary>
            <param name="stream">Stream contains data.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromMHtml(System.String)">
            <summary>
            Loads a Mhtml file and imports its data. 
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadFromMHtml(System.IO.Stream)">
            <summary>
            Loads a Mhtml file and imports its data. 
            </summary>
            <param name="stream">Stream contains data.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadTemplateFromFile(System.String)">
            <summary>
            Load workbook from the excel template.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:Spire.Xls.Workbook.LoadTemplateFromFile(System.String,System.Boolean)">
            <summary>
            Load workbook from the excel template.
            </summary>
            <param name="fileName">File name</param>
            <param name="loadStyles">Indicates whehter load styles.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToMarkdown(System.String)">
            <summary>
            Saves the workbook to markdown
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToHtml(System.String)">
            <summary>
            Saves the workbook to html
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToHtml(System.String,System.Boolean)">
            <summary>
            Saves the workbook to html
            </summary>
            <param name="fileName">File name.</param>
            <param name="skipHideSheet">Whether skip hidden sheet.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String)">
            <summary>
            Saves changes to the workbook in a different file
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,Spire.Xls.FileFormat)">
            <summary>
            Saves changes to the workbook in a different file
            </summary>
            <param name="fileName">File name</param>
            <param name="fileFormat">File format</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,System.String,System.Boolean)">
             <summary>
             Saves changes to the workbook in a different file.
             <example>The following code illustrates how to save the active worksheet in a different file with separator:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Result.csv" , ",", true);</para>
             </code>
             </example>
             </summary>
             <param name="fileName">File name.</param>
             <param name="separator">Current separator.</param>
             <param name="addQuotationsForStringValue">Add double Quotation marks for string value.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,System.String)">
             <summary>
             Saves changes to the workbook in a different file.
             <example>The following code illustrates how to save the active worksheet in a different file with separator:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Result.csv" , ",");</para>
             </code>
             </example>
             </summary>
             <param name="fileName">File name.</param>
             <param name="separator">Current separator.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,Spire.Xls.FileFormat,System.Boolean)">
            <summary>
            Saves changes to the workbook in a different file
            </summary>
            <param name="fileName">File name</param>
            <param name="fileFormat">File format</param>
            <param name="retainHiddenDataToCSV">Retain hidden data when save to csv.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,Spire.Xls.TextSaveOptions)">
            <summary>
            Saves changes to the workbook in a different file
            </summary>
            <param name="fileName">File name</param>
            <param name="textSaveOptions">Text save options.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToFile(System.String,Spire.Xls.ExcelVersion)">
            <summary>
            Saves changes to the workbook in a different file
            </summary>
            <param name="fileName">File name</param>
            <param name="version">Excel version</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Dispose">
            <summary>
            Disposes of the Excel workbook and suppresses finalization.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.AddPivotTableStyle(Spire.Xls.Core.Spreadsheet.PivotTables.PivotTableStyle)">
            <summary>
            Adds a pivot table style to the workbook.
            </summary>
            <param name="pts">The pivot table style to add.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.CaculateFormulaValue(System.String)">
            <summary>
            Computes the string formula
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CalculateFormulaValue(System.String)">
            <summary>
            Computes the string formula
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CalculateAllValue">
            <summary>
            Caculate all formula for the workbook
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.ChangePaletteColor(System.Drawing.Color,System.Int32)">
             <summary>
             Changes the palette for the spreadsheet in the specified index. 
             <example>The following code snippet illustrates how to set palette color:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set palette color</para>
                 <para>workbook.ChangePaletteColor(System.Drawing.Color.Red , 10);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = workbook.Colors[10];</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="color">Color structure</param>
             <param name="index">Palette index,Value should be from 0 to 55</param>
        </member>
        <member name="M:Spire.Xls.Workbook.ColumnWidthToPixels(System.Double)">
            <summary>
            onverts column width in characters into column width in pixels.
            </summary>
            <param name="columnWidth">Column width in characters.</param>
            <returns>Column width in pixels.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.ContainsFont(Spire.Xls.ExcelFont)">
            <summary>
            Indicates whether the workbook contains specified font.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CopyToClipboard">
            <summary>
            Copies whole workbook to the clipboard.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.CopyToClipboard(Spire.Xls.Worksheet)">
            <summary>
            Copies the selected worksheet to clipboard.
            </summary>
            <param name="worksheet"></param>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateEmptySheet">
            <summary>
            Create a new worksheet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateEmptySheet(System.String)">
            <summary>
             Create a new worksheet.
            </summary>
            <param name="name">Sheet name.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateEmptySheets(System.Int32)">
            <summary>
            Create workbook with specified number of worksheets.
            </summary>
            <param name="sheetCount"></param>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateEmptySheets(System.String[])">
            <summary>
            Create workbook with specified names of worksheets.
            </summary>
            <param name="sheetNames"></param>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateFont">
             <summary>
             Creates a font object and add it to the workbook.
             <example>The following code illustrates how to create IFont object:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Set text</para>
                 <para>IRichTextString richText = worksheet["B2"].RichText;</para>
                 
                 <para>//Create font</para>
                 <para>IFont font = workbook.CreateFont();</para>
                 
                 <para>//Set color</para>
                 <para>font.Color = Color.Red;</para>
                 
                 <para>//Set text</para>
                 <para>richText.Text = "Sample";</para>
                 
                 <para>//Set font</para>
                 <para>richText.SetFont(0, 5, font);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CreateFont(System.Drawing.Font)">
            <summary>
            Creates a font object and add it to the workbook.
            </summary>
            <param name="font">Font to add</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.CreatePivotStyle">
            <summary>
            Creates a new pivot style in the spreadsheet.
            </summary>
            <returns>The newly created pivot style.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindAllBool(System.Boolean)">
             <summary>
             Finds the cell with the input bool.
             <example>This sample shows how to find all cells with specified bool value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified bool value</para>
                 <para>CellRange[] result = workbook.FindAllBool(true);</para>
             </code>
             </example>
             </summary>
             <param name="boolValue">Bool value to search for</param>
             <returns>Found ranges</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindAllNumber(System.Double,System.Boolean)">
             <summary>
             Finds the cell with the input double.
             <example>This sample shows how to find all cells with specified doulbe value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified double value</para>
                 <para>CellRange[] result = workbook.FindAllNumber(100.32 , false);</para>
             </code>
             </example>
             </summary>
             <param name="doubleValue">Double value to search for.</param>
             <param name="formulaValue">Indicates whether includes formula value to search for.</param>
             <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindAllString(System.String,System.Boolean,System.Boolean)">
             <summary>
             Finds the cell with the input string.
             <example>This sample shows how to find all cells with specified string value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified string value</para>
                 <para>string value = "value";</para>
                 <para>CellRange[] result = workbook.FindAllString(value , false , false);</para>
             </code>
             </example>
             </summary>
             <param name="stringValue">String value to search for</param>
             <param name="formula">Indicates whether includes formula to search for.</param>
             <param name="formulaValue">Indicates whether includes formula value to search for.</param>
             <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindAllDateTime(System.DateTime)">
             <summary>
             Finds the cell with the input datetime.
             <example>This sample shows how to find all cells with specified DateTime value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified DateTime value</para>
                 <para>CellRange[] result = workbook.FindAllDateTime(DateTime.Now);</para>
             </code>
             </example>
             </summary>
             <param name="dateTimeValue">Datetime value to search for.</param>
             <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindAllTimeSpan(System.TimeSpan)">
             <summary>
             Finds the cell with the input time span.
             <example>This sample shows how to find all cells with specified TimeSpan value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cells with specified TimeSpan value</para>
                 <para>TimeSpan value = new TimeSpan(2, 30, 30);</para>
                 <para>CellRange[] result = workbook.FindAllTimeSpan(value);</para>
             </code>
             </example>
             </summary>
             <param name="timeSpanValue"></param>
             <returns>Found ranges.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindBool(System.Boolean)">
             <summary>
             Finds the cell with the input bool.
             <example>This sample shows how to find the first cell with specified bool value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified bool value</para>
                 <para>IXLSRange result = workbook.FindBool(true);</para>
             </code>
             </example>
             </summary>
             <param name="boolValue">Bool value to search for.</param>
             <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindNumber(System.Double,System.Boolean)">
             <summary>
             Finds the cell with the input number.
             <example>This sample shows how to find the first cell with specified double value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified double value</para>
                 <para>double value = 9.00;</para>
                 <para>IXLSRange result = workbook.FindNumber(value, false);</para>
             </code>
             </example>
             </summary>
             <param name="doubleValue">Double value to search for.</param>
             <param name="formulaValue">Indicates whether includes formula value to search for.</param>
             <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindString(System.String,System.Boolean,System.Boolean)">
             <summary>
             Finds the cell with the input string.
             <example>This sample shows how to find the first cell with specified string value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified string value</para>
                 <para>string value = "value";</para>
                 <para>IXLSRange result = workbook.FindString(value, false, false);</para>
             </code>
             </example>
             </summary>
             <param name="stringValue">String value to search for.</param>
             <param name="formula">Indicates whether includes formula to search for.</param>
             <param name="formulaValue">Indicates whether includes formula value to search for.</param>
             <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindDateTime(System.DateTime)">
             <summary>
             Finds the cell with the input datetime.
             <example>This sample shows how to find the first cell with specified DataTime value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified DataTime value</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>IXLSRange result = workbook.FindDateTime(dateTime);</para>
             </code>
             </example>
             </summary>
             <param name="dateTimeValue">Datetime value to search for.</param>
             <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.FindTimeSpan(System.TimeSpan)">
             <summary>
             Finds the cell with the input time span.
             <example>This sample shows how to find the first cell with specified TimeSpan value:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Find cell with specified TimeSpan value</para>
                 <para>TimeSpan timeSpan = new TimeSpan(2, 30, 30);</para>
                 <para>IXLSRange result = workbook.FindTimeSpan(timeSpan);</para>
             </code>
             </example>
             </summary>
             <param name="timeSpanValue">Time span value to search for.</param>
             <returns>Found range.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetMatchingColor(System.Drawing.Color)">
             <summary>
             Find best matching Color in workbook palette. 
             <example>The following code illustrates how to get the indexed color from ExcelColors for the given color from Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>ExcelColors color = workbook.GetMatchingColor(System.Drawing.Color.Red);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.KnownColor = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="color">Color to search for.</param>
             <returns>Workbook palette color.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetMatchingColor(System.Int32,System.Int32,System.Int32)">
             <summary>
             Find best matching Color in workbook palette.
             <example>The following code illustrates how to get the indexed color from ExcelColors for the given color from Color structure:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>ExcelColors color = workbook.GetMatchingColor(255, 0, 0);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.KnownColor = color;</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="r">Red color.</param>
             <param name="g">Green color.</param>
             <param name="b">Blue color.</param>
             <returns>Workbook palette color.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetPaletteColor(Spire.Xls.ExcelColors)">
             <summary>
             Gets excel color from workbook palette.
             <example>The following code illustrates how to get the RGB color value for the specified color from ExcelColors enumeration:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get color</para>
                 <para>System.Drawing.Color color = workbook.GetPaletteColor(ExcelColors.Red);</para>
                 
                 <para>//Set color</para>
                 <para>worksheet["B2"].Style.Color = workbook.Colors[10];</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="color">Index from palette array.</param>
             <returns>RGB Color.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetSplitPageInfo">
            <summary>
            Retrieves the split page information for the Excel workbook based on the converter settings.
            </summary>
            <returns>A list of dictionaries, where each dictionary contains a sheet`s page column and row information.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetSplitPageTable(Spire.Xls.Workbook)">
            <summary>
            Retrieves a DataTable containing information about the split pages in a workbook.
            </summary>
            <param name="wb">The Workbook object containing the pages to split.</param>
            <returns>A DataTable with columns for SheetName, PageOfSheet, StartCol, EndCol, StartRow, EndRow, and PageNum.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.InitCalcEngine">
            <summary>
            Initilize Calc engine
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.IsPasswordProtected(System.String)">
            <summary>
            check file is password protect
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.IsPasswordProtected(System.IO.Stream)">
            <summary>
            Determines if a workbook is password-protected.
            </summary>
            <param name="stream">The stream containing the workbook.</param>
            <returns>True if the workbook is password-protected, false otherwise.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.PasteFromClipboard">
            <summary>
            Copies workbook and all its worksheets from the clipboard.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.PixelsToColumnWidth(System.Double)">
            <summary>
            Converts column width in pixels into column width in characters.
            </summary>
            <param name="pixels">Column width in pixels.</param>
            <returns>Column width in characters.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.Protect(System.String)">
            <summary>
            protect file also protect workbook window and structure.
            </summary>
            <param name="passwordToOpen">password to open file.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Protect(System.String,System.Boolean,System.Boolean)">
            <summary>
            protect file,also Indicates whether protect workbook window and structure or not
            </summary>
            <param name="passwordToOpen">password to open file.</param>
            <param name="bIsProtectWindow">Indicates if protect workbook window.</param>
            <param name="bIsProtectContent">Indicates if protect workbook content.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.ProtectWorkbook(System.Boolean,System.Boolean,System.String)">
            <summary>
            Sets protection for workbook.
            </summary>
            <param name="bIsProtectWindow">Indicates if protect workbook window.</param>
            <param name="bIsProtectContent">Indicates if protect workbook content.</param>
            <param name="password">password</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.Data.DataColumn,System.Boolean)">
             <summary>
             Replaces cell's value from data column values.
             <example>The following code snippet illustrates how to replace the string value with data column:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by data column</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>System.Data.DataColumn dataColumn = table.Columns[0];</para>
                 <para>workbook.Replace(oldValue, dataColumn, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValues">New data.</param>
             <param name="includeColumnName">Indicates whether includes column name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Replaces cell's value from data table values.
             <example>The following code snippet illustrates how to replace the string value with data table:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by data table</para>
                 <para>string oldValue = "Find";</para>
                 <para>System.Data.DataTable table = new System.Data.DataTable();</para>
                 <para>table.Columns.Add("Dosage", typeof(int));</para>
                 <para>table.Rows.Add(1);</para>
                 <para>workbook.Replace(oldValue, table, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValues">New data.</param>
             <param name="includeColumnName">Indicates whether includes column name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.DateTime)">
             <summary>
             Replaces cell's value by specified value.
             <example>The following code illustrates how to replace the string value with datetime:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by dateTime</para>
                 <para>string oldValue = "Find";</para>
                 <para>DateTime dateTime = DateTime.Now;</para>
                 <para>workbook.Replace(oldValue, dateTime);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValue">New value</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.Double)">
             <summary>
             Replaces cell's value by specified value.
             <example>The following code snippet illustrates how to replace the string with double:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by double</para>
                 <para>string oldValue = "Ten";</para>
                 <para>workbook.Replace(oldValue, 10.0);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValue">New value.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.Double[],System.Boolean)">
             <summary>
             Replaces cell's value from array.
             <example>The following code snippet illustrates how to replace the string with array of double values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of double values</para>
                 <para>string oldValue = "Find";</para>
                 <para>double[] newValues = { 1.0, 2.0 };</para>
                 <para>workbook.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValues">New values.</param>
             <param name="isVertical">Indicates whether new values should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.Int32[],System.Boolean)">
             <summary>
             Replaces cell's value from array.
             <example>The following code snippet illustrates how to replace the string with array of int values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of int values</para>
                 <para>string oldValue = "Find";</para>
                 <para>int[] newValues = { 1, 2 };</para>
                 <para>workbook.Replace(oldValue, newValues, true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValues">New values.</param>
             <param name="isVertical">Indicates whether new values should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.String)">
             <summary>
             Replaces cell's value by specified value.
             <example>The following code snippet illustrates how to replace the string with another string:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by newValue</para>
                 <para>string oldValue = "Find";</para>
                 <para>string newValue = "NewValue";</para>
                 <para>workbook.Replace(oldValue, newValue);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValue">New value</param>
        </member>
        <member name="M:Spire.Xls.Workbook.Replace(System.String,System.String[],System.Boolean)">
             <summary>
             Replaces cell's value from array.
             <example>The following code snippet illustrates how to replace the string with array of string values:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Replace the oldValue by array of string values</para>
                 <para>string oldValue = "Find";</para>
                 <para>string[] newValues = { "X values", "Y values" };</para>
                 <para>workbook.Replace(oldValue, newValues , true);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("Replace.xlsx");</para>
             </code>
             </example>
             </summary>
             <param name="oldValue">Value to replace.</param>
             <param name="newValues">New values.</param>
             <param name="isVertical">Indicates whether new values should be inserted vertically.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.ResetPalette">
             <summary>
             Resets the color palette to the default colors. 
             <example>The following code snippets illustrates how to reset the palette:
             <code>
                 <para>//Create worksheet</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>Worksheet worksheet = workbook.Worksheets[0];</para>
            
                 <para>//Get colors</para>
                 <para>System.Drawing.Color[] colors = workbook.Colors;</para>
                         
                 <para>//Check color</para>
                 <para>Console.WriteLine(colors[2].Name);</para>
                 
                 <para>//Set color</para>
                 <para>colors[2] = System.Drawing.Color.Yellow;</para>
                 
                 <para>//Reset palette</para>
                 <para>workbook.ResetPalette();</para>
                 
                 <para>//Check color</para>
                 <para>Console.WriteLine(workbook.Colors[2].Name);</para>
                 
                 <para>//Save to file</para>
                 <para>workbook.SaveToFile("CellFormats.xlsx");</para>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.Save">
            <summary>
            Saves changes to the specified workbook
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveAsImage(System.Single,System.Single)">
            <summary>
            Saves the Excel workbook as images.
            </summary>
            <param name="dpiX">The horizontal dots per inch.</param>
            <param name="dpiY">The vertical dots per inch.</param>
            <returns>An array of images representing the saved Excel workbook.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveAsImage(System.Int32,System.Single,System.Single)">
            <summary>
            Save workbook to image.
            </summary>
            <param name="sheetIndex">sheet Index</param>
            <param name="dpiX">Dpi X</param>
            <param name="dpiY">Dpi Y</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveAsXml(System.String)">
            <summary>
            Save workbook to an XML data file. 
            </summary>
            <param name="fileName">XML file name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveAsXml(System.IO.Stream)">
            <summary>
            Save workbook as XML format to stream. 
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsEmfImage(Spire.Xls.Worksheet)">
            <summary>
            Save chart to vector images.
            </summary>
            <param name="worksheet">worksheet instance</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsEmfImage(Spire.Xls.Worksheet,System.Int32)">
            <summary>
            Save chart to vector image.
            </summary>
            <param name="worksheet">work sheet</param>
            <param name="chartIndex">chart index</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsEmfImage(Spire.Xls.Worksheet,System.Int32,System.IO.Stream)">
            <summary>
            Save chart to vector image.
            </summary>
            <param name="worksheet">work sheet</param>
            <param name="chartIndex">chart index</param>
            <param name="emfStream">output stream</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsImage(Spire.Xls.ChartSheet)">
            <summary>
            Save chart to image.
            </summary>
            <param name="chartSheet">chart sheet</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsImage(Spire.Xls.Worksheet)">
            <summary>
            Save chart to images.
            </summary>
            <param name="worksheet">worksheet instance</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveChartAsImage(Spire.Xls.Worksheet,System.Int32)">
            <summary>
            Save chart to image.
            </summary>
            <param name="worksheet">work sheet</param>
            <param name="chartIndex">chart index</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveAsTemplate(System.String)">
            <summary>
            Save workbook as template to file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToStream(System.IO.Stream)">
            <summary>
            Save workbook the stream
            </summary>
            <param name="Stream">Stream object</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToStream(System.IO.Stream,Spire.Xls.FileFormat)">
            <summary>
            Save workbook to stream.
            </summary>
            <param name="stream"></param>
            <param name="fileFormat"></param>
        </member>
        <member name="M:Spire.Xls.Workbook.SaveToStream(System.IO.Stream,System.String)">
             <summary>
             Save workbook the stream.
             <example>The following code illustrates how to saves the active worksheet as stream with separator:
             <code>
                 <para>//Create workbook</para>
                 <para>Workbook workbook = new Workbook();</para>
                 <para>workbook.LoadFromFile("Sample.xlsx");</para>
            
                 <para>//Save to stream</para>
                 <para>Stream stream = new MemoryStream();</para>
                 <para>workbook.SaveToFile(stream , ",");</para>
             </code>
             </example>
             </summary>
             <param name="stream">Stream object.</param>
             <param name="separator">Separator.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SetMaxDigitWidth(System.Int32)">
            <summary>
            Sets the maximum digit width for the Excel workbook.
            </summary>
            <param name="w">The maximum digit width to set.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SetOleSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the size of the visible range of cells when this workbook is displyed as an embedded obect in another document;
            </summary>
            <param name="firstRow">the visible range's first row index</param>
            <param name="firstColumn">the visible range's first column index</param>
            <param name="lastRow">the visible range's last row index</param>
            <param name="lastColumn">the visible range's last column index</param>
        </member>
        <member name="M:Spire.Xls.Workbook.SetWriteProtectionPassword(System.String)">
            <summary>
            Sets write protection password.
            </summary>
            <param name="password">Password to set</param> 
        </member>
        <member name="M:Spire.Xls.Workbook.UnProtect">
            <summary>
            unprotect file
            also upprotect workbook window and structure
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.UnProtect(System.String)">
            <summary>
            unprotect file
            also upprotect workbook window and structure
            </summary>
            <param name="bookWindowAndStructurePassword">password for protect workbook window and structure</param>
        </member>
        <member name="M:Spire.Xls.Workbook.UnProtectWorkbook(System.String)">
            <summary>
            unprotect workbook window and structure
            </summary>
            <param name="password">password</param>
        </member>
        <member name="M:Spire.Xls.Workbook.GetChartSheetByName(System.String)">
            <summary>
            Retrieves a ChartSheet by its name.
            </summary>
            <param name="name">The name of the ChartSheet to retrieve.</param>
            <returns>The ChartSheet if found, otherwise null.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetOleSize">
            <summary>
            get the size of the visible range of cells when this workbook is displyed as an embedded obect in another document;
            </summary>
            <returns>if there does not set the size ,return null</returns>
        </member>
        <member name="P:Spire.Xls.Workbook.HasTrackedChanges">
            <summary>
            Indicates whether the workbook has any tracked changes
            </summary>
        </member>
        <member name="P:Spire.Xls.Workbook.TrackedChanges">
            <summary>
            Turn revision mode on or off.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.RejectAllTrackedChanges">
            <summary>
            Reject all tracked changes in the workbook. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.AcceptAllTrackedChanges">
            <summary>
            Accept all tracked changes in the workbook. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.SetDigitalSignature(Spire.Xls.Core.MergeSpreadsheet.Interfaces.IDigitalSignatures)">
            <summary>
            Set digital signature to file.
            </summary>
            <param name="digitalSignatures"></param>
            <remarks>Only support adding digital signature to OOXML file.</remarks>
        </member>
        <member name="M:Spire.Xls.Workbook.AddDigitalSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.DateTime)">
            <summary>
            Add a DigitalSignature.
            </summary>
            <param name="certificate">Certificate object that was used to sign</param>
            <param name="comments">Signature Comments</param>
            <param name="signTime">Sign Time</param>
            <returns>Collection of DigitalSignature</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.GetDigitalSignatures">
            <summary>
            Get collection of DigitalSignature in this file.
            </summary>    
            <returns>Collection of DigitalSignature</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.RemoveAllDigitalSignatures">
            <summary>
            Remove all DigitalSignature in this file.
            </summary>    
        </member>
        <member name="P:Spire.Xls.Workbook.IsDigitallySigned">
            <summary>
            Indicates whether this spreadsheet is digitally signed.
            </summary>
        </member>
        <member name="M:Spire.Xls.Workbook.GetThemeColor(Spire.Xls.ThemeColorType)">
            <summary>
            Gets theme color.
            </summary>
            <param name="type">The theme color type.</param>
            <returns>The theme color.</returns>
        </member>
        <member name="M:Spire.Xls.Workbook.SetThemeColor(Spire.Xls.ThemeColorType,System.Drawing.Color)">
            <summary>
            Sets the theme color
            </summary>
            <param name="type">The theme color type.</param>
            <param name="color">the theme color</param>
        </member>
        <member name="M:Spire.Xls.Workbook.CopyTheme(Spire.Xls.Workbook)">
            <summary>
            Copy the theme from source workbook
            </summary>
            <param name="srcWorkbook">source workbook.</param>
        </member>
        <member name="M:Spire.Xls.Workbook.CopyThemeColor(Spire.Xls.Workbook)">
            <summary>
            Copy the theme color from source workbook
            </summary>
            <param name="srcWorkbook">source workbook.</param>
        </member>
        <member name="T:Spire.Xls.IConditionValue">
            <summary>
            Represents single condition value for iconset, databar, colorscale conditions.
            </summary>
        </member>
        <member name="P:Spire.Xls.IConditionValue.Type">
            <summary>
            Returns one of the constants of the XlConditionValueTypes enumeration,
            which specifies how the threshold values for a data bar, color scale,
            or icon set conditional format are determined. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.IConditionValue.Value">
            <summary>
            Returns or sets the shortest bar or longest bar threshold value for a data
            bar conditional format.
            </summary>
        </member>
        <member name="P:Spire.Xls.IConditionValue.IsGTE">
            <summary>
            Returns or sets whether this threshold value uses the greater than or equal to operator.
            false indicate 'greater than' is used instead of 'greater than or equal to'.
            </summary>
        </member>
        <member name="T:Spire.Xls.XlsConditionValue">
            <summary>
            Represents implementation of single condition value for iconset, databar, colorscale conditions.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsConditionValue.IsGTE">
            <summary>
            Returns or sets whether this threshold value uses the greater than or equal to operator.
            false indicate 'greater than' is used instead of 'greater than or equal to'.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsConditionValue.Type">
            <summary>
            Gets/sets one of the constants of the ConditionValueTypes enumeration,
            which specifies how the threshold values for a data bar, color scale,
            or icon set conditional format are determined.
            </summary>
        </member>
        <member name="P:Spire.Xls.XlsConditionValue.Value">
            <summary>
            Returns or sets the shortest bar or longest bar threshold value for a data
            bar conditional format.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.op_Equality(Spire.Xls.XlsConditionValue,Spire.Xls.XlsConditionValue)">
            <summary>
            Equality comparison.
            </summary>
            <param name="first">The first condition to compare.</param>
            <param name="second">The second condition to compare.</param>
            <returns>true if conditions are equal.</returns>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.op_Inequality(Spire.Xls.XlsConditionValue,Spire.Xls.XlsConditionValue)">
            <summary>
            Checks whether conditions are not equal.
            </summary>
            <param name="first">The first condition to compare.</param>
            <param name="second">The second condition to compare.</param>
            <returns>true if conditions are not equal.</returns>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.#ctor(Spire.Xls.Core.Spreadsheet.XlsConditionalFormat,Spire.Xls.ConditionValueType,System.Object)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="cf">Condition Forma.</param>
            <param name="type">Condition type.</param>
            <param name="value">Condition value.</param>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.#ctor(Spire.Xls.Core.Spreadsheet.XlsConditionalFormat,Spire.Xls.ConditionValueType,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the XlsConditionValue class with the specified conditional format, condition value type, value, and a flag indicating if the comparison is greater than or equal.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.Clone">
            <summary>
            Creates copy of the condition.
            </summary>
            <returns>Copy of the current object.</returns>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Spire.Xls.XlsConditionValue.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Spire.Xls.ConditionValue">
            <summary>
            Represents single condition value for iconset, databar, colorscale conditions.
            </summary>
        </member>
        <member name="F:Spire.Xls.ConditionValue.m_condtionValue">
            <summary>
            Represents the condition value associated with the object.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionValue.Type">
            <summary>
            specifies how the threshold values for a data bar, color scale,
            or icon set conditional format are determined
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionValue.IsGTE">
            <summary>
            Gets or sets a value indicating whether the condition is greater than or equal to a specified value.
            </summary>
        </member>
        <member name="P:Spire.Xls.ConditionValue.Value">
            <summary>
            Returns or sets the shortest bar or longest bar threshold value for a data
            bar conditional format.
            </summary>
        </member>
        <member name="T:Spire.Xls.OdsPageBackground">
            <summary>
            Represents the background settings for an ODS (OpenDocument Spreadsheet) page.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.Type">
            <summary>
            Gets the type of background. Read-only.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.Color">
            <summary>
            Gets/sets the color of background.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.ImageData">
            <summary>
            Gets/sets the image data of image background.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.ImageLink">
            <summary>
            Gets/sets the link file path of image.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.ImageType">
            <summary>
            Gets/sets the image type of image background.
            </summary>
        </member>
        <member name="P:Spire.Xls.OdsPageBackground.ImagePositonType">
            <summary>
            Gets/sets the position type of image background.
            </summary>
        </member>
        <member name="T:Spire.Xls.ShapeGlow">
            <summary>
            Represents a shape that can glow.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeGlow.SoftEdge">
            <summary>
            Gets or sets the radio of soft edge.
            </summary>
        </member>
        <member name="P:Spire.Xls.ShapeGlow.Transparency">
            <summary>
            Gets or sets the transparency of GlowEffect.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.ShapeGlow.Radius">
            <summary>
            Gets or sets the radius of GlowEffect.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="P:Spire.Xls.ShapeGlow.Color">
            <summary>
            Gets or sets the color of the cells in the glowConvert object.
            </summary>
        </member>
        <member name="M:Spire.Xls.ShapeGlow.Clone(System.Object)">
            <summary>
            Clone current Record.
            </summary>
            <param name="parent">Parent object.</param>
            <returns>Returns clone of current object.</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Dml.Builders.DmlNodePropertiesReader.ReadNonVisualProperties(Spire.Xls.Pdf.Dml.NonVisual.DmlNvPrBase,Spire.PSModel.Core.Xml.XmlDocumentReader,Spire.Xls.Pdf.Dml.ServiceLocator.IDmlServiceLocator)">
            <summary>
            20.1.2.2.25 nvCxnSpPr (Non-Visual Properties for a Connection Shape)
            20.1.2.2.26 nvGraphicFramePr (Non-Visual Properties for a Graphic Frame)
            20.1.2.2.27 nvGrpSpPr (Non-Visual Properties for a Group Shape)
            20.1.2.2.28 nvPicPr (Non-Visual Properties for a Picture)
            20.1.2.2.29 nvSpPr (Non-Visual Properties for a Shape)
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Dml.Builders.DmlNodePropertiesReader.ReadNonVisualDrawingProperties(Spire.PSModel.Core.Xml.XmlDocumentReader,Spire.Xls.Pdf.Dml.ServiceLocator.IDmlServiceLocator)">
            <summary>
            Reads 'cNvPr' Non-Visual Drawing Properties.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Dml.DmlShape.GetOffset(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Calculates position offset of the textbox content.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Dml.TextEffects.DmlTransparentEffectHelper.BlurImage(Spire.PSModel.Core.Images.Pal.BitmapPal,System.Int32)">
            <summary>
            Applies simplified blur to the image.
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.PdfConformanceLevel">
            <summary>
            Specifies the Pdf document's Conformance-level.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.None">
            <summary>
            Specifies Default / No Conformance.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A1B">
            <summary>
            This PDF/A ISO standard [ISO 19005-1:2005] is based on Adobe PDF version 1.4
            and This Level B conformance indicates minimal compliance to ensure that the 
            rendered visual appearance of a conforming file is preservable over the long term.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_X1A2001">
            <summary>
            This PDF/X-1a:2001 ISO standard [ISO 15930-1] is based on Adobe PDF version 1.3
            which uses only CMYK + Spot Color and this compliance to ensure that the 
            contents will be reliably reproduced in the repress environment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A1A">
            <summary>
            PDF/A-1a ensures the preservation of a document's logical structure and con-tent text stream in natural reading order. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A2A">
            <summary>
            PDF/A-2a standard,Only check the standard from the pdfaid:part and pdfaid:conformance node,And only check.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A2B">
            <summary>
            PDF/A-2b standard,Only check the standard from the pdfaid:part and pdfaid:conformance node,And only check.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A3A">
            <summary>
            PDF/A-3a standard,Only check the standard from the pdfaid:part and pdfaid:conformance node,And only check
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.PdfConformanceLevel.Pdf_A3B">
            <summary>
            PDF/A-3b standard,Only check the standard from the pdfaid:part and pdfaid:conformance node,And only check
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.ProcessingState">
            <summary>
            Zip archiving states
            </summary>
            <author>linwei, sunqingzhi</author>
        </member>
        <member name="F:Spire.Xls.Pdf.ProcessingState.None">
            <summary>
            Not archiving
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.ProcessingState.EntryWaiting">
            <summary>
            Waiting for an entry
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.ProcessingState.EntryStarted">
            <summary>
            Processing an entry
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.DocType">
            <summary>
            OOX file type
            </summary>
            <author>linyaohu</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Security.PdfEncryptionKeySize">
            <summary>
            Specifies length of the encryption key for encryption.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfEncryptionKeySize.Key40Bit">
            <summary>
            The key is 40 bit long.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfEncryptionKeySize.Key128Bit">
            <summary>
            The key is 128 bit long.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfEncryptionKeySize.Key256Bit">
            <summary>
            The key is 256 bit long.
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Security.PdfPermissionsFlags">
            <summary>
            Specifies the available permissions set for the signature.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.None">
            <summary>
            Not all permissions
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.Default">
            <summary>
            Default value is 2876. A common document contains all privileges
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.Print">
            <summary>
            Print the document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.EditContent">
            <summary>
            Edit content.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.CopyContent">
            <summary>
            Copy content.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.EditAnnotations">
            <summary>
            Add or modify text annotations, fill in interactive form fields.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.FillFields">
            <summary>
            Fill form fields. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.AccessibilityCopyContent">
            <summary>
            Copy accessibility content.
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.AssembleDocument">
            <summary>
            Assemble document permission. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Security.PdfPermissionsFlags.FullQualityPrint">
            <summary>
            Full quality print.
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Security.PdfSecurity">
            <summary>
            Represents the security settings of the PDF document.
            </summary>
        </member>
        <member name="P:Spire.Xls.Pdf.Security.PdfSecurity.OwnerPassword">
            <summary>
            Gets the owner password.
            </summary>
        </member>
        <member name="P:Spire.Xls.Pdf.Security.PdfSecurity.UserPassword">
            <summary>
            Gets the user password.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Security.PdfSecurity.Encrypt(System.String)">
            <summary>
            To Encrypt the PDF document with open password.
            Note:If set empty string value to open password, it indicates that the PDF document can be operated without providing corresponding password. 
            Note: the document owner password should not be exist.
            </summary>
            <param name="openPassword">The open password</param>
        </member>
        <member name="M:Spire.Xls.Pdf.Security.PdfSecurity.Encrypt(System.String,Spire.Xls.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            To Encrypt the PDF document with permission password and permissions.
            Note:The Permission password can't be empty string.
            </summary>
            <param name="permissionPassword">The permission password</param>
            <param name="permissions">A set of flags specifying which operations are permitted when the document is opened with user access</param>
        </member>
        <member name="M:Spire.Xls.Pdf.Security.PdfSecurity.Encrypt(System.String,System.String,Spire.Xls.Pdf.Security.PdfPermissionsFlags,Spire.Xls.Pdf.Security.PdfEncryptionKeySize)">
            <summary>
            To Encrypt the PDF document and set the encryption key size and permissions.
            Note:If set empty string value to open password or permission password, it indicates that the PDF document can be operated without providing corresponding password. 
            </summary>
            <param name="openPassword">The open password</param>
            <param name="permissionPassword">The permission password</param>
            <param name="permissions">A set of flags specifying which operations are permitted when the document is opened with user access</param>
            <param name="keySize">The bit length of the encryption key</param>
            <returns></returns>       
        </member>
        <member name="P:Spire.Xls.Pdf.Security.PdfSecurity.Permissions">
            <summary>
            Gets the document's permission flags
            </summary>
        </member>
        <member name="P:Spire.Xls.Pdf.Security.PdfSecurity.KeySize">
            <summary>
            Gets the size of the key.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Security.PdfSecurity.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.PsSystem.GetMacOSFontFolders">
            <summary>
            Get MacOS font folders.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.AbstractProcessor">
            <summary>
            This is a abstract class base processor, it provides common functions.
            </summary>
            <author>linwei</author>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.AbstractProcessor.PicPretreatment(System.Xml.XmlDocument,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
             pretreatment of picture
            </summary>
            <param name="xmlDoc">input file stream</param>
            <param name="fireNodeName">first node</param>
            <param name="picPath">picture location</param>
            <param name="nms">xml namespace manager</param>
            <returns>result stream</returns>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.IProcessor">
            <summary>
            This is the interface of pre and post processors
            </summary>
            <author>linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.IUOFTranslator">
            <summary>
            This interface defines the exposed interface of Translator
            </summary>
            <author>linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.NotAnOoxDocumentException">
            <summary>Thrown whenever an error occurs during the build.</summary>
            <author>linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.NotAnUofDocumentException">
            <summary>Thrown whenever an error occurs during the build.</summary>
            <author>linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.ProcessingState">
            <summary>
            Zip archiving states
            </summary>
            <author>linwei, sunqingzhi</author>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.ProcessingState.None">
            <summary>
            Not archiving
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.ProcessingState.EntryWaiting">
            <summary>
            Waiting for an entry
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.ProcessingState.EntryStarted">
            <summary>
            Processing an entry
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.OoxZipWriter">
            <summary>
            An <c>XmlWriter</c> implementation for serializing the xml stream to a zip archive.
            All the necessary information for creating the archive and its entries is picked up 
            from the incoming xml stream and must conform to the following specification :
            
            TODO : XML schema
            
            example :
            
            <c>&lt;pzip:archive pzip:target="path"&gt;</c>
            	<c>&lt;pzip:entry pzip:target="relativePath"&gt;</c>
            		<c>&lt;-- xml fragment --&lt;</c>
            	<c>&lt;/pzip:entry&gt;</c>
            	<c>&lt;-- other zip entries --&lt;</c>
            <c>&lt;/pzip:archive&gt;</c>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.zipOutputStream">
            <summary>
            The zip archive
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.delegateWriter">
            <summary>
            A delegate <c>XmlWriter</c> that actually feeds the zip output stream. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.delegateSettings">
            <summary>
            The delegate settings
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.fileDict">
            <summary>
            Represents Source files
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.binarySource">
            <summary>
            Source attribute of the currently processed binary file
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.OoxZipWriter.binaries">
            <summary>
            Represents All binary files that need to be processed
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.OoxZipWriter.#ctor(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.IO.Stream,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.OoxZipWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Delegates <c>WriteStartElement</c> calls when the element's prefix does not 
            match a zip command.  
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.OoxZipWriter.WriteEndElement">
            <summary>
            Delegates <c>WriteEndElement</c> calls when the element's prefix does not 
            match a zip command. 
            Otherwise, close the archive or flush the delegate writer. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.OoxZipWriter.CopyBinaryData">
            <summary>
            copy binary data (currently, only picture) in to zip archive
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.OoxZipWriter.Node">
            <summary>
            Simple representation of elements or attributes nodes
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.ResourceResolver">
            <summary>
            An XmlUrlResolver for embedded resources.
            </summary>
            <author>sunqingzhi, linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.OoxZipResolver">
            <summary>
            An XmlUrlResolver for zip packaged files
            </summary>
            <author>sunqingzhi, linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.TranslatorConstants">
            <summary>
            This class is used to hold contants.
            </summary>
            <author>linwei</author>
            <modify>linyaohu</modify>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.UofEventArgs">
            <summary>
            The event arguments passed between TranslatorLib and Add-in
            </summary>
            <author>linwei</author>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.UOFTranslator">
            <summary>
            This is a abstract class base Translator, it provides common functions.
            </summary>
            <author>linwei</author>
            <modifier>linyaohu</modifier>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.MainTransform(System.String,System.Xml.XmlUrlResolver,System.String,System.String,System.String)">
            <summary>
             main transform which needs the orginal File
            </summary>
            <param name="directionXSL">transform direction</param>
            <param name="resourceResolver">xsl location</param>
            <param name="originalFile">original File</param>
            <param name="inputFile">File after pretreatment</param>
            <param name="outputFile">output file</param>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.ZipXMLFile(System.String)">
            <summary>
            zip the big xml file
            </summary>
            <param name="inputFile">input xml file</param>
            <returns>zip file</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.PicPretreatment(System.Xml.XmlDocument,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
             pretreatment of picture
            </summary>
            <param name="xmlDoc">input file stream</param>
            <param name="fireNodeName">first node</param>
            <param name="picPath">picture location</param>
            <param name="nms">xml namespace manager</param>
            <returns>result stream</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.CustomXMPretreatment(System.Xml.XmlDocument,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            pretreatment of custom xml data,OOXM to UOF
            </summary>
            <param name="xmlDoc">input file stream</param>
            <param name="firstNodeName">first node</param>
            <param name="nms">name space manager</param>
            <returns>result stream</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetChartData(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
             get the embeded chart data
            </summary>
            <param name="chartTypeNode">chart type node (eg:c:barChart)</param>
            <param name="nm">name space</param>
            <returns>chart data</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetSeriesName(System.Xml.XmlNodeList,System.Xml.XmlNamespaceManager)">
            <summary>
             get the series name
            </summary>
            <param name="series">series node</param>
            <param name="nm">name space</param>
            <returns>series name</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetCategoryName(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
             get the category name
            </summary>
            <param name="ser">series node</param>
            <param name="nm">name space</param>
            <returns>category name</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetSeriesName(System.String)">
            <summary>
             get the series' name
            </summary>
            <param name="chartFile">chart xml file</param>
            <returns>series' name</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetCategoryName(System.String)">
            <summary>
            get the categories name
            </summary>
            <param name="chartFile">chart xml file</param>
            <returns>categories name</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.ChkChartTypeNodes(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
             Check the chart cotains how many chart Types (Combo type)
            </summary>
            <param name="xdoc">chart file</param>
            <param name="nm">name space manager</param>
            <returns>chart type nodes</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UOFTranslator.GetTitleText(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            get the title's text
            </summary>
            <param name="paragraphNode">a:p</param>
            <param name="nm">name sapce</param>
            <returns>title</returns>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.UofZipWriter">
            <summary>
            Zip archiving states
            </summary>
            <author>linwei, sunqingzhi</author>
            <summary>
            An <c>XmlWriter</c> implementation for serializing the xml stream to a zip archive.
            All the necessary information for creating the archive and its entries is picked up 
            from the incoming xml stream and must conform to the following specification :
            
            TODO : XML schema
            
            example :
            
            <c>&lt;pzip:archive pzip:target="path"&gt;</c>
            	<c>&lt;pzip:entry pzip:target="relativePath"&gt;</c>
            		<c>&lt;-- xml fragment --&lt;</c>
            	<c>&lt;/pzip:entry&gt;</c>
            	<c>&lt;-- other zip entries --&lt;</c>
            <c>&lt;/pzip:archive&gt;</c>
            
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.zipOutputStream">
            <summary>
            The zip archive
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.delegateWriter">
            <summary>
            A delegate <c>XmlWriter</c> that actually feeds the zip output stream. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.delegateSettings">
            <summary>
            The delegate settings
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.sourcefile">
            <summary>
            source file
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.binarySource">
            <summary>
            Source attribute of the currently processed binary file
            </summary>
        </member>
        <member name="F:Spire.Xls.Pdf.Uof.UofZipWriter.binaries">
            <summary>
            All binary files that need to be processed
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UofZipWriter.#ctor(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UofZipWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Delegates <c>WriteStartElement</c> calls when the element's prefix does not 
            match a zip command.  
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UofZipWriter.WriteEndElement">
            <summary>
            Delegates <c>WriteEndElement</c> calls when the element's prefix does not 
            match a zip command. 
            Otherwise, close the archive or flush the delegate writer. 
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.UofZipWriter.CopyBinaryData">
            <summary>
            copy binary data (currently, only picture) in to zip archive
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.UofZipWriter.Node">
            <summary>
            Simple representation of elements or attributes nodes
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.ZipFactory">
            <summary>
            ZipFactory provides instances of IZipReader and IZipWriter.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZipFactory.CreateArchive(System.String)">
            <summary>
            Provides an instance of IZipWriter.
            </summary>
            <param name="path">The path of the ZIP file to create.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZipFactory.OpenArchive(System.String)">
            <summary>
            Provides an instance of IZipReader.
            </summary>
            <param name="path">The path of the ZIP file to read.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.ZipReader">
            <summary>
            ZipReader defines an abstract class to read entries from a ZIP file.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZipReader.GetEntry(System.String)">
            <summary>
            Get an entry from a ZIP file.
            </summary>
            <param name="relativePath">The relative path of the entry in the ZIP
            file.</param>
            <returns>A stream containing the uncompressed data.</returns>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZipReader.Close">
            <summary>
            Close the ZIP file.
            </summary>
        </member>
        <member name="T:Spire.Xls.Pdf.Uof.ZipWriter">
            <summary>
            ZipWriter defines an abstract class to write entries into a ZIP file.
            To add a file, first call AddEntry with the relative path, then
            write the content of the file into the stream.
            </summary>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZipWriter.AddEntry(System.String)">
            <summary>
            Adds an entry to the ZIP file (only writes the header, to write
            the content use Stream methods).
            </summary>
            <param name="relativePath">The relative path of the entry in the ZIP
            file.</param>
        </member>
        <member name="M:Spire.Xls.Pdf.Uof.ZlibZipWriter.ResolvePath(System.String)">
            <summary>
            Resolves a path by interpreting "." and "..".
            </summary>
            <param name="path">The path to resolve.</param>
            <returns>The resolved path.</returns>
        </member>
        <member name="T:Spire.Xls.VMLPresetGradientFills">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Brass">
            <summary>
              Looks up a localized string similar to 0 #825600;8520f #ffa800;18350f #825600;28180f #ffa800;38011f #825600;47186f #ffa800;57016f #825600;1 #ffa800.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Calm_Water">
            <summary>
              Looks up a localized string similar to 0 #ccf;11796f #9cf;23593f #96f;39977f #c9f;53740f #9cf;1 #ccf.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Chrome">
            <summary>
              Looks up a localized string similar to 0 white;10486f #1f1f1f;11796f white;27525f #636363;34734f #cfcfcf;43254f #cfcfcf;49807f #1f1f1f;51773f white;1 #7f7f7f.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_ChromeII">
            <summary>
              Looks up a localized string similar to 0 #cbcbcb;8520f #5f5f5f;13763f #5f5f5f;41288f white;43909f #b2b2b2;45220f #292929;53740f #777;1 #eaeaea.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Daybreak">
            <summary>
              Looks up a localized string similar to 0 #5e9eff;26214f #85c2ff;45875f #c4d6eb;1 #ffebfa.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Desert">
            <summary>
              Looks up a localized string similar to 0 #fc9fcb;8520f #f8b049;13763f #f8b049;41288f #fee7f2;43909f #f952a0;45220f #c50849;53740f #b43e85;1 #f8b049.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Early_Sunset">
            <summary>
              Looks up a localized string similar to 0 #000082;19661f #66008f;42598f #ba0066;58982f red;1 #ff8200.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Fire">
            <summary>
              Looks up a localized string similar to 0 #fff200;29491f #ff7a00;45875f #ff0300;1 #4d0808.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Fog">
            <summary>
              Looks up a localized string similar to 0 #8488c4;34734f #d4deff;54395f #d4deff;1 #96ab94.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Gold">
            <summary>
              Looks up a localized string similar to 0 #e6dcac;7864f #e6d78a;19661f #c7ac4c;29491f #e6d78a;50463f #c7ac4c;1 #e6dcac.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_GoldII">
            <summary>
              Looks up a localized string similar to 0 #fbe4ae;8520f #bd922a;13763f #bd922a;41288f #fbe4ae;43909f #bd922a;45220f #835e17;53740f #a28949;1 #fae3b7.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Horizon">
            <summary>
              Looks up a localized string similar to 0 #dcebf5;5243f #83a7c3;8520f #768fb9;13763f #83a7c3;34079f white;36700f #9c6563;38011f #80302d;46531f #c0524e;61604f #ebdad4;1 #55261c.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Late_Sunset">
            <summary>
              Looks up a localized string similar to 0 black;13107f #000040;.5 #400040;.75 #8f0040;58982f #f27300;1 #ffbf00.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Mahogany">
            <summary>
              Looks up a localized string similar to 0 #d6b19c;19661f #d49e6c;45875f #a65528;1 #663012.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Moss">
            <summary>
              Looks up a localized string similar to 0 #ddebcf;.5 #9cb86e;1 #156b13.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Nightfall">
            <summary>
              Looks up a localized string similar to 0 black;26214f #0a128c;45875f #181cc7;57672f #7005d4;1 #8c3d91.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Ocean">
            <summary>
              Looks up a localized string similar to 0 #03d4a8;.25 #21d6e0;.75 #0087e6;1 #005cbf.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Parchment">
            <summary>
              Looks up a localized string similar to 0 #ffefd1;42598f #f0ebd5;1 #d1c39f.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Peacock">
            <summary>
              Looks up a localized string similar to 0 #39f;10486f #0cc;30802f #99f;39322f #2e6792;46531f #33c;53084f #1170ff;1 #069.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Rainbow">
            <summary>
              Looks up a localized string similar to 0 #a603ab;13763f #0819fb;22938f #1a8d48;34079f yellow;47841f #ee3f17;57672f #e81766;1 #a603ab.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_RainbowII">
            <summary>
              Looks up a localized string similar to 0 #f39;.25 #f63;.5 yellow;.75 #01a78f;1 #36f.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Sapphire">
            <summary>
              Looks up a localized string similar to 0 #000082;8520f #0047ff;18350f #000082;28180f #0047ff;38011f #000082;47186f #0047ff;57016f #000082;1 #0047ff.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Silver">
            <summary>
              Looks up a localized string similar to 0 white;4588f #e6e6e6;20972f #7d8496;30802f #e6e6e6;55706f #7d8496;1 #e6e6e6.
            </summary>
        </member>
        <member name="P:Spire.Xls.VMLPresetGradientFills.Grad_Wheat">
            <summary>
              Looks up a localized string similar to 0 #fbeac7;11796f #fee7f2;23593f #fac77d;39977f #fba97d;53740f #fbd49c;1 #fee7f2.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.TextWrappingStyle">
            <summary>
            Specify text wrapping style for object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.Inline">
            <summary>
            Inline text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.TopAndBottom">
            <summary>
            TopAndBottom text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.Square">
            <summary>
            Square text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.InFrontOfText">
            <summary>
            No text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.Tight">
            <summary>
            Tight text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.Through">
            <summary>
            Through text wrapping style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingStyle.Behind">
            <summary>
            Behind text wrapping style
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.TextWrappingType">
            <summary>
            Specify text wrapping type for textbox.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingType.Both">
            <summary>
            Wrap text both sides
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingType.Left">
            <summary>
            Wrap text left side
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingType.Right">
            <summary>
            Wrap text right side
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextWrappingType.Largest">
            <summary>
            Wrap text largest
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.RectAlignment">
            <summary>
            describes how to position two rectangles relative to each other.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.Double">
            <summary>
            Double lines of equal width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.ThickThin">
            <summary>
            Double lines, one thick, one thin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.ThinThick">
            <summary>
            Double lines, one thin, one thick.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.Triple">
            <summary>
            Three lines, thin, thick, thin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.Default">
            <summary>
            Default value is <see cref="F:Spire.Xls.Converters.DrawingML.ShapeLineStyle.Single"/>.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.TextBoxLineStyle">
            <summary>
            Specify object's line style
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextBoxLineStyle.Simple">
            <summary>
            Single line (of width lineWidth)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextBoxLineStyle.Double">
            <summary>
            Double lines of equal width
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextBoxLineStyle.ThickThin">
            <summary>
            Double lines, one thick, one thin
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextBoxLineStyle.ThinThick">
            <summary>
            Double lines, reverse order
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.TextBoxLineStyle.Triple">
            <summary>
            Three lines, thin, thick, thin
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.LineDashing">
            <summary>
            Line dashing.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.Solid">
            <summary>
            Solid (continuous) pen.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.Dash">
            <summary>
            PS_DASH system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.Dot">
            <summary>
            PS_DOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.DashDot">
            <summary>
            PS_DASHDOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.DashDotDot">
            <summary>
            PS_DASHDOTDOT system dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.DotGEL">
            <summary>
            Square dot style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.DashGEL">
            <summary>
            Dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.LongDashGEL">
            <summary>
            Long dash style.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.DashDotGEL">
            <summary>
            Dash short dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.LongDashDotGEL">
            <summary>
            Long dash short dash.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.LineDashing.LongDashDotDotGEL">
            <summary>
            Long dash short dash short dash.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.StrokeArrowWidth">
            <summary>
            This simple type specifies the widths of a stroke arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowWidth.Medium">
            <summary>
            Medium width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowWidth.Narrow">
            <summary>
            Narrow width.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowWidth.Wide">
            <summary>
            Wide width.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.StrokeArrowLength">
            <summary>
            This simple type specifies the lenghts of a stroke arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowLength.Long">
            <summary>
            Long length.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowLength.Medium">
            <summary>
            Medium length.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrowLength.Short">
            <summary>
            Short length.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.StrokeArrawType">
            <summary>
            This simple type specifies the types of arrawhead for a stroke.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.Block">
            <summary>
            Block arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.Classic">
            <summary>
            Classic curved arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.Diamond">
            <summary>
            Diamond arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.None">
            <summary>
            No arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.Open">
            <summary>
            Opend arrowhead.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeArrawType.Oval">
            <summary>
            Round arrowhead.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.StrokeEndCap">
            <summary>
            this simple type specifies the styles for the end of a stroke.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeEndCap.Flat">
            <summary>
            Flat end.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeEndCap.Round">
            <summary>
            Round end.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeEndCap.Square">
            <summary>
            Square end.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.StrokeJoinStyle">
            <summary>
            This simple type specifies the join styles for a polyline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeJoinStyle.Bevel">
            <summary>
            Bevel joint.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeJoinStyle.Miter">
            <summary>
            Miter joint.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.StrokeJoinStyle.Round">
            <summary>
            Round joint.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment">
            <summary>
            Specifies horizontal alignment of a floating shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.None">
            <summary>
            The object is explicitly positioned using position properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.Left">
            <summary>
            The object is aligned to the left of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.Center">
            <summary>
            The object is centered to the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.Right">
            <summary>
            The object is aligned to the right of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.Inside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeHorizontalAlignment.Outside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment">
            <summary>
            Specifies vertical alignment of a floating shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Bottom">
            <summary>
            The object is aligned to the bottom of the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Center">
            <summary>
            The object is centered relative to the reference origin.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Inline">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Inside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.None">
            <summary>
            The object is explicitly positioned using position properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Outside">
            <summary>
            Not documented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeVerticalAlignment.Top">
            <summary>
            The object is aligned to the top of the reference origin.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.EditAs">
            <summary>
            This simple type specifies the different meanings of a group of shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.Group">
            <summary>
            The group shape is a normal group of shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.BullSeye">
            <summary>
            Specifies that the group represents a bulls-eye diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.Canvas">
            <summary>
            Specifies that the group is a regular group and does not represent a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.Cycle">
            <summary>
            Specifies that the group represents a cycle diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.OrgChart">
            <summary>
            Specifies that the group represents an organization chart.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.Radial">
            <summary>
            Specifies that the group represents a radial diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.stacked">
            <summary>
            Specifies that the group represents a pyramid diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.EditAs.Venn">
            <summary>
            Specifies that the group represents a Venn diagram.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.ShapeAttr">
            <summary>
            Defines shape attributes that occur in the model.
            For more info see VML, OOXML and Word 2007 Drawing Format specifications.
            </summary>
        </member>
        <member name="M:Spire.Xls.Converters.DrawingML.ShapeAttr.#ctor">
            <summary>
            No ctor.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TransformRotation">
            <summary>
            Fixed. Degrees. Default 0.
            Positive value corresponds to clockwise rotation angle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockAgainstUngrouping">
            <summary>
            Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockRotation">
            <summary>
            No rotation. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockAspectRatio">
            <summary>
            Don't allow changes in aspect ratio. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockPosition">
            <summary>
            Don't allow the shape to be moved. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockAgainstSelect">
            <summary>
            Shape may not be selected. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockCropping">
            <summary>
            No cropping this shape. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockVertices">
            <summary>
            Edit Points not allowed. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockText">
            <summary>
            Do not edit text. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockAdjustHandles">
            <summary>
            Do not adjust. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockAgainstGrouping">
            <summary>
            Do not group this shape. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxTxid">
             <summary>
             int. id for the textbox.
             
             Although this attribute will be present in the model during write to DOC, 
             it does not have any meaning for the model.
             
             This is an index into plcfTxbxs, but need to deduct one and shift right by 16 bits.
             int txid = (int)((txbxIdx + 1) shl 16);
             
             The lower 16 bits indicate the index of the linked checkbox.
            
             This attribute is only used during reading and writing into binary DOC.
             There is a two-way link between shape and txbx in a DOC file and during read.
             
             Also see OleTxid. OleTxid is written instead of TextboxTxid for OLE objects.
             </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxLeft">
            <summary>
            int. margins relative to shape's inscribed text rectangle (in EMUs)
            Default 1/10inch
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxTop">
            <summary>
            int. margins relative to shape's inscribed text rectangle (in EMUs)
            Default 1/20inch
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxRight">
            <summary>
            int. margins relative to shape's inscribed text rectangle (in EMUs)
            Default 1/10inch
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxBottom">
            <summary>
            int. margins relative to shape's inscribed text rectangle (in EMUs)
            Default 1/20inch
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxWrapMode">
            <summary>
            Specifies how text wraps inside the shape. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxZoom">
            <summary>
            int. Text zoom/scale (used if fFitTextToShape), default 0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxAnchor">
            <summary>
            How to anchor the text. Default Top.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxLayoutFlow">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.LayoutFlow"/>. Default HorZ
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxFontRotation">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.FontRotation"/>. Font rotation. Default Right.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxNextShapeId">
            <summary>
            int. ID of the next shape (used by Word for linked textboxes).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextDirection">
            <summary>
            int. Bi-Di Text direction. Default LTR.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxColumns">
            <summary>
            int. Seen in TestCommunity15706.doc, value 2.
            Untested.
            Default 1.
            Count of columns.
            Ver: XP
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxColumnMargin">
            <summary>
            int. Seen BusinessBrochure.doc, value 73152.
            Untested.
            Default 91440.
            EMUs, column margin on both sides.
            Ver: XP
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxNextShapeIdRaw">
            <summary>
            string. Original ID of the next shape (used by Word for linked textboxes).
            It is a temporary attribute that should never appear in AW model after load.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxSelectText">
            <summary>
            TRUE if single click selects text, FALSE if two clicks. Default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxAutoTextMargin">
            <summary>
            use host's margin calculations. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxRotateText">
            <summary>
            Rotate text with shape. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxFitShapeToText">
            <summary>
            Size shape to fit text size. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TextboxFitTextToShape">
            <summary>
            Size text to fit shape size. Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextText">
            <summary>
            UNICODE text string
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextRtf">
            <summary>
            RTF text string
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextAlign">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.TextPathAlignment"/>. alignment on curve
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextSize">
            <summary>
            Fixed. Font size in points.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextSpacing">
            <summary>
            Fixed. Adjust the spacing between characters (1.0 is normal).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextFont">
            <summary>
            String. Font name.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextCssFont">
            <summary>
            Untested.
            Ver: 2000
            String. To preserve CSS font selectors.
            Default empty string.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextReverseRows">
            <summary>
            bool. Reverse row order. 
            By default multiple rows of text are laid out with the first at the top for horizontal 
            text and with the first at the left for vertical text, this flag reverses that behavior 
            (bottom to top or right to left).
            Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextOn">
            <summary>
            bool. True if the text effect properties (gtext*) are used. 
            False if these properties are ignored.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextVertical">
            <summary>
            bool. Rotate characters
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextKerning">
            <summary>
            bool. Kern characters
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextTight">
            <summary>
            bool. Tightening or tracking is on.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextStretch">
            <summary>
            bool. Stretch to fit shape
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextShrinkFit">
            <summary>
            bool. Char bounding box
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextBestFit">
            <summary>
            bool. Scale text-on-path
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextNormalize">
            <summary>
            bool. Stretch char height. Mall characters same height.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextDxMeasure">
            <summary>
            bool. Do not measure along path.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextBold">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextItalic">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextUnderline">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextShadow">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextSmallCaps">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeoTextStrikeThrough">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageCropTop">
            <summary>
            Fixed. Fraction of the image width or height. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GraphicFrameExtWidth">
            <summary>
            Specifies the width of the extents rectangle in EMUs. This rectangle shall dictate the size
            of the object as displayed (the result of any scaling to the original object).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GraphicFrameExtHeight">
            <summary>
            Specifies the length of the extents rectangle in EMUs. This rectangle shall dictate the size
            of the object as displayed (the result of any scaling to the original object).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageTransparent">
            <summary>
            Color. transparent color.
            The default value for this property is 0xFFFFFFFF, but we don't yet support 0xff in the top byte
            that means "ignore this color".
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageContrast">
            <summary>
            Fixed. Contrast setting. Min value is 0, max value is 0x7fffffff, but it is not linear.
            There is no documentation for the algorithm, but I guess it in <see cref="!:ImageData.ContrastToPercent"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageBrightness">
            <summary>
            Fixed. Brightness setting. Has to be a fixed value -0.5 to 0.5.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageGamma">
            <summary>
            Fixed. gamma. Have never seen it in MS Word. 
            Actually, this is not even in the SPEC.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleTxid">
            <summary>
            Int. Host-defined ID for OLE objects. MS Word spec says this is "pictureId", but
            I've discovered this is actually TXID for floating OLE objects.
            This property is ignored during read and synthesized on write.
            Also see TextboxTxid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageDblCrMod">
            <summary>
            Int. This property specifies a shadow color for pictures with a double shadow 
            used in black-and-white display mode. 
            The SPEC says: This value SHOULD be ignored.
            The default value for this property is 0x100000F4, but we don't support color flags yet.
            Seen in TestShadow.doc. Seen 0x100000f4 in TestDefect1402.doc. 
            MSOCLR type.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageFillCrMod">
            <summary>
            Int. This property specifies the fill color modification used in black-and-white display mode.
            Seen in TestDefect1402.doc. 
            MSOCLR
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageLineCrMod">
            <summary>
            Int. This property specifies the line color modification used in black-and-white display mode.
            Seen in TestDefect1402.doc.
            MSOCLR
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageTransparentExt">
            <summary>
            This property specifies the transparent pixel extended color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageTransparentExtMod">
            <summary>
            This property specifies the color modification of the transparent pixel extended color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageRecolor">
            <summary>
            Int. This property specifies the color used to recolor the image.
            Seen 0xffffffff in TestDefect1402.doc
            Ver: XP
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageRecolorExt">
            <summary>
            Int. This property specifies the extended color used to recolor the image.
            Seen 0xffffffff in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented284">
            <summary>
            Int. MUST be 0xFFFFFFFF, and MUST be ignored.
            Seen 0xffffffff in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageRecolorExtCrMod">
            <summary>
            Int. This property specifies the color modification of the extended color used to recolor the image.
            Seen 0x20000000 in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented286">
            <summary>
            Seen in 1402. MUST be zero, and MUST be ignored.
            Complex property, no data.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented287">
            <summary>
            Int. MUST be 0xFFFFFFFF, and MUST be ignored.
            Seen 0xffffffff in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImagePreserveGrays">
            <summary>
            bool. Seen in TestDefect1402.doc in extended flags. Default false? 0x0040
            When doing a color modification to a picture, leave grays unmodified.
            Ver: XP
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageNoHitTest">
            <summary>
            bool, Do not hit test the picture, default false. 0x0008
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageGrayScale">
            <summary>
            bool, grayscale display, default false. 0x0004
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageBiLevel">
            <summary>
            bool, bi-level display, default false. 0x0002
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageActive">
            <summary>
            bool, Server is active (OLE objects only), default false. 0x0001
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryVertices">
            <summary>
            Array of <see cref="!:PathPoint"/>.
            Specifies the set of points that make up this shape.
            Corresponds to 2.3.6.7 pVertices_complex in the DOC SPEC.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometrySegmentInfo">
            <summary>
            Array of <see cref="!:PathInfo"/>. 
            Specifies how the vertices specified by the <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryVertices"/> property are connected.
            Corresponds to 2.3.6.8 pSegmentInfo in the DOC SPEC.
            This attribute MUST be present and be up to date with GeometryVertices.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryAdjust1">
            <summary>
            Int. Adjustment values corresponding to the positions of the adjust handles of the shape. 
            The number of values used and their allowable ranges vary from shape type to shape type.
            Default 0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryConnectLocs">
            <summary>
            Array of <see cref="!:PathPoint"/>. These are G unit values.
            Connector locations for shapes imported from clipart. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryConnectAngles">
            <summary>
            This property specifies an array of angles corresponding to the connection sites 
            in the pConnectionSites_complex property that are used to determine the direction 
            that a connector links to the corresponding connection site.
            
            Array of <see cref="T:System.Int32"/>. But these are actually Fixed values.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryXLimo">
            <summary>
            int. A signed integer x coordinate in geometry space that specifies a value above which limousine 
            scaling is used.
            The spec says default is 0x8000000, but we default to 0 at the moment!
            
            Limo stretches are points on a shape's edge that define where and how a shape may be stretched 
            by a user in a graphical editor.
            
            2.3.6.22 xLimo in the DOC SPEC
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryYLimo">
            <summary>
            int. A signed integer y coordinate in geometry space that specifies a value above which limousine 
            scaling is used.
            The spec says default is 0x8000000, but we default to 0 at the moment!
            2.3.6.23 yLimo in the DOC SPEC.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryHandles">
            <summary>
            This property specifies an array of adjust handles which allow a user to manipulate the 
            geometry of this shape.
            Array of <see cref="!:Handle"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryFormulas">
            <summary>
            This property specifies a set of formulas used to calculate values for use in defining 
            the geometry of this shape.
            Array of <see cref="!:Formula"/>. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryPathTextBoxRects">
            <summary>
            This property specifies an array of rectangles specifying how text should be inscribed 
            within this shape.
            2.3.6.28 pInscribe in the DOC SPEC.
            Array of <see cref="!:PathRectangle"/>. Corresponds to path.textboxrect in VML.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryConnectionSiteType">
            <summary>
            This property specifies where connection points are on the shape.
            <see cref="T:Spire.Xls.Converters.DrawingML.ConnectionSiteType"/>. Corresponds to o:connecttype in WordML.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryShadowOK">
            <summary>
            A bit that specifies whether to display the shadow of this shape. The value SHOULD be ignored. 
            Default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryThreeDOK">
            <summary>
            A bit that specifies whether to display the extrusion effect of this shape. 
            Default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryLineOK">
            <summary>
            A bit that specifies whether to display the line of this shape. 
            Default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryGTextOK">
            <summary>
            A bit that specifies whether to display the text aligned to this shape. 
            Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryFillShadeShapeOK">
            <summary>
            A bit that specifies whether the fill is aligned to the shape. A value of 0x0 specifies that 
            the fill is aligned to the bounding rectangle of the shape. A value of 0x1 specifies that 
            the fill is aligned to the shape itself. 
            Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.GeometryFillOK">
            <summary>
            A bit that specifies whether to display the fill of this shape. 
            Default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillType"/> enumeration. Type of fill. Default Solid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillColor">
            <summary>
            Foreground fill color. Default white.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillOpacity">
            <summary>
            Fixed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackColor">
            <summary>
            Background color. Default white. 
            Can have special values such as 0xeff00266 which means "fill lighten(102)",
            where I guess 0x66 means "102" and 0x00200 means "lighten".
            VA: VmlColor.ColorToVml decodes such values.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackOpacity">
            <summary>
            Fixed. Used only for gradient fills.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillCrMod">
            <summary>
            Color. Modification for BW views? Undocumented. Have not seen in files.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBlipName">
            <summary>
            string.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBlipNameFlags">
            <summary>
            int.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillWidth">
            <summary>
            int? Never seen in files.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillHeight">
            <summary>
            int? Never seen in files.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillAngle">
            <summary>
            Fixed. Gradient angle in degrees.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillFocus">
            <summary>
            int. Linear gradient fill focus. Integer percent -100..100
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillToLeft">
            <summary>
            Fixed. Focus position. Fraction of the shape size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillToTop">
            <summary>
            Fixed. Focus position. Fraction of the shape size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillToRight">
            <summary>
            Fixed. Focus position. Fraction of the shape size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillToBottom">
            <summary>
            Fixed. Focus position. Fraction of the shape size.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillRectLeft">
            <summary>
            Fixed. Seen in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillRectTop">
            <summary>
            Fixed. Seen in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillRectRight">
            <summary>
            Fixed. Seen in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillRectBottom">
            <summary>
            Fixed. Seen in TestDefect1402.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillDimensionType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillDimensionType"/>. Specifies units for fill dimensions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShadePreset">
            <summary>
            int. Identifies one of the preset gradients. Exists in DOC and RTF only. WML and DOCX don't have it.
            MS Word figures this value out itself, therefore we ignore it. Does not occur in the model.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShadeColors">
            <summary>
            Array of <see cref="!:GradientColor"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillOriginX">
            <summary>
            int. The units are according to FillDzType. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillOriginY">
            <summary>
            int. The units are according to FillDzType. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShapeOriginX">
            <summary>
            int. The units are according to FillDzType. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShapeOriginY">
            <summary>
            int. The units are according to FillDzType. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShadeType">
            <summary>
            <see cref="!:GradientType"/>. Type of shading for gradient fill.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillColorExt">
            <summary>
            This is fill color in the "ink" notation.
            Seen in TestGeometry.doc, value -1. 
            Seen in BusinessBrochureBrief.doc, 0xb58b22.
            In WordML this is "fillcolor="#228bb5 [rgb(34,139,181) ink(1,255)]"
            
            In extended properties?
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillColorExtCMY">
            <summary>
            Undocumented. 
            Seen in TestGeometry.doc, value -1. In extended properties.
            Seein BusinessBrochureBrief.doc, value 0xff20.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillColorExtMod">
            <summary>
            Undocumented. Seen in TestGeometry.doc. Looks like some flags. In extended properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented417">
            <summary>
            Undocumented. Seen in TestGeometry.doc. Complex property. Seen empty value only. In extended properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackColorExt">
            <summary>
            This is fill background color in the "cmyk" notation.
            Seen in BusinessBrochureBrief.doc, 0x00feffff.
            In WordML this is color2="#fffffe [rgb(255,255,254) cmyk(0,0,0,0)]" 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackColorExtCMY">
            <summary>
            Undocumented. Seen in BusinessBrochure.doc, value 8. Simple.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackColorExtMod">
            <summary>
            Int. Seen in TestDefect1402.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented421">
            <summary>
            Undocumented. Seen in TestWatermark.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillColorExtK">
            <summary>
            Undocumented. Seen in TestGeometry.doc, value -1. In extended properties.
            Seen in BusinessBrochure.doc, value 0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillBackColorExtK">
            <summary>
            Undocumented. Seen in BusinessBrochure.doc, value 0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillRecolorAsPicture">
            <summary>
            bool. Extended fill flag. Not exactly sure what it means.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillUseShapeAnchor">
            <summary>
            bool. Extended fill flag. Corresponds to 'Fill Effects | Gradient | Rotate fill effect with shape' setting in MS Word.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Filled">
            <summary>
            bool. Is shape filled?
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillHitTest">
            <summary>
            bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillShape">
            <summary>
            bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillUseRect">
            <summary>
            bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillNoFillHitTest">
            <summary>
            bool. undocumented.
            Corresponds to o:detectmouseclick in WordML
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillStretch">
            <summary>
            struct of stretch.specifies that a BLIP should be stretched to fill the target rectangle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Tiled">
            <summary>
            bool.
            specifies whether a BLIP be tiled to fill the available space
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillTile">
            <summary>
            struct of tile. specifies that a BLIP should be tiled to fill the available space.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineColor">
            <summary>
            Color of line. Default is black.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineOpacity">
            <summary>
            Fixed. Line color opacity.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineBackColor">
            <summary>
            Background color, default is white.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineCrMod">
            <summary>
            Color. Modification for BW Views. never seen.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillType">
            <summary>
            Type of line, default is solid.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillBlipName">
            <summary>
            String. Seen "" in TestDefect1402.doc. Never seen, unsupported at the moment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillBlipNameFlags">
            <summary>
            Int. Seen 0 in TestDefect1402.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillWidth">
            <summary>
            Int? Seen 0 in TestDefect1402.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillHeight">
            <summary>
            Int? Seen 0 in TestDefect1402.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillDimensionType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillDimensionType"/>. Specifies units for fill dimensions.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineWidth">
            <summary>
            EMUs, line width. 1pt == 12700 EMUs. Default 9525 (0.75pt). Stored as EMUs in the model.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineMiterLimit">
            <summary>
            Fixed. ratio. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineStyle">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.ShapeLineStyle"/> enumeration. Default single.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineDashStyle">
            <summary>
            <see cref="!:DashStyle"/>. Default Solid. Can be overridden by LineDashStyle.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineDashData">
            <summary>
            Complex property. An array that defines a custom dash pattern. Never seen, not supported at the moment.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineStartArrow">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.ArrowType"/>. Arrow at start, default NoEnd
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineEndArrow">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.ArrowType"/>. Arrow at end, default NoEnd
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineStartArrowWidth">
            <summary>
            <see cref="!:ArrowWidth"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineStartArrowLength">
            <summary>
            <see cref="!:ArrowLength"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineEndArrowWidth">
            <summary>
            <see cref="!:ArrowWidth"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineEndArrowLength">
            <summary>
            <see cref="!:ArrowLength"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineJoinStyle">
            <summary>
            <see cref="!:JoinStyle"/>. Defines the join style of a polyline.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineEndCapStyle">
            <summary>
            <see cref="!:EndCap"/>. How to end lines.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineColorExt">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineColorExtCMY">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineColorExtMod">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0x20000000 (some CrMod?)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented476">
            <summary>
            Undocumented. Seen in TestWatermark.doc. Complex property. Seen simple in arabic 4129.doc
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineBackColorExt">
            <summary>
            This is line background color in the "cmyk" notation.
            Seen in BusinessBrochureBrief.doc, 0x00feffff.
            In WordML this is v:stroke color2="#fffffe [rgb(255,255,254) cmyk(0,0,0,0)]"
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineBackColorExtCMY">
            <summary>
            Undocumented. Seen in BusinessBrochure.doc, value 8.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineBackColorExtMod">
            <summary>
            Seen in TestDefect1402.doc, value 0x200000000 (some CrMod?)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented480">
            <summary>
            Undocumented. Seen in TestWatermark.doc. Complex property, no data.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineColorExtK">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineBackColorExtK">
            <summary>
            Undocumented. Seen in BusinessBrochure.doc, value 0.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineRecolorFillAsPicture">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineUseShapeAnchor">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineInsetPen">
            <summary>
            bool. True when Inset pen (the pen is aligned on the inside of the edge of the path).
            False when Center pen (line drawn at center of path stroke).
            If LineInsetPenOK is false, this value MUST be ignored.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineInsetPenOk">
            <summary>
            bool. Specifies whether insetting the pen is allowed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineArrowHeadsOK">
            <summary>
            bool. Allow arrowheads if prop. is set
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineOn">
            <summary>
            bool. Any line? Probably Stroked in VML.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineHitTest">
            <summary>
            bool. Should we hit test lines? Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillShape">
            <summary>
            bool. Register pattern on shape. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineNoLineDrawDash">
            <summary>
            bool. Draw a dashed line if no line. Probably ForceDash in VML.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowType"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowColor">
            <summary>
            Color. Foreground shadow color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowHighlight">
            <summary>
            Color. Embossed color.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowCrMod">
            <summary>
            Color. Modification for BW views. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOpacity">
            <summary>
            Fixed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOffsetX">
            <summary>
            int. Shadow offset. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOffsetY">
            <summary>
            int. Shadow offset. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowSecondOffsetX">
            <summary>
            int. Double shadow offset. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowSecondOffsetY">
            <summary>
            int. Double shadow offset. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowScaleXToX">
            <summary>
            Fixed. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowScaleYToX">
            <summary>
            Fixed. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowScaleXToY">
            <summary>
            Fixed. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowScaleYToY">
            <summary>
            Fixed. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowPerspectiveX">
            <summary>
            Fixed. Ratio of weight.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowPerspectiveY">
            <summary>
            Fixed. Ratio of weight.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowWeight">
            <summary>
            What units?
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOriginX">
            <summary>
            int? Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOriginY">
            <summary>
            int? Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowColorExt">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowColorExtCMY">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowColorExtMod">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0x20000000
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented533">
            <summary>
            Undocumented. Seen in TestWatermark.doc. Complex property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowHighlightExt">
            <summary>
            This is shadow background color in the "cmyk" notation.
            Seen in BusinessBrochureBrief.doc, 0xdsd5db.
            In WordML this is color2="#dbd5d3 [rgb(219,213,211) cmyk(12.5,9.8,8.63,3.14)]" 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowHighlightExtCMY">
            <summary>
            Undocumented. In extended properties.
            Seen in BusinessBrochure.doc, value 0x2c3241e8.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowHighlightExtMod">
            <summary>
            Seen in TestDefect1402.doc. 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented537">
            <summary>
            Undocumented. Seen in TestWatermark.doc. Complex property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowColorExtK">
            <summary>
            Undocumented. Seen in TestLeorMeller.doc int 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowHighlightExtK">
            <summary>
            Undocumented. In extended properties.
            Seen in BusinessBrochure.doc, value 0x20.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowOn">
            <summary>
            bool. Shadow is on or not.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShadowObscured">
            <summary>
            bool. Excel5-style shadow
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveType"/>. Where transform applies.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveOffsetX">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveOffsetY">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveScaleXToX">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveScaleYToX">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveScaleXToY">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveScaleYToY">
            <summary>
            int. The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveX">
            <summary>
            int. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveY">
            <summary>
            int. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveWeight">
            <summary>
            Fixed? Scaling factor.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveOriginX">
            <summary>
            Fixed. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveOriginY">
            <summary>
            Fixed undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PerspectiveOn">
            <summary>
            bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDSpecularAmount">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDDiffuseAmount">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDShininess">
            <summary>
            int? Default gives OK results
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDEdgeThickness">
            <summary>
            int. Specular edge thickness in EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrudeForward">
            <summary>
            int. Distance of extrusion in EMUs
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrudeBackward">
            <summary>
            int. EMUs
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrudePlane">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.PlaneType"/>. Extrusion direction
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrusionColor">
            <summary>
            Color. Basic color of extruded part of shape; the lighting model used will determine 
            the exact shades used when rendering.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDCrMod">
            <summary>
            Color. Modification for BW views
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrusionColorExt">
            <summary>
            Seen in TestDefect1402.doc, 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrusionColorExtCMY">
            <summary>
            Seen in TestDefect1402.doc, 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrusionColorExtMod">
            <summary>
            Seen in TestDefect1402.doc, 0x20000000 (CrMod?)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Undocumented652">
            <summary>
            Undocumented. Seen in TestWatermark.doc. Complex property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDExtrusionColorExtK">
            <summary>
            Seen in TestDefect1402.doc, 0xffffffff
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDOn">
            <summary>
            bool. Does this shape have a 3D effect.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDMetallic">
            <summary>
            bool. Use metallic specularity.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDUseExtrusionColor">
            <summary>
            bool. Undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDLightFace">
            <summary>
            bool. Determines whether the front face of the extrusion will respond to changes in the lighting.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAngleY">
            <summary>
            Fixed. degrees (16.16) about y axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAngleX">
            <summary>
            Fixed. degrees (16.16) about x axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAxisX">
            <summary>
            int. These specify the rotation axis; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAxisY">
            <summary>
            int. These specify the rotation axis; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAxisZ">
            <summary>
            int. These specify the rotation axis; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationAngle">
            <summary>
            Fixed. degrees (16.16) about axis
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationCenterX">
            <summary>
            Fixed. rotation center x (16.16 or g-units)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationCenterY">
            <summary>
            Fixed. rotation center y (16.16 or g-units)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationCenterZ">
            <summary>
            int. rotation center z (absolute (emus))
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRenderMode">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.ThreeDRenderMode"/>. Full, wireframe or bcube
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDTolerance">
            <summary>
            Fixed. pixels (16.16). Defines the number of facets used to describe curved surfaces of an extrusion.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDViewpointX">
            <summary>
            Emus. Defines the viewpoint of the observer (X).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDViewpointY">
            <summary>
            Emus. Defines the viewpoint of the observer (Y).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDViewpointZ">
            <summary>
            Emus. Z view distance.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDOriginX">
            <summary>
            Fixed. Defines the origin X of the viewpoint within the bounding box of the shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDOriginY">
            <summary>
            Fixed. Defines the origin Y of the viewpoint within the bounding box of the shape.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDSkewAngle">
            <summary>
            Fixed. degree (16.16) skew angle
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDSkewAmount">
            <summary>
            int. Percentage skew amount
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDAmbientIntensity">
            <summary>
            Fixed. Fixed point intensity
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDKeyX">
            <summary>
            Int? Key light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDKeyY">
            <summary>
            Int? Key light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDKeyZ">
            <summary>
            Int? Key light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDKeyIntensity">
            <summary>
            Int? Fixed point intensity.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDFillX">
            <summary>
            Int? Fill light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDFillY">
            <summary>
            Int? Fill light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDFillZ">
            <summary>
            Int? Fill light source direction; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDFillIntensity">
            <summary>
            Int? Fixed point intensity
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDConstrainRotation">
            <summary>
            bool. Determines whether the rotation of the extruded object is specified by the RotationAngle attribute.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDRotationCenterAuto">
            <summary>
            bool. Determines whether the center of rotation will be the geometric center of the extrusion.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDParallel">
            <summary>
            bool. Parallel projection.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDKeyHarsh">
            <summary>
            bool. Is key lighting harsh.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TDFillHarsh">
            <summary>
            bool. Is fill lighting harsh.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ConnectorType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ConnectorType"/>. Default none.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWMode">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWMode"/>. Default Automatic.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWPure">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWMode"/>. Default Automatic.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWNormal">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BWMode"/>. Default Automatic.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramNodeLayout">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramNodeLayout"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramNodeKind">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramNodeKind"/>. 
            This property specifies kind of node in a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramLayoutMRU">
            <summary>
            MSODGMLO type. Most recently used layout for its child.
            Ver: XP.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.EquationXML">
            <summary>
            Untested.
            String.
            This property is present if the shape represents an equation generated by Office 2007 
            or later.  The property is a string of XML representing a Word 2003 XML document. 
            The original equation is stored within the “oMathPara” tag within the document.  
            Refer to the Office Open XML documentation for details on this XML representation 
            of equations. If the document containing the shape is opened in Office 2007 or later, 
            the shape is replaced with the equation in this document.
            Ver: 2007
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PolicyLabel">
            <summary>
            Untested.
            Bool. Default false. Ver: 2007.
            True if the shape is a policy label representing metadata about a document.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PolicyBarCode">
            <summary>
            Untested.
            Bool. Default false. Ver: 2007.
            True if the shape represents a barcode as part of a barcode policy for record management.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FlipHQFE5152">
            <summary>
            Untested.
            Bool. Default false. Ver: XP.
            The value of this property should match the value of the fFlipH property 
            (in the transform property set) if the pib property exists (in the blip property set.)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FlipVQFE5152">
            <summary>
            Untested.
            Bool. Default false. Ver: XP.
            The value of this property should match the value of the fFlipV property 
            (in the transform property set) if the pib property exists (in the blip property set.)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleIcon">
            <summary>
            bool. For OLE objects, whether the object is in icon form. 
            What is stored in DOC escher does not seem very reliable, so I confirm it by extracting
            a bit from the OLE object data. For DOCX and WordML this is DrawAspect.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PreferRelativeResize">
            <summary>
            bool. For UI only. Prefer relative resizing. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LockShapeType">
            <summary>
            bool. Lock the shape type (don't allow Change Shape)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Initiator">
            <summary>
            Bool. Set by the solver.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DeleteAttachedObject">
            <summary>
            bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutType"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutGap">
            <summary>
            Int. Distance from box to first point.(EMUs)
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutAngle">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutAngle"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutDropType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutDropType"/>.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutDropDistance">
            <summary>
            Int. if CalloutDropType.Specified, the actual drop distance. EMUs?
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutLength">
            <summary>
            Int. if fCalloutLengthSpecified, the actual distance.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutOn">
            <summary>
            Bool. Is the shape a callout.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutAccentBar">
            <summary>
            Bool. does callout have accent bar.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutTextBorder">
            <summary>
            Bool. does callout have a text border
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutMinusX">
            <summary>
            Bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutMinusY">
            <summary>
            Bool. undocumented.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutDropAuto">
            <summary>
            Bool. If true, then we occasionally invert the drop distance.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CalloutLengthSpecified">
            <summary>
            Bool. if true, we look at CalloutLength.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShapeName">
            <summary>
            Shape Name (present only if explicitly set).
            
            RK One scenario where this is used is to create relationships between diagram nodes.
            Instead of basing relationships on shape ids, the relationships are created based on shape names 
            (in DOC, RTF and model based on hashes of shape names).
            Shape id might change (at least can change in Spire.Doc when document is saved), shape name, 
            on the other hand remains the same and makes the life easier (no need to update diagram relations).
            Shape name is usually generated by MS Word based on the shape id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShapeDescription">
            <summary>
            Alternative text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HyperlinkAddress">
            <summary>
            String. The Uri of the hyperlink.
            If the link is to a local bookmark, it will be prepended with "#" in the model.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WrapPolygonVertices">
            <summary>
            Array of <see cref="!:PathPoint"/>. The polygon that text will be wrapped around (Word).
            In the DOC file this is actually just normal POINT array, but it is simpler for us to work with PathPoint.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DistanceLeft">
            <summary>
            Left wrapping distance from text. Default 1/8 inch. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DistanceTop">
            <summary>
            Top wrapping distance from text. Default 0. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DistanceRight">
            <summary>
            Right wrapping distance from text. Default 1/8 inch. EMUs.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DistanceBottom">
            <summary>
            Bottom wrapping distance from text. Default 0. EMUs in Escher.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RegroupId">
            <summary>
            NOT IN THE MODEL. We ignore this.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScreenTip">
            <summary>
            String. The tooltip (also used for hyperlinks).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptText">
            <summary>
            String. Looks like can be java script. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HorizontalAlignment">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HorizontalAlignment"/> 
            
            When this attribute is specified, the shape is positioned using alignment relative to some object.
            The relative anchor is specified using the  relative horizontal position value, all values are valid.
            
            When the alignment value is Inside our Outside (in MS Word this is in the Book Layout dropdown),
            then MS Word allows the relative anchor to be only Margin or Page.
            
            Occurs in EsShapeOptionsEx record.
            Note the values in the SPEC are wrong (off by 1).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeHorizontalPosition">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeHorizontalPosition"/> 
            Occurs in EsShapeOptionsEx record.
            Note the values in the SPEC are wrong (off by 1).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.VerticalAlignment">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.VerticalAlignment"/> 
            Also see comments above in <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HorizontalAlignment"/>.
            
            Occurs in EsShapeOptionsEx record.
            Note the values in the SPEC are wrong (off by 1).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeVerticalPosition">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeVerticalPosition"/> 
            Occurs in EsShapeOptionsEx record.
            Note the values in the SPEC are wrong (off by 1).
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRPct">
            <summary>
            int. Defines the length of a horizontal rule as a percentage of page width.
            Note that value 500 means 50%. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRAlign">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRAlign"/>. Defines the alignment of a horizontal rule.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRHeight">
            <summary>
            NOT IN THE MODEL. Seems this attribute provides more exactly shape height. 
            We read this during DOC/RTF import and remove from model after shape height is adjusted.
            Int. Defines the thickness of a horizontal rule in twips.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRWidth">
            <summary>
            NOT IN THE MODEL. We ignore it on read. On write we use shape width instead.
            Int. Defines the length of a horizontal rule in twips.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptType">
            <summary>
            String. Looks like "mime" type of the script. I've seen a value " type="text/javascript"".
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptLanguage">
            <summary>
            Int. Probably Id of the script language. 4 = JavaScript.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptIdAttr">
            <summary>
            Untested.
            Id script attribute of the script?
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptLanguageName">
            <summary>
            String. Looks like string name of the script language.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BorderTopColor">
            <summary>
            These are 32bit color for the inline picture borders. 
            Occur in EsShapeOptionsEx record. 
            We read this attribute into the model initially, so it could occur in the model.
            
            If the shape is an inline picture, then when the PICF structure is loaded,
            the 32bit colors specified by these attributes are applied to the borders.
            The border attributes BorderXXX are added to the model and these attributes are removed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.MetroBlob">
            <summary>
            Untested.
            Seen complex value in defect 3397.
            The shape’s 2007 representation in Office Open XML format.  The actual data is a package 
            in Office XML format, which can simply be opened as a zip file.  This zip file contains 
            an XML file with the root element “sp”.  Refer to the publically available Office 
            Open XML documentation for more information about this data.  In case we lose any 
            property when converting a 2007 Office Art shape to 2003 shape, we use this blob to 
            retrieve the original Office Art property data when opening the file in 2007.  
            See Appendix F for more information.
            Ver: 2007
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Dhgt">
            <summary>
            Untested.
            The shape’s unique z-order, ranging from 1 to 503316479.  The higher the number, 
            the closer to “in-front” the shape is.
            Ver: 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.AllowInCell">
            <summary>
            0x8000 flag. bool. Allows shape to anchor and position inside table cells.
            Occurs in extended attributes.
            Not sure about default value. From DOC files looks like default is true, but RTF spec says its false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PictureBullet">
            <summary>
            0x4000 flag. Set to true to indicate this shape is a picture bullet. 
            Occurs in extended properties.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRStandard">
            <summary>
            0x2000 flag. Set to true for a "standard" horizontal rule shape. 
            This means the horizontal rule does not have a picture.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HRNoShade">
            <summary>
            0x1000 flag. Set to true to turn a shadow on the horizontal rule shape off.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HROn">
            <summary>
            0x0800 flag. Set to true for a shape that is a horizontal rule.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.UserDrawn">
            <summary>
            0x0400 flag.
            Seems to be PowerPoint related.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.AllowOverlap">
            <summary>
            0x0200 flag. bool. Default is true. Occurs in extended attributes.
            Allows shape to overlap other shapes unless it is a shape with None wrapping (\shpwr3), 
            in which case it can always overlap an object with other types of wrapping and vice-versa.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ReallyHidden">
            <summary>
            0x0100 flag. Occurs in extended attributes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ScriptAnchor">
            <summary>
            0x0080 flag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.EditedWrap">
            <summary>
            Has the wrap polygon been edited? Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BehindText">
            <summary>
            Word-only (shape is behind text), default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OnDblClickNotify">
            <summary>
            Notify client on a double click, default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Button">
            <summary>
            A button shape (i.e., clicking performs an action). Set for shapes with attached hyperlinks or macros.
            Default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OneD">
            <summary>
            1D adjustment, default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Hidden">
            <summary>
            Do not display. default false.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Print">
            <summary>
            Print this shape, default true.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.UnknownHtmlFlags">
            <summary>
            Seen in TobyHenderson6.doc and in TestInlinePictures.doc. Looks like another set of flags.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.EditAs">
            <summary>
            Enum <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.EditAs"/>. 
            This property could be set for a group shape to identify it as a canvas or a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramStyle">
            <summary>
            Int. In the RTF specification there is a detailed info which value means what diagram style,
            but the problem is that different diagram types have different sets of diagram styles,
            so I really prefer to store this just as integer in the model. WordML does the same.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramRelationsTable">
            <summary>
            Array of <see cref="!:DiagramNodeRelation"/>. 
            It is important to write this property, otherwise MS Word does not recognize the shape as a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramScaleX">
            <summary>
            Fixed. The scale factor for width of a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramScaleY">
            <summary>
            Fixed. The scale factor for height of a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramFontSize">
            <summary>
            Int. Specifies the font size in points of text for new nodes in a diagram.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramConstrainBounds">
            <summary>
            int[] consisting of four items. Specifies the bounds that the diagram nodes are constrained to.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramBaseTextScale">
            <summary>
            This property specifies the amount to scale text. This property MAY be ignored.
            A FixedPoint, as specified in [MS-OSHARED] section 2.2.1.6, that specifies the amount to scale text.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramAutoFormat">
            <summary>
            Bool. True when diagram uses auto format.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramReverse">
            <summary>
            Bool. Not fully sure, but looks very much reverse flag.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DiagramAutoLayout">
            <summary>
            Bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.PseudoInline">
            <summary>
            Bool. I guess this corresponds to fPseudoInline in RTF. This is set for inline shapes.
            Affects not only diagrams, but all shapes.
            
            The shape is pseudo-inline, meaning it behaves like an inline image as far as positioning goes, 
            but has the features of shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ClipVertices">
            <summary>
            Untested.
            Seen in TestArtSchool8039.doc. Complex, contains 0x2e bytes of data.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ClipSegmentInfo">
            <summary>
            Untested.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ClipShapePath">
            <summary>
            Untested.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ClipToWrap">
            <summary>
            Untested. bool.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ClipOK">
            <summary>
            Untested. bool. Seen in BusinessBrochure.doc.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.InkData">
            <summary>
            InkData as byte array. Complex.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.InkAnnotation">
            <summary>
            Specifies that Ink should be treated as annotation.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupId">
            <summary>
            This property specifies the GUID of the signature line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupProvId">
            <summary>
            This property specifies the GUID of the provider that creates the signature line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupSuggSigner">
            <summary>
            This property specifies the name of the suggested signer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupSuggSigner2">
            <summary>
            This property specifies the title or additional information of the suggested signer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupSuggSignerEmail">
            <summary>
            This property specifies the e-mail address of the suggested signer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupSignInst">
            <summary>
            This property specifies the signing instruction displayed to the signer.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupAddlXml">
            <summary>
            2.3.27.13 wzSigSetupAddlXml
            This property specifies the additional information in XML format provided by the provider that creates the signature line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupProvUrl">
            <summary>
            2.3.27.15 wzSigSetupProvUrl
            This property specifies the URL of the provider that creates the signature line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupShowSignDate">
            <summary>
            bool. Specifies whether the signing date is displayed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupAllowComments">
            <summary>
            bool. Specifies whether the comment from the signer is allowed.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.SigSetupSignInstSet">
            <summary>
            bool. Specifies whether the signing instruction is overridden.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.IsSignatureLine">
            <summary>
            bool. Specifies whether the shape is a signature line.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LeftPercent">
            <summary>
            int. Relative left position of the shape in 1/10th of percent.
            When present, logically overrides the <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Left"/> attribute.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.TopPercent">
            <summary>
            int. Relative top position of the shape in 1/10th of percent.
            When present, logically overrides the <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Top"/> attribute.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WidthPercent">
            <summary>
            int. Relative width of the shape in 1/10th of percent.
            When present, logically overrides the <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Width"/> attribute.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HeightPercent">
            <summary>
            int. Relative height of the shape in 1/10th of percent.
            When present, logically overrides the <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Height"/> attribute.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeWidth">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeWidth"/> 
            Specifies what shape width is relative to.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeHeight">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.RelativeHeight"/> 
            Specifies what shape width is relative to.
            Available since Word 2007.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ColStart">
            <summary>
            Untested.
            Starting column.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ColSpan">
            <summary>
            Untested.
            Number of columns to span.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Flip">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.FlipOrientation"/>. Not stored as a property in Escher, but stored in the EsShape record.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WrapType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WrapType"/>. Not stored as a property in Escher, but stored in the FSPA structure.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WrapSide">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.WrapSide"/>. Not stored as a property in Escher, but stored in the FSPA structure.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.AnchorLocked">
            <summary>
            bool in the model. Not stored as a property in Escher, but stored in the FSPA structure.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageBytes">
            <summary>
            byte[] in the model. Not stored as a property in Escher.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageTitle">
            <summary>
            string in the model. Not stored as a property in Escher.
            If present, specifies a "comment" for a non-linked image. 
            Usually, it is the original name of the image, sometimes without the extension.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ImageSourceFullName">
            <summary>
            string in the model. Not stored as a property in Escher.
            If present, this attribute specifies the URL to the linked image.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BorderTop">
            <summary>
            Border in the model. Not stored as a property in Escher. Stored in PICF for inline pictures only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BorderLeft">
            <summary>
            Border in the model. Not stored as a property in Escher. Stored in PICF for inline pictures only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BorderBottom">
            <summary>
            Border in the model. Not stored as a property in Escher. Stored in PICF for inline pictures only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.BorderRight">
            <summary>
            Border in the model. Not stored as a property in Escher. Stored in PICF for inline pictures only.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineImageBytes">
            <summary>
            byte[] in the model. Not stored as a property in Escher.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillImageBytes">
            <summary>
            byte[] in the model. Not stored as a property in Escher.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleObject">
            <summary>
            <see cref="!:EmbeddedObjectBase"/> that contains the embedded OLE or OOXML data and its id.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleProgID">
            <summary>
            String that specifies ProgID of the OLE object.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleSourceFullName">
            <summary>
            String that specifies full name of the linked file.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleSourceItem">
            <summary>
            String that specifies the range within the linked file. Optional.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleAutoUpdate">
            <summary>
            Bool that specifies whether the link is auto updated or not.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleLocked">
            <summary>
            Bool that specifies whether the OLE link is locked for updates or not.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleLinkType">
            <summary>
            OleLinkType value. Specifies type of the OLE link.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.OleFormatUpdateType">
            <summary>
            Int. Corresponds to the value for the \f field switch in OLE fields.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.HyperlinkTarget">
            <summary>
            string that specifies the hyperlink target frame.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.LineFillPresetTexture">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.PresetTexture"/>, specifies the id of the built-in texture for the stroke fill pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.FillPresetTexture">
            <summary>
            <see cref="T:Spire.Xls.Converters.DrawingML.PresetTexture"/>, specifies the id of the built-in texture for the fill pattern.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.IsDummy">
            <summary>
            Required by the RTF importer to mark the shape as a dummy shape. Dummy shapes are not added to the model.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShapeId">
            <summary>
            int.
            Shape id as loaded from the file or generated when a shape is created.
            All shape identifiers are regenerated into MS Word-like sequence before a document is saved.
            </summary>
            <remarks>
            Note, DrawingML id is of unsigned int type.
            </remarks>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CoordOriginX">
            <summary>
            CoordOrigin.X in coordinate units. 
            Normally occurs for group shapes and also shapes with custom geometry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CoordOriginY">
            <summary>
            CoordOrigin.Y in coordinate units. 
            Normally occurs for group shapes and also shapes with custom geometry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CoordSizeWidth">
            <summary>
            CoordSize.Width in coordinate units. 
            Normally occurs for group shapes and also shapes with custom geometry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.CoordSizeHeight">
            <summary>
            CoordSize.Height in coordinate units. 
            Normally occurs for group shapes and also shapes with custom geometry.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Left">
            <summary>
            double.
            Left position of the shape. Has effect for floating shapes only.
            For top level shapes these are points, for child shapes these are in the parent coordinate system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Top">
            <summary>
            double.
            Top position of the shape. Has effect for floating shapes only.
            For top level shapes these are points, for child shapes these are in the parent coordinate system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Width">
            <summary>
            double. Width of the shape.
            For top level shapes these are points, for child shapes these are in the parent coordinate system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.Height">
            <summary>
            double. Height of the shape.
            For top level shapes these are points, for child shapes these are in the parent coordinate system.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlLockArrowHeads">
            <summary>
            Boolean. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlLockResize">
            <summary>
            Boolean. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlLockDrillDown">
            <summary>
            Boolean. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlEffectExtentLeft">
            <summary>
            int. EMUs. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlEffectExtentTop">
            <summary>
            int. EMUs. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlEffectExtentRight">
            <summary>
            int. EMUs. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.DmlEffectExtentBottom">
            <summary>
            int. EMUs. DrawingML property.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ThemeColor">
            <summary>
            At the moment this is an unparsed string value. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ThemeShade">
            <summary>
            At the moment this is an unparsed string value. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ThemeTint">
            <summary>
            At the moment this is an unparsed string value. 
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ZOrder">
            <summary>
            int.
            Determines the display order of overlapping shapes.
            </summary>
        </member>
        <member name="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShapeType">
            <summary>
            <see cref="F:Spire.Xls.Converters.DrawingML.ShapeAttr.ShapeType"/>.
            </summary>
        </member>
        <member name="T:Spire.Xls.Converters.DrawingML.rtfShapeAttr">
            <summary>
            Defines shape attributes written in rtf file.
            </summary>
        </member>
        <member name="M:Spire.CompoundFile.XLS.CompoundStream.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Spire.CompoundFile.XLS.Net.FAT.m_lstFatChains">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.CompoundFile.XLS.Net.FAT.SectorShift">
            <summary>
            Sector size.
            </summary>
        </member>
    </members>
</doc>
